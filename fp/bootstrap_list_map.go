// bootstrap_list_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) MapBool(f func(bool) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapString(f func(bool) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt(f func(bool) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8(f func(bool) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16(f func(bool) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32(f func(bool) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64(f func(bool) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint(f func(bool) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8(f func(bool) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16(f func(bool) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32(f func(bool) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64(f func(bool) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptr(f func(bool) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByte(f func(bool) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRune(f func(bool) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32(f func(bool) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64(f func(bool) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64(f func(bool) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128(f func(bool) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAny(f func(bool) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapBoolOption(f func(bool) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapStringOption(f func(bool) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapIntOption(f func(bool) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8Option(f func(bool) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16Option(f func(bool) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32Option(f func(bool) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64Option(f func(bool) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintOption(f func(bool) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8Option(f func(bool) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16Option(f func(bool) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32Option(f func(bool) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64Option(f func(bool) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptrOption(f func(bool) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByteOption(f func(bool) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRuneOption(f func(bool) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32Option(f func(bool) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64Option(f func(bool) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64Option(f func(bool) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128Option(f func(bool) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAnyOption(f func(bool) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapBoolArray(f func(bool) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapStringArray(f func(bool) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapIntArray(f func(bool) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8Array(f func(bool) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16Array(f func(bool) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32Array(f func(bool) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64Array(f func(bool) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintArray(f func(bool) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8Array(f func(bool) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16Array(f func(bool) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32Array(f func(bool) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64Array(f func(bool) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptrArray(f func(bool) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByteArray(f func(bool) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRuneArray(f func(bool) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32Array(f func(bool) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64Array(f func(bool) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64Array(f func(bool) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128Array(f func(bool) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAnyArray(f func(bool) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapBoolList(f func(bool) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapStringList(f func(bool) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapIntList(f func(bool) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8List(f func(bool) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16List(f func(bool) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32List(f func(bool) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64List(f func(bool) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintList(f func(bool) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8List(f func(bool) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16List(f func(bool) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32List(f func(bool) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64List(f func(bool) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptrList(f func(bool) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByteList(f func(bool) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRuneList(f func(bool) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32List(f func(bool) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64List(f func(bool) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64List(f func(bool) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128List(f func(bool) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAnyList(f func(bool) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBool(f func(string) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapString(f func(string) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt(f func(string) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8(f func(string) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16(f func(string) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32(f func(string) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64(f func(string) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint(f func(string) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8(f func(string) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16(f func(string) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32(f func(string) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64(f func(string) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptr(f func(string) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByte(f func(string) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRune(f func(string) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32(f func(string) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64(f func(string) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64(f func(string) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128(f func(string) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAny(f func(string) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBoolOption(f func(string) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapStringOption(f func(string) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapIntOption(f func(string) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8Option(f func(string) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16Option(f func(string) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32Option(f func(string) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64Option(f func(string) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintOption(f func(string) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8Option(f func(string) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16Option(f func(string) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32Option(f func(string) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64Option(f func(string) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptrOption(f func(string) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByteOption(f func(string) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRuneOption(f func(string) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32Option(f func(string) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64Option(f func(string) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64Option(f func(string) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128Option(f func(string) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAnyOption(f func(string) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBoolArray(f func(string) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapStringArray(f func(string) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapIntArray(f func(string) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8Array(f func(string) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16Array(f func(string) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32Array(f func(string) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64Array(f func(string) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintArray(f func(string) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8Array(f func(string) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16Array(f func(string) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32Array(f func(string) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64Array(f func(string) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptrArray(f func(string) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByteArray(f func(string) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRuneArray(f func(string) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32Array(f func(string) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64Array(f func(string) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64Array(f func(string) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128Array(f func(string) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAnyArray(f func(string) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBoolList(f func(string) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapStringList(f func(string) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapIntList(f func(string) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8List(f func(string) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16List(f func(string) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32List(f func(string) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64List(f func(string) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintList(f func(string) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8List(f func(string) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16List(f func(string) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32List(f func(string) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64List(f func(string) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptrList(f func(string) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByteList(f func(string) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRuneList(f func(string) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32List(f func(string) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64List(f func(string) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64List(f func(string) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128List(f func(string) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAnyList(f func(string) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBool(f func(int) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapString(f func(int) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt(f func(int) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8(f func(int) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16(f func(int) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32(f func(int) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64(f func(int) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint(f func(int) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8(f func(int) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16(f func(int) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32(f func(int) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64(f func(int) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptr(f func(int) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByte(f func(int) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRune(f func(int) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32(f func(int) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64(f func(int) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64(f func(int) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128(f func(int) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAny(f func(int) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBoolOption(f func(int) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapStringOption(f func(int) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapIntOption(f func(int) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8Option(f func(int) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16Option(f func(int) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32Option(f func(int) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64Option(f func(int) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintOption(f func(int) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8Option(f func(int) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16Option(f func(int) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32Option(f func(int) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64Option(f func(int) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptrOption(f func(int) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByteOption(f func(int) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRuneOption(f func(int) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32Option(f func(int) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64Option(f func(int) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64Option(f func(int) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128Option(f func(int) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAnyOption(f func(int) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBoolArray(f func(int) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapStringArray(f func(int) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapIntArray(f func(int) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8Array(f func(int) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16Array(f func(int) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32Array(f func(int) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64Array(f func(int) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintArray(f func(int) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8Array(f func(int) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16Array(f func(int) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32Array(f func(int) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64Array(f func(int) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptrArray(f func(int) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByteArray(f func(int) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRuneArray(f func(int) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32Array(f func(int) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64Array(f func(int) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64Array(f func(int) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128Array(f func(int) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAnyArray(f func(int) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBoolList(f func(int) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapStringList(f func(int) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapIntList(f func(int) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8List(f func(int) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16List(f func(int) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32List(f func(int) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64List(f func(int) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintList(f func(int) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8List(f func(int) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16List(f func(int) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32List(f func(int) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64List(f func(int) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptrList(f func(int) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByteList(f func(int) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRuneList(f func(int) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32List(f func(int) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64List(f func(int) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64List(f func(int) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128List(f func(int) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAnyList(f func(int) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBool(f func(int8) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapString(f func(int8) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt(f func(int8) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8(f func(int8) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16(f func(int8) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32(f func(int8) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64(f func(int8) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint(f func(int8) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8(f func(int8) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16(f func(int8) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32(f func(int8) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64(f func(int8) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptr(f func(int8) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByte(f func(int8) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRune(f func(int8) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32(f func(int8) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64(f func(int8) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64(f func(int8) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128(f func(int8) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAny(f func(int8) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBoolOption(f func(int8) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapStringOption(f func(int8) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapIntOption(f func(int8) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8Option(f func(int8) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16Option(f func(int8) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32Option(f func(int8) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64Option(f func(int8) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintOption(f func(int8) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8Option(f func(int8) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16Option(f func(int8) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32Option(f func(int8) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64Option(f func(int8) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptrOption(f func(int8) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByteOption(f func(int8) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRuneOption(f func(int8) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32Option(f func(int8) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64Option(f func(int8) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64Option(f func(int8) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128Option(f func(int8) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAnyOption(f func(int8) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBoolArray(f func(int8) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapStringArray(f func(int8) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapIntArray(f func(int8) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8Array(f func(int8) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16Array(f func(int8) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32Array(f func(int8) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64Array(f func(int8) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintArray(f func(int8) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8Array(f func(int8) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16Array(f func(int8) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32Array(f func(int8) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64Array(f func(int8) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptrArray(f func(int8) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByteArray(f func(int8) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRuneArray(f func(int8) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32Array(f func(int8) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64Array(f func(int8) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64Array(f func(int8) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128Array(f func(int8) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAnyArray(f func(int8) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBoolList(f func(int8) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapStringList(f func(int8) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapIntList(f func(int8) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8List(f func(int8) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16List(f func(int8) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32List(f func(int8) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64List(f func(int8) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintList(f func(int8) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8List(f func(int8) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16List(f func(int8) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32List(f func(int8) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64List(f func(int8) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptrList(f func(int8) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByteList(f func(int8) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRuneList(f func(int8) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32List(f func(int8) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64List(f func(int8) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64List(f func(int8) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128List(f func(int8) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAnyList(f func(int8) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBool(f func(int16) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapString(f func(int16) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt(f func(int16) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8(f func(int16) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16(f func(int16) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32(f func(int16) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64(f func(int16) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint(f func(int16) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8(f func(int16) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16(f func(int16) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32(f func(int16) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64(f func(int16) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptr(f func(int16) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByte(f func(int16) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRune(f func(int16) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32(f func(int16) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64(f func(int16) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64(f func(int16) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128(f func(int16) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAny(f func(int16) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBoolOption(f func(int16) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapStringOption(f func(int16) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapIntOption(f func(int16) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8Option(f func(int16) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16Option(f func(int16) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32Option(f func(int16) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64Option(f func(int16) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintOption(f func(int16) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8Option(f func(int16) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16Option(f func(int16) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32Option(f func(int16) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64Option(f func(int16) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptrOption(f func(int16) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByteOption(f func(int16) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRuneOption(f func(int16) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32Option(f func(int16) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64Option(f func(int16) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64Option(f func(int16) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128Option(f func(int16) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAnyOption(f func(int16) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBoolArray(f func(int16) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapStringArray(f func(int16) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapIntArray(f func(int16) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8Array(f func(int16) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16Array(f func(int16) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32Array(f func(int16) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64Array(f func(int16) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintArray(f func(int16) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8Array(f func(int16) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16Array(f func(int16) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32Array(f func(int16) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64Array(f func(int16) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptrArray(f func(int16) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByteArray(f func(int16) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRuneArray(f func(int16) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32Array(f func(int16) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64Array(f func(int16) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64Array(f func(int16) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128Array(f func(int16) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAnyArray(f func(int16) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBoolList(f func(int16) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapStringList(f func(int16) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapIntList(f func(int16) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8List(f func(int16) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16List(f func(int16) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32List(f func(int16) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64List(f func(int16) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintList(f func(int16) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8List(f func(int16) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16List(f func(int16) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32List(f func(int16) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64List(f func(int16) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptrList(f func(int16) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByteList(f func(int16) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRuneList(f func(int16) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32List(f func(int16) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64List(f func(int16) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64List(f func(int16) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128List(f func(int16) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAnyList(f func(int16) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBool(f func(int32) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapString(f func(int32) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt(f func(int32) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8(f func(int32) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16(f func(int32) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32(f func(int32) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64(f func(int32) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint(f func(int32) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8(f func(int32) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16(f func(int32) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32(f func(int32) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64(f func(int32) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptr(f func(int32) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByte(f func(int32) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRune(f func(int32) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32(f func(int32) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64(f func(int32) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64(f func(int32) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128(f func(int32) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAny(f func(int32) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBoolOption(f func(int32) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapStringOption(f func(int32) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapIntOption(f func(int32) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8Option(f func(int32) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16Option(f func(int32) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32Option(f func(int32) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64Option(f func(int32) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintOption(f func(int32) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8Option(f func(int32) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16Option(f func(int32) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32Option(f func(int32) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64Option(f func(int32) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptrOption(f func(int32) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByteOption(f func(int32) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRuneOption(f func(int32) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32Option(f func(int32) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64Option(f func(int32) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64Option(f func(int32) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128Option(f func(int32) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAnyOption(f func(int32) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBoolArray(f func(int32) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapStringArray(f func(int32) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapIntArray(f func(int32) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8Array(f func(int32) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16Array(f func(int32) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32Array(f func(int32) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64Array(f func(int32) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintArray(f func(int32) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8Array(f func(int32) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16Array(f func(int32) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32Array(f func(int32) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64Array(f func(int32) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptrArray(f func(int32) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByteArray(f func(int32) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRuneArray(f func(int32) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32Array(f func(int32) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64Array(f func(int32) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64Array(f func(int32) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128Array(f func(int32) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAnyArray(f func(int32) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBoolList(f func(int32) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapStringList(f func(int32) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapIntList(f func(int32) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8List(f func(int32) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16List(f func(int32) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32List(f func(int32) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64List(f func(int32) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintList(f func(int32) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8List(f func(int32) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16List(f func(int32) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32List(f func(int32) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64List(f func(int32) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptrList(f func(int32) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByteList(f func(int32) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRuneList(f func(int32) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32List(f func(int32) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64List(f func(int32) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64List(f func(int32) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128List(f func(int32) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAnyList(f func(int32) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBool(f func(int64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapString(f func(int64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt(f func(int64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8(f func(int64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16(f func(int64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32(f func(int64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64(f func(int64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint(f func(int64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8(f func(int64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16(f func(int64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32(f func(int64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64(f func(int64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptr(f func(int64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByte(f func(int64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRune(f func(int64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32(f func(int64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64(f func(int64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64(f func(int64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128(f func(int64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAny(f func(int64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBoolOption(f func(int64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapStringOption(f func(int64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapIntOption(f func(int64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8Option(f func(int64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16Option(f func(int64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32Option(f func(int64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64Option(f func(int64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintOption(f func(int64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8Option(f func(int64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16Option(f func(int64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32Option(f func(int64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64Option(f func(int64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptrOption(f func(int64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByteOption(f func(int64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRuneOption(f func(int64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32Option(f func(int64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64Option(f func(int64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64Option(f func(int64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128Option(f func(int64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAnyOption(f func(int64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBoolArray(f func(int64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapStringArray(f func(int64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapIntArray(f func(int64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8Array(f func(int64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16Array(f func(int64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32Array(f func(int64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64Array(f func(int64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintArray(f func(int64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8Array(f func(int64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16Array(f func(int64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32Array(f func(int64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64Array(f func(int64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptrArray(f func(int64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByteArray(f func(int64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRuneArray(f func(int64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32Array(f func(int64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64Array(f func(int64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64Array(f func(int64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128Array(f func(int64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAnyArray(f func(int64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBoolList(f func(int64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapStringList(f func(int64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapIntList(f func(int64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8List(f func(int64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16List(f func(int64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32List(f func(int64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64List(f func(int64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintList(f func(int64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8List(f func(int64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16List(f func(int64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32List(f func(int64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64List(f func(int64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptrList(f func(int64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByteList(f func(int64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRuneList(f func(int64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32List(f func(int64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64List(f func(int64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64List(f func(int64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128List(f func(int64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAnyList(f func(int64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBool(f func(uint) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapString(f func(uint) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt(f func(uint) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8(f func(uint) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16(f func(uint) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32(f func(uint) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64(f func(uint) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint(f func(uint) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8(f func(uint) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16(f func(uint) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32(f func(uint) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64(f func(uint) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptr(f func(uint) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByte(f func(uint) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRune(f func(uint) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32(f func(uint) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64(f func(uint) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64(f func(uint) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128(f func(uint) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAny(f func(uint) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBoolOption(f func(uint) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapStringOption(f func(uint) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapIntOption(f func(uint) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8Option(f func(uint) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16Option(f func(uint) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32Option(f func(uint) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64Option(f func(uint) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintOption(f func(uint) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8Option(f func(uint) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16Option(f func(uint) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32Option(f func(uint) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64Option(f func(uint) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptrOption(f func(uint) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByteOption(f func(uint) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRuneOption(f func(uint) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32Option(f func(uint) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64Option(f func(uint) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64Option(f func(uint) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128Option(f func(uint) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAnyOption(f func(uint) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBoolArray(f func(uint) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapStringArray(f func(uint) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapIntArray(f func(uint) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8Array(f func(uint) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16Array(f func(uint) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32Array(f func(uint) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64Array(f func(uint) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintArray(f func(uint) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8Array(f func(uint) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16Array(f func(uint) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32Array(f func(uint) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64Array(f func(uint) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptrArray(f func(uint) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByteArray(f func(uint) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRuneArray(f func(uint) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32Array(f func(uint) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64Array(f func(uint) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64Array(f func(uint) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128Array(f func(uint) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAnyArray(f func(uint) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBoolList(f func(uint) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapStringList(f func(uint) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapIntList(f func(uint) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8List(f func(uint) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16List(f func(uint) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32List(f func(uint) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64List(f func(uint) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintList(f func(uint) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8List(f func(uint) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16List(f func(uint) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32List(f func(uint) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64List(f func(uint) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptrList(f func(uint) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByteList(f func(uint) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRuneList(f func(uint) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32List(f func(uint) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64List(f func(uint) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64List(f func(uint) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128List(f func(uint) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAnyList(f func(uint) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBool(f func(uint8) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapString(f func(uint8) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt(f func(uint8) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8(f func(uint8) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16(f func(uint8) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32(f func(uint8) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64(f func(uint8) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint(f func(uint8) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8(f func(uint8) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16(f func(uint8) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32(f func(uint8) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64(f func(uint8) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptr(f func(uint8) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByte(f func(uint8) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRune(f func(uint8) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32(f func(uint8) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64(f func(uint8) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64(f func(uint8) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128(f func(uint8) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAny(f func(uint8) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBoolOption(f func(uint8) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapStringOption(f func(uint8) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapIntOption(f func(uint8) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8Option(f func(uint8) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16Option(f func(uint8) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32Option(f func(uint8) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64Option(f func(uint8) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintOption(f func(uint8) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8Option(f func(uint8) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16Option(f func(uint8) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32Option(f func(uint8) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64Option(f func(uint8) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptrOption(f func(uint8) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByteOption(f func(uint8) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRuneOption(f func(uint8) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32Option(f func(uint8) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64Option(f func(uint8) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64Option(f func(uint8) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128Option(f func(uint8) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAnyOption(f func(uint8) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBoolArray(f func(uint8) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapStringArray(f func(uint8) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapIntArray(f func(uint8) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8Array(f func(uint8) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16Array(f func(uint8) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32Array(f func(uint8) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64Array(f func(uint8) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintArray(f func(uint8) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8Array(f func(uint8) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16Array(f func(uint8) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32Array(f func(uint8) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64Array(f func(uint8) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptrArray(f func(uint8) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByteArray(f func(uint8) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRuneArray(f func(uint8) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32Array(f func(uint8) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64Array(f func(uint8) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64Array(f func(uint8) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128Array(f func(uint8) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAnyArray(f func(uint8) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBoolList(f func(uint8) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapStringList(f func(uint8) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapIntList(f func(uint8) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8List(f func(uint8) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16List(f func(uint8) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32List(f func(uint8) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64List(f func(uint8) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintList(f func(uint8) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8List(f func(uint8) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16List(f func(uint8) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32List(f func(uint8) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64List(f func(uint8) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptrList(f func(uint8) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByteList(f func(uint8) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRuneList(f func(uint8) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32List(f func(uint8) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64List(f func(uint8) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64List(f func(uint8) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128List(f func(uint8) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAnyList(f func(uint8) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBool(f func(uint16) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapString(f func(uint16) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt(f func(uint16) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8(f func(uint16) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16(f func(uint16) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32(f func(uint16) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64(f func(uint16) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint(f func(uint16) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8(f func(uint16) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16(f func(uint16) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32(f func(uint16) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64(f func(uint16) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptr(f func(uint16) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByte(f func(uint16) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRune(f func(uint16) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32(f func(uint16) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64(f func(uint16) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64(f func(uint16) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128(f func(uint16) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAny(f func(uint16) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBoolOption(f func(uint16) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapStringOption(f func(uint16) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapIntOption(f func(uint16) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8Option(f func(uint16) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16Option(f func(uint16) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32Option(f func(uint16) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64Option(f func(uint16) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintOption(f func(uint16) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8Option(f func(uint16) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16Option(f func(uint16) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32Option(f func(uint16) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64Option(f func(uint16) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptrOption(f func(uint16) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByteOption(f func(uint16) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRuneOption(f func(uint16) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32Option(f func(uint16) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64Option(f func(uint16) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64Option(f func(uint16) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128Option(f func(uint16) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAnyOption(f func(uint16) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBoolArray(f func(uint16) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapStringArray(f func(uint16) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapIntArray(f func(uint16) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8Array(f func(uint16) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16Array(f func(uint16) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32Array(f func(uint16) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64Array(f func(uint16) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintArray(f func(uint16) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8Array(f func(uint16) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16Array(f func(uint16) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32Array(f func(uint16) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64Array(f func(uint16) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptrArray(f func(uint16) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByteArray(f func(uint16) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRuneArray(f func(uint16) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32Array(f func(uint16) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64Array(f func(uint16) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64Array(f func(uint16) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128Array(f func(uint16) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAnyArray(f func(uint16) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBoolList(f func(uint16) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapStringList(f func(uint16) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapIntList(f func(uint16) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8List(f func(uint16) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16List(f func(uint16) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32List(f func(uint16) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64List(f func(uint16) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintList(f func(uint16) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8List(f func(uint16) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16List(f func(uint16) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32List(f func(uint16) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64List(f func(uint16) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptrList(f func(uint16) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByteList(f func(uint16) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRuneList(f func(uint16) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32List(f func(uint16) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64List(f func(uint16) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64List(f func(uint16) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128List(f func(uint16) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAnyList(f func(uint16) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBool(f func(uint32) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapString(f func(uint32) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt(f func(uint32) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8(f func(uint32) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16(f func(uint32) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32(f func(uint32) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64(f func(uint32) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint(f func(uint32) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8(f func(uint32) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16(f func(uint32) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32(f func(uint32) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64(f func(uint32) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptr(f func(uint32) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByte(f func(uint32) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRune(f func(uint32) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32(f func(uint32) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64(f func(uint32) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64(f func(uint32) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128(f func(uint32) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAny(f func(uint32) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBoolOption(f func(uint32) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapStringOption(f func(uint32) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapIntOption(f func(uint32) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8Option(f func(uint32) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16Option(f func(uint32) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32Option(f func(uint32) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64Option(f func(uint32) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintOption(f func(uint32) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8Option(f func(uint32) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16Option(f func(uint32) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32Option(f func(uint32) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64Option(f func(uint32) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptrOption(f func(uint32) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByteOption(f func(uint32) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRuneOption(f func(uint32) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32Option(f func(uint32) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64Option(f func(uint32) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64Option(f func(uint32) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128Option(f func(uint32) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAnyOption(f func(uint32) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBoolArray(f func(uint32) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapStringArray(f func(uint32) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapIntArray(f func(uint32) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8Array(f func(uint32) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16Array(f func(uint32) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32Array(f func(uint32) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64Array(f func(uint32) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintArray(f func(uint32) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8Array(f func(uint32) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16Array(f func(uint32) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32Array(f func(uint32) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64Array(f func(uint32) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptrArray(f func(uint32) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByteArray(f func(uint32) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRuneArray(f func(uint32) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32Array(f func(uint32) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64Array(f func(uint32) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64Array(f func(uint32) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128Array(f func(uint32) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAnyArray(f func(uint32) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBoolList(f func(uint32) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapStringList(f func(uint32) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapIntList(f func(uint32) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8List(f func(uint32) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16List(f func(uint32) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32List(f func(uint32) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64List(f func(uint32) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintList(f func(uint32) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8List(f func(uint32) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16List(f func(uint32) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32List(f func(uint32) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64List(f func(uint32) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptrList(f func(uint32) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByteList(f func(uint32) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRuneList(f func(uint32) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32List(f func(uint32) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64List(f func(uint32) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64List(f func(uint32) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128List(f func(uint32) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAnyList(f func(uint32) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBool(f func(uint64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapString(f func(uint64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt(f func(uint64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8(f func(uint64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16(f func(uint64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32(f func(uint64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64(f func(uint64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint(f func(uint64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8(f func(uint64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16(f func(uint64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32(f func(uint64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64(f func(uint64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptr(f func(uint64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByte(f func(uint64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRune(f func(uint64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32(f func(uint64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64(f func(uint64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64(f func(uint64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128(f func(uint64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAny(f func(uint64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBoolOption(f func(uint64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapStringOption(f func(uint64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapIntOption(f func(uint64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8Option(f func(uint64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16Option(f func(uint64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32Option(f func(uint64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64Option(f func(uint64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintOption(f func(uint64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8Option(f func(uint64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16Option(f func(uint64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32Option(f func(uint64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64Option(f func(uint64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptrOption(f func(uint64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByteOption(f func(uint64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRuneOption(f func(uint64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32Option(f func(uint64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64Option(f func(uint64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64Option(f func(uint64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128Option(f func(uint64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAnyOption(f func(uint64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBoolArray(f func(uint64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapStringArray(f func(uint64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapIntArray(f func(uint64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8Array(f func(uint64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16Array(f func(uint64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32Array(f func(uint64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64Array(f func(uint64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintArray(f func(uint64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8Array(f func(uint64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16Array(f func(uint64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32Array(f func(uint64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64Array(f func(uint64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptrArray(f func(uint64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByteArray(f func(uint64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRuneArray(f func(uint64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32Array(f func(uint64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64Array(f func(uint64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64Array(f func(uint64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128Array(f func(uint64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAnyArray(f func(uint64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBoolList(f func(uint64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapStringList(f func(uint64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapIntList(f func(uint64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8List(f func(uint64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16List(f func(uint64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32List(f func(uint64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64List(f func(uint64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintList(f func(uint64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8List(f func(uint64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16List(f func(uint64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32List(f func(uint64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64List(f func(uint64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptrList(f func(uint64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByteList(f func(uint64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRuneList(f func(uint64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32List(f func(uint64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64List(f func(uint64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64List(f func(uint64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128List(f func(uint64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAnyList(f func(uint64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBool(f func(uintptr) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapString(f func(uintptr) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt(f func(uintptr) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8(f func(uintptr) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16(f func(uintptr) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32(f func(uintptr) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64(f func(uintptr) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint(f func(uintptr) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8(f func(uintptr) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16(f func(uintptr) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32(f func(uintptr) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64(f func(uintptr) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptr(f func(uintptr) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByte(f func(uintptr) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRune(f func(uintptr) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32(f func(uintptr) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64(f func(uintptr) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64(f func(uintptr) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128(f func(uintptr) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAny(f func(uintptr) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBoolOption(f func(uintptr) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapStringOption(f func(uintptr) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapIntOption(f func(uintptr) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8Option(f func(uintptr) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16Option(f func(uintptr) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32Option(f func(uintptr) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64Option(f func(uintptr) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintOption(f func(uintptr) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8Option(f func(uintptr) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16Option(f func(uintptr) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32Option(f func(uintptr) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64Option(f func(uintptr) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptrOption(f func(uintptr) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByteOption(f func(uintptr) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRuneOption(f func(uintptr) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32Option(f func(uintptr) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64Option(f func(uintptr) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64Option(f func(uintptr) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128Option(f func(uintptr) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAnyOption(f func(uintptr) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBoolArray(f func(uintptr) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapStringArray(f func(uintptr) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapIntArray(f func(uintptr) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8Array(f func(uintptr) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16Array(f func(uintptr) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32Array(f func(uintptr) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64Array(f func(uintptr) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintArray(f func(uintptr) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8Array(f func(uintptr) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16Array(f func(uintptr) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32Array(f func(uintptr) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64Array(f func(uintptr) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptrArray(f func(uintptr) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByteArray(f func(uintptr) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRuneArray(f func(uintptr) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32Array(f func(uintptr) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64Array(f func(uintptr) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64Array(f func(uintptr) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128Array(f func(uintptr) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAnyArray(f func(uintptr) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBoolList(f func(uintptr) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapStringList(f func(uintptr) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapIntList(f func(uintptr) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8List(f func(uintptr) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16List(f func(uintptr) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32List(f func(uintptr) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64List(f func(uintptr) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintList(f func(uintptr) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8List(f func(uintptr) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16List(f func(uintptr) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32List(f func(uintptr) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64List(f func(uintptr) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptrList(f func(uintptr) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByteList(f func(uintptr) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRuneList(f func(uintptr) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32List(f func(uintptr) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64List(f func(uintptr) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64List(f func(uintptr) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128List(f func(uintptr) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAnyList(f func(uintptr) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBool(f func(byte) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapString(f func(byte) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt(f func(byte) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8(f func(byte) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16(f func(byte) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32(f func(byte) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64(f func(byte) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint(f func(byte) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8(f func(byte) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16(f func(byte) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32(f func(byte) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64(f func(byte) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptr(f func(byte) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByte(f func(byte) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRune(f func(byte) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32(f func(byte) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64(f func(byte) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64(f func(byte) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128(f func(byte) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAny(f func(byte) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBoolOption(f func(byte) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapStringOption(f func(byte) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapIntOption(f func(byte) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8Option(f func(byte) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16Option(f func(byte) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32Option(f func(byte) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64Option(f func(byte) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintOption(f func(byte) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8Option(f func(byte) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16Option(f func(byte) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32Option(f func(byte) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64Option(f func(byte) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptrOption(f func(byte) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByteOption(f func(byte) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRuneOption(f func(byte) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32Option(f func(byte) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64Option(f func(byte) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64Option(f func(byte) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128Option(f func(byte) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAnyOption(f func(byte) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBoolArray(f func(byte) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapStringArray(f func(byte) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapIntArray(f func(byte) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8Array(f func(byte) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16Array(f func(byte) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32Array(f func(byte) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64Array(f func(byte) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintArray(f func(byte) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8Array(f func(byte) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16Array(f func(byte) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32Array(f func(byte) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64Array(f func(byte) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptrArray(f func(byte) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByteArray(f func(byte) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRuneArray(f func(byte) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32Array(f func(byte) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64Array(f func(byte) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64Array(f func(byte) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128Array(f func(byte) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAnyArray(f func(byte) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBoolList(f func(byte) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapStringList(f func(byte) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapIntList(f func(byte) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8List(f func(byte) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16List(f func(byte) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32List(f func(byte) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64List(f func(byte) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintList(f func(byte) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8List(f func(byte) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16List(f func(byte) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32List(f func(byte) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64List(f func(byte) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptrList(f func(byte) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByteList(f func(byte) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRuneList(f func(byte) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32List(f func(byte) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64List(f func(byte) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64List(f func(byte) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128List(f func(byte) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAnyList(f func(byte) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBool(f func(rune) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapString(f func(rune) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt(f func(rune) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8(f func(rune) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16(f func(rune) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32(f func(rune) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64(f func(rune) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint(f func(rune) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8(f func(rune) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16(f func(rune) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32(f func(rune) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64(f func(rune) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptr(f func(rune) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByte(f func(rune) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRune(f func(rune) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32(f func(rune) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64(f func(rune) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64(f func(rune) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128(f func(rune) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAny(f func(rune) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBoolOption(f func(rune) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapStringOption(f func(rune) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapIntOption(f func(rune) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8Option(f func(rune) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16Option(f func(rune) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32Option(f func(rune) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64Option(f func(rune) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintOption(f func(rune) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8Option(f func(rune) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16Option(f func(rune) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32Option(f func(rune) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64Option(f func(rune) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptrOption(f func(rune) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByteOption(f func(rune) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRuneOption(f func(rune) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32Option(f func(rune) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64Option(f func(rune) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64Option(f func(rune) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128Option(f func(rune) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAnyOption(f func(rune) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBoolArray(f func(rune) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapStringArray(f func(rune) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapIntArray(f func(rune) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8Array(f func(rune) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16Array(f func(rune) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32Array(f func(rune) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64Array(f func(rune) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintArray(f func(rune) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8Array(f func(rune) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16Array(f func(rune) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32Array(f func(rune) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64Array(f func(rune) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptrArray(f func(rune) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByteArray(f func(rune) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRuneArray(f func(rune) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32Array(f func(rune) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64Array(f func(rune) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64Array(f func(rune) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128Array(f func(rune) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAnyArray(f func(rune) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBoolList(f func(rune) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapStringList(f func(rune) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapIntList(f func(rune) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8List(f func(rune) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16List(f func(rune) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32List(f func(rune) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64List(f func(rune) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintList(f func(rune) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8List(f func(rune) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16List(f func(rune) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32List(f func(rune) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64List(f func(rune) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptrList(f func(rune) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByteList(f func(rune) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRuneList(f func(rune) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32List(f func(rune) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64List(f func(rune) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64List(f func(rune) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128List(f func(rune) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAnyList(f func(rune) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBool(f func(float32) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapString(f func(float32) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt(f func(float32) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8(f func(float32) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16(f func(float32) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32(f func(float32) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64(f func(float32) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint(f func(float32) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8(f func(float32) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16(f func(float32) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32(f func(float32) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64(f func(float32) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptr(f func(float32) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByte(f func(float32) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRune(f func(float32) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32(f func(float32) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64(f func(float32) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64(f func(float32) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128(f func(float32) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAny(f func(float32) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBoolOption(f func(float32) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapStringOption(f func(float32) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapIntOption(f func(float32) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8Option(f func(float32) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16Option(f func(float32) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32Option(f func(float32) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64Option(f func(float32) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintOption(f func(float32) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8Option(f func(float32) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16Option(f func(float32) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32Option(f func(float32) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64Option(f func(float32) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptrOption(f func(float32) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByteOption(f func(float32) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRuneOption(f func(float32) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32Option(f func(float32) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64Option(f func(float32) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64Option(f func(float32) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128Option(f func(float32) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAnyOption(f func(float32) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBoolArray(f func(float32) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapStringArray(f func(float32) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapIntArray(f func(float32) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8Array(f func(float32) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16Array(f func(float32) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32Array(f func(float32) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64Array(f func(float32) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintArray(f func(float32) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8Array(f func(float32) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16Array(f func(float32) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32Array(f func(float32) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64Array(f func(float32) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptrArray(f func(float32) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByteArray(f func(float32) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRuneArray(f func(float32) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32Array(f func(float32) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64Array(f func(float32) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64Array(f func(float32) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128Array(f func(float32) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAnyArray(f func(float32) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBoolList(f func(float32) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapStringList(f func(float32) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapIntList(f func(float32) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8List(f func(float32) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16List(f func(float32) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32List(f func(float32) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64List(f func(float32) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintList(f func(float32) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8List(f func(float32) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16List(f func(float32) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32List(f func(float32) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64List(f func(float32) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptrList(f func(float32) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByteList(f func(float32) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRuneList(f func(float32) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32List(f func(float32) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64List(f func(float32) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64List(f func(float32) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128List(f func(float32) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAnyList(f func(float32) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBool(f func(float64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapString(f func(float64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt(f func(float64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8(f func(float64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16(f func(float64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32(f func(float64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64(f func(float64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint(f func(float64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8(f func(float64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16(f func(float64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32(f func(float64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64(f func(float64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptr(f func(float64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByte(f func(float64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRune(f func(float64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32(f func(float64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64(f func(float64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64(f func(float64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128(f func(float64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAny(f func(float64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBoolOption(f func(float64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapStringOption(f func(float64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapIntOption(f func(float64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8Option(f func(float64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16Option(f func(float64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32Option(f func(float64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64Option(f func(float64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintOption(f func(float64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8Option(f func(float64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16Option(f func(float64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32Option(f func(float64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64Option(f func(float64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptrOption(f func(float64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByteOption(f func(float64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRuneOption(f func(float64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32Option(f func(float64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64Option(f func(float64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64Option(f func(float64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128Option(f func(float64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAnyOption(f func(float64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBoolArray(f func(float64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapStringArray(f func(float64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapIntArray(f func(float64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8Array(f func(float64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16Array(f func(float64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32Array(f func(float64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64Array(f func(float64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintArray(f func(float64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8Array(f func(float64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16Array(f func(float64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32Array(f func(float64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64Array(f func(float64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptrArray(f func(float64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByteArray(f func(float64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRuneArray(f func(float64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32Array(f func(float64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64Array(f func(float64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64Array(f func(float64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128Array(f func(float64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAnyArray(f func(float64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBoolList(f func(float64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapStringList(f func(float64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapIntList(f func(float64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8List(f func(float64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16List(f func(float64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32List(f func(float64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64List(f func(float64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintList(f func(float64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8List(f func(float64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16List(f func(float64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32List(f func(float64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64List(f func(float64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptrList(f func(float64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByteList(f func(float64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRuneList(f func(float64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32List(f func(float64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64List(f func(float64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64List(f func(float64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128List(f func(float64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAnyList(f func(float64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBool(f func(complex64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapString(f func(complex64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt(f func(complex64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8(f func(complex64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16(f func(complex64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32(f func(complex64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64(f func(complex64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint(f func(complex64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8(f func(complex64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16(f func(complex64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32(f func(complex64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64(f func(complex64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptr(f func(complex64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByte(f func(complex64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRune(f func(complex64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32(f func(complex64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64(f func(complex64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64(f func(complex64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128(f func(complex64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAny(f func(complex64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBoolOption(f func(complex64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapStringOption(f func(complex64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapIntOption(f func(complex64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8Option(f func(complex64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16Option(f func(complex64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32Option(f func(complex64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64Option(f func(complex64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintOption(f func(complex64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8Option(f func(complex64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16Option(f func(complex64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32Option(f func(complex64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64Option(f func(complex64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptrOption(f func(complex64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByteOption(f func(complex64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRuneOption(f func(complex64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32Option(f func(complex64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64Option(f func(complex64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64Option(f func(complex64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128Option(f func(complex64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAnyOption(f func(complex64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBoolArray(f func(complex64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapStringArray(f func(complex64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapIntArray(f func(complex64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8Array(f func(complex64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16Array(f func(complex64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32Array(f func(complex64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64Array(f func(complex64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintArray(f func(complex64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8Array(f func(complex64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16Array(f func(complex64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32Array(f func(complex64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64Array(f func(complex64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptrArray(f func(complex64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByteArray(f func(complex64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRuneArray(f func(complex64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32Array(f func(complex64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64Array(f func(complex64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64Array(f func(complex64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128Array(f func(complex64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAnyArray(f func(complex64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBoolList(f func(complex64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapStringList(f func(complex64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapIntList(f func(complex64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8List(f func(complex64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16List(f func(complex64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32List(f func(complex64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64List(f func(complex64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintList(f func(complex64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8List(f func(complex64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16List(f func(complex64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32List(f func(complex64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64List(f func(complex64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptrList(f func(complex64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByteList(f func(complex64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRuneList(f func(complex64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32List(f func(complex64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64List(f func(complex64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64List(f func(complex64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128List(f func(complex64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAnyList(f func(complex64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBool(f func(complex128) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapString(f func(complex128) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt(f func(complex128) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8(f func(complex128) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16(f func(complex128) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32(f func(complex128) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64(f func(complex128) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint(f func(complex128) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8(f func(complex128) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16(f func(complex128) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32(f func(complex128) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64(f func(complex128) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptr(f func(complex128) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByte(f func(complex128) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRune(f func(complex128) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32(f func(complex128) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64(f func(complex128) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64(f func(complex128) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128(f func(complex128) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAny(f func(complex128) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBoolOption(f func(complex128) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapStringOption(f func(complex128) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapIntOption(f func(complex128) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8Option(f func(complex128) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16Option(f func(complex128) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32Option(f func(complex128) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64Option(f func(complex128) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintOption(f func(complex128) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8Option(f func(complex128) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16Option(f func(complex128) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32Option(f func(complex128) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64Option(f func(complex128) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptrOption(f func(complex128) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByteOption(f func(complex128) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRuneOption(f func(complex128) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32Option(f func(complex128) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64Option(f func(complex128) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64Option(f func(complex128) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128Option(f func(complex128) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAnyOption(f func(complex128) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBoolArray(f func(complex128) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapStringArray(f func(complex128) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapIntArray(f func(complex128) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8Array(f func(complex128) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16Array(f func(complex128) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32Array(f func(complex128) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64Array(f func(complex128) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintArray(f func(complex128) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8Array(f func(complex128) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16Array(f func(complex128) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32Array(f func(complex128) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64Array(f func(complex128) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptrArray(f func(complex128) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByteArray(f func(complex128) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRuneArray(f func(complex128) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32Array(f func(complex128) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64Array(f func(complex128) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64Array(f func(complex128) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128Array(f func(complex128) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAnyArray(f func(complex128) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBoolList(f func(complex128) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapStringList(f func(complex128) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapIntList(f func(complex128) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8List(f func(complex128) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16List(f func(complex128) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32List(f func(complex128) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64List(f func(complex128) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintList(f func(complex128) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8List(f func(complex128) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16List(f func(complex128) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32List(f func(complex128) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64List(f func(complex128) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptrList(f func(complex128) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByteList(f func(complex128) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRuneList(f func(complex128) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32List(f func(complex128) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64List(f func(complex128) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64List(f func(complex128) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128List(f func(complex128) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAnyList(f func(complex128) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBool(f func(Any) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapString(f func(Any) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt(f func(Any) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8(f func(Any) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16(f func(Any) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32(f func(Any) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64(f func(Any) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint(f func(Any) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8(f func(Any) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16(f func(Any) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32(f func(Any) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64(f func(Any) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptr(f func(Any) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByte(f func(Any) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRune(f func(Any) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32(f func(Any) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64(f func(Any) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64(f func(Any) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128(f func(Any) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAny(f func(Any) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBoolOption(f func(Any) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapStringOption(f func(Any) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapIntOption(f func(Any) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8Option(f func(Any) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16Option(f func(Any) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32Option(f func(Any) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64Option(f func(Any) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintOption(f func(Any) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8Option(f func(Any) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16Option(f func(Any) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32Option(f func(Any) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64Option(f func(Any) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptrOption(f func(Any) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByteOption(f func(Any) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRuneOption(f func(Any) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32Option(f func(Any) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64Option(f func(Any) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64Option(f func(Any) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128Option(f func(Any) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAnyOption(f func(Any) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBoolArray(f func(Any) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapStringArray(f func(Any) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapIntArray(f func(Any) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8Array(f func(Any) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16Array(f func(Any) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32Array(f func(Any) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64Array(f func(Any) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintArray(f func(Any) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8Array(f func(Any) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16Array(f func(Any) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32Array(f func(Any) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64Array(f func(Any) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptrArray(f func(Any) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByteArray(f func(Any) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRuneArray(f func(Any) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32Array(f func(Any) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64Array(f func(Any) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64Array(f func(Any) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128Array(f func(Any) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAnyArray(f func(Any) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBoolList(f func(Any) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapStringList(f func(Any) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapIntList(f func(Any) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8List(f func(Any) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16List(f func(Any) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32List(f func(Any) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64List(f func(Any) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintList(f func(Any) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8List(f func(Any) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16List(f func(Any) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32List(f func(Any) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64List(f func(Any) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptrList(f func(Any) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByteList(f func(Any) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRuneList(f func(Any) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32List(f func(Any) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64List(f func(Any) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64List(f func(Any) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128List(f func(Any) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAnyList(f func(Any) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapBool(f func(BoolOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapString(f func(BoolOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt(f func(BoolOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt8(f func(BoolOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt16(f func(BoolOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt32(f func(BoolOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt64(f func(BoolOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint(f func(BoolOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint8(f func(BoolOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint16(f func(BoolOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint32(f func(BoolOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint64(f func(BoolOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintptr(f func(BoolOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapByte(f func(BoolOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapRune(f func(BoolOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat32(f func(BoolOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat64(f func(BoolOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex64(f func(BoolOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex128(f func(BoolOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapAny(f func(BoolOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapBoolOption(f func(BoolOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapStringOption(f func(BoolOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapIntOption(f func(BoolOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt8Option(f func(BoolOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt16Option(f func(BoolOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt32Option(f func(BoolOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt64Option(f func(BoolOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintOption(f func(BoolOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint8Option(f func(BoolOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint16Option(f func(BoolOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint32Option(f func(BoolOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint64Option(f func(BoolOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintptrOption(f func(BoolOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapByteOption(f func(BoolOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapRuneOption(f func(BoolOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat32Option(f func(BoolOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat64Option(f func(BoolOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex64Option(f func(BoolOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex128Option(f func(BoolOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapAnyOption(f func(BoolOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapBoolArray(f func(BoolOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapStringArray(f func(BoolOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapIntArray(f func(BoolOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt8Array(f func(BoolOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt16Array(f func(BoolOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt32Array(f func(BoolOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt64Array(f func(BoolOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintArray(f func(BoolOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint8Array(f func(BoolOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint16Array(f func(BoolOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint32Array(f func(BoolOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint64Array(f func(BoolOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintptrArray(f func(BoolOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapByteArray(f func(BoolOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapRuneArray(f func(BoolOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat32Array(f func(BoolOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat64Array(f func(BoolOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex64Array(f func(BoolOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex128Array(f func(BoolOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapAnyArray(f func(BoolOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapBoolList(f func(BoolOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapStringList(f func(BoolOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapIntList(f func(BoolOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt8List(f func(BoolOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt16List(f func(BoolOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt32List(f func(BoolOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapInt64List(f func(BoolOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintList(f func(BoolOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint8List(f func(BoolOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint16List(f func(BoolOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint32List(f func(BoolOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUint64List(f func(BoolOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapUintptrList(f func(BoolOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapByteList(f func(BoolOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapRuneList(f func(BoolOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat32List(f func(BoolOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapFloat64List(f func(BoolOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex64List(f func(BoolOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapComplex128List(f func(BoolOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) MapAnyList(f func(BoolOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapBool(f func(StringOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapString(f func(StringOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt(f func(StringOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt8(f func(StringOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt16(f func(StringOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt32(f func(StringOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt64(f func(StringOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint(f func(StringOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint8(f func(StringOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint16(f func(StringOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint32(f func(StringOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint64(f func(StringOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintptr(f func(StringOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapByte(f func(StringOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapRune(f func(StringOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat32(f func(StringOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat64(f func(StringOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex64(f func(StringOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex128(f func(StringOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapAny(f func(StringOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapBoolOption(f func(StringOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapStringOption(f func(StringOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapIntOption(f func(StringOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt8Option(f func(StringOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt16Option(f func(StringOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt32Option(f func(StringOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt64Option(f func(StringOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintOption(f func(StringOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint8Option(f func(StringOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint16Option(f func(StringOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint32Option(f func(StringOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint64Option(f func(StringOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintptrOption(f func(StringOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapByteOption(f func(StringOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapRuneOption(f func(StringOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat32Option(f func(StringOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat64Option(f func(StringOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex64Option(f func(StringOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex128Option(f func(StringOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapAnyOption(f func(StringOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapBoolArray(f func(StringOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapStringArray(f func(StringOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapIntArray(f func(StringOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt8Array(f func(StringOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt16Array(f func(StringOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt32Array(f func(StringOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt64Array(f func(StringOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintArray(f func(StringOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint8Array(f func(StringOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint16Array(f func(StringOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint32Array(f func(StringOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint64Array(f func(StringOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintptrArray(f func(StringOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapByteArray(f func(StringOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapRuneArray(f func(StringOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat32Array(f func(StringOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat64Array(f func(StringOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex64Array(f func(StringOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex128Array(f func(StringOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapAnyArray(f func(StringOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapBoolList(f func(StringOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapStringList(f func(StringOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapIntList(f func(StringOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt8List(f func(StringOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt16List(f func(StringOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt32List(f func(StringOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapInt64List(f func(StringOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintList(f func(StringOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint8List(f func(StringOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint16List(f func(StringOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint32List(f func(StringOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUint64List(f func(StringOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapUintptrList(f func(StringOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapByteList(f func(StringOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapRuneList(f func(StringOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat32List(f func(StringOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapFloat64List(f func(StringOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex64List(f func(StringOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapComplex128List(f func(StringOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) MapAnyList(f func(StringOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapBool(f func(IntOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapString(f func(IntOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt(f func(IntOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt8(f func(IntOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt16(f func(IntOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt32(f func(IntOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt64(f func(IntOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint(f func(IntOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint8(f func(IntOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint16(f func(IntOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint32(f func(IntOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint64(f func(IntOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintptr(f func(IntOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapByte(f func(IntOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapRune(f func(IntOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat32(f func(IntOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat64(f func(IntOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex64(f func(IntOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex128(f func(IntOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapAny(f func(IntOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapBoolOption(f func(IntOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapStringOption(f func(IntOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapIntOption(f func(IntOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt8Option(f func(IntOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt16Option(f func(IntOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt32Option(f func(IntOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt64Option(f func(IntOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintOption(f func(IntOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint8Option(f func(IntOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint16Option(f func(IntOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint32Option(f func(IntOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint64Option(f func(IntOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintptrOption(f func(IntOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapByteOption(f func(IntOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapRuneOption(f func(IntOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat32Option(f func(IntOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat64Option(f func(IntOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex64Option(f func(IntOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex128Option(f func(IntOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapAnyOption(f func(IntOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapBoolArray(f func(IntOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapStringArray(f func(IntOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapIntArray(f func(IntOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt8Array(f func(IntOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt16Array(f func(IntOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt32Array(f func(IntOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt64Array(f func(IntOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintArray(f func(IntOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint8Array(f func(IntOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint16Array(f func(IntOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint32Array(f func(IntOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint64Array(f func(IntOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintptrArray(f func(IntOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapByteArray(f func(IntOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapRuneArray(f func(IntOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat32Array(f func(IntOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat64Array(f func(IntOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex64Array(f func(IntOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex128Array(f func(IntOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapAnyArray(f func(IntOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapBoolList(f func(IntOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapStringList(f func(IntOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapIntList(f func(IntOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt8List(f func(IntOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt16List(f func(IntOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt32List(f func(IntOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapInt64List(f func(IntOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintList(f func(IntOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint8List(f func(IntOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint16List(f func(IntOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint32List(f func(IntOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUint64List(f func(IntOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapUintptrList(f func(IntOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapByteList(f func(IntOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapRuneList(f func(IntOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat32List(f func(IntOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapFloat64List(f func(IntOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex64List(f func(IntOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapComplex128List(f func(IntOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) MapAnyList(f func(IntOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapBool(f func(Int8Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapString(f func(Int8Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt(f func(Int8Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt8(f func(Int8Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt16(f func(Int8Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt32(f func(Int8Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt64(f func(Int8Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint(f func(Int8Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint8(f func(Int8Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint16(f func(Int8Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint32(f func(Int8Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint64(f func(Int8Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintptr(f func(Int8Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapByte(f func(Int8Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapRune(f func(Int8Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat32(f func(Int8Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat64(f func(Int8Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex64(f func(Int8Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex128(f func(Int8Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapAny(f func(Int8Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapBoolOption(f func(Int8Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapStringOption(f func(Int8Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapIntOption(f func(Int8Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt8Option(f func(Int8Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt16Option(f func(Int8Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt32Option(f func(Int8Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt64Option(f func(Int8Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintOption(f func(Int8Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint8Option(f func(Int8Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint16Option(f func(Int8Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint32Option(f func(Int8Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint64Option(f func(Int8Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintptrOption(f func(Int8Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapByteOption(f func(Int8Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapRuneOption(f func(Int8Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat32Option(f func(Int8Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat64Option(f func(Int8Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex64Option(f func(Int8Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex128Option(f func(Int8Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapAnyOption(f func(Int8Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapBoolArray(f func(Int8Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapStringArray(f func(Int8Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapIntArray(f func(Int8Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt8Array(f func(Int8Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt16Array(f func(Int8Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt32Array(f func(Int8Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt64Array(f func(Int8Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintArray(f func(Int8Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint8Array(f func(Int8Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint16Array(f func(Int8Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint32Array(f func(Int8Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint64Array(f func(Int8Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintptrArray(f func(Int8Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapByteArray(f func(Int8Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapRuneArray(f func(Int8Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat32Array(f func(Int8Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat64Array(f func(Int8Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex64Array(f func(Int8Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex128Array(f func(Int8Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapAnyArray(f func(Int8Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapBoolList(f func(Int8Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapStringList(f func(Int8Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapIntList(f func(Int8Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt8List(f func(Int8Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt16List(f func(Int8Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt32List(f func(Int8Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapInt64List(f func(Int8Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintList(f func(Int8Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint8List(f func(Int8Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint16List(f func(Int8Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint32List(f func(Int8Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUint64List(f func(Int8Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapUintptrList(f func(Int8Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapByteList(f func(Int8Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapRuneList(f func(Int8Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat32List(f func(Int8Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapFloat64List(f func(Int8Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex64List(f func(Int8Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapComplex128List(f func(Int8Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) MapAnyList(f func(Int8Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapBool(f func(Int16Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapString(f func(Int16Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt(f func(Int16Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt8(f func(Int16Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt16(f func(Int16Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt32(f func(Int16Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt64(f func(Int16Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint(f func(Int16Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint8(f func(Int16Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint16(f func(Int16Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint32(f func(Int16Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint64(f func(Int16Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintptr(f func(Int16Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapByte(f func(Int16Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapRune(f func(Int16Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat32(f func(Int16Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat64(f func(Int16Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex64(f func(Int16Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex128(f func(Int16Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapAny(f func(Int16Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapBoolOption(f func(Int16Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapStringOption(f func(Int16Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapIntOption(f func(Int16Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt8Option(f func(Int16Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt16Option(f func(Int16Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt32Option(f func(Int16Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt64Option(f func(Int16Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintOption(f func(Int16Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint8Option(f func(Int16Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint16Option(f func(Int16Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint32Option(f func(Int16Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint64Option(f func(Int16Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintptrOption(f func(Int16Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapByteOption(f func(Int16Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapRuneOption(f func(Int16Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat32Option(f func(Int16Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat64Option(f func(Int16Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex64Option(f func(Int16Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex128Option(f func(Int16Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapAnyOption(f func(Int16Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapBoolArray(f func(Int16Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapStringArray(f func(Int16Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapIntArray(f func(Int16Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt8Array(f func(Int16Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt16Array(f func(Int16Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt32Array(f func(Int16Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt64Array(f func(Int16Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintArray(f func(Int16Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint8Array(f func(Int16Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint16Array(f func(Int16Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint32Array(f func(Int16Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint64Array(f func(Int16Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintptrArray(f func(Int16Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapByteArray(f func(Int16Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapRuneArray(f func(Int16Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat32Array(f func(Int16Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat64Array(f func(Int16Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex64Array(f func(Int16Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex128Array(f func(Int16Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapAnyArray(f func(Int16Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapBoolList(f func(Int16Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapStringList(f func(Int16Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapIntList(f func(Int16Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt8List(f func(Int16Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt16List(f func(Int16Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt32List(f func(Int16Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapInt64List(f func(Int16Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintList(f func(Int16Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint8List(f func(Int16Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint16List(f func(Int16Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint32List(f func(Int16Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUint64List(f func(Int16Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapUintptrList(f func(Int16Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapByteList(f func(Int16Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapRuneList(f func(Int16Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat32List(f func(Int16Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapFloat64List(f func(Int16Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex64List(f func(Int16Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapComplex128List(f func(Int16Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) MapAnyList(f func(Int16Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapBool(f func(Int32Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapString(f func(Int32Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt(f func(Int32Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt8(f func(Int32Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt16(f func(Int32Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt32(f func(Int32Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt64(f func(Int32Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint(f func(Int32Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint8(f func(Int32Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint16(f func(Int32Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint32(f func(Int32Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint64(f func(Int32Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintptr(f func(Int32Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapByte(f func(Int32Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapRune(f func(Int32Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat32(f func(Int32Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat64(f func(Int32Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex64(f func(Int32Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex128(f func(Int32Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapAny(f func(Int32Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapBoolOption(f func(Int32Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapStringOption(f func(Int32Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapIntOption(f func(Int32Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt8Option(f func(Int32Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt16Option(f func(Int32Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt32Option(f func(Int32Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt64Option(f func(Int32Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintOption(f func(Int32Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint8Option(f func(Int32Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint16Option(f func(Int32Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint32Option(f func(Int32Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint64Option(f func(Int32Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintptrOption(f func(Int32Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapByteOption(f func(Int32Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapRuneOption(f func(Int32Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat32Option(f func(Int32Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat64Option(f func(Int32Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex64Option(f func(Int32Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex128Option(f func(Int32Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapAnyOption(f func(Int32Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapBoolArray(f func(Int32Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapStringArray(f func(Int32Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapIntArray(f func(Int32Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt8Array(f func(Int32Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt16Array(f func(Int32Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt32Array(f func(Int32Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt64Array(f func(Int32Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintArray(f func(Int32Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint8Array(f func(Int32Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint16Array(f func(Int32Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint32Array(f func(Int32Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint64Array(f func(Int32Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintptrArray(f func(Int32Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapByteArray(f func(Int32Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapRuneArray(f func(Int32Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat32Array(f func(Int32Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat64Array(f func(Int32Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex64Array(f func(Int32Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex128Array(f func(Int32Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapAnyArray(f func(Int32Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapBoolList(f func(Int32Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapStringList(f func(Int32Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapIntList(f func(Int32Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt8List(f func(Int32Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt16List(f func(Int32Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt32List(f func(Int32Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapInt64List(f func(Int32Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintList(f func(Int32Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint8List(f func(Int32Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint16List(f func(Int32Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint32List(f func(Int32Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUint64List(f func(Int32Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapUintptrList(f func(Int32Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapByteList(f func(Int32Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapRuneList(f func(Int32Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat32List(f func(Int32Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapFloat64List(f func(Int32Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex64List(f func(Int32Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapComplex128List(f func(Int32Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) MapAnyList(f func(Int32Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapBool(f func(Int64Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapString(f func(Int64Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt(f func(Int64Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt8(f func(Int64Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt16(f func(Int64Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt32(f func(Int64Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt64(f func(Int64Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint(f func(Int64Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint8(f func(Int64Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint16(f func(Int64Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint32(f func(Int64Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint64(f func(Int64Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintptr(f func(Int64Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapByte(f func(Int64Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapRune(f func(Int64Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat32(f func(Int64Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat64(f func(Int64Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex64(f func(Int64Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex128(f func(Int64Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapAny(f func(Int64Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapBoolOption(f func(Int64Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapStringOption(f func(Int64Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapIntOption(f func(Int64Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt8Option(f func(Int64Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt16Option(f func(Int64Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt32Option(f func(Int64Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt64Option(f func(Int64Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintOption(f func(Int64Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint8Option(f func(Int64Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint16Option(f func(Int64Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint32Option(f func(Int64Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint64Option(f func(Int64Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintptrOption(f func(Int64Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapByteOption(f func(Int64Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapRuneOption(f func(Int64Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat32Option(f func(Int64Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat64Option(f func(Int64Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex64Option(f func(Int64Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex128Option(f func(Int64Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapAnyOption(f func(Int64Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapBoolArray(f func(Int64Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapStringArray(f func(Int64Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapIntArray(f func(Int64Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt8Array(f func(Int64Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt16Array(f func(Int64Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt32Array(f func(Int64Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt64Array(f func(Int64Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintArray(f func(Int64Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint8Array(f func(Int64Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint16Array(f func(Int64Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint32Array(f func(Int64Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint64Array(f func(Int64Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintptrArray(f func(Int64Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapByteArray(f func(Int64Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapRuneArray(f func(Int64Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat32Array(f func(Int64Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat64Array(f func(Int64Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex64Array(f func(Int64Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex128Array(f func(Int64Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapAnyArray(f func(Int64Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapBoolList(f func(Int64Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapStringList(f func(Int64Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapIntList(f func(Int64Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt8List(f func(Int64Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt16List(f func(Int64Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt32List(f func(Int64Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapInt64List(f func(Int64Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintList(f func(Int64Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint8List(f func(Int64Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint16List(f func(Int64Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint32List(f func(Int64Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUint64List(f func(Int64Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapUintptrList(f func(Int64Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapByteList(f func(Int64Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapRuneList(f func(Int64Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat32List(f func(Int64Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapFloat64List(f func(Int64Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex64List(f func(Int64Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapComplex128List(f func(Int64Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) MapAnyList(f func(Int64Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapBool(f func(UintOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapString(f func(UintOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt(f func(UintOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt8(f func(UintOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt16(f func(UintOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt32(f func(UintOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt64(f func(UintOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint(f func(UintOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint8(f func(UintOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint16(f func(UintOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint32(f func(UintOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint64(f func(UintOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintptr(f func(UintOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapByte(f func(UintOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapRune(f func(UintOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat32(f func(UintOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat64(f func(UintOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex64(f func(UintOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex128(f func(UintOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapAny(f func(UintOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapBoolOption(f func(UintOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapStringOption(f func(UintOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapIntOption(f func(UintOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt8Option(f func(UintOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt16Option(f func(UintOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt32Option(f func(UintOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt64Option(f func(UintOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintOption(f func(UintOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint8Option(f func(UintOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint16Option(f func(UintOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint32Option(f func(UintOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint64Option(f func(UintOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintptrOption(f func(UintOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapByteOption(f func(UintOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapRuneOption(f func(UintOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat32Option(f func(UintOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat64Option(f func(UintOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex64Option(f func(UintOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex128Option(f func(UintOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapAnyOption(f func(UintOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapBoolArray(f func(UintOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapStringArray(f func(UintOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapIntArray(f func(UintOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt8Array(f func(UintOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt16Array(f func(UintOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt32Array(f func(UintOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt64Array(f func(UintOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintArray(f func(UintOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint8Array(f func(UintOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint16Array(f func(UintOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint32Array(f func(UintOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint64Array(f func(UintOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintptrArray(f func(UintOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapByteArray(f func(UintOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapRuneArray(f func(UintOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat32Array(f func(UintOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat64Array(f func(UintOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex64Array(f func(UintOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex128Array(f func(UintOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapAnyArray(f func(UintOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapBoolList(f func(UintOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapStringList(f func(UintOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapIntList(f func(UintOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt8List(f func(UintOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt16List(f func(UintOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt32List(f func(UintOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapInt64List(f func(UintOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintList(f func(UintOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint8List(f func(UintOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint16List(f func(UintOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint32List(f func(UintOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUint64List(f func(UintOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapUintptrList(f func(UintOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapByteList(f func(UintOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapRuneList(f func(UintOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat32List(f func(UintOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapFloat64List(f func(UintOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex64List(f func(UintOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapComplex128List(f func(UintOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) MapAnyList(f func(UintOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapBool(f func(Uint8Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapString(f func(Uint8Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt(f func(Uint8Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt8(f func(Uint8Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt16(f func(Uint8Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt32(f func(Uint8Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt64(f func(Uint8Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint(f func(Uint8Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint8(f func(Uint8Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint16(f func(Uint8Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint32(f func(Uint8Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint64(f func(Uint8Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintptr(f func(Uint8Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapByte(f func(Uint8Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapRune(f func(Uint8Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat32(f func(Uint8Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat64(f func(Uint8Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex64(f func(Uint8Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex128(f func(Uint8Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapAny(f func(Uint8Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapBoolOption(f func(Uint8Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapStringOption(f func(Uint8Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapIntOption(f func(Uint8Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt8Option(f func(Uint8Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt16Option(f func(Uint8Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt32Option(f func(Uint8Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt64Option(f func(Uint8Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintOption(f func(Uint8Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint8Option(f func(Uint8Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint16Option(f func(Uint8Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint32Option(f func(Uint8Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint64Option(f func(Uint8Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintptrOption(f func(Uint8Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapByteOption(f func(Uint8Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapRuneOption(f func(Uint8Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat32Option(f func(Uint8Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat64Option(f func(Uint8Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex64Option(f func(Uint8Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex128Option(f func(Uint8Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapAnyOption(f func(Uint8Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapBoolArray(f func(Uint8Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapStringArray(f func(Uint8Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapIntArray(f func(Uint8Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt8Array(f func(Uint8Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt16Array(f func(Uint8Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt32Array(f func(Uint8Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt64Array(f func(Uint8Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintArray(f func(Uint8Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint8Array(f func(Uint8Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint16Array(f func(Uint8Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint32Array(f func(Uint8Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint64Array(f func(Uint8Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintptrArray(f func(Uint8Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapByteArray(f func(Uint8Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapRuneArray(f func(Uint8Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat32Array(f func(Uint8Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat64Array(f func(Uint8Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex64Array(f func(Uint8Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex128Array(f func(Uint8Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapAnyArray(f func(Uint8Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapBoolList(f func(Uint8Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapStringList(f func(Uint8Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapIntList(f func(Uint8Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt8List(f func(Uint8Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt16List(f func(Uint8Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt32List(f func(Uint8Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapInt64List(f func(Uint8Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintList(f func(Uint8Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint8List(f func(Uint8Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint16List(f func(Uint8Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint32List(f func(Uint8Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUint64List(f func(Uint8Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapUintptrList(f func(Uint8Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapByteList(f func(Uint8Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapRuneList(f func(Uint8Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat32List(f func(Uint8Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapFloat64List(f func(Uint8Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex64List(f func(Uint8Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapComplex128List(f func(Uint8Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) MapAnyList(f func(Uint8Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapBool(f func(Uint16Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapString(f func(Uint16Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt(f func(Uint16Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt8(f func(Uint16Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt16(f func(Uint16Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt32(f func(Uint16Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt64(f func(Uint16Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint(f func(Uint16Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint8(f func(Uint16Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint16(f func(Uint16Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint32(f func(Uint16Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint64(f func(Uint16Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintptr(f func(Uint16Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapByte(f func(Uint16Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapRune(f func(Uint16Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat32(f func(Uint16Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat64(f func(Uint16Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex64(f func(Uint16Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex128(f func(Uint16Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapAny(f func(Uint16Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapBoolOption(f func(Uint16Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapStringOption(f func(Uint16Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapIntOption(f func(Uint16Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt8Option(f func(Uint16Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt16Option(f func(Uint16Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt32Option(f func(Uint16Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt64Option(f func(Uint16Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintOption(f func(Uint16Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint8Option(f func(Uint16Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint16Option(f func(Uint16Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint32Option(f func(Uint16Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint64Option(f func(Uint16Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintptrOption(f func(Uint16Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapByteOption(f func(Uint16Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapRuneOption(f func(Uint16Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat32Option(f func(Uint16Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat64Option(f func(Uint16Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex64Option(f func(Uint16Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex128Option(f func(Uint16Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapAnyOption(f func(Uint16Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapBoolArray(f func(Uint16Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapStringArray(f func(Uint16Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapIntArray(f func(Uint16Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt8Array(f func(Uint16Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt16Array(f func(Uint16Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt32Array(f func(Uint16Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt64Array(f func(Uint16Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintArray(f func(Uint16Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint8Array(f func(Uint16Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint16Array(f func(Uint16Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint32Array(f func(Uint16Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint64Array(f func(Uint16Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintptrArray(f func(Uint16Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapByteArray(f func(Uint16Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapRuneArray(f func(Uint16Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat32Array(f func(Uint16Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat64Array(f func(Uint16Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex64Array(f func(Uint16Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex128Array(f func(Uint16Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapAnyArray(f func(Uint16Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapBoolList(f func(Uint16Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapStringList(f func(Uint16Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapIntList(f func(Uint16Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt8List(f func(Uint16Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt16List(f func(Uint16Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt32List(f func(Uint16Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapInt64List(f func(Uint16Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintList(f func(Uint16Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint8List(f func(Uint16Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint16List(f func(Uint16Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint32List(f func(Uint16Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUint64List(f func(Uint16Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapUintptrList(f func(Uint16Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapByteList(f func(Uint16Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapRuneList(f func(Uint16Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat32List(f func(Uint16Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapFloat64List(f func(Uint16Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex64List(f func(Uint16Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapComplex128List(f func(Uint16Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) MapAnyList(f func(Uint16Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapBool(f func(Uint32Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapString(f func(Uint32Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt(f func(Uint32Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt8(f func(Uint32Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt16(f func(Uint32Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt32(f func(Uint32Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt64(f func(Uint32Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint(f func(Uint32Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint8(f func(Uint32Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint16(f func(Uint32Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint32(f func(Uint32Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint64(f func(Uint32Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintptr(f func(Uint32Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapByte(f func(Uint32Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapRune(f func(Uint32Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat32(f func(Uint32Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat64(f func(Uint32Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex64(f func(Uint32Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex128(f func(Uint32Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapAny(f func(Uint32Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapBoolOption(f func(Uint32Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapStringOption(f func(Uint32Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapIntOption(f func(Uint32Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt8Option(f func(Uint32Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt16Option(f func(Uint32Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt32Option(f func(Uint32Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt64Option(f func(Uint32Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintOption(f func(Uint32Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint8Option(f func(Uint32Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint16Option(f func(Uint32Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint32Option(f func(Uint32Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint64Option(f func(Uint32Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintptrOption(f func(Uint32Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapByteOption(f func(Uint32Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapRuneOption(f func(Uint32Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat32Option(f func(Uint32Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat64Option(f func(Uint32Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex64Option(f func(Uint32Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex128Option(f func(Uint32Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapAnyOption(f func(Uint32Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapBoolArray(f func(Uint32Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapStringArray(f func(Uint32Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapIntArray(f func(Uint32Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt8Array(f func(Uint32Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt16Array(f func(Uint32Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt32Array(f func(Uint32Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt64Array(f func(Uint32Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintArray(f func(Uint32Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint8Array(f func(Uint32Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint16Array(f func(Uint32Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint32Array(f func(Uint32Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint64Array(f func(Uint32Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintptrArray(f func(Uint32Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapByteArray(f func(Uint32Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapRuneArray(f func(Uint32Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat32Array(f func(Uint32Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat64Array(f func(Uint32Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex64Array(f func(Uint32Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex128Array(f func(Uint32Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapAnyArray(f func(Uint32Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapBoolList(f func(Uint32Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapStringList(f func(Uint32Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapIntList(f func(Uint32Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt8List(f func(Uint32Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt16List(f func(Uint32Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt32List(f func(Uint32Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapInt64List(f func(Uint32Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintList(f func(Uint32Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint8List(f func(Uint32Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint16List(f func(Uint32Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint32List(f func(Uint32Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUint64List(f func(Uint32Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapUintptrList(f func(Uint32Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapByteList(f func(Uint32Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapRuneList(f func(Uint32Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat32List(f func(Uint32Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapFloat64List(f func(Uint32Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex64List(f func(Uint32Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapComplex128List(f func(Uint32Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) MapAnyList(f func(Uint32Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapBool(f func(Uint64Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapString(f func(Uint64Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt(f func(Uint64Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt8(f func(Uint64Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt16(f func(Uint64Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt32(f func(Uint64Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt64(f func(Uint64Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint(f func(Uint64Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint8(f func(Uint64Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint16(f func(Uint64Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint32(f func(Uint64Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint64(f func(Uint64Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintptr(f func(Uint64Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapByte(f func(Uint64Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapRune(f func(Uint64Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat32(f func(Uint64Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat64(f func(Uint64Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex64(f func(Uint64Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex128(f func(Uint64Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapAny(f func(Uint64Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapBoolOption(f func(Uint64Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapStringOption(f func(Uint64Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapIntOption(f func(Uint64Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt8Option(f func(Uint64Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt16Option(f func(Uint64Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt32Option(f func(Uint64Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt64Option(f func(Uint64Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintOption(f func(Uint64Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint8Option(f func(Uint64Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint16Option(f func(Uint64Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint32Option(f func(Uint64Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint64Option(f func(Uint64Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintptrOption(f func(Uint64Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapByteOption(f func(Uint64Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapRuneOption(f func(Uint64Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat32Option(f func(Uint64Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat64Option(f func(Uint64Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex64Option(f func(Uint64Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex128Option(f func(Uint64Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapAnyOption(f func(Uint64Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapBoolArray(f func(Uint64Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapStringArray(f func(Uint64Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapIntArray(f func(Uint64Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt8Array(f func(Uint64Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt16Array(f func(Uint64Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt32Array(f func(Uint64Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt64Array(f func(Uint64Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintArray(f func(Uint64Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint8Array(f func(Uint64Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint16Array(f func(Uint64Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint32Array(f func(Uint64Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint64Array(f func(Uint64Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintptrArray(f func(Uint64Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapByteArray(f func(Uint64Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapRuneArray(f func(Uint64Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat32Array(f func(Uint64Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat64Array(f func(Uint64Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex64Array(f func(Uint64Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex128Array(f func(Uint64Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapAnyArray(f func(Uint64Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapBoolList(f func(Uint64Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapStringList(f func(Uint64Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapIntList(f func(Uint64Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt8List(f func(Uint64Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt16List(f func(Uint64Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt32List(f func(Uint64Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapInt64List(f func(Uint64Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintList(f func(Uint64Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint8List(f func(Uint64Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint16List(f func(Uint64Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint32List(f func(Uint64Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUint64List(f func(Uint64Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapUintptrList(f func(Uint64Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapByteList(f func(Uint64Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapRuneList(f func(Uint64Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat32List(f func(Uint64Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapFloat64List(f func(Uint64Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex64List(f func(Uint64Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapComplex128List(f func(Uint64Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) MapAnyList(f func(Uint64Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapBool(f func(UintptrOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapString(f func(UintptrOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt(f func(UintptrOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt8(f func(UintptrOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt16(f func(UintptrOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt32(f func(UintptrOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt64(f func(UintptrOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint(f func(UintptrOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint8(f func(UintptrOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint16(f func(UintptrOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint32(f func(UintptrOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint64(f func(UintptrOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintptr(f func(UintptrOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapByte(f func(UintptrOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapRune(f func(UintptrOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat32(f func(UintptrOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat64(f func(UintptrOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex64(f func(UintptrOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex128(f func(UintptrOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapAny(f func(UintptrOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapBoolOption(f func(UintptrOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapStringOption(f func(UintptrOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapIntOption(f func(UintptrOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt8Option(f func(UintptrOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt16Option(f func(UintptrOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt32Option(f func(UintptrOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt64Option(f func(UintptrOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintOption(f func(UintptrOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint8Option(f func(UintptrOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint16Option(f func(UintptrOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint32Option(f func(UintptrOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint64Option(f func(UintptrOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintptrOption(f func(UintptrOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapByteOption(f func(UintptrOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapRuneOption(f func(UintptrOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat32Option(f func(UintptrOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat64Option(f func(UintptrOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex64Option(f func(UintptrOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex128Option(f func(UintptrOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapAnyOption(f func(UintptrOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapBoolArray(f func(UintptrOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapStringArray(f func(UintptrOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapIntArray(f func(UintptrOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt8Array(f func(UintptrOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt16Array(f func(UintptrOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt32Array(f func(UintptrOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt64Array(f func(UintptrOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintArray(f func(UintptrOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint8Array(f func(UintptrOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint16Array(f func(UintptrOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint32Array(f func(UintptrOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint64Array(f func(UintptrOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintptrArray(f func(UintptrOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapByteArray(f func(UintptrOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapRuneArray(f func(UintptrOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat32Array(f func(UintptrOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat64Array(f func(UintptrOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex64Array(f func(UintptrOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex128Array(f func(UintptrOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapAnyArray(f func(UintptrOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapBoolList(f func(UintptrOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapStringList(f func(UintptrOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapIntList(f func(UintptrOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt8List(f func(UintptrOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt16List(f func(UintptrOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt32List(f func(UintptrOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapInt64List(f func(UintptrOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintList(f func(UintptrOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint8List(f func(UintptrOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint16List(f func(UintptrOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint32List(f func(UintptrOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUint64List(f func(UintptrOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapUintptrList(f func(UintptrOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapByteList(f func(UintptrOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapRuneList(f func(UintptrOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat32List(f func(UintptrOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapFloat64List(f func(UintptrOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex64List(f func(UintptrOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapComplex128List(f func(UintptrOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) MapAnyList(f func(UintptrOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapBool(f func(ByteOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapString(f func(ByteOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt(f func(ByteOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt8(f func(ByteOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt16(f func(ByteOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt32(f func(ByteOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt64(f func(ByteOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint(f func(ByteOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint8(f func(ByteOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint16(f func(ByteOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint32(f func(ByteOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint64(f func(ByteOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintptr(f func(ByteOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapByte(f func(ByteOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapRune(f func(ByteOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat32(f func(ByteOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat64(f func(ByteOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex64(f func(ByteOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex128(f func(ByteOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapAny(f func(ByteOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapBoolOption(f func(ByteOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapStringOption(f func(ByteOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapIntOption(f func(ByteOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt8Option(f func(ByteOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt16Option(f func(ByteOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt32Option(f func(ByteOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt64Option(f func(ByteOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintOption(f func(ByteOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint8Option(f func(ByteOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint16Option(f func(ByteOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint32Option(f func(ByteOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint64Option(f func(ByteOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintptrOption(f func(ByteOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapByteOption(f func(ByteOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapRuneOption(f func(ByteOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat32Option(f func(ByteOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat64Option(f func(ByteOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex64Option(f func(ByteOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex128Option(f func(ByteOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapAnyOption(f func(ByteOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapBoolArray(f func(ByteOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapStringArray(f func(ByteOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapIntArray(f func(ByteOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt8Array(f func(ByteOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt16Array(f func(ByteOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt32Array(f func(ByteOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt64Array(f func(ByteOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintArray(f func(ByteOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint8Array(f func(ByteOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint16Array(f func(ByteOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint32Array(f func(ByteOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint64Array(f func(ByteOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintptrArray(f func(ByteOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapByteArray(f func(ByteOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapRuneArray(f func(ByteOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat32Array(f func(ByteOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat64Array(f func(ByteOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex64Array(f func(ByteOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex128Array(f func(ByteOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapAnyArray(f func(ByteOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapBoolList(f func(ByteOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapStringList(f func(ByteOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapIntList(f func(ByteOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt8List(f func(ByteOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt16List(f func(ByteOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt32List(f func(ByteOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapInt64List(f func(ByteOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintList(f func(ByteOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint8List(f func(ByteOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint16List(f func(ByteOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint32List(f func(ByteOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUint64List(f func(ByteOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapUintptrList(f func(ByteOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapByteList(f func(ByteOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapRuneList(f func(ByteOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat32List(f func(ByteOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapFloat64List(f func(ByteOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex64List(f func(ByteOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapComplex128List(f func(ByteOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) MapAnyList(f func(ByteOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapBool(f func(RuneOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapString(f func(RuneOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt(f func(RuneOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt8(f func(RuneOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt16(f func(RuneOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt32(f func(RuneOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt64(f func(RuneOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint(f func(RuneOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint8(f func(RuneOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint16(f func(RuneOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint32(f func(RuneOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint64(f func(RuneOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintptr(f func(RuneOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapByte(f func(RuneOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapRune(f func(RuneOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat32(f func(RuneOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat64(f func(RuneOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex64(f func(RuneOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex128(f func(RuneOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapAny(f func(RuneOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapBoolOption(f func(RuneOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapStringOption(f func(RuneOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapIntOption(f func(RuneOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt8Option(f func(RuneOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt16Option(f func(RuneOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt32Option(f func(RuneOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt64Option(f func(RuneOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintOption(f func(RuneOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint8Option(f func(RuneOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint16Option(f func(RuneOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint32Option(f func(RuneOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint64Option(f func(RuneOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintptrOption(f func(RuneOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapByteOption(f func(RuneOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapRuneOption(f func(RuneOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat32Option(f func(RuneOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat64Option(f func(RuneOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex64Option(f func(RuneOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex128Option(f func(RuneOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapAnyOption(f func(RuneOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapBoolArray(f func(RuneOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapStringArray(f func(RuneOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapIntArray(f func(RuneOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt8Array(f func(RuneOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt16Array(f func(RuneOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt32Array(f func(RuneOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt64Array(f func(RuneOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintArray(f func(RuneOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint8Array(f func(RuneOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint16Array(f func(RuneOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint32Array(f func(RuneOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint64Array(f func(RuneOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintptrArray(f func(RuneOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapByteArray(f func(RuneOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapRuneArray(f func(RuneOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat32Array(f func(RuneOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat64Array(f func(RuneOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex64Array(f func(RuneOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex128Array(f func(RuneOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapAnyArray(f func(RuneOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapBoolList(f func(RuneOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapStringList(f func(RuneOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapIntList(f func(RuneOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt8List(f func(RuneOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt16List(f func(RuneOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt32List(f func(RuneOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapInt64List(f func(RuneOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintList(f func(RuneOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint8List(f func(RuneOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint16List(f func(RuneOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint32List(f func(RuneOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUint64List(f func(RuneOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapUintptrList(f func(RuneOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapByteList(f func(RuneOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapRuneList(f func(RuneOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat32List(f func(RuneOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapFloat64List(f func(RuneOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex64List(f func(RuneOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapComplex128List(f func(RuneOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) MapAnyList(f func(RuneOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapBool(f func(Float32Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapString(f func(Float32Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt(f func(Float32Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt8(f func(Float32Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt16(f func(Float32Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt32(f func(Float32Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt64(f func(Float32Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint(f func(Float32Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint8(f func(Float32Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint16(f func(Float32Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint32(f func(Float32Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint64(f func(Float32Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintptr(f func(Float32Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapByte(f func(Float32Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapRune(f func(Float32Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat32(f func(Float32Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat64(f func(Float32Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex64(f func(Float32Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex128(f func(Float32Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapAny(f func(Float32Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapBoolOption(f func(Float32Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapStringOption(f func(Float32Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapIntOption(f func(Float32Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt8Option(f func(Float32Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt16Option(f func(Float32Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt32Option(f func(Float32Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt64Option(f func(Float32Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintOption(f func(Float32Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint8Option(f func(Float32Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint16Option(f func(Float32Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint32Option(f func(Float32Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint64Option(f func(Float32Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintptrOption(f func(Float32Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapByteOption(f func(Float32Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapRuneOption(f func(Float32Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat32Option(f func(Float32Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat64Option(f func(Float32Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex64Option(f func(Float32Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex128Option(f func(Float32Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapAnyOption(f func(Float32Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapBoolArray(f func(Float32Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapStringArray(f func(Float32Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapIntArray(f func(Float32Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt8Array(f func(Float32Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt16Array(f func(Float32Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt32Array(f func(Float32Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt64Array(f func(Float32Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintArray(f func(Float32Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint8Array(f func(Float32Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint16Array(f func(Float32Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint32Array(f func(Float32Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint64Array(f func(Float32Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintptrArray(f func(Float32Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapByteArray(f func(Float32Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapRuneArray(f func(Float32Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat32Array(f func(Float32Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat64Array(f func(Float32Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex64Array(f func(Float32Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex128Array(f func(Float32Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapAnyArray(f func(Float32Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapBoolList(f func(Float32Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapStringList(f func(Float32Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapIntList(f func(Float32Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt8List(f func(Float32Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt16List(f func(Float32Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt32List(f func(Float32Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapInt64List(f func(Float32Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintList(f func(Float32Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint8List(f func(Float32Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint16List(f func(Float32Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint32List(f func(Float32Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUint64List(f func(Float32Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapUintptrList(f func(Float32Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapByteList(f func(Float32Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapRuneList(f func(Float32Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat32List(f func(Float32Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapFloat64List(f func(Float32Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex64List(f func(Float32Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapComplex128List(f func(Float32Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) MapAnyList(f func(Float32Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapBool(f func(Float64Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapString(f func(Float64Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt(f func(Float64Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt8(f func(Float64Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt16(f func(Float64Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt32(f func(Float64Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt64(f func(Float64Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint(f func(Float64Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint8(f func(Float64Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint16(f func(Float64Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint32(f func(Float64Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint64(f func(Float64Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintptr(f func(Float64Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapByte(f func(Float64Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapRune(f func(Float64Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat32(f func(Float64Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat64(f func(Float64Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex64(f func(Float64Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex128(f func(Float64Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapAny(f func(Float64Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapBoolOption(f func(Float64Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapStringOption(f func(Float64Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapIntOption(f func(Float64Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt8Option(f func(Float64Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt16Option(f func(Float64Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt32Option(f func(Float64Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt64Option(f func(Float64Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintOption(f func(Float64Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint8Option(f func(Float64Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint16Option(f func(Float64Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint32Option(f func(Float64Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint64Option(f func(Float64Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintptrOption(f func(Float64Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapByteOption(f func(Float64Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapRuneOption(f func(Float64Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat32Option(f func(Float64Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat64Option(f func(Float64Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex64Option(f func(Float64Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex128Option(f func(Float64Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapAnyOption(f func(Float64Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapBoolArray(f func(Float64Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapStringArray(f func(Float64Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapIntArray(f func(Float64Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt8Array(f func(Float64Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt16Array(f func(Float64Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt32Array(f func(Float64Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt64Array(f func(Float64Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintArray(f func(Float64Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint8Array(f func(Float64Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint16Array(f func(Float64Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint32Array(f func(Float64Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint64Array(f func(Float64Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintptrArray(f func(Float64Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapByteArray(f func(Float64Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapRuneArray(f func(Float64Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat32Array(f func(Float64Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat64Array(f func(Float64Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex64Array(f func(Float64Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex128Array(f func(Float64Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapAnyArray(f func(Float64Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapBoolList(f func(Float64Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapStringList(f func(Float64Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapIntList(f func(Float64Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt8List(f func(Float64Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt16List(f func(Float64Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt32List(f func(Float64Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapInt64List(f func(Float64Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintList(f func(Float64Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint8List(f func(Float64Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint16List(f func(Float64Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint32List(f func(Float64Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUint64List(f func(Float64Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapUintptrList(f func(Float64Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapByteList(f func(Float64Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapRuneList(f func(Float64Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat32List(f func(Float64Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapFloat64List(f func(Float64Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex64List(f func(Float64Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapComplex128List(f func(Float64Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) MapAnyList(f func(Float64Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapBool(f func(Complex64Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapString(f func(Complex64Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt(f func(Complex64Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt8(f func(Complex64Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt16(f func(Complex64Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt32(f func(Complex64Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt64(f func(Complex64Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint(f func(Complex64Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint8(f func(Complex64Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint16(f func(Complex64Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint32(f func(Complex64Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint64(f func(Complex64Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintptr(f func(Complex64Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapByte(f func(Complex64Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapRune(f func(Complex64Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat32(f func(Complex64Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat64(f func(Complex64Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex64(f func(Complex64Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex128(f func(Complex64Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapAny(f func(Complex64Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapBoolOption(f func(Complex64Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapStringOption(f func(Complex64Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapIntOption(f func(Complex64Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt8Option(f func(Complex64Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt16Option(f func(Complex64Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt32Option(f func(Complex64Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt64Option(f func(Complex64Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintOption(f func(Complex64Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint8Option(f func(Complex64Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint16Option(f func(Complex64Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint32Option(f func(Complex64Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint64Option(f func(Complex64Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintptrOption(f func(Complex64Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapByteOption(f func(Complex64Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapRuneOption(f func(Complex64Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat32Option(f func(Complex64Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat64Option(f func(Complex64Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex64Option(f func(Complex64Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex128Option(f func(Complex64Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapAnyOption(f func(Complex64Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapBoolArray(f func(Complex64Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapStringArray(f func(Complex64Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapIntArray(f func(Complex64Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt8Array(f func(Complex64Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt16Array(f func(Complex64Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt32Array(f func(Complex64Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt64Array(f func(Complex64Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintArray(f func(Complex64Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint8Array(f func(Complex64Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint16Array(f func(Complex64Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint32Array(f func(Complex64Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint64Array(f func(Complex64Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintptrArray(f func(Complex64Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapByteArray(f func(Complex64Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapRuneArray(f func(Complex64Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat32Array(f func(Complex64Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat64Array(f func(Complex64Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex64Array(f func(Complex64Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex128Array(f func(Complex64Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapAnyArray(f func(Complex64Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapBoolList(f func(Complex64Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapStringList(f func(Complex64Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapIntList(f func(Complex64Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt8List(f func(Complex64Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt16List(f func(Complex64Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt32List(f func(Complex64Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapInt64List(f func(Complex64Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintList(f func(Complex64Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint8List(f func(Complex64Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint16List(f func(Complex64Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint32List(f func(Complex64Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUint64List(f func(Complex64Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapUintptrList(f func(Complex64Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapByteList(f func(Complex64Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapRuneList(f func(Complex64Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat32List(f func(Complex64Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapFloat64List(f func(Complex64Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex64List(f func(Complex64Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapComplex128List(f func(Complex64Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) MapAnyList(f func(Complex64Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapBool(f func(Complex128Option) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapString(f func(Complex128Option) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt(f func(Complex128Option) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt8(f func(Complex128Option) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt16(f func(Complex128Option) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt32(f func(Complex128Option) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt64(f func(Complex128Option) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint(f func(Complex128Option) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint8(f func(Complex128Option) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint16(f func(Complex128Option) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint32(f func(Complex128Option) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint64(f func(Complex128Option) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintptr(f func(Complex128Option) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapByte(f func(Complex128Option) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapRune(f func(Complex128Option) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat32(f func(Complex128Option) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat64(f func(Complex128Option) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex64(f func(Complex128Option) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex128(f func(Complex128Option) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapAny(f func(Complex128Option) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapBoolOption(f func(Complex128Option) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapStringOption(f func(Complex128Option) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapIntOption(f func(Complex128Option) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt8Option(f func(Complex128Option) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt16Option(f func(Complex128Option) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt32Option(f func(Complex128Option) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt64Option(f func(Complex128Option) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintOption(f func(Complex128Option) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint8Option(f func(Complex128Option) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint16Option(f func(Complex128Option) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint32Option(f func(Complex128Option) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint64Option(f func(Complex128Option) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintptrOption(f func(Complex128Option) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapByteOption(f func(Complex128Option) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapRuneOption(f func(Complex128Option) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat32Option(f func(Complex128Option) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat64Option(f func(Complex128Option) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex64Option(f func(Complex128Option) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex128Option(f func(Complex128Option) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapAnyOption(f func(Complex128Option) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapBoolArray(f func(Complex128Option) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapStringArray(f func(Complex128Option) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapIntArray(f func(Complex128Option) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt8Array(f func(Complex128Option) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt16Array(f func(Complex128Option) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt32Array(f func(Complex128Option) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt64Array(f func(Complex128Option) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintArray(f func(Complex128Option) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint8Array(f func(Complex128Option) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint16Array(f func(Complex128Option) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint32Array(f func(Complex128Option) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint64Array(f func(Complex128Option) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintptrArray(f func(Complex128Option) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapByteArray(f func(Complex128Option) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapRuneArray(f func(Complex128Option) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat32Array(f func(Complex128Option) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat64Array(f func(Complex128Option) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex64Array(f func(Complex128Option) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex128Array(f func(Complex128Option) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapAnyArray(f func(Complex128Option) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapBoolList(f func(Complex128Option) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapStringList(f func(Complex128Option) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapIntList(f func(Complex128Option) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt8List(f func(Complex128Option) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt16List(f func(Complex128Option) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt32List(f func(Complex128Option) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapInt64List(f func(Complex128Option) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintList(f func(Complex128Option) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint8List(f func(Complex128Option) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint16List(f func(Complex128Option) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint32List(f func(Complex128Option) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUint64List(f func(Complex128Option) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapUintptrList(f func(Complex128Option) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapByteList(f func(Complex128Option) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapRuneList(f func(Complex128Option) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat32List(f func(Complex128Option) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapFloat64List(f func(Complex128Option) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex64List(f func(Complex128Option) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapComplex128List(f func(Complex128Option) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) MapAnyList(f func(Complex128Option) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapBool(f func(AnyOption) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapString(f func(AnyOption) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt(f func(AnyOption) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt8(f func(AnyOption) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt16(f func(AnyOption) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt32(f func(AnyOption) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt64(f func(AnyOption) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint(f func(AnyOption) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint8(f func(AnyOption) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint16(f func(AnyOption) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint32(f func(AnyOption) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint64(f func(AnyOption) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintptr(f func(AnyOption) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapByte(f func(AnyOption) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapRune(f func(AnyOption) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat32(f func(AnyOption) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat64(f func(AnyOption) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex64(f func(AnyOption) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex128(f func(AnyOption) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapAny(f func(AnyOption) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapBoolOption(f func(AnyOption) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapStringOption(f func(AnyOption) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapIntOption(f func(AnyOption) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt8Option(f func(AnyOption) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt16Option(f func(AnyOption) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt32Option(f func(AnyOption) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt64Option(f func(AnyOption) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintOption(f func(AnyOption) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint8Option(f func(AnyOption) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint16Option(f func(AnyOption) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint32Option(f func(AnyOption) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint64Option(f func(AnyOption) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintptrOption(f func(AnyOption) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapByteOption(f func(AnyOption) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapRuneOption(f func(AnyOption) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat32Option(f func(AnyOption) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat64Option(f func(AnyOption) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex64Option(f func(AnyOption) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex128Option(f func(AnyOption) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapAnyOption(f func(AnyOption) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapBoolArray(f func(AnyOption) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapStringArray(f func(AnyOption) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapIntArray(f func(AnyOption) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt8Array(f func(AnyOption) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt16Array(f func(AnyOption) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt32Array(f func(AnyOption) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt64Array(f func(AnyOption) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintArray(f func(AnyOption) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint8Array(f func(AnyOption) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint16Array(f func(AnyOption) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint32Array(f func(AnyOption) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint64Array(f func(AnyOption) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintptrArray(f func(AnyOption) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapByteArray(f func(AnyOption) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapRuneArray(f func(AnyOption) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat32Array(f func(AnyOption) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat64Array(f func(AnyOption) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex64Array(f func(AnyOption) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex128Array(f func(AnyOption) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapAnyArray(f func(AnyOption) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapBoolList(f func(AnyOption) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapStringList(f func(AnyOption) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapIntList(f func(AnyOption) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt8List(f func(AnyOption) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt16List(f func(AnyOption) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt32List(f func(AnyOption) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapInt64List(f func(AnyOption) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintList(f func(AnyOption) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint8List(f func(AnyOption) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint16List(f func(AnyOption) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint32List(f func(AnyOption) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUint64List(f func(AnyOption) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapUintptrList(f func(AnyOption) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapByteList(f func(AnyOption) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapRuneList(f func(AnyOption) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat32List(f func(AnyOption) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapFloat64List(f func(AnyOption) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex64List(f func(AnyOption) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapComplex128List(f func(AnyOption) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) MapAnyList(f func(AnyOption) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapBool(f func([]bool) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapString(f func([]bool) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt(f func([]bool) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt8(f func([]bool) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt16(f func([]bool) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt32(f func([]bool) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt64(f func([]bool) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint(f func([]bool) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint8(f func([]bool) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint16(f func([]bool) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint32(f func([]bool) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint64(f func([]bool) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintptr(f func([]bool) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapByte(f func([]bool) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapRune(f func([]bool) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat32(f func([]bool) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat64(f func([]bool) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex64(f func([]bool) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex128(f func([]bool) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapAny(f func([]bool) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapBoolOption(f func([]bool) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapStringOption(f func([]bool) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapIntOption(f func([]bool) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt8Option(f func([]bool) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt16Option(f func([]bool) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt32Option(f func([]bool) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt64Option(f func([]bool) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintOption(f func([]bool) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint8Option(f func([]bool) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint16Option(f func([]bool) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint32Option(f func([]bool) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint64Option(f func([]bool) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintptrOption(f func([]bool) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapByteOption(f func([]bool) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapRuneOption(f func([]bool) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat32Option(f func([]bool) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat64Option(f func([]bool) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex64Option(f func([]bool) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex128Option(f func([]bool) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapAnyOption(f func([]bool) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapBoolArray(f func([]bool) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapStringArray(f func([]bool) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapIntArray(f func([]bool) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt8Array(f func([]bool) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt16Array(f func([]bool) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt32Array(f func([]bool) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt64Array(f func([]bool) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintArray(f func([]bool) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint8Array(f func([]bool) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint16Array(f func([]bool) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint32Array(f func([]bool) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint64Array(f func([]bool) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintptrArray(f func([]bool) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapByteArray(f func([]bool) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapRuneArray(f func([]bool) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat32Array(f func([]bool) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat64Array(f func([]bool) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex64Array(f func([]bool) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex128Array(f func([]bool) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapAnyArray(f func([]bool) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapBoolList(f func([]bool) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapStringList(f func([]bool) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapIntList(f func([]bool) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt8List(f func([]bool) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt16List(f func([]bool) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt32List(f func([]bool) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapInt64List(f func([]bool) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintList(f func([]bool) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint8List(f func([]bool) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint16List(f func([]bool) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint32List(f func([]bool) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUint64List(f func([]bool) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapUintptrList(f func([]bool) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapByteList(f func([]bool) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapRuneList(f func([]bool) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat32List(f func([]bool) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapFloat64List(f func([]bool) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex64List(f func([]bool) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapComplex128List(f func([]bool) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) MapAnyList(f func([]bool) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapBool(f func([]string) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapString(f func([]string) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt(f func([]string) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt8(f func([]string) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt16(f func([]string) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt32(f func([]string) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt64(f func([]string) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint(f func([]string) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint8(f func([]string) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint16(f func([]string) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint32(f func([]string) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint64(f func([]string) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintptr(f func([]string) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapByte(f func([]string) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapRune(f func([]string) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat32(f func([]string) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat64(f func([]string) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex64(f func([]string) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex128(f func([]string) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapAny(f func([]string) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapBoolOption(f func([]string) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapStringOption(f func([]string) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapIntOption(f func([]string) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt8Option(f func([]string) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt16Option(f func([]string) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt32Option(f func([]string) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt64Option(f func([]string) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintOption(f func([]string) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint8Option(f func([]string) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint16Option(f func([]string) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint32Option(f func([]string) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint64Option(f func([]string) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintptrOption(f func([]string) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapByteOption(f func([]string) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapRuneOption(f func([]string) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat32Option(f func([]string) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat64Option(f func([]string) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex64Option(f func([]string) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex128Option(f func([]string) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapAnyOption(f func([]string) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapBoolArray(f func([]string) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapStringArray(f func([]string) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapIntArray(f func([]string) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt8Array(f func([]string) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt16Array(f func([]string) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt32Array(f func([]string) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt64Array(f func([]string) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintArray(f func([]string) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint8Array(f func([]string) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint16Array(f func([]string) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint32Array(f func([]string) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint64Array(f func([]string) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintptrArray(f func([]string) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapByteArray(f func([]string) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapRuneArray(f func([]string) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat32Array(f func([]string) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat64Array(f func([]string) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex64Array(f func([]string) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex128Array(f func([]string) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapAnyArray(f func([]string) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapBoolList(f func([]string) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapStringList(f func([]string) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapIntList(f func([]string) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt8List(f func([]string) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt16List(f func([]string) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt32List(f func([]string) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapInt64List(f func([]string) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintList(f func([]string) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint8List(f func([]string) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint16List(f func([]string) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint32List(f func([]string) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUint64List(f func([]string) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapUintptrList(f func([]string) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapByteList(f func([]string) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapRuneList(f func([]string) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat32List(f func([]string) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapFloat64List(f func([]string) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex64List(f func([]string) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapComplex128List(f func([]string) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) MapAnyList(f func([]string) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapBool(f func([]int) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapString(f func([]int) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt(f func([]int) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt8(f func([]int) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt16(f func([]int) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt32(f func([]int) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt64(f func([]int) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint(f func([]int) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint8(f func([]int) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint16(f func([]int) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint32(f func([]int) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint64(f func([]int) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintptr(f func([]int) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapByte(f func([]int) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapRune(f func([]int) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat32(f func([]int) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat64(f func([]int) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex64(f func([]int) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex128(f func([]int) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapAny(f func([]int) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapBoolOption(f func([]int) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapStringOption(f func([]int) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapIntOption(f func([]int) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt8Option(f func([]int) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt16Option(f func([]int) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt32Option(f func([]int) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt64Option(f func([]int) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintOption(f func([]int) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint8Option(f func([]int) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint16Option(f func([]int) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint32Option(f func([]int) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint64Option(f func([]int) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintptrOption(f func([]int) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapByteOption(f func([]int) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapRuneOption(f func([]int) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat32Option(f func([]int) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat64Option(f func([]int) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex64Option(f func([]int) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex128Option(f func([]int) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapAnyOption(f func([]int) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapBoolArray(f func([]int) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapStringArray(f func([]int) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapIntArray(f func([]int) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt8Array(f func([]int) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt16Array(f func([]int) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt32Array(f func([]int) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt64Array(f func([]int) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintArray(f func([]int) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint8Array(f func([]int) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint16Array(f func([]int) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint32Array(f func([]int) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint64Array(f func([]int) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintptrArray(f func([]int) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapByteArray(f func([]int) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapRuneArray(f func([]int) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat32Array(f func([]int) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat64Array(f func([]int) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex64Array(f func([]int) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex128Array(f func([]int) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapAnyArray(f func([]int) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapBoolList(f func([]int) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapStringList(f func([]int) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapIntList(f func([]int) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt8List(f func([]int) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt16List(f func([]int) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt32List(f func([]int) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapInt64List(f func([]int) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintList(f func([]int) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint8List(f func([]int) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint16List(f func([]int) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint32List(f func([]int) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUint64List(f func([]int) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapUintptrList(f func([]int) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapByteList(f func([]int) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapRuneList(f func([]int) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat32List(f func([]int) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapFloat64List(f func([]int) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex64List(f func([]int) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapComplex128List(f func([]int) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) MapAnyList(f func([]int) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapBool(f func([]int8) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapString(f func([]int8) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt(f func([]int8) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt8(f func([]int8) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt16(f func([]int8) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt32(f func([]int8) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt64(f func([]int8) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint(f func([]int8) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint8(f func([]int8) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint16(f func([]int8) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint32(f func([]int8) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint64(f func([]int8) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintptr(f func([]int8) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapByte(f func([]int8) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapRune(f func([]int8) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat32(f func([]int8) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat64(f func([]int8) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex64(f func([]int8) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex128(f func([]int8) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapAny(f func([]int8) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapBoolOption(f func([]int8) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapStringOption(f func([]int8) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapIntOption(f func([]int8) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt8Option(f func([]int8) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt16Option(f func([]int8) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt32Option(f func([]int8) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt64Option(f func([]int8) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintOption(f func([]int8) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint8Option(f func([]int8) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint16Option(f func([]int8) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint32Option(f func([]int8) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint64Option(f func([]int8) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintptrOption(f func([]int8) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapByteOption(f func([]int8) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapRuneOption(f func([]int8) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat32Option(f func([]int8) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat64Option(f func([]int8) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex64Option(f func([]int8) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex128Option(f func([]int8) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapAnyOption(f func([]int8) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapBoolArray(f func([]int8) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapStringArray(f func([]int8) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapIntArray(f func([]int8) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt8Array(f func([]int8) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt16Array(f func([]int8) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt32Array(f func([]int8) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt64Array(f func([]int8) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintArray(f func([]int8) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint8Array(f func([]int8) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint16Array(f func([]int8) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint32Array(f func([]int8) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint64Array(f func([]int8) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintptrArray(f func([]int8) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapByteArray(f func([]int8) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapRuneArray(f func([]int8) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat32Array(f func([]int8) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat64Array(f func([]int8) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex64Array(f func([]int8) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex128Array(f func([]int8) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapAnyArray(f func([]int8) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapBoolList(f func([]int8) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapStringList(f func([]int8) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapIntList(f func([]int8) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt8List(f func([]int8) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt16List(f func([]int8) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt32List(f func([]int8) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapInt64List(f func([]int8) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintList(f func([]int8) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint8List(f func([]int8) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint16List(f func([]int8) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint32List(f func([]int8) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUint64List(f func([]int8) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapUintptrList(f func([]int8) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapByteList(f func([]int8) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapRuneList(f func([]int8) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat32List(f func([]int8) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapFloat64List(f func([]int8) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex64List(f func([]int8) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapComplex128List(f func([]int8) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) MapAnyList(f func([]int8) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapBool(f func([]int16) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapString(f func([]int16) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt(f func([]int16) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt8(f func([]int16) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt16(f func([]int16) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt32(f func([]int16) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt64(f func([]int16) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint(f func([]int16) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint8(f func([]int16) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint16(f func([]int16) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint32(f func([]int16) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint64(f func([]int16) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintptr(f func([]int16) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapByte(f func([]int16) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapRune(f func([]int16) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat32(f func([]int16) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat64(f func([]int16) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex64(f func([]int16) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex128(f func([]int16) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapAny(f func([]int16) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapBoolOption(f func([]int16) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapStringOption(f func([]int16) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapIntOption(f func([]int16) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt8Option(f func([]int16) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt16Option(f func([]int16) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt32Option(f func([]int16) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt64Option(f func([]int16) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintOption(f func([]int16) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint8Option(f func([]int16) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint16Option(f func([]int16) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint32Option(f func([]int16) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint64Option(f func([]int16) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintptrOption(f func([]int16) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapByteOption(f func([]int16) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapRuneOption(f func([]int16) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat32Option(f func([]int16) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat64Option(f func([]int16) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex64Option(f func([]int16) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex128Option(f func([]int16) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapAnyOption(f func([]int16) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapBoolArray(f func([]int16) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapStringArray(f func([]int16) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapIntArray(f func([]int16) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt8Array(f func([]int16) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt16Array(f func([]int16) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt32Array(f func([]int16) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt64Array(f func([]int16) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintArray(f func([]int16) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint8Array(f func([]int16) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint16Array(f func([]int16) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint32Array(f func([]int16) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint64Array(f func([]int16) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintptrArray(f func([]int16) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapByteArray(f func([]int16) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapRuneArray(f func([]int16) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat32Array(f func([]int16) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat64Array(f func([]int16) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex64Array(f func([]int16) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex128Array(f func([]int16) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapAnyArray(f func([]int16) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapBoolList(f func([]int16) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapStringList(f func([]int16) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapIntList(f func([]int16) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt8List(f func([]int16) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt16List(f func([]int16) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt32List(f func([]int16) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapInt64List(f func([]int16) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintList(f func([]int16) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint8List(f func([]int16) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint16List(f func([]int16) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint32List(f func([]int16) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUint64List(f func([]int16) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapUintptrList(f func([]int16) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapByteList(f func([]int16) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapRuneList(f func([]int16) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat32List(f func([]int16) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapFloat64List(f func([]int16) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex64List(f func([]int16) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapComplex128List(f func([]int16) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) MapAnyList(f func([]int16) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapBool(f func([]int32) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapString(f func([]int32) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt(f func([]int32) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt8(f func([]int32) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt16(f func([]int32) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt32(f func([]int32) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt64(f func([]int32) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint(f func([]int32) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint8(f func([]int32) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint16(f func([]int32) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint32(f func([]int32) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint64(f func([]int32) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintptr(f func([]int32) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapByte(f func([]int32) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapRune(f func([]int32) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat32(f func([]int32) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat64(f func([]int32) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex64(f func([]int32) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex128(f func([]int32) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapAny(f func([]int32) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapBoolOption(f func([]int32) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapStringOption(f func([]int32) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapIntOption(f func([]int32) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt8Option(f func([]int32) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt16Option(f func([]int32) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt32Option(f func([]int32) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt64Option(f func([]int32) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintOption(f func([]int32) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint8Option(f func([]int32) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint16Option(f func([]int32) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint32Option(f func([]int32) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint64Option(f func([]int32) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintptrOption(f func([]int32) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapByteOption(f func([]int32) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapRuneOption(f func([]int32) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat32Option(f func([]int32) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat64Option(f func([]int32) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex64Option(f func([]int32) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex128Option(f func([]int32) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapAnyOption(f func([]int32) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapBoolArray(f func([]int32) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapStringArray(f func([]int32) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapIntArray(f func([]int32) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt8Array(f func([]int32) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt16Array(f func([]int32) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt32Array(f func([]int32) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt64Array(f func([]int32) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintArray(f func([]int32) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint8Array(f func([]int32) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint16Array(f func([]int32) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint32Array(f func([]int32) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint64Array(f func([]int32) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintptrArray(f func([]int32) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapByteArray(f func([]int32) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapRuneArray(f func([]int32) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat32Array(f func([]int32) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat64Array(f func([]int32) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex64Array(f func([]int32) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex128Array(f func([]int32) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapAnyArray(f func([]int32) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapBoolList(f func([]int32) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapStringList(f func([]int32) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapIntList(f func([]int32) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt8List(f func([]int32) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt16List(f func([]int32) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt32List(f func([]int32) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapInt64List(f func([]int32) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintList(f func([]int32) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint8List(f func([]int32) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint16List(f func([]int32) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint32List(f func([]int32) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUint64List(f func([]int32) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapUintptrList(f func([]int32) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapByteList(f func([]int32) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapRuneList(f func([]int32) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat32List(f func([]int32) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapFloat64List(f func([]int32) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex64List(f func([]int32) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapComplex128List(f func([]int32) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) MapAnyList(f func([]int32) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapBool(f func([]int64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapString(f func([]int64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt(f func([]int64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt8(f func([]int64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt16(f func([]int64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt32(f func([]int64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt64(f func([]int64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint(f func([]int64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint8(f func([]int64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint16(f func([]int64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint32(f func([]int64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint64(f func([]int64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintptr(f func([]int64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapByte(f func([]int64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapRune(f func([]int64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat32(f func([]int64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat64(f func([]int64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex64(f func([]int64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex128(f func([]int64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapAny(f func([]int64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapBoolOption(f func([]int64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapStringOption(f func([]int64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapIntOption(f func([]int64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt8Option(f func([]int64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt16Option(f func([]int64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt32Option(f func([]int64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt64Option(f func([]int64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintOption(f func([]int64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint8Option(f func([]int64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint16Option(f func([]int64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint32Option(f func([]int64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint64Option(f func([]int64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintptrOption(f func([]int64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapByteOption(f func([]int64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapRuneOption(f func([]int64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat32Option(f func([]int64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat64Option(f func([]int64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex64Option(f func([]int64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex128Option(f func([]int64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapAnyOption(f func([]int64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapBoolArray(f func([]int64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapStringArray(f func([]int64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapIntArray(f func([]int64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt8Array(f func([]int64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt16Array(f func([]int64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt32Array(f func([]int64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt64Array(f func([]int64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintArray(f func([]int64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint8Array(f func([]int64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint16Array(f func([]int64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint32Array(f func([]int64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint64Array(f func([]int64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintptrArray(f func([]int64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapByteArray(f func([]int64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapRuneArray(f func([]int64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat32Array(f func([]int64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat64Array(f func([]int64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex64Array(f func([]int64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex128Array(f func([]int64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapAnyArray(f func([]int64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapBoolList(f func([]int64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapStringList(f func([]int64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapIntList(f func([]int64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt8List(f func([]int64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt16List(f func([]int64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt32List(f func([]int64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapInt64List(f func([]int64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintList(f func([]int64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint8List(f func([]int64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint16List(f func([]int64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint32List(f func([]int64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUint64List(f func([]int64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapUintptrList(f func([]int64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapByteList(f func([]int64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapRuneList(f func([]int64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat32List(f func([]int64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapFloat64List(f func([]int64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex64List(f func([]int64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapComplex128List(f func([]int64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) MapAnyList(f func([]int64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapBool(f func([]uint) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapString(f func([]uint) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt(f func([]uint) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt8(f func([]uint) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt16(f func([]uint) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt32(f func([]uint) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt64(f func([]uint) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint(f func([]uint) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint8(f func([]uint) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint16(f func([]uint) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint32(f func([]uint) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint64(f func([]uint) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintptr(f func([]uint) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapByte(f func([]uint) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapRune(f func([]uint) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat32(f func([]uint) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat64(f func([]uint) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex64(f func([]uint) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex128(f func([]uint) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapAny(f func([]uint) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapBoolOption(f func([]uint) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapStringOption(f func([]uint) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapIntOption(f func([]uint) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt8Option(f func([]uint) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt16Option(f func([]uint) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt32Option(f func([]uint) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt64Option(f func([]uint) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintOption(f func([]uint) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint8Option(f func([]uint) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint16Option(f func([]uint) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint32Option(f func([]uint) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint64Option(f func([]uint) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintptrOption(f func([]uint) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapByteOption(f func([]uint) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapRuneOption(f func([]uint) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat32Option(f func([]uint) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat64Option(f func([]uint) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex64Option(f func([]uint) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex128Option(f func([]uint) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapAnyOption(f func([]uint) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapBoolArray(f func([]uint) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapStringArray(f func([]uint) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapIntArray(f func([]uint) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt8Array(f func([]uint) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt16Array(f func([]uint) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt32Array(f func([]uint) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt64Array(f func([]uint) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintArray(f func([]uint) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint8Array(f func([]uint) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint16Array(f func([]uint) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint32Array(f func([]uint) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint64Array(f func([]uint) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintptrArray(f func([]uint) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapByteArray(f func([]uint) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapRuneArray(f func([]uint) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat32Array(f func([]uint) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat64Array(f func([]uint) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex64Array(f func([]uint) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex128Array(f func([]uint) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapAnyArray(f func([]uint) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapBoolList(f func([]uint) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapStringList(f func([]uint) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapIntList(f func([]uint) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt8List(f func([]uint) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt16List(f func([]uint) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt32List(f func([]uint) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapInt64List(f func([]uint) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintList(f func([]uint) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint8List(f func([]uint) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint16List(f func([]uint) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint32List(f func([]uint) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUint64List(f func([]uint) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapUintptrList(f func([]uint) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapByteList(f func([]uint) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapRuneList(f func([]uint) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat32List(f func([]uint) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapFloat64List(f func([]uint) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex64List(f func([]uint) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapComplex128List(f func([]uint) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) MapAnyList(f func([]uint) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapBool(f func([]uint8) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapString(f func([]uint8) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt(f func([]uint8) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt8(f func([]uint8) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt16(f func([]uint8) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt32(f func([]uint8) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt64(f func([]uint8) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint(f func([]uint8) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint8(f func([]uint8) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint16(f func([]uint8) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint32(f func([]uint8) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint64(f func([]uint8) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintptr(f func([]uint8) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapByte(f func([]uint8) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapRune(f func([]uint8) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat32(f func([]uint8) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat64(f func([]uint8) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex64(f func([]uint8) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex128(f func([]uint8) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapAny(f func([]uint8) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapBoolOption(f func([]uint8) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapStringOption(f func([]uint8) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapIntOption(f func([]uint8) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt8Option(f func([]uint8) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt16Option(f func([]uint8) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt32Option(f func([]uint8) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt64Option(f func([]uint8) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintOption(f func([]uint8) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint8Option(f func([]uint8) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint16Option(f func([]uint8) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint32Option(f func([]uint8) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint64Option(f func([]uint8) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintptrOption(f func([]uint8) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapByteOption(f func([]uint8) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapRuneOption(f func([]uint8) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat32Option(f func([]uint8) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat64Option(f func([]uint8) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex64Option(f func([]uint8) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex128Option(f func([]uint8) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapAnyOption(f func([]uint8) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapBoolArray(f func([]uint8) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapStringArray(f func([]uint8) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapIntArray(f func([]uint8) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt8Array(f func([]uint8) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt16Array(f func([]uint8) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt32Array(f func([]uint8) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt64Array(f func([]uint8) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintArray(f func([]uint8) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint8Array(f func([]uint8) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint16Array(f func([]uint8) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint32Array(f func([]uint8) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint64Array(f func([]uint8) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintptrArray(f func([]uint8) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapByteArray(f func([]uint8) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapRuneArray(f func([]uint8) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat32Array(f func([]uint8) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat64Array(f func([]uint8) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex64Array(f func([]uint8) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex128Array(f func([]uint8) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapAnyArray(f func([]uint8) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapBoolList(f func([]uint8) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapStringList(f func([]uint8) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapIntList(f func([]uint8) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt8List(f func([]uint8) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt16List(f func([]uint8) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt32List(f func([]uint8) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapInt64List(f func([]uint8) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintList(f func([]uint8) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint8List(f func([]uint8) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint16List(f func([]uint8) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint32List(f func([]uint8) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUint64List(f func([]uint8) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapUintptrList(f func([]uint8) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapByteList(f func([]uint8) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapRuneList(f func([]uint8) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat32List(f func([]uint8) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapFloat64List(f func([]uint8) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex64List(f func([]uint8) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapComplex128List(f func([]uint8) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) MapAnyList(f func([]uint8) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapBool(f func([]uint16) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapString(f func([]uint16) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt(f func([]uint16) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt8(f func([]uint16) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt16(f func([]uint16) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt32(f func([]uint16) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt64(f func([]uint16) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint(f func([]uint16) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint8(f func([]uint16) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint16(f func([]uint16) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint32(f func([]uint16) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint64(f func([]uint16) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintptr(f func([]uint16) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapByte(f func([]uint16) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapRune(f func([]uint16) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat32(f func([]uint16) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat64(f func([]uint16) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex64(f func([]uint16) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex128(f func([]uint16) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapAny(f func([]uint16) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapBoolOption(f func([]uint16) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapStringOption(f func([]uint16) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapIntOption(f func([]uint16) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt8Option(f func([]uint16) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt16Option(f func([]uint16) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt32Option(f func([]uint16) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt64Option(f func([]uint16) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintOption(f func([]uint16) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint8Option(f func([]uint16) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint16Option(f func([]uint16) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint32Option(f func([]uint16) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint64Option(f func([]uint16) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintptrOption(f func([]uint16) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapByteOption(f func([]uint16) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapRuneOption(f func([]uint16) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat32Option(f func([]uint16) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat64Option(f func([]uint16) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex64Option(f func([]uint16) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex128Option(f func([]uint16) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapAnyOption(f func([]uint16) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapBoolArray(f func([]uint16) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapStringArray(f func([]uint16) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapIntArray(f func([]uint16) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt8Array(f func([]uint16) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt16Array(f func([]uint16) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt32Array(f func([]uint16) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt64Array(f func([]uint16) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintArray(f func([]uint16) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint8Array(f func([]uint16) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint16Array(f func([]uint16) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint32Array(f func([]uint16) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint64Array(f func([]uint16) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintptrArray(f func([]uint16) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapByteArray(f func([]uint16) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapRuneArray(f func([]uint16) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat32Array(f func([]uint16) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat64Array(f func([]uint16) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex64Array(f func([]uint16) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex128Array(f func([]uint16) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapAnyArray(f func([]uint16) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapBoolList(f func([]uint16) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapStringList(f func([]uint16) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapIntList(f func([]uint16) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt8List(f func([]uint16) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt16List(f func([]uint16) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt32List(f func([]uint16) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapInt64List(f func([]uint16) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintList(f func([]uint16) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint8List(f func([]uint16) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint16List(f func([]uint16) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint32List(f func([]uint16) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUint64List(f func([]uint16) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapUintptrList(f func([]uint16) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapByteList(f func([]uint16) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapRuneList(f func([]uint16) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat32List(f func([]uint16) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapFloat64List(f func([]uint16) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex64List(f func([]uint16) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapComplex128List(f func([]uint16) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) MapAnyList(f func([]uint16) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapBool(f func([]uint32) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapString(f func([]uint32) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt(f func([]uint32) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt8(f func([]uint32) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt16(f func([]uint32) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt32(f func([]uint32) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt64(f func([]uint32) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint(f func([]uint32) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint8(f func([]uint32) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint16(f func([]uint32) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint32(f func([]uint32) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint64(f func([]uint32) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintptr(f func([]uint32) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapByte(f func([]uint32) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapRune(f func([]uint32) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat32(f func([]uint32) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat64(f func([]uint32) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex64(f func([]uint32) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex128(f func([]uint32) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapAny(f func([]uint32) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapBoolOption(f func([]uint32) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapStringOption(f func([]uint32) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapIntOption(f func([]uint32) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt8Option(f func([]uint32) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt16Option(f func([]uint32) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt32Option(f func([]uint32) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt64Option(f func([]uint32) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintOption(f func([]uint32) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint8Option(f func([]uint32) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint16Option(f func([]uint32) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint32Option(f func([]uint32) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint64Option(f func([]uint32) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintptrOption(f func([]uint32) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapByteOption(f func([]uint32) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapRuneOption(f func([]uint32) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat32Option(f func([]uint32) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat64Option(f func([]uint32) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex64Option(f func([]uint32) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex128Option(f func([]uint32) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapAnyOption(f func([]uint32) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapBoolArray(f func([]uint32) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapStringArray(f func([]uint32) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapIntArray(f func([]uint32) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt8Array(f func([]uint32) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt16Array(f func([]uint32) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt32Array(f func([]uint32) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt64Array(f func([]uint32) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintArray(f func([]uint32) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint8Array(f func([]uint32) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint16Array(f func([]uint32) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint32Array(f func([]uint32) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint64Array(f func([]uint32) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintptrArray(f func([]uint32) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapByteArray(f func([]uint32) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapRuneArray(f func([]uint32) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat32Array(f func([]uint32) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat64Array(f func([]uint32) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex64Array(f func([]uint32) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex128Array(f func([]uint32) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapAnyArray(f func([]uint32) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapBoolList(f func([]uint32) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapStringList(f func([]uint32) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapIntList(f func([]uint32) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt8List(f func([]uint32) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt16List(f func([]uint32) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt32List(f func([]uint32) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapInt64List(f func([]uint32) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintList(f func([]uint32) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint8List(f func([]uint32) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint16List(f func([]uint32) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint32List(f func([]uint32) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUint64List(f func([]uint32) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapUintptrList(f func([]uint32) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapByteList(f func([]uint32) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapRuneList(f func([]uint32) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat32List(f func([]uint32) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapFloat64List(f func([]uint32) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex64List(f func([]uint32) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapComplex128List(f func([]uint32) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) MapAnyList(f func([]uint32) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapBool(f func([]uint64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapString(f func([]uint64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt(f func([]uint64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt8(f func([]uint64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt16(f func([]uint64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt32(f func([]uint64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt64(f func([]uint64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint(f func([]uint64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint8(f func([]uint64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint16(f func([]uint64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint32(f func([]uint64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint64(f func([]uint64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintptr(f func([]uint64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapByte(f func([]uint64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapRune(f func([]uint64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat32(f func([]uint64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat64(f func([]uint64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex64(f func([]uint64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex128(f func([]uint64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapAny(f func([]uint64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapBoolOption(f func([]uint64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapStringOption(f func([]uint64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapIntOption(f func([]uint64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt8Option(f func([]uint64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt16Option(f func([]uint64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt32Option(f func([]uint64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt64Option(f func([]uint64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintOption(f func([]uint64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint8Option(f func([]uint64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint16Option(f func([]uint64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint32Option(f func([]uint64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint64Option(f func([]uint64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintptrOption(f func([]uint64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapByteOption(f func([]uint64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapRuneOption(f func([]uint64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat32Option(f func([]uint64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat64Option(f func([]uint64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex64Option(f func([]uint64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex128Option(f func([]uint64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapAnyOption(f func([]uint64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapBoolArray(f func([]uint64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapStringArray(f func([]uint64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapIntArray(f func([]uint64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt8Array(f func([]uint64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt16Array(f func([]uint64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt32Array(f func([]uint64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt64Array(f func([]uint64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintArray(f func([]uint64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint8Array(f func([]uint64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint16Array(f func([]uint64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint32Array(f func([]uint64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint64Array(f func([]uint64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintptrArray(f func([]uint64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapByteArray(f func([]uint64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapRuneArray(f func([]uint64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat32Array(f func([]uint64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat64Array(f func([]uint64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex64Array(f func([]uint64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex128Array(f func([]uint64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapAnyArray(f func([]uint64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapBoolList(f func([]uint64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapStringList(f func([]uint64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapIntList(f func([]uint64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt8List(f func([]uint64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt16List(f func([]uint64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt32List(f func([]uint64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapInt64List(f func([]uint64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintList(f func([]uint64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint8List(f func([]uint64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint16List(f func([]uint64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint32List(f func([]uint64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUint64List(f func([]uint64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapUintptrList(f func([]uint64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapByteList(f func([]uint64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapRuneList(f func([]uint64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat32List(f func([]uint64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapFloat64List(f func([]uint64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex64List(f func([]uint64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapComplex128List(f func([]uint64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) MapAnyList(f func([]uint64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapBool(f func([]uintptr) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapString(f func([]uintptr) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt(f func([]uintptr) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt8(f func([]uintptr) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt16(f func([]uintptr) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt32(f func([]uintptr) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt64(f func([]uintptr) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint(f func([]uintptr) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint8(f func([]uintptr) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint16(f func([]uintptr) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint32(f func([]uintptr) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint64(f func([]uintptr) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintptr(f func([]uintptr) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapByte(f func([]uintptr) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapRune(f func([]uintptr) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat32(f func([]uintptr) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat64(f func([]uintptr) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex64(f func([]uintptr) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex128(f func([]uintptr) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapAny(f func([]uintptr) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapBoolOption(f func([]uintptr) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapStringOption(f func([]uintptr) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapIntOption(f func([]uintptr) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt8Option(f func([]uintptr) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt16Option(f func([]uintptr) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt32Option(f func([]uintptr) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt64Option(f func([]uintptr) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintOption(f func([]uintptr) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint8Option(f func([]uintptr) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint16Option(f func([]uintptr) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint32Option(f func([]uintptr) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint64Option(f func([]uintptr) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintptrOption(f func([]uintptr) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapByteOption(f func([]uintptr) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapRuneOption(f func([]uintptr) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat32Option(f func([]uintptr) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat64Option(f func([]uintptr) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex64Option(f func([]uintptr) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex128Option(f func([]uintptr) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapAnyOption(f func([]uintptr) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapBoolArray(f func([]uintptr) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapStringArray(f func([]uintptr) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapIntArray(f func([]uintptr) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt8Array(f func([]uintptr) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt16Array(f func([]uintptr) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt32Array(f func([]uintptr) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt64Array(f func([]uintptr) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintArray(f func([]uintptr) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint8Array(f func([]uintptr) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint16Array(f func([]uintptr) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint32Array(f func([]uintptr) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint64Array(f func([]uintptr) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintptrArray(f func([]uintptr) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapByteArray(f func([]uintptr) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapRuneArray(f func([]uintptr) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat32Array(f func([]uintptr) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat64Array(f func([]uintptr) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex64Array(f func([]uintptr) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex128Array(f func([]uintptr) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapAnyArray(f func([]uintptr) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapBoolList(f func([]uintptr) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapStringList(f func([]uintptr) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapIntList(f func([]uintptr) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt8List(f func([]uintptr) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt16List(f func([]uintptr) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt32List(f func([]uintptr) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapInt64List(f func([]uintptr) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintList(f func([]uintptr) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint8List(f func([]uintptr) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint16List(f func([]uintptr) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint32List(f func([]uintptr) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUint64List(f func([]uintptr) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapUintptrList(f func([]uintptr) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapByteList(f func([]uintptr) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapRuneList(f func([]uintptr) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat32List(f func([]uintptr) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapFloat64List(f func([]uintptr) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex64List(f func([]uintptr) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapComplex128List(f func([]uintptr) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) MapAnyList(f func([]uintptr) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapBool(f func([]byte) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapString(f func([]byte) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt(f func([]byte) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt8(f func([]byte) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt16(f func([]byte) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt32(f func([]byte) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt64(f func([]byte) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint(f func([]byte) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint8(f func([]byte) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint16(f func([]byte) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint32(f func([]byte) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint64(f func([]byte) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintptr(f func([]byte) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapByte(f func([]byte) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapRune(f func([]byte) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat32(f func([]byte) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat64(f func([]byte) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex64(f func([]byte) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex128(f func([]byte) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapAny(f func([]byte) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapBoolOption(f func([]byte) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapStringOption(f func([]byte) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapIntOption(f func([]byte) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt8Option(f func([]byte) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt16Option(f func([]byte) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt32Option(f func([]byte) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt64Option(f func([]byte) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintOption(f func([]byte) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint8Option(f func([]byte) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint16Option(f func([]byte) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint32Option(f func([]byte) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint64Option(f func([]byte) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintptrOption(f func([]byte) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapByteOption(f func([]byte) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapRuneOption(f func([]byte) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat32Option(f func([]byte) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat64Option(f func([]byte) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex64Option(f func([]byte) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex128Option(f func([]byte) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapAnyOption(f func([]byte) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapBoolArray(f func([]byte) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapStringArray(f func([]byte) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapIntArray(f func([]byte) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt8Array(f func([]byte) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt16Array(f func([]byte) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt32Array(f func([]byte) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt64Array(f func([]byte) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintArray(f func([]byte) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint8Array(f func([]byte) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint16Array(f func([]byte) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint32Array(f func([]byte) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint64Array(f func([]byte) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintptrArray(f func([]byte) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapByteArray(f func([]byte) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapRuneArray(f func([]byte) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat32Array(f func([]byte) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat64Array(f func([]byte) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex64Array(f func([]byte) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex128Array(f func([]byte) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapAnyArray(f func([]byte) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapBoolList(f func([]byte) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapStringList(f func([]byte) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapIntList(f func([]byte) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt8List(f func([]byte) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt16List(f func([]byte) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt32List(f func([]byte) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapInt64List(f func([]byte) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintList(f func([]byte) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint8List(f func([]byte) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint16List(f func([]byte) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint32List(f func([]byte) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUint64List(f func([]byte) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapUintptrList(f func([]byte) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapByteList(f func([]byte) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapRuneList(f func([]byte) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat32List(f func([]byte) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapFloat64List(f func([]byte) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex64List(f func([]byte) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapComplex128List(f func([]byte) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) MapAnyList(f func([]byte) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapBool(f func([]rune) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapString(f func([]rune) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt(f func([]rune) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt8(f func([]rune) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt16(f func([]rune) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt32(f func([]rune) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt64(f func([]rune) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint(f func([]rune) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint8(f func([]rune) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint16(f func([]rune) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint32(f func([]rune) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint64(f func([]rune) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintptr(f func([]rune) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapByte(f func([]rune) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapRune(f func([]rune) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat32(f func([]rune) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat64(f func([]rune) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex64(f func([]rune) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex128(f func([]rune) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapAny(f func([]rune) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapBoolOption(f func([]rune) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapStringOption(f func([]rune) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapIntOption(f func([]rune) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt8Option(f func([]rune) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt16Option(f func([]rune) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt32Option(f func([]rune) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt64Option(f func([]rune) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintOption(f func([]rune) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint8Option(f func([]rune) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint16Option(f func([]rune) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint32Option(f func([]rune) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint64Option(f func([]rune) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintptrOption(f func([]rune) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapByteOption(f func([]rune) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapRuneOption(f func([]rune) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat32Option(f func([]rune) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat64Option(f func([]rune) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex64Option(f func([]rune) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex128Option(f func([]rune) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapAnyOption(f func([]rune) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapBoolArray(f func([]rune) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapStringArray(f func([]rune) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapIntArray(f func([]rune) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt8Array(f func([]rune) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt16Array(f func([]rune) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt32Array(f func([]rune) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt64Array(f func([]rune) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintArray(f func([]rune) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint8Array(f func([]rune) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint16Array(f func([]rune) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint32Array(f func([]rune) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint64Array(f func([]rune) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintptrArray(f func([]rune) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapByteArray(f func([]rune) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapRuneArray(f func([]rune) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat32Array(f func([]rune) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat64Array(f func([]rune) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex64Array(f func([]rune) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex128Array(f func([]rune) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapAnyArray(f func([]rune) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapBoolList(f func([]rune) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapStringList(f func([]rune) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapIntList(f func([]rune) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt8List(f func([]rune) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt16List(f func([]rune) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt32List(f func([]rune) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapInt64List(f func([]rune) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintList(f func([]rune) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint8List(f func([]rune) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint16List(f func([]rune) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint32List(f func([]rune) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUint64List(f func([]rune) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapUintptrList(f func([]rune) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapByteList(f func([]rune) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapRuneList(f func([]rune) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat32List(f func([]rune) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapFloat64List(f func([]rune) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex64List(f func([]rune) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapComplex128List(f func([]rune) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) MapAnyList(f func([]rune) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapBool(f func([]float32) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapString(f func([]float32) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt(f func([]float32) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt8(f func([]float32) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt16(f func([]float32) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt32(f func([]float32) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt64(f func([]float32) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint(f func([]float32) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint8(f func([]float32) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint16(f func([]float32) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint32(f func([]float32) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint64(f func([]float32) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintptr(f func([]float32) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapByte(f func([]float32) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapRune(f func([]float32) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat32(f func([]float32) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat64(f func([]float32) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex64(f func([]float32) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex128(f func([]float32) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapAny(f func([]float32) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapBoolOption(f func([]float32) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapStringOption(f func([]float32) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapIntOption(f func([]float32) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt8Option(f func([]float32) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt16Option(f func([]float32) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt32Option(f func([]float32) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt64Option(f func([]float32) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintOption(f func([]float32) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint8Option(f func([]float32) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint16Option(f func([]float32) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint32Option(f func([]float32) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint64Option(f func([]float32) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintptrOption(f func([]float32) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapByteOption(f func([]float32) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapRuneOption(f func([]float32) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat32Option(f func([]float32) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat64Option(f func([]float32) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex64Option(f func([]float32) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex128Option(f func([]float32) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapAnyOption(f func([]float32) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapBoolArray(f func([]float32) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapStringArray(f func([]float32) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapIntArray(f func([]float32) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt8Array(f func([]float32) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt16Array(f func([]float32) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt32Array(f func([]float32) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt64Array(f func([]float32) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintArray(f func([]float32) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint8Array(f func([]float32) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint16Array(f func([]float32) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint32Array(f func([]float32) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint64Array(f func([]float32) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintptrArray(f func([]float32) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapByteArray(f func([]float32) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapRuneArray(f func([]float32) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat32Array(f func([]float32) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat64Array(f func([]float32) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex64Array(f func([]float32) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex128Array(f func([]float32) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapAnyArray(f func([]float32) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapBoolList(f func([]float32) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapStringList(f func([]float32) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapIntList(f func([]float32) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt8List(f func([]float32) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt16List(f func([]float32) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt32List(f func([]float32) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapInt64List(f func([]float32) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintList(f func([]float32) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint8List(f func([]float32) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint16List(f func([]float32) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint32List(f func([]float32) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUint64List(f func([]float32) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapUintptrList(f func([]float32) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapByteList(f func([]float32) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapRuneList(f func([]float32) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat32List(f func([]float32) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapFloat64List(f func([]float32) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex64List(f func([]float32) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapComplex128List(f func([]float32) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) MapAnyList(f func([]float32) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapBool(f func([]float64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapString(f func([]float64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt(f func([]float64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt8(f func([]float64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt16(f func([]float64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt32(f func([]float64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt64(f func([]float64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint(f func([]float64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint8(f func([]float64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint16(f func([]float64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint32(f func([]float64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint64(f func([]float64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintptr(f func([]float64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapByte(f func([]float64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapRune(f func([]float64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat32(f func([]float64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat64(f func([]float64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex64(f func([]float64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex128(f func([]float64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapAny(f func([]float64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapBoolOption(f func([]float64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapStringOption(f func([]float64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapIntOption(f func([]float64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt8Option(f func([]float64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt16Option(f func([]float64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt32Option(f func([]float64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt64Option(f func([]float64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintOption(f func([]float64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint8Option(f func([]float64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint16Option(f func([]float64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint32Option(f func([]float64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint64Option(f func([]float64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintptrOption(f func([]float64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapByteOption(f func([]float64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapRuneOption(f func([]float64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat32Option(f func([]float64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat64Option(f func([]float64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex64Option(f func([]float64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex128Option(f func([]float64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapAnyOption(f func([]float64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapBoolArray(f func([]float64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapStringArray(f func([]float64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapIntArray(f func([]float64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt8Array(f func([]float64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt16Array(f func([]float64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt32Array(f func([]float64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt64Array(f func([]float64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintArray(f func([]float64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint8Array(f func([]float64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint16Array(f func([]float64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint32Array(f func([]float64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint64Array(f func([]float64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintptrArray(f func([]float64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapByteArray(f func([]float64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapRuneArray(f func([]float64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat32Array(f func([]float64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat64Array(f func([]float64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex64Array(f func([]float64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex128Array(f func([]float64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapAnyArray(f func([]float64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapBoolList(f func([]float64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapStringList(f func([]float64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapIntList(f func([]float64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt8List(f func([]float64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt16List(f func([]float64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt32List(f func([]float64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapInt64List(f func([]float64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintList(f func([]float64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint8List(f func([]float64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint16List(f func([]float64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint32List(f func([]float64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUint64List(f func([]float64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapUintptrList(f func([]float64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapByteList(f func([]float64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapRuneList(f func([]float64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat32List(f func([]float64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapFloat64List(f func([]float64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex64List(f func([]float64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapComplex128List(f func([]float64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) MapAnyList(f func([]float64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapBool(f func([]complex64) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapString(f func([]complex64) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt(f func([]complex64) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt8(f func([]complex64) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt16(f func([]complex64) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt32(f func([]complex64) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt64(f func([]complex64) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint(f func([]complex64) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint8(f func([]complex64) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint16(f func([]complex64) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint32(f func([]complex64) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint64(f func([]complex64) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintptr(f func([]complex64) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapByte(f func([]complex64) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapRune(f func([]complex64) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat32(f func([]complex64) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat64(f func([]complex64) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex64(f func([]complex64) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex128(f func([]complex64) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapAny(f func([]complex64) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapBoolOption(f func([]complex64) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapStringOption(f func([]complex64) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapIntOption(f func([]complex64) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt8Option(f func([]complex64) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt16Option(f func([]complex64) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt32Option(f func([]complex64) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt64Option(f func([]complex64) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintOption(f func([]complex64) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint8Option(f func([]complex64) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint16Option(f func([]complex64) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint32Option(f func([]complex64) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint64Option(f func([]complex64) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintptrOption(f func([]complex64) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapByteOption(f func([]complex64) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapRuneOption(f func([]complex64) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat32Option(f func([]complex64) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat64Option(f func([]complex64) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex64Option(f func([]complex64) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex128Option(f func([]complex64) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapAnyOption(f func([]complex64) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapBoolArray(f func([]complex64) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapStringArray(f func([]complex64) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapIntArray(f func([]complex64) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt8Array(f func([]complex64) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt16Array(f func([]complex64) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt32Array(f func([]complex64) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt64Array(f func([]complex64) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintArray(f func([]complex64) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint8Array(f func([]complex64) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint16Array(f func([]complex64) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint32Array(f func([]complex64) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint64Array(f func([]complex64) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintptrArray(f func([]complex64) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapByteArray(f func([]complex64) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapRuneArray(f func([]complex64) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat32Array(f func([]complex64) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat64Array(f func([]complex64) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex64Array(f func([]complex64) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex128Array(f func([]complex64) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapAnyArray(f func([]complex64) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapBoolList(f func([]complex64) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapStringList(f func([]complex64) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapIntList(f func([]complex64) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt8List(f func([]complex64) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt16List(f func([]complex64) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt32List(f func([]complex64) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapInt64List(f func([]complex64) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintList(f func([]complex64) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint8List(f func([]complex64) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint16List(f func([]complex64) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint32List(f func([]complex64) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUint64List(f func([]complex64) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapUintptrList(f func([]complex64) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapByteList(f func([]complex64) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapRuneList(f func([]complex64) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat32List(f func([]complex64) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapFloat64List(f func([]complex64) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex64List(f func([]complex64) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapComplex128List(f func([]complex64) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) MapAnyList(f func([]complex64) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapBool(f func([]complex128) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapString(f func([]complex128) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt(f func([]complex128) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt8(f func([]complex128) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt16(f func([]complex128) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt32(f func([]complex128) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt64(f func([]complex128) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint(f func([]complex128) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint8(f func([]complex128) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint16(f func([]complex128) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint32(f func([]complex128) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint64(f func([]complex128) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintptr(f func([]complex128) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapByte(f func([]complex128) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapRune(f func([]complex128) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat32(f func([]complex128) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat64(f func([]complex128) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex64(f func([]complex128) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex128(f func([]complex128) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapAny(f func([]complex128) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapBoolOption(f func([]complex128) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapStringOption(f func([]complex128) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapIntOption(f func([]complex128) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt8Option(f func([]complex128) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt16Option(f func([]complex128) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt32Option(f func([]complex128) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt64Option(f func([]complex128) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintOption(f func([]complex128) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint8Option(f func([]complex128) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint16Option(f func([]complex128) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint32Option(f func([]complex128) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint64Option(f func([]complex128) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintptrOption(f func([]complex128) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapByteOption(f func([]complex128) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapRuneOption(f func([]complex128) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat32Option(f func([]complex128) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat64Option(f func([]complex128) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex64Option(f func([]complex128) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex128Option(f func([]complex128) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapAnyOption(f func([]complex128) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapBoolArray(f func([]complex128) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapStringArray(f func([]complex128) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapIntArray(f func([]complex128) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt8Array(f func([]complex128) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt16Array(f func([]complex128) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt32Array(f func([]complex128) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt64Array(f func([]complex128) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintArray(f func([]complex128) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint8Array(f func([]complex128) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint16Array(f func([]complex128) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint32Array(f func([]complex128) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint64Array(f func([]complex128) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintptrArray(f func([]complex128) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapByteArray(f func([]complex128) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapRuneArray(f func([]complex128) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat32Array(f func([]complex128) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat64Array(f func([]complex128) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex64Array(f func([]complex128) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex128Array(f func([]complex128) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapAnyArray(f func([]complex128) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapBoolList(f func([]complex128) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapStringList(f func([]complex128) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapIntList(f func([]complex128) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt8List(f func([]complex128) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt16List(f func([]complex128) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt32List(f func([]complex128) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapInt64List(f func([]complex128) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintList(f func([]complex128) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint8List(f func([]complex128) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint16List(f func([]complex128) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint32List(f func([]complex128) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUint64List(f func([]complex128) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapUintptrList(f func([]complex128) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapByteList(f func([]complex128) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapRuneList(f func([]complex128) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat32List(f func([]complex128) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapFloat64List(f func([]complex128) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex64List(f func([]complex128) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapComplex128List(f func([]complex128) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) MapAnyList(f func([]complex128) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapBool(f func([]Any) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapString(f func([]Any) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt(f func([]Any) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt8(f func([]Any) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt16(f func([]Any) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt32(f func([]Any) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt64(f func([]Any) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint(f func([]Any) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint8(f func([]Any) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint16(f func([]Any) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint32(f func([]Any) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint64(f func([]Any) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintptr(f func([]Any) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapByte(f func([]Any) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapRune(f func([]Any) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat32(f func([]Any) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat64(f func([]Any) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex64(f func([]Any) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex128(f func([]Any) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapAny(f func([]Any) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapBoolOption(f func([]Any) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapStringOption(f func([]Any) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapIntOption(f func([]Any) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt8Option(f func([]Any) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt16Option(f func([]Any) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt32Option(f func([]Any) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt64Option(f func([]Any) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintOption(f func([]Any) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint8Option(f func([]Any) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint16Option(f func([]Any) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint32Option(f func([]Any) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint64Option(f func([]Any) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintptrOption(f func([]Any) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapByteOption(f func([]Any) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapRuneOption(f func([]Any) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat32Option(f func([]Any) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat64Option(f func([]Any) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex64Option(f func([]Any) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex128Option(f func([]Any) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapAnyOption(f func([]Any) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapBoolArray(f func([]Any) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapStringArray(f func([]Any) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapIntArray(f func([]Any) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt8Array(f func([]Any) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt16Array(f func([]Any) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt32Array(f func([]Any) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt64Array(f func([]Any) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintArray(f func([]Any) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint8Array(f func([]Any) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint16Array(f func([]Any) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint32Array(f func([]Any) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint64Array(f func([]Any) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintptrArray(f func([]Any) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapByteArray(f func([]Any) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapRuneArray(f func([]Any) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat32Array(f func([]Any) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat64Array(f func([]Any) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex64Array(f func([]Any) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex128Array(f func([]Any) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapAnyArray(f func([]Any) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapBoolList(f func([]Any) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapStringList(f func([]Any) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapIntList(f func([]Any) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt8List(f func([]Any) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt16List(f func([]Any) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt32List(f func([]Any) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapInt64List(f func([]Any) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintList(f func([]Any) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint8List(f func([]Any) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint16List(f func([]Any) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint32List(f func([]Any) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUint64List(f func([]Any) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapUintptrList(f func([]Any) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapByteList(f func([]Any) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapRuneList(f func([]Any) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat32List(f func([]Any) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapFloat64List(f func([]Any) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex64List(f func([]Any) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapComplex128List(f func([]Any) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) MapAnyList(f func([]Any) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapBool(f func(BoolList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapString(f func(BoolList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt(f func(BoolList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt8(f func(BoolList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt16(f func(BoolList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt32(f func(BoolList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt64(f func(BoolList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint(f func(BoolList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint8(f func(BoolList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint16(f func(BoolList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint32(f func(BoolList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint64(f func(BoolList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintptr(f func(BoolList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapByte(f func(BoolList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapRune(f func(BoolList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat32(f func(BoolList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat64(f func(BoolList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex64(f func(BoolList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex128(f func(BoolList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapAny(f func(BoolList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapBoolOption(f func(BoolList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapStringOption(f func(BoolList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapIntOption(f func(BoolList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt8Option(f func(BoolList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt16Option(f func(BoolList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt32Option(f func(BoolList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt64Option(f func(BoolList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintOption(f func(BoolList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint8Option(f func(BoolList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint16Option(f func(BoolList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint32Option(f func(BoolList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint64Option(f func(BoolList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintptrOption(f func(BoolList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapByteOption(f func(BoolList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapRuneOption(f func(BoolList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat32Option(f func(BoolList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat64Option(f func(BoolList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex64Option(f func(BoolList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex128Option(f func(BoolList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapAnyOption(f func(BoolList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapBoolArray(f func(BoolList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapStringArray(f func(BoolList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapIntArray(f func(BoolList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt8Array(f func(BoolList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt16Array(f func(BoolList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt32Array(f func(BoolList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt64Array(f func(BoolList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintArray(f func(BoolList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint8Array(f func(BoolList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint16Array(f func(BoolList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint32Array(f func(BoolList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint64Array(f func(BoolList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintptrArray(f func(BoolList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapByteArray(f func(BoolList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapRuneArray(f func(BoolList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat32Array(f func(BoolList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat64Array(f func(BoolList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex64Array(f func(BoolList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex128Array(f func(BoolList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapAnyArray(f func(BoolList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapBoolList(f func(BoolList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapStringList(f func(BoolList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapIntList(f func(BoolList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt8List(f func(BoolList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt16List(f func(BoolList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt32List(f func(BoolList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapInt64List(f func(BoolList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintList(f func(BoolList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint8List(f func(BoolList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint16List(f func(BoolList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint32List(f func(BoolList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUint64List(f func(BoolList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapUintptrList(f func(BoolList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapByteList(f func(BoolList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapRuneList(f func(BoolList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat32List(f func(BoolList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapFloat64List(f func(BoolList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex64List(f func(BoolList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapComplex128List(f func(BoolList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) MapAnyList(f func(BoolList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapBool(f func(StringList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapString(f func(StringList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt(f func(StringList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt8(f func(StringList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt16(f func(StringList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt32(f func(StringList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt64(f func(StringList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint(f func(StringList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint8(f func(StringList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint16(f func(StringList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint32(f func(StringList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint64(f func(StringList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintptr(f func(StringList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapByte(f func(StringList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapRune(f func(StringList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat32(f func(StringList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat64(f func(StringList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex64(f func(StringList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex128(f func(StringList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapAny(f func(StringList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapBoolOption(f func(StringList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapStringOption(f func(StringList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapIntOption(f func(StringList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt8Option(f func(StringList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt16Option(f func(StringList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt32Option(f func(StringList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt64Option(f func(StringList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintOption(f func(StringList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint8Option(f func(StringList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint16Option(f func(StringList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint32Option(f func(StringList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint64Option(f func(StringList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintptrOption(f func(StringList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapByteOption(f func(StringList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapRuneOption(f func(StringList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat32Option(f func(StringList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat64Option(f func(StringList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex64Option(f func(StringList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex128Option(f func(StringList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapAnyOption(f func(StringList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapBoolArray(f func(StringList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapStringArray(f func(StringList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapIntArray(f func(StringList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt8Array(f func(StringList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt16Array(f func(StringList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt32Array(f func(StringList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt64Array(f func(StringList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintArray(f func(StringList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint8Array(f func(StringList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint16Array(f func(StringList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint32Array(f func(StringList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint64Array(f func(StringList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintptrArray(f func(StringList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapByteArray(f func(StringList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapRuneArray(f func(StringList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat32Array(f func(StringList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat64Array(f func(StringList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex64Array(f func(StringList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex128Array(f func(StringList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapAnyArray(f func(StringList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapBoolList(f func(StringList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapStringList(f func(StringList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapIntList(f func(StringList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt8List(f func(StringList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt16List(f func(StringList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt32List(f func(StringList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapInt64List(f func(StringList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintList(f func(StringList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint8List(f func(StringList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint16List(f func(StringList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint32List(f func(StringList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUint64List(f func(StringList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapUintptrList(f func(StringList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapByteList(f func(StringList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapRuneList(f func(StringList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat32List(f func(StringList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapFloat64List(f func(StringList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex64List(f func(StringList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapComplex128List(f func(StringList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) MapAnyList(f func(StringList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapBool(f func(IntList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapString(f func(IntList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt(f func(IntList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt8(f func(IntList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt16(f func(IntList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt32(f func(IntList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt64(f func(IntList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint(f func(IntList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint8(f func(IntList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint16(f func(IntList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint32(f func(IntList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint64(f func(IntList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintptr(f func(IntList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapByte(f func(IntList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapRune(f func(IntList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat32(f func(IntList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat64(f func(IntList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex64(f func(IntList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex128(f func(IntList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapAny(f func(IntList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapBoolOption(f func(IntList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapStringOption(f func(IntList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapIntOption(f func(IntList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt8Option(f func(IntList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt16Option(f func(IntList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt32Option(f func(IntList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt64Option(f func(IntList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintOption(f func(IntList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint8Option(f func(IntList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint16Option(f func(IntList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint32Option(f func(IntList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint64Option(f func(IntList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintptrOption(f func(IntList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapByteOption(f func(IntList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapRuneOption(f func(IntList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat32Option(f func(IntList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat64Option(f func(IntList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex64Option(f func(IntList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex128Option(f func(IntList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapAnyOption(f func(IntList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapBoolArray(f func(IntList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapStringArray(f func(IntList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapIntArray(f func(IntList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt8Array(f func(IntList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt16Array(f func(IntList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt32Array(f func(IntList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt64Array(f func(IntList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintArray(f func(IntList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint8Array(f func(IntList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint16Array(f func(IntList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint32Array(f func(IntList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint64Array(f func(IntList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintptrArray(f func(IntList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapByteArray(f func(IntList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapRuneArray(f func(IntList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat32Array(f func(IntList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat64Array(f func(IntList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex64Array(f func(IntList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex128Array(f func(IntList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapAnyArray(f func(IntList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapBoolList(f func(IntList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapStringList(f func(IntList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapIntList(f func(IntList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt8List(f func(IntList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt16List(f func(IntList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt32List(f func(IntList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapInt64List(f func(IntList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintList(f func(IntList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint8List(f func(IntList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint16List(f func(IntList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint32List(f func(IntList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUint64List(f func(IntList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapUintptrList(f func(IntList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapByteList(f func(IntList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapRuneList(f func(IntList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat32List(f func(IntList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapFloat64List(f func(IntList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex64List(f func(IntList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapComplex128List(f func(IntList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) MapAnyList(f func(IntList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapBool(f func(Int8List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapString(f func(Int8List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt(f func(Int8List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt8(f func(Int8List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt16(f func(Int8List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt32(f func(Int8List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt64(f func(Int8List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint(f func(Int8List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint8(f func(Int8List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint16(f func(Int8List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint32(f func(Int8List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint64(f func(Int8List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintptr(f func(Int8List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapByte(f func(Int8List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapRune(f func(Int8List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat32(f func(Int8List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat64(f func(Int8List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex64(f func(Int8List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex128(f func(Int8List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapAny(f func(Int8List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapBoolOption(f func(Int8List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapStringOption(f func(Int8List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapIntOption(f func(Int8List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt8Option(f func(Int8List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt16Option(f func(Int8List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt32Option(f func(Int8List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt64Option(f func(Int8List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintOption(f func(Int8List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint8Option(f func(Int8List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint16Option(f func(Int8List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint32Option(f func(Int8List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint64Option(f func(Int8List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintptrOption(f func(Int8List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapByteOption(f func(Int8List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapRuneOption(f func(Int8List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat32Option(f func(Int8List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat64Option(f func(Int8List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex64Option(f func(Int8List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex128Option(f func(Int8List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapAnyOption(f func(Int8List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapBoolArray(f func(Int8List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapStringArray(f func(Int8List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapIntArray(f func(Int8List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt8Array(f func(Int8List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt16Array(f func(Int8List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt32Array(f func(Int8List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt64Array(f func(Int8List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintArray(f func(Int8List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint8Array(f func(Int8List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint16Array(f func(Int8List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint32Array(f func(Int8List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint64Array(f func(Int8List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintptrArray(f func(Int8List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapByteArray(f func(Int8List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapRuneArray(f func(Int8List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat32Array(f func(Int8List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat64Array(f func(Int8List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex64Array(f func(Int8List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex128Array(f func(Int8List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapAnyArray(f func(Int8List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapBoolList(f func(Int8List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapStringList(f func(Int8List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapIntList(f func(Int8List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt8List(f func(Int8List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt16List(f func(Int8List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt32List(f func(Int8List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapInt64List(f func(Int8List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintList(f func(Int8List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint8List(f func(Int8List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint16List(f func(Int8List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint32List(f func(Int8List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUint64List(f func(Int8List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapUintptrList(f func(Int8List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapByteList(f func(Int8List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapRuneList(f func(Int8List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat32List(f func(Int8List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapFloat64List(f func(Int8List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex64List(f func(Int8List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapComplex128List(f func(Int8List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) MapAnyList(f func(Int8List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapBool(f func(Int16List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapString(f func(Int16List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt(f func(Int16List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt8(f func(Int16List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt16(f func(Int16List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt32(f func(Int16List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt64(f func(Int16List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint(f func(Int16List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint8(f func(Int16List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint16(f func(Int16List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint32(f func(Int16List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint64(f func(Int16List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintptr(f func(Int16List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapByte(f func(Int16List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapRune(f func(Int16List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat32(f func(Int16List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat64(f func(Int16List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex64(f func(Int16List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex128(f func(Int16List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapAny(f func(Int16List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapBoolOption(f func(Int16List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapStringOption(f func(Int16List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapIntOption(f func(Int16List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt8Option(f func(Int16List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt16Option(f func(Int16List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt32Option(f func(Int16List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt64Option(f func(Int16List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintOption(f func(Int16List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint8Option(f func(Int16List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint16Option(f func(Int16List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint32Option(f func(Int16List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint64Option(f func(Int16List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintptrOption(f func(Int16List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapByteOption(f func(Int16List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapRuneOption(f func(Int16List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat32Option(f func(Int16List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat64Option(f func(Int16List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex64Option(f func(Int16List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex128Option(f func(Int16List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapAnyOption(f func(Int16List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapBoolArray(f func(Int16List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapStringArray(f func(Int16List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapIntArray(f func(Int16List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt8Array(f func(Int16List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt16Array(f func(Int16List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt32Array(f func(Int16List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt64Array(f func(Int16List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintArray(f func(Int16List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint8Array(f func(Int16List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint16Array(f func(Int16List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint32Array(f func(Int16List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint64Array(f func(Int16List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintptrArray(f func(Int16List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapByteArray(f func(Int16List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapRuneArray(f func(Int16List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat32Array(f func(Int16List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat64Array(f func(Int16List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex64Array(f func(Int16List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex128Array(f func(Int16List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapAnyArray(f func(Int16List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapBoolList(f func(Int16List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapStringList(f func(Int16List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapIntList(f func(Int16List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt8List(f func(Int16List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt16List(f func(Int16List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt32List(f func(Int16List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapInt64List(f func(Int16List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintList(f func(Int16List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint8List(f func(Int16List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint16List(f func(Int16List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint32List(f func(Int16List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUint64List(f func(Int16List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapUintptrList(f func(Int16List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapByteList(f func(Int16List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapRuneList(f func(Int16List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat32List(f func(Int16List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapFloat64List(f func(Int16List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex64List(f func(Int16List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapComplex128List(f func(Int16List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) MapAnyList(f func(Int16List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapBool(f func(Int32List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapString(f func(Int32List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt(f func(Int32List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt8(f func(Int32List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt16(f func(Int32List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt32(f func(Int32List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt64(f func(Int32List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint(f func(Int32List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint8(f func(Int32List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint16(f func(Int32List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint32(f func(Int32List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint64(f func(Int32List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintptr(f func(Int32List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapByte(f func(Int32List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapRune(f func(Int32List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat32(f func(Int32List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat64(f func(Int32List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex64(f func(Int32List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex128(f func(Int32List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapAny(f func(Int32List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapBoolOption(f func(Int32List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapStringOption(f func(Int32List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapIntOption(f func(Int32List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt8Option(f func(Int32List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt16Option(f func(Int32List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt32Option(f func(Int32List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt64Option(f func(Int32List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintOption(f func(Int32List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint8Option(f func(Int32List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint16Option(f func(Int32List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint32Option(f func(Int32List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint64Option(f func(Int32List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintptrOption(f func(Int32List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapByteOption(f func(Int32List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapRuneOption(f func(Int32List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat32Option(f func(Int32List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat64Option(f func(Int32List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex64Option(f func(Int32List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex128Option(f func(Int32List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapAnyOption(f func(Int32List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapBoolArray(f func(Int32List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapStringArray(f func(Int32List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapIntArray(f func(Int32List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt8Array(f func(Int32List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt16Array(f func(Int32List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt32Array(f func(Int32List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt64Array(f func(Int32List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintArray(f func(Int32List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint8Array(f func(Int32List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint16Array(f func(Int32List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint32Array(f func(Int32List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint64Array(f func(Int32List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintptrArray(f func(Int32List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapByteArray(f func(Int32List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapRuneArray(f func(Int32List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat32Array(f func(Int32List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat64Array(f func(Int32List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex64Array(f func(Int32List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex128Array(f func(Int32List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapAnyArray(f func(Int32List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapBoolList(f func(Int32List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapStringList(f func(Int32List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapIntList(f func(Int32List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt8List(f func(Int32List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt16List(f func(Int32List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt32List(f func(Int32List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapInt64List(f func(Int32List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintList(f func(Int32List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint8List(f func(Int32List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint16List(f func(Int32List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint32List(f func(Int32List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUint64List(f func(Int32List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapUintptrList(f func(Int32List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapByteList(f func(Int32List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapRuneList(f func(Int32List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat32List(f func(Int32List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapFloat64List(f func(Int32List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex64List(f func(Int32List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapComplex128List(f func(Int32List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) MapAnyList(f func(Int32List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapBool(f func(Int64List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapString(f func(Int64List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt(f func(Int64List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt8(f func(Int64List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt16(f func(Int64List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt32(f func(Int64List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt64(f func(Int64List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint(f func(Int64List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint8(f func(Int64List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint16(f func(Int64List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint32(f func(Int64List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint64(f func(Int64List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintptr(f func(Int64List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapByte(f func(Int64List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapRune(f func(Int64List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat32(f func(Int64List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat64(f func(Int64List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex64(f func(Int64List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex128(f func(Int64List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapAny(f func(Int64List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapBoolOption(f func(Int64List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapStringOption(f func(Int64List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapIntOption(f func(Int64List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt8Option(f func(Int64List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt16Option(f func(Int64List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt32Option(f func(Int64List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt64Option(f func(Int64List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintOption(f func(Int64List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint8Option(f func(Int64List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint16Option(f func(Int64List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint32Option(f func(Int64List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint64Option(f func(Int64List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintptrOption(f func(Int64List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapByteOption(f func(Int64List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapRuneOption(f func(Int64List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat32Option(f func(Int64List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat64Option(f func(Int64List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex64Option(f func(Int64List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex128Option(f func(Int64List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapAnyOption(f func(Int64List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapBoolArray(f func(Int64List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapStringArray(f func(Int64List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapIntArray(f func(Int64List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt8Array(f func(Int64List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt16Array(f func(Int64List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt32Array(f func(Int64List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt64Array(f func(Int64List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintArray(f func(Int64List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint8Array(f func(Int64List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint16Array(f func(Int64List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint32Array(f func(Int64List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint64Array(f func(Int64List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintptrArray(f func(Int64List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapByteArray(f func(Int64List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapRuneArray(f func(Int64List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat32Array(f func(Int64List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat64Array(f func(Int64List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex64Array(f func(Int64List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex128Array(f func(Int64List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapAnyArray(f func(Int64List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapBoolList(f func(Int64List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapStringList(f func(Int64List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapIntList(f func(Int64List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt8List(f func(Int64List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt16List(f func(Int64List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt32List(f func(Int64List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapInt64List(f func(Int64List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintList(f func(Int64List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint8List(f func(Int64List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint16List(f func(Int64List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint32List(f func(Int64List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUint64List(f func(Int64List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapUintptrList(f func(Int64List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapByteList(f func(Int64List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapRuneList(f func(Int64List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat32List(f func(Int64List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapFloat64List(f func(Int64List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex64List(f func(Int64List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapComplex128List(f func(Int64List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) MapAnyList(f func(Int64List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapBool(f func(UintList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapString(f func(UintList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt(f func(UintList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt8(f func(UintList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt16(f func(UintList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt32(f func(UintList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt64(f func(UintList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint(f func(UintList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint8(f func(UintList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint16(f func(UintList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint32(f func(UintList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint64(f func(UintList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintptr(f func(UintList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapByte(f func(UintList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapRune(f func(UintList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat32(f func(UintList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat64(f func(UintList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex64(f func(UintList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex128(f func(UintList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapAny(f func(UintList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapBoolOption(f func(UintList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapStringOption(f func(UintList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapIntOption(f func(UintList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt8Option(f func(UintList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt16Option(f func(UintList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt32Option(f func(UintList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt64Option(f func(UintList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintOption(f func(UintList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint8Option(f func(UintList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint16Option(f func(UintList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint32Option(f func(UintList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint64Option(f func(UintList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintptrOption(f func(UintList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapByteOption(f func(UintList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapRuneOption(f func(UintList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat32Option(f func(UintList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat64Option(f func(UintList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex64Option(f func(UintList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex128Option(f func(UintList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapAnyOption(f func(UintList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapBoolArray(f func(UintList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapStringArray(f func(UintList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapIntArray(f func(UintList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt8Array(f func(UintList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt16Array(f func(UintList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt32Array(f func(UintList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt64Array(f func(UintList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintArray(f func(UintList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint8Array(f func(UintList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint16Array(f func(UintList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint32Array(f func(UintList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint64Array(f func(UintList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintptrArray(f func(UintList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapByteArray(f func(UintList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapRuneArray(f func(UintList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat32Array(f func(UintList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat64Array(f func(UintList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex64Array(f func(UintList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex128Array(f func(UintList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapAnyArray(f func(UintList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapBoolList(f func(UintList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapStringList(f func(UintList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapIntList(f func(UintList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt8List(f func(UintList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt16List(f func(UintList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt32List(f func(UintList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapInt64List(f func(UintList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintList(f func(UintList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint8List(f func(UintList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint16List(f func(UintList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint32List(f func(UintList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUint64List(f func(UintList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapUintptrList(f func(UintList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapByteList(f func(UintList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapRuneList(f func(UintList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat32List(f func(UintList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapFloat64List(f func(UintList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex64List(f func(UintList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapComplex128List(f func(UintList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) MapAnyList(f func(UintList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapBool(f func(Uint8List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapString(f func(Uint8List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt(f func(Uint8List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt8(f func(Uint8List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt16(f func(Uint8List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt32(f func(Uint8List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt64(f func(Uint8List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint(f func(Uint8List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint8(f func(Uint8List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint16(f func(Uint8List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint32(f func(Uint8List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint64(f func(Uint8List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintptr(f func(Uint8List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapByte(f func(Uint8List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapRune(f func(Uint8List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat32(f func(Uint8List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat64(f func(Uint8List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex64(f func(Uint8List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex128(f func(Uint8List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapAny(f func(Uint8List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapBoolOption(f func(Uint8List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapStringOption(f func(Uint8List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapIntOption(f func(Uint8List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt8Option(f func(Uint8List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt16Option(f func(Uint8List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt32Option(f func(Uint8List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt64Option(f func(Uint8List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintOption(f func(Uint8List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint8Option(f func(Uint8List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint16Option(f func(Uint8List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint32Option(f func(Uint8List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint64Option(f func(Uint8List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintptrOption(f func(Uint8List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapByteOption(f func(Uint8List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapRuneOption(f func(Uint8List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat32Option(f func(Uint8List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat64Option(f func(Uint8List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex64Option(f func(Uint8List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex128Option(f func(Uint8List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapAnyOption(f func(Uint8List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapBoolArray(f func(Uint8List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapStringArray(f func(Uint8List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapIntArray(f func(Uint8List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt8Array(f func(Uint8List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt16Array(f func(Uint8List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt32Array(f func(Uint8List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt64Array(f func(Uint8List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintArray(f func(Uint8List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint8Array(f func(Uint8List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint16Array(f func(Uint8List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint32Array(f func(Uint8List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint64Array(f func(Uint8List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintptrArray(f func(Uint8List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapByteArray(f func(Uint8List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapRuneArray(f func(Uint8List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat32Array(f func(Uint8List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat64Array(f func(Uint8List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex64Array(f func(Uint8List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex128Array(f func(Uint8List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapAnyArray(f func(Uint8List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapBoolList(f func(Uint8List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapStringList(f func(Uint8List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapIntList(f func(Uint8List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt8List(f func(Uint8List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt16List(f func(Uint8List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt32List(f func(Uint8List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapInt64List(f func(Uint8List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintList(f func(Uint8List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint8List(f func(Uint8List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint16List(f func(Uint8List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint32List(f func(Uint8List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUint64List(f func(Uint8List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapUintptrList(f func(Uint8List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapByteList(f func(Uint8List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapRuneList(f func(Uint8List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat32List(f func(Uint8List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapFloat64List(f func(Uint8List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex64List(f func(Uint8List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapComplex128List(f func(Uint8List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) MapAnyList(f func(Uint8List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapBool(f func(Uint16List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapString(f func(Uint16List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt(f func(Uint16List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt8(f func(Uint16List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt16(f func(Uint16List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt32(f func(Uint16List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt64(f func(Uint16List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint(f func(Uint16List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint8(f func(Uint16List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint16(f func(Uint16List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint32(f func(Uint16List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint64(f func(Uint16List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintptr(f func(Uint16List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapByte(f func(Uint16List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapRune(f func(Uint16List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat32(f func(Uint16List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat64(f func(Uint16List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex64(f func(Uint16List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex128(f func(Uint16List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapAny(f func(Uint16List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapBoolOption(f func(Uint16List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapStringOption(f func(Uint16List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapIntOption(f func(Uint16List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt8Option(f func(Uint16List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt16Option(f func(Uint16List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt32Option(f func(Uint16List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt64Option(f func(Uint16List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintOption(f func(Uint16List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint8Option(f func(Uint16List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint16Option(f func(Uint16List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint32Option(f func(Uint16List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint64Option(f func(Uint16List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintptrOption(f func(Uint16List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapByteOption(f func(Uint16List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapRuneOption(f func(Uint16List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat32Option(f func(Uint16List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat64Option(f func(Uint16List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex64Option(f func(Uint16List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex128Option(f func(Uint16List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapAnyOption(f func(Uint16List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapBoolArray(f func(Uint16List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapStringArray(f func(Uint16List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapIntArray(f func(Uint16List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt8Array(f func(Uint16List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt16Array(f func(Uint16List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt32Array(f func(Uint16List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt64Array(f func(Uint16List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintArray(f func(Uint16List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint8Array(f func(Uint16List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint16Array(f func(Uint16List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint32Array(f func(Uint16List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint64Array(f func(Uint16List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintptrArray(f func(Uint16List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapByteArray(f func(Uint16List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapRuneArray(f func(Uint16List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat32Array(f func(Uint16List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat64Array(f func(Uint16List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex64Array(f func(Uint16List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex128Array(f func(Uint16List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapAnyArray(f func(Uint16List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapBoolList(f func(Uint16List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapStringList(f func(Uint16List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapIntList(f func(Uint16List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt8List(f func(Uint16List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt16List(f func(Uint16List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt32List(f func(Uint16List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapInt64List(f func(Uint16List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintList(f func(Uint16List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint8List(f func(Uint16List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint16List(f func(Uint16List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint32List(f func(Uint16List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUint64List(f func(Uint16List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapUintptrList(f func(Uint16List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapByteList(f func(Uint16List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapRuneList(f func(Uint16List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat32List(f func(Uint16List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapFloat64List(f func(Uint16List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex64List(f func(Uint16List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapComplex128List(f func(Uint16List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) MapAnyList(f func(Uint16List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapBool(f func(Uint32List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapString(f func(Uint32List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt(f func(Uint32List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt8(f func(Uint32List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt16(f func(Uint32List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt32(f func(Uint32List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt64(f func(Uint32List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint(f func(Uint32List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint8(f func(Uint32List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint16(f func(Uint32List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint32(f func(Uint32List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint64(f func(Uint32List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintptr(f func(Uint32List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapByte(f func(Uint32List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapRune(f func(Uint32List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat32(f func(Uint32List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat64(f func(Uint32List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex64(f func(Uint32List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex128(f func(Uint32List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapAny(f func(Uint32List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapBoolOption(f func(Uint32List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapStringOption(f func(Uint32List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapIntOption(f func(Uint32List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt8Option(f func(Uint32List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt16Option(f func(Uint32List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt32Option(f func(Uint32List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt64Option(f func(Uint32List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintOption(f func(Uint32List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint8Option(f func(Uint32List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint16Option(f func(Uint32List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint32Option(f func(Uint32List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint64Option(f func(Uint32List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintptrOption(f func(Uint32List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapByteOption(f func(Uint32List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapRuneOption(f func(Uint32List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat32Option(f func(Uint32List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat64Option(f func(Uint32List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex64Option(f func(Uint32List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex128Option(f func(Uint32List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapAnyOption(f func(Uint32List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapBoolArray(f func(Uint32List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapStringArray(f func(Uint32List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapIntArray(f func(Uint32List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt8Array(f func(Uint32List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt16Array(f func(Uint32List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt32Array(f func(Uint32List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt64Array(f func(Uint32List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintArray(f func(Uint32List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint8Array(f func(Uint32List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint16Array(f func(Uint32List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint32Array(f func(Uint32List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint64Array(f func(Uint32List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintptrArray(f func(Uint32List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapByteArray(f func(Uint32List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapRuneArray(f func(Uint32List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat32Array(f func(Uint32List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat64Array(f func(Uint32List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex64Array(f func(Uint32List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex128Array(f func(Uint32List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapAnyArray(f func(Uint32List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapBoolList(f func(Uint32List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapStringList(f func(Uint32List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapIntList(f func(Uint32List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt8List(f func(Uint32List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt16List(f func(Uint32List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt32List(f func(Uint32List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapInt64List(f func(Uint32List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintList(f func(Uint32List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint8List(f func(Uint32List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint16List(f func(Uint32List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint32List(f func(Uint32List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUint64List(f func(Uint32List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapUintptrList(f func(Uint32List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapByteList(f func(Uint32List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapRuneList(f func(Uint32List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat32List(f func(Uint32List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapFloat64List(f func(Uint32List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex64List(f func(Uint32List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapComplex128List(f func(Uint32List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) MapAnyList(f func(Uint32List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapBool(f func(Uint64List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapString(f func(Uint64List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt(f func(Uint64List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt8(f func(Uint64List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt16(f func(Uint64List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt32(f func(Uint64List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt64(f func(Uint64List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint(f func(Uint64List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint8(f func(Uint64List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint16(f func(Uint64List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint32(f func(Uint64List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint64(f func(Uint64List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintptr(f func(Uint64List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapByte(f func(Uint64List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapRune(f func(Uint64List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat32(f func(Uint64List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat64(f func(Uint64List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex64(f func(Uint64List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex128(f func(Uint64List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapAny(f func(Uint64List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapBoolOption(f func(Uint64List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapStringOption(f func(Uint64List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapIntOption(f func(Uint64List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt8Option(f func(Uint64List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt16Option(f func(Uint64List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt32Option(f func(Uint64List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt64Option(f func(Uint64List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintOption(f func(Uint64List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint8Option(f func(Uint64List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint16Option(f func(Uint64List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint32Option(f func(Uint64List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint64Option(f func(Uint64List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintptrOption(f func(Uint64List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapByteOption(f func(Uint64List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapRuneOption(f func(Uint64List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat32Option(f func(Uint64List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat64Option(f func(Uint64List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex64Option(f func(Uint64List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex128Option(f func(Uint64List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapAnyOption(f func(Uint64List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapBoolArray(f func(Uint64List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapStringArray(f func(Uint64List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapIntArray(f func(Uint64List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt8Array(f func(Uint64List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt16Array(f func(Uint64List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt32Array(f func(Uint64List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt64Array(f func(Uint64List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintArray(f func(Uint64List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint8Array(f func(Uint64List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint16Array(f func(Uint64List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint32Array(f func(Uint64List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint64Array(f func(Uint64List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintptrArray(f func(Uint64List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapByteArray(f func(Uint64List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapRuneArray(f func(Uint64List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat32Array(f func(Uint64List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat64Array(f func(Uint64List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex64Array(f func(Uint64List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex128Array(f func(Uint64List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapAnyArray(f func(Uint64List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapBoolList(f func(Uint64List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapStringList(f func(Uint64List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapIntList(f func(Uint64List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt8List(f func(Uint64List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt16List(f func(Uint64List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt32List(f func(Uint64List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapInt64List(f func(Uint64List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintList(f func(Uint64List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint8List(f func(Uint64List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint16List(f func(Uint64List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint32List(f func(Uint64List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUint64List(f func(Uint64List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapUintptrList(f func(Uint64List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapByteList(f func(Uint64List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapRuneList(f func(Uint64List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat32List(f func(Uint64List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapFloat64List(f func(Uint64List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex64List(f func(Uint64List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapComplex128List(f func(Uint64List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) MapAnyList(f func(Uint64List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapBool(f func(UintptrList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapString(f func(UintptrList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt(f func(UintptrList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt8(f func(UintptrList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt16(f func(UintptrList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt32(f func(UintptrList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt64(f func(UintptrList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint(f func(UintptrList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint8(f func(UintptrList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint16(f func(UintptrList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint32(f func(UintptrList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint64(f func(UintptrList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintptr(f func(UintptrList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapByte(f func(UintptrList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapRune(f func(UintptrList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat32(f func(UintptrList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat64(f func(UintptrList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex64(f func(UintptrList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex128(f func(UintptrList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapAny(f func(UintptrList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapBoolOption(f func(UintptrList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapStringOption(f func(UintptrList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapIntOption(f func(UintptrList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt8Option(f func(UintptrList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt16Option(f func(UintptrList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt32Option(f func(UintptrList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt64Option(f func(UintptrList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintOption(f func(UintptrList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint8Option(f func(UintptrList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint16Option(f func(UintptrList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint32Option(f func(UintptrList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint64Option(f func(UintptrList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintptrOption(f func(UintptrList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapByteOption(f func(UintptrList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapRuneOption(f func(UintptrList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat32Option(f func(UintptrList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat64Option(f func(UintptrList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex64Option(f func(UintptrList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex128Option(f func(UintptrList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapAnyOption(f func(UintptrList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapBoolArray(f func(UintptrList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapStringArray(f func(UintptrList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapIntArray(f func(UintptrList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt8Array(f func(UintptrList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt16Array(f func(UintptrList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt32Array(f func(UintptrList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt64Array(f func(UintptrList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintArray(f func(UintptrList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint8Array(f func(UintptrList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint16Array(f func(UintptrList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint32Array(f func(UintptrList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint64Array(f func(UintptrList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintptrArray(f func(UintptrList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapByteArray(f func(UintptrList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapRuneArray(f func(UintptrList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat32Array(f func(UintptrList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat64Array(f func(UintptrList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex64Array(f func(UintptrList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex128Array(f func(UintptrList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapAnyArray(f func(UintptrList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapBoolList(f func(UintptrList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapStringList(f func(UintptrList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapIntList(f func(UintptrList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt8List(f func(UintptrList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt16List(f func(UintptrList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt32List(f func(UintptrList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapInt64List(f func(UintptrList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintList(f func(UintptrList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint8List(f func(UintptrList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint16List(f func(UintptrList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint32List(f func(UintptrList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUint64List(f func(UintptrList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapUintptrList(f func(UintptrList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapByteList(f func(UintptrList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapRuneList(f func(UintptrList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat32List(f func(UintptrList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapFloat64List(f func(UintptrList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex64List(f func(UintptrList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapComplex128List(f func(UintptrList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) MapAnyList(f func(UintptrList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapBool(f func(ByteList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapString(f func(ByteList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt(f func(ByteList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt8(f func(ByteList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt16(f func(ByteList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt32(f func(ByteList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt64(f func(ByteList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint(f func(ByteList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint8(f func(ByteList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint16(f func(ByteList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint32(f func(ByteList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint64(f func(ByteList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintptr(f func(ByteList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapByte(f func(ByteList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapRune(f func(ByteList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat32(f func(ByteList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat64(f func(ByteList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex64(f func(ByteList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex128(f func(ByteList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapAny(f func(ByteList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapBoolOption(f func(ByteList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapStringOption(f func(ByteList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapIntOption(f func(ByteList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt8Option(f func(ByteList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt16Option(f func(ByteList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt32Option(f func(ByteList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt64Option(f func(ByteList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintOption(f func(ByteList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint8Option(f func(ByteList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint16Option(f func(ByteList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint32Option(f func(ByteList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint64Option(f func(ByteList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintptrOption(f func(ByteList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapByteOption(f func(ByteList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapRuneOption(f func(ByteList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat32Option(f func(ByteList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat64Option(f func(ByteList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex64Option(f func(ByteList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex128Option(f func(ByteList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapAnyOption(f func(ByteList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapBoolArray(f func(ByteList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapStringArray(f func(ByteList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapIntArray(f func(ByteList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt8Array(f func(ByteList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt16Array(f func(ByteList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt32Array(f func(ByteList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt64Array(f func(ByteList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintArray(f func(ByteList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint8Array(f func(ByteList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint16Array(f func(ByteList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint32Array(f func(ByteList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint64Array(f func(ByteList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintptrArray(f func(ByteList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapByteArray(f func(ByteList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapRuneArray(f func(ByteList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat32Array(f func(ByteList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat64Array(f func(ByteList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex64Array(f func(ByteList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex128Array(f func(ByteList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapAnyArray(f func(ByteList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapBoolList(f func(ByteList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapStringList(f func(ByteList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapIntList(f func(ByteList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt8List(f func(ByteList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt16List(f func(ByteList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt32List(f func(ByteList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapInt64List(f func(ByteList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintList(f func(ByteList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint8List(f func(ByteList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint16List(f func(ByteList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint32List(f func(ByteList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUint64List(f func(ByteList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapUintptrList(f func(ByteList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapByteList(f func(ByteList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapRuneList(f func(ByteList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat32List(f func(ByteList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapFloat64List(f func(ByteList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex64List(f func(ByteList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapComplex128List(f func(ByteList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) MapAnyList(f func(ByteList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapBool(f func(RuneList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapString(f func(RuneList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt(f func(RuneList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt8(f func(RuneList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt16(f func(RuneList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt32(f func(RuneList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt64(f func(RuneList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint(f func(RuneList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint8(f func(RuneList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint16(f func(RuneList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint32(f func(RuneList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint64(f func(RuneList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintptr(f func(RuneList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapByte(f func(RuneList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapRune(f func(RuneList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat32(f func(RuneList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat64(f func(RuneList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex64(f func(RuneList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex128(f func(RuneList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapAny(f func(RuneList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapBoolOption(f func(RuneList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapStringOption(f func(RuneList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapIntOption(f func(RuneList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt8Option(f func(RuneList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt16Option(f func(RuneList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt32Option(f func(RuneList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt64Option(f func(RuneList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintOption(f func(RuneList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint8Option(f func(RuneList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint16Option(f func(RuneList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint32Option(f func(RuneList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint64Option(f func(RuneList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintptrOption(f func(RuneList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapByteOption(f func(RuneList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapRuneOption(f func(RuneList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat32Option(f func(RuneList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat64Option(f func(RuneList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex64Option(f func(RuneList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex128Option(f func(RuneList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapAnyOption(f func(RuneList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapBoolArray(f func(RuneList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapStringArray(f func(RuneList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapIntArray(f func(RuneList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt8Array(f func(RuneList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt16Array(f func(RuneList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt32Array(f func(RuneList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt64Array(f func(RuneList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintArray(f func(RuneList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint8Array(f func(RuneList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint16Array(f func(RuneList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint32Array(f func(RuneList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint64Array(f func(RuneList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintptrArray(f func(RuneList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapByteArray(f func(RuneList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapRuneArray(f func(RuneList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat32Array(f func(RuneList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat64Array(f func(RuneList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex64Array(f func(RuneList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex128Array(f func(RuneList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapAnyArray(f func(RuneList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapBoolList(f func(RuneList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapStringList(f func(RuneList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapIntList(f func(RuneList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt8List(f func(RuneList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt16List(f func(RuneList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt32List(f func(RuneList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapInt64List(f func(RuneList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintList(f func(RuneList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint8List(f func(RuneList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint16List(f func(RuneList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint32List(f func(RuneList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUint64List(f func(RuneList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapUintptrList(f func(RuneList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapByteList(f func(RuneList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapRuneList(f func(RuneList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat32List(f func(RuneList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapFloat64List(f func(RuneList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex64List(f func(RuneList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapComplex128List(f func(RuneList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) MapAnyList(f func(RuneList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapBool(f func(Float32List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapString(f func(Float32List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt(f func(Float32List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt8(f func(Float32List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt16(f func(Float32List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt32(f func(Float32List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt64(f func(Float32List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint(f func(Float32List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint8(f func(Float32List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint16(f func(Float32List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint32(f func(Float32List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint64(f func(Float32List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintptr(f func(Float32List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapByte(f func(Float32List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapRune(f func(Float32List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat32(f func(Float32List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat64(f func(Float32List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex64(f func(Float32List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex128(f func(Float32List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapAny(f func(Float32List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapBoolOption(f func(Float32List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapStringOption(f func(Float32List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapIntOption(f func(Float32List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt8Option(f func(Float32List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt16Option(f func(Float32List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt32Option(f func(Float32List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt64Option(f func(Float32List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintOption(f func(Float32List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint8Option(f func(Float32List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint16Option(f func(Float32List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint32Option(f func(Float32List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint64Option(f func(Float32List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintptrOption(f func(Float32List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapByteOption(f func(Float32List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapRuneOption(f func(Float32List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat32Option(f func(Float32List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat64Option(f func(Float32List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex64Option(f func(Float32List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex128Option(f func(Float32List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapAnyOption(f func(Float32List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapBoolArray(f func(Float32List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapStringArray(f func(Float32List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapIntArray(f func(Float32List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt8Array(f func(Float32List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt16Array(f func(Float32List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt32Array(f func(Float32List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt64Array(f func(Float32List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintArray(f func(Float32List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint8Array(f func(Float32List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint16Array(f func(Float32List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint32Array(f func(Float32List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint64Array(f func(Float32List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintptrArray(f func(Float32List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapByteArray(f func(Float32List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapRuneArray(f func(Float32List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat32Array(f func(Float32List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat64Array(f func(Float32List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex64Array(f func(Float32List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex128Array(f func(Float32List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapAnyArray(f func(Float32List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapBoolList(f func(Float32List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapStringList(f func(Float32List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapIntList(f func(Float32List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt8List(f func(Float32List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt16List(f func(Float32List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt32List(f func(Float32List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapInt64List(f func(Float32List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintList(f func(Float32List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint8List(f func(Float32List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint16List(f func(Float32List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint32List(f func(Float32List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUint64List(f func(Float32List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapUintptrList(f func(Float32List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapByteList(f func(Float32List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapRuneList(f func(Float32List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat32List(f func(Float32List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapFloat64List(f func(Float32List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex64List(f func(Float32List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapComplex128List(f func(Float32List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) MapAnyList(f func(Float32List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapBool(f func(Float64List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapString(f func(Float64List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt(f func(Float64List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt8(f func(Float64List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt16(f func(Float64List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt32(f func(Float64List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt64(f func(Float64List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint(f func(Float64List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint8(f func(Float64List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint16(f func(Float64List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint32(f func(Float64List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint64(f func(Float64List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintptr(f func(Float64List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapByte(f func(Float64List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapRune(f func(Float64List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat32(f func(Float64List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat64(f func(Float64List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex64(f func(Float64List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex128(f func(Float64List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapAny(f func(Float64List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapBoolOption(f func(Float64List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapStringOption(f func(Float64List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapIntOption(f func(Float64List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt8Option(f func(Float64List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt16Option(f func(Float64List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt32Option(f func(Float64List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt64Option(f func(Float64List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintOption(f func(Float64List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint8Option(f func(Float64List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint16Option(f func(Float64List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint32Option(f func(Float64List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint64Option(f func(Float64List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintptrOption(f func(Float64List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapByteOption(f func(Float64List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapRuneOption(f func(Float64List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat32Option(f func(Float64List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat64Option(f func(Float64List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex64Option(f func(Float64List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex128Option(f func(Float64List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapAnyOption(f func(Float64List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapBoolArray(f func(Float64List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapStringArray(f func(Float64List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapIntArray(f func(Float64List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt8Array(f func(Float64List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt16Array(f func(Float64List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt32Array(f func(Float64List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt64Array(f func(Float64List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintArray(f func(Float64List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint8Array(f func(Float64List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint16Array(f func(Float64List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint32Array(f func(Float64List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint64Array(f func(Float64List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintptrArray(f func(Float64List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapByteArray(f func(Float64List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapRuneArray(f func(Float64List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat32Array(f func(Float64List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat64Array(f func(Float64List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex64Array(f func(Float64List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex128Array(f func(Float64List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapAnyArray(f func(Float64List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapBoolList(f func(Float64List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapStringList(f func(Float64List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapIntList(f func(Float64List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt8List(f func(Float64List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt16List(f func(Float64List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt32List(f func(Float64List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapInt64List(f func(Float64List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintList(f func(Float64List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint8List(f func(Float64List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint16List(f func(Float64List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint32List(f func(Float64List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUint64List(f func(Float64List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapUintptrList(f func(Float64List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapByteList(f func(Float64List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapRuneList(f func(Float64List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat32List(f func(Float64List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapFloat64List(f func(Float64List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex64List(f func(Float64List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapComplex128List(f func(Float64List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) MapAnyList(f func(Float64List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapBool(f func(Complex64List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapString(f func(Complex64List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt(f func(Complex64List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt8(f func(Complex64List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt16(f func(Complex64List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt32(f func(Complex64List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt64(f func(Complex64List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint(f func(Complex64List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint8(f func(Complex64List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint16(f func(Complex64List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint32(f func(Complex64List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint64(f func(Complex64List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintptr(f func(Complex64List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapByte(f func(Complex64List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapRune(f func(Complex64List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat32(f func(Complex64List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat64(f func(Complex64List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex64(f func(Complex64List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex128(f func(Complex64List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapAny(f func(Complex64List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapBoolOption(f func(Complex64List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapStringOption(f func(Complex64List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapIntOption(f func(Complex64List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt8Option(f func(Complex64List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt16Option(f func(Complex64List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt32Option(f func(Complex64List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt64Option(f func(Complex64List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintOption(f func(Complex64List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint8Option(f func(Complex64List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint16Option(f func(Complex64List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint32Option(f func(Complex64List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint64Option(f func(Complex64List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintptrOption(f func(Complex64List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapByteOption(f func(Complex64List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapRuneOption(f func(Complex64List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat32Option(f func(Complex64List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat64Option(f func(Complex64List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex64Option(f func(Complex64List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex128Option(f func(Complex64List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapAnyOption(f func(Complex64List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapBoolArray(f func(Complex64List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapStringArray(f func(Complex64List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapIntArray(f func(Complex64List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt8Array(f func(Complex64List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt16Array(f func(Complex64List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt32Array(f func(Complex64List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt64Array(f func(Complex64List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintArray(f func(Complex64List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint8Array(f func(Complex64List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint16Array(f func(Complex64List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint32Array(f func(Complex64List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint64Array(f func(Complex64List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintptrArray(f func(Complex64List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapByteArray(f func(Complex64List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapRuneArray(f func(Complex64List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat32Array(f func(Complex64List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat64Array(f func(Complex64List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex64Array(f func(Complex64List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex128Array(f func(Complex64List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapAnyArray(f func(Complex64List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapBoolList(f func(Complex64List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapStringList(f func(Complex64List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapIntList(f func(Complex64List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt8List(f func(Complex64List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt16List(f func(Complex64List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt32List(f func(Complex64List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapInt64List(f func(Complex64List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintList(f func(Complex64List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint8List(f func(Complex64List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint16List(f func(Complex64List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint32List(f func(Complex64List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUint64List(f func(Complex64List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapUintptrList(f func(Complex64List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapByteList(f func(Complex64List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapRuneList(f func(Complex64List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat32List(f func(Complex64List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapFloat64List(f func(Complex64List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex64List(f func(Complex64List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapComplex128List(f func(Complex64List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) MapAnyList(f func(Complex64List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapBool(f func(Complex128List) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapString(f func(Complex128List) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt(f func(Complex128List) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt8(f func(Complex128List) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt16(f func(Complex128List) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt32(f func(Complex128List) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt64(f func(Complex128List) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint(f func(Complex128List) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint8(f func(Complex128List) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint16(f func(Complex128List) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint32(f func(Complex128List) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint64(f func(Complex128List) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintptr(f func(Complex128List) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapByte(f func(Complex128List) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapRune(f func(Complex128List) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat32(f func(Complex128List) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat64(f func(Complex128List) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex64(f func(Complex128List) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex128(f func(Complex128List) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapAny(f func(Complex128List) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapBoolOption(f func(Complex128List) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapStringOption(f func(Complex128List) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapIntOption(f func(Complex128List) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt8Option(f func(Complex128List) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt16Option(f func(Complex128List) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt32Option(f func(Complex128List) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt64Option(f func(Complex128List) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintOption(f func(Complex128List) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint8Option(f func(Complex128List) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint16Option(f func(Complex128List) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint32Option(f func(Complex128List) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint64Option(f func(Complex128List) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintptrOption(f func(Complex128List) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapByteOption(f func(Complex128List) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapRuneOption(f func(Complex128List) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat32Option(f func(Complex128List) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat64Option(f func(Complex128List) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex64Option(f func(Complex128List) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex128Option(f func(Complex128List) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapAnyOption(f func(Complex128List) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapBoolArray(f func(Complex128List) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapStringArray(f func(Complex128List) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapIntArray(f func(Complex128List) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt8Array(f func(Complex128List) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt16Array(f func(Complex128List) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt32Array(f func(Complex128List) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt64Array(f func(Complex128List) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintArray(f func(Complex128List) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint8Array(f func(Complex128List) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint16Array(f func(Complex128List) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint32Array(f func(Complex128List) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint64Array(f func(Complex128List) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintptrArray(f func(Complex128List) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapByteArray(f func(Complex128List) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapRuneArray(f func(Complex128List) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat32Array(f func(Complex128List) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat64Array(f func(Complex128List) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex64Array(f func(Complex128List) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex128Array(f func(Complex128List) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapAnyArray(f func(Complex128List) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapBoolList(f func(Complex128List) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapStringList(f func(Complex128List) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapIntList(f func(Complex128List) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt8List(f func(Complex128List) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt16List(f func(Complex128List) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt32List(f func(Complex128List) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapInt64List(f func(Complex128List) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintList(f func(Complex128List) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint8List(f func(Complex128List) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint16List(f func(Complex128List) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint32List(f func(Complex128List) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUint64List(f func(Complex128List) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapUintptrList(f func(Complex128List) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapByteList(f func(Complex128List) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapRuneList(f func(Complex128List) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat32List(f func(Complex128List) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapFloat64List(f func(Complex128List) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex64List(f func(Complex128List) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapComplex128List(f func(Complex128List) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) MapAnyList(f func(Complex128List) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapBool(f func(AnyList) bool) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapString(f func(AnyList) string) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt(f func(AnyList) int) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt8(f func(AnyList) int8) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt16(f func(AnyList) int16) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt32(f func(AnyList) int32) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt64(f func(AnyList) int64) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint(f func(AnyList) uint) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint8(f func(AnyList) uint8) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint16(f func(AnyList) uint16) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint32(f func(AnyList) uint32) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint64(f func(AnyList) uint64) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintptr(f func(AnyList) uintptr) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapByte(f func(AnyList) byte) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapRune(f func(AnyList) rune) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat32(f func(AnyList) float32) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat64(f func(AnyList) float64) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex64(f func(AnyList) complex64) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex128(f func(AnyList) complex128) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapAny(f func(AnyList) Any) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapBoolOption(f func(AnyList) BoolOption) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapStringOption(f func(AnyList) StringOption) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapIntOption(f func(AnyList) IntOption) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt8Option(f func(AnyList) Int8Option) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt16Option(f func(AnyList) Int16Option) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt32Option(f func(AnyList) Int32Option) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt64Option(f func(AnyList) Int64Option) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintOption(f func(AnyList) UintOption) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint8Option(f func(AnyList) Uint8Option) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint16Option(f func(AnyList) Uint16Option) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint32Option(f func(AnyList) Uint32Option) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint64Option(f func(AnyList) Uint64Option) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintptrOption(f func(AnyList) UintptrOption) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapByteOption(f func(AnyList) ByteOption) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapRuneOption(f func(AnyList) RuneOption) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat32Option(f func(AnyList) Float32Option) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat64Option(f func(AnyList) Float64Option) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex64Option(f func(AnyList) Complex64Option) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex128Option(f func(AnyList) Complex128Option) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapAnyOption(f func(AnyList) AnyOption) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapBoolArray(f func(AnyList) []bool) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapStringArray(f func(AnyList) []string) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapIntArray(f func(AnyList) []int) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt8Array(f func(AnyList) []int8) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt16Array(f func(AnyList) []int16) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt32Array(f func(AnyList) []int32) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt64Array(f func(AnyList) []int64) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintArray(f func(AnyList) []uint) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint8Array(f func(AnyList) []uint8) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint16Array(f func(AnyList) []uint16) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint32Array(f func(AnyList) []uint32) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint64Array(f func(AnyList) []uint64) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintptrArray(f func(AnyList) []uintptr) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapByteArray(f func(AnyList) []byte) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapRuneArray(f func(AnyList) []rune) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat32Array(f func(AnyList) []float32) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat64Array(f func(AnyList) []float64) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex64Array(f func(AnyList) []complex64) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex128Array(f func(AnyList) []complex128) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapAnyArray(f func(AnyList) []Any) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapBoolList(f func(AnyList) BoolList) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapStringList(f func(AnyList) StringList) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapIntList(f func(AnyList) IntList) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt8List(f func(AnyList) Int8List) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt16List(f func(AnyList) Int16List) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt32List(f func(AnyList) Int32List) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapInt64List(f func(AnyList) Int64List) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintList(f func(AnyList) UintList) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint8List(f func(AnyList) Uint8List) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint16List(f func(AnyList) Uint16List) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint32List(f func(AnyList) Uint32List) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUint64List(f func(AnyList) Uint64List) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapUintptrList(f func(AnyList) UintptrList) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapByteList(f func(AnyList) ByteList) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapRuneList(f func(AnyList) RuneList) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat32List(f func(AnyList) Float32List) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapFloat64List(f func(AnyList) Float64List) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex64List(f func(AnyList) Complex64List) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapComplex128List(f func(AnyList) Complex128List) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) MapAnyList(f func(AnyList) AnyList) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = *xs.tail
	}
	return acc.Reverse()
}
