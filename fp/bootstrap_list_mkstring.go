// bootstrap_list_mkstring.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

import "fmt"

func (l BoolList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionArrayOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrayOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyListOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionArrayOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrayOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyListOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionArrayOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrayOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyListOptionOptionOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128OptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int8ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int16ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int32ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint8ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint16ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint32ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Uint64ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l UintptrListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex64ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Complex128ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
