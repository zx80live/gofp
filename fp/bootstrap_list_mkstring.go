// bootstrap_list_mkstring.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

import "fmt"

func (l BoolList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64List) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyArrayList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64OptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyOptionList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l BoolListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l StringListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l IntListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Int64ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l ByteListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l RuneListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float32ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l Float64ListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func (l AnyListList) MkString(start, sep, end string) string {
	content := ""
	xs := l
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListToString(*xs.head), sep)
		xs = *xs.tail
	}
	s := len(content)
	if s > 0 {
		content = content[:s-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
