// bootstrap_list_reduce.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) Reduce(f func(bool, bool) bool) bool {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringList) Reduce(f func(string, string) string) string {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntList) Reduce(f func(int, int) int) int {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8List) Reduce(f func(int8, int8) int8) int8 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16List) Reduce(f func(int16, int16) int16) int16 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32List) Reduce(f func(int32, int32) int32) int32 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64List) Reduce(f func(int64, int64) int64) int64 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintList) Reduce(f func(uint, uint) uint) uint {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8List) Reduce(f func(uint8, uint8) uint8) uint8 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16List) Reduce(f func(uint16, uint16) uint16) uint16 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32List) Reduce(f func(uint32, uint32) uint32) uint32 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64List) Reduce(f func(uint64, uint64) uint64) uint64 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrList) Reduce(f func(uintptr, uintptr) uintptr) uintptr {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteList) Reduce(f func(byte, byte) byte) byte {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneList) Reduce(f func(rune, rune) rune) rune {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32List) Reduce(f func(float32, float32) float32) float32 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64List) Reduce(f func(float64, float64) float64) float64 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64List) Reduce(f func(complex64, complex64) complex64) complex64 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128List) Reduce(f func(complex128, complex128) complex128) complex128 {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyList) Reduce(f func(Any, Any) Any) Any {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolOptionList) Reduce(f func(BoolOption, BoolOption) BoolOption) BoolOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringOptionList) Reduce(f func(StringOption, StringOption) StringOption) StringOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntOptionList) Reduce(f func(IntOption, IntOption) IntOption) IntOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8OptionList) Reduce(f func(Int8Option, Int8Option) Int8Option) Int8Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16OptionList) Reduce(f func(Int16Option, Int16Option) Int16Option) Int16Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32OptionList) Reduce(f func(Int32Option, Int32Option) Int32Option) Int32Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64OptionList) Reduce(f func(Int64Option, Int64Option) Int64Option) Int64Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintOptionList) Reduce(f func(UintOption, UintOption) UintOption) UintOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8OptionList) Reduce(f func(Uint8Option, Uint8Option) Uint8Option) Uint8Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16OptionList) Reduce(f func(Uint16Option, Uint16Option) Uint16Option) Uint16Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32OptionList) Reduce(f func(Uint32Option, Uint32Option) Uint32Option) Uint32Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64OptionList) Reduce(f func(Uint64Option, Uint64Option) Uint64Option) Uint64Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrOptionList) Reduce(f func(UintptrOption, UintptrOption) UintptrOption) UintptrOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteOptionList) Reduce(f func(ByteOption, ByteOption) ByteOption) ByteOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneOptionList) Reduce(f func(RuneOption, RuneOption) RuneOption) RuneOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32OptionList) Reduce(f func(Float32Option, Float32Option) Float32Option) Float32Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64OptionList) Reduce(f func(Float64Option, Float64Option) Float64Option) Float64Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64OptionList) Reduce(f func(Complex64Option, Complex64Option) Complex64Option) Complex64Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128OptionList) Reduce(f func(Complex128Option, Complex128Option) Complex128Option) Complex128Option {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyOptionList) Reduce(f func(AnyOption, AnyOption) AnyOption) AnyOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolArrayOptionList) Reduce(f func(BoolArrayOption, BoolArrayOption) BoolArrayOption) BoolArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringArrayOptionList) Reduce(f func(StringArrayOption, StringArrayOption) StringArrayOption) StringArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntArrayOptionList) Reduce(f func(IntArrayOption, IntArrayOption) IntArrayOption) IntArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ArrayOptionList) Reduce(f func(Int8ArrayOption, Int8ArrayOption) Int8ArrayOption) Int8ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ArrayOptionList) Reduce(f func(Int16ArrayOption, Int16ArrayOption) Int16ArrayOption) Int16ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ArrayOptionList) Reduce(f func(Int32ArrayOption, Int32ArrayOption) Int32ArrayOption) Int32ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ArrayOptionList) Reduce(f func(Int64ArrayOption, Int64ArrayOption) Int64ArrayOption) Int64ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintArrayOptionList) Reduce(f func(UintArrayOption, UintArrayOption) UintArrayOption) UintArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ArrayOptionList) Reduce(f func(Uint8ArrayOption, Uint8ArrayOption) Uint8ArrayOption) Uint8ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ArrayOptionList) Reduce(f func(Uint16ArrayOption, Uint16ArrayOption) Uint16ArrayOption) Uint16ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ArrayOptionList) Reduce(f func(Uint32ArrayOption, Uint32ArrayOption) Uint32ArrayOption) Uint32ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ArrayOptionList) Reduce(f func(Uint64ArrayOption, Uint64ArrayOption) Uint64ArrayOption) Uint64ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrArrayOptionList) Reduce(f func(UintptrArrayOption, UintptrArrayOption) UintptrArrayOption) UintptrArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteArrayOptionList) Reduce(f func(ByteArrayOption, ByteArrayOption) ByteArrayOption) ByteArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneArrayOptionList) Reduce(f func(RuneArrayOption, RuneArrayOption) RuneArrayOption) RuneArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ArrayOptionList) Reduce(f func(Float32ArrayOption, Float32ArrayOption) Float32ArrayOption) Float32ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ArrayOptionList) Reduce(f func(Float64ArrayOption, Float64ArrayOption) Float64ArrayOption) Float64ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ArrayOptionList) Reduce(f func(Complex64ArrayOption, Complex64ArrayOption) Complex64ArrayOption) Complex64ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ArrayOptionList) Reduce(f func(Complex128ArrayOption, Complex128ArrayOption) Complex128ArrayOption) Complex128ArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyArrayOptionList) Reduce(f func(AnyArrayOption, AnyArrayOption) AnyArrayOption) AnyArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolArrayArrayOptionList) Reduce(f func(BoolArrayArrayOption, BoolArrayArrayOption) BoolArrayArrayOption) BoolArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringArrayArrayOptionList) Reduce(f func(StringArrayArrayOption, StringArrayArrayOption) StringArrayArrayOption) StringArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntArrayArrayOptionList) Reduce(f func(IntArrayArrayOption, IntArrayArrayOption) IntArrayArrayOption) IntArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ArrayArrayOptionList) Reduce(f func(Int8ArrayArrayOption, Int8ArrayArrayOption) Int8ArrayArrayOption) Int8ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ArrayArrayOptionList) Reduce(f func(Int16ArrayArrayOption, Int16ArrayArrayOption) Int16ArrayArrayOption) Int16ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ArrayArrayOptionList) Reduce(f func(Int32ArrayArrayOption, Int32ArrayArrayOption) Int32ArrayArrayOption) Int32ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ArrayArrayOptionList) Reduce(f func(Int64ArrayArrayOption, Int64ArrayArrayOption) Int64ArrayArrayOption) Int64ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintArrayArrayOptionList) Reduce(f func(UintArrayArrayOption, UintArrayArrayOption) UintArrayArrayOption) UintArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ArrayArrayOptionList) Reduce(f func(Uint8ArrayArrayOption, Uint8ArrayArrayOption) Uint8ArrayArrayOption) Uint8ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ArrayArrayOptionList) Reduce(f func(Uint16ArrayArrayOption, Uint16ArrayArrayOption) Uint16ArrayArrayOption) Uint16ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ArrayArrayOptionList) Reduce(f func(Uint32ArrayArrayOption, Uint32ArrayArrayOption) Uint32ArrayArrayOption) Uint32ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ArrayArrayOptionList) Reduce(f func(Uint64ArrayArrayOption, Uint64ArrayArrayOption) Uint64ArrayArrayOption) Uint64ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrArrayArrayOptionList) Reduce(f func(UintptrArrayArrayOption, UintptrArrayArrayOption) UintptrArrayArrayOption) UintptrArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteArrayArrayOptionList) Reduce(f func(ByteArrayArrayOption, ByteArrayArrayOption) ByteArrayArrayOption) ByteArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneArrayArrayOptionList) Reduce(f func(RuneArrayArrayOption, RuneArrayArrayOption) RuneArrayArrayOption) RuneArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ArrayArrayOptionList) Reduce(f func(Float32ArrayArrayOption, Float32ArrayArrayOption) Float32ArrayArrayOption) Float32ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ArrayArrayOptionList) Reduce(f func(Float64ArrayArrayOption, Float64ArrayArrayOption) Float64ArrayArrayOption) Float64ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ArrayArrayOptionList) Reduce(f func(Complex64ArrayArrayOption, Complex64ArrayArrayOption) Complex64ArrayArrayOption) Complex64ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ArrayArrayOptionList) Reduce(f func(Complex128ArrayArrayOption, Complex128ArrayArrayOption) Complex128ArrayArrayOption) Complex128ArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyArrayArrayOptionList) Reduce(f func(AnyArrayArrayOption, AnyArrayArrayOption) AnyArrayArrayOption) AnyArrayArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolOptionArrayOptionList) Reduce(f func(BoolOptionArrayOption, BoolOptionArrayOption) BoolOptionArrayOption) BoolOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringOptionArrayOptionList) Reduce(f func(StringOptionArrayOption, StringOptionArrayOption) StringOptionArrayOption) StringOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntOptionArrayOptionList) Reduce(f func(IntOptionArrayOption, IntOptionArrayOption) IntOptionArrayOption) IntOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8OptionArrayOptionList) Reduce(f func(Int8OptionArrayOption, Int8OptionArrayOption) Int8OptionArrayOption) Int8OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16OptionArrayOptionList) Reduce(f func(Int16OptionArrayOption, Int16OptionArrayOption) Int16OptionArrayOption) Int16OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32OptionArrayOptionList) Reduce(f func(Int32OptionArrayOption, Int32OptionArrayOption) Int32OptionArrayOption) Int32OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64OptionArrayOptionList) Reduce(f func(Int64OptionArrayOption, Int64OptionArrayOption) Int64OptionArrayOption) Int64OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintOptionArrayOptionList) Reduce(f func(UintOptionArrayOption, UintOptionArrayOption) UintOptionArrayOption) UintOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8OptionArrayOptionList) Reduce(f func(Uint8OptionArrayOption, Uint8OptionArrayOption) Uint8OptionArrayOption) Uint8OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16OptionArrayOptionList) Reduce(f func(Uint16OptionArrayOption, Uint16OptionArrayOption) Uint16OptionArrayOption) Uint16OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32OptionArrayOptionList) Reduce(f func(Uint32OptionArrayOption, Uint32OptionArrayOption) Uint32OptionArrayOption) Uint32OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64OptionArrayOptionList) Reduce(f func(Uint64OptionArrayOption, Uint64OptionArrayOption) Uint64OptionArrayOption) Uint64OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrOptionArrayOptionList) Reduce(f func(UintptrOptionArrayOption, UintptrOptionArrayOption) UintptrOptionArrayOption) UintptrOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteOptionArrayOptionList) Reduce(f func(ByteOptionArrayOption, ByteOptionArrayOption) ByteOptionArrayOption) ByteOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneOptionArrayOptionList) Reduce(f func(RuneOptionArrayOption, RuneOptionArrayOption) RuneOptionArrayOption) RuneOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32OptionArrayOptionList) Reduce(f func(Float32OptionArrayOption, Float32OptionArrayOption) Float32OptionArrayOption) Float32OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64OptionArrayOptionList) Reduce(f func(Float64OptionArrayOption, Float64OptionArrayOption) Float64OptionArrayOption) Float64OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64OptionArrayOptionList) Reduce(f func(Complex64OptionArrayOption, Complex64OptionArrayOption) Complex64OptionArrayOption) Complex64OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128OptionArrayOptionList) Reduce(f func(Complex128OptionArrayOption, Complex128OptionArrayOption) Complex128OptionArrayOption) Complex128OptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyOptionArrayOptionList) Reduce(f func(AnyOptionArrayOption, AnyOptionArrayOption) AnyOptionArrayOption) AnyOptionArrayOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolListOptionList) Reduce(f func(BoolListOption, BoolListOption) BoolListOption) BoolListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringListOptionList) Reduce(f func(StringListOption, StringListOption) StringListOption) StringListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntListOptionList) Reduce(f func(IntListOption, IntListOption) IntListOption) IntListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ListOptionList) Reduce(f func(Int8ListOption, Int8ListOption) Int8ListOption) Int8ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ListOptionList) Reduce(f func(Int16ListOption, Int16ListOption) Int16ListOption) Int16ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ListOptionList) Reduce(f func(Int32ListOption, Int32ListOption) Int32ListOption) Int32ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ListOptionList) Reduce(f func(Int64ListOption, Int64ListOption) Int64ListOption) Int64ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintListOptionList) Reduce(f func(UintListOption, UintListOption) UintListOption) UintListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ListOptionList) Reduce(f func(Uint8ListOption, Uint8ListOption) Uint8ListOption) Uint8ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ListOptionList) Reduce(f func(Uint16ListOption, Uint16ListOption) Uint16ListOption) Uint16ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ListOptionList) Reduce(f func(Uint32ListOption, Uint32ListOption) Uint32ListOption) Uint32ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ListOptionList) Reduce(f func(Uint64ListOption, Uint64ListOption) Uint64ListOption) Uint64ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrListOptionList) Reduce(f func(UintptrListOption, UintptrListOption) UintptrListOption) UintptrListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteListOptionList) Reduce(f func(ByteListOption, ByteListOption) ByteListOption) ByteListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneListOptionList) Reduce(f func(RuneListOption, RuneListOption) RuneListOption) RuneListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ListOptionList) Reduce(f func(Float32ListOption, Float32ListOption) Float32ListOption) Float32ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ListOptionList) Reduce(f func(Float64ListOption, Float64ListOption) Float64ListOption) Float64ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ListOptionList) Reduce(f func(Complex64ListOption, Complex64ListOption) Complex64ListOption) Complex64ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ListOptionList) Reduce(f func(Complex128ListOption, Complex128ListOption) Complex128ListOption) Complex128ListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyListOptionList) Reduce(f func(AnyListOption, AnyListOption) AnyListOption) AnyListOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolOptionOptionList) Reduce(f func(BoolOptionOption, BoolOptionOption) BoolOptionOption) BoolOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringOptionOptionList) Reduce(f func(StringOptionOption, StringOptionOption) StringOptionOption) StringOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntOptionOptionList) Reduce(f func(IntOptionOption, IntOptionOption) IntOptionOption) IntOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8OptionOptionList) Reduce(f func(Int8OptionOption, Int8OptionOption) Int8OptionOption) Int8OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16OptionOptionList) Reduce(f func(Int16OptionOption, Int16OptionOption) Int16OptionOption) Int16OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32OptionOptionList) Reduce(f func(Int32OptionOption, Int32OptionOption) Int32OptionOption) Int32OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64OptionOptionList) Reduce(f func(Int64OptionOption, Int64OptionOption) Int64OptionOption) Int64OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintOptionOptionList) Reduce(f func(UintOptionOption, UintOptionOption) UintOptionOption) UintOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8OptionOptionList) Reduce(f func(Uint8OptionOption, Uint8OptionOption) Uint8OptionOption) Uint8OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16OptionOptionList) Reduce(f func(Uint16OptionOption, Uint16OptionOption) Uint16OptionOption) Uint16OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32OptionOptionList) Reduce(f func(Uint32OptionOption, Uint32OptionOption) Uint32OptionOption) Uint32OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64OptionOptionList) Reduce(f func(Uint64OptionOption, Uint64OptionOption) Uint64OptionOption) Uint64OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrOptionOptionList) Reduce(f func(UintptrOptionOption, UintptrOptionOption) UintptrOptionOption) UintptrOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteOptionOptionList) Reduce(f func(ByteOptionOption, ByteOptionOption) ByteOptionOption) ByteOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneOptionOptionList) Reduce(f func(RuneOptionOption, RuneOptionOption) RuneOptionOption) RuneOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32OptionOptionList) Reduce(f func(Float32OptionOption, Float32OptionOption) Float32OptionOption) Float32OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64OptionOptionList) Reduce(f func(Float64OptionOption, Float64OptionOption) Float64OptionOption) Float64OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64OptionOptionList) Reduce(f func(Complex64OptionOption, Complex64OptionOption) Complex64OptionOption) Complex64OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128OptionOptionList) Reduce(f func(Complex128OptionOption, Complex128OptionOption) Complex128OptionOption) Complex128OptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyOptionOptionList) Reduce(f func(AnyOptionOption, AnyOptionOption) AnyOptionOption) AnyOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolArrayOptionOptionList) Reduce(f func(BoolArrayOptionOption, BoolArrayOptionOption) BoolArrayOptionOption) BoolArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringArrayOptionOptionList) Reduce(f func(StringArrayOptionOption, StringArrayOptionOption) StringArrayOptionOption) StringArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntArrayOptionOptionList) Reduce(f func(IntArrayOptionOption, IntArrayOptionOption) IntArrayOptionOption) IntArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ArrayOptionOptionList) Reduce(f func(Int8ArrayOptionOption, Int8ArrayOptionOption) Int8ArrayOptionOption) Int8ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ArrayOptionOptionList) Reduce(f func(Int16ArrayOptionOption, Int16ArrayOptionOption) Int16ArrayOptionOption) Int16ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ArrayOptionOptionList) Reduce(f func(Int32ArrayOptionOption, Int32ArrayOptionOption) Int32ArrayOptionOption) Int32ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ArrayOptionOptionList) Reduce(f func(Int64ArrayOptionOption, Int64ArrayOptionOption) Int64ArrayOptionOption) Int64ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintArrayOptionOptionList) Reduce(f func(UintArrayOptionOption, UintArrayOptionOption) UintArrayOptionOption) UintArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ArrayOptionOptionList) Reduce(f func(Uint8ArrayOptionOption, Uint8ArrayOptionOption) Uint8ArrayOptionOption) Uint8ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ArrayOptionOptionList) Reduce(f func(Uint16ArrayOptionOption, Uint16ArrayOptionOption) Uint16ArrayOptionOption) Uint16ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ArrayOptionOptionList) Reduce(f func(Uint32ArrayOptionOption, Uint32ArrayOptionOption) Uint32ArrayOptionOption) Uint32ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ArrayOptionOptionList) Reduce(f func(Uint64ArrayOptionOption, Uint64ArrayOptionOption) Uint64ArrayOptionOption) Uint64ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrArrayOptionOptionList) Reduce(f func(UintptrArrayOptionOption, UintptrArrayOptionOption) UintptrArrayOptionOption) UintptrArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteArrayOptionOptionList) Reduce(f func(ByteArrayOptionOption, ByteArrayOptionOption) ByteArrayOptionOption) ByteArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneArrayOptionOptionList) Reduce(f func(RuneArrayOptionOption, RuneArrayOptionOption) RuneArrayOptionOption) RuneArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ArrayOptionOptionList) Reduce(f func(Float32ArrayOptionOption, Float32ArrayOptionOption) Float32ArrayOptionOption) Float32ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ArrayOptionOptionList) Reduce(f func(Float64ArrayOptionOption, Float64ArrayOptionOption) Float64ArrayOptionOption) Float64ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ArrayOptionOptionList) Reduce(f func(Complex64ArrayOptionOption, Complex64ArrayOptionOption) Complex64ArrayOptionOption) Complex64ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ArrayOptionOptionList) Reduce(f func(Complex128ArrayOptionOption, Complex128ArrayOptionOption) Complex128ArrayOptionOption) Complex128ArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyArrayOptionOptionList) Reduce(f func(AnyArrayOptionOption, AnyArrayOptionOption) AnyArrayOptionOption) AnyArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolArrayArrayOptionOptionList) Reduce(f func(BoolArrayArrayOptionOption, BoolArrayArrayOptionOption) BoolArrayArrayOptionOption) BoolArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringArrayArrayOptionOptionList) Reduce(f func(StringArrayArrayOptionOption, StringArrayArrayOptionOption) StringArrayArrayOptionOption) StringArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntArrayArrayOptionOptionList) Reduce(f func(IntArrayArrayOptionOption, IntArrayArrayOptionOption) IntArrayArrayOptionOption) IntArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ArrayArrayOptionOptionList) Reduce(f func(Int8ArrayArrayOptionOption, Int8ArrayArrayOptionOption) Int8ArrayArrayOptionOption) Int8ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ArrayArrayOptionOptionList) Reduce(f func(Int16ArrayArrayOptionOption, Int16ArrayArrayOptionOption) Int16ArrayArrayOptionOption) Int16ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ArrayArrayOptionOptionList) Reduce(f func(Int32ArrayArrayOptionOption, Int32ArrayArrayOptionOption) Int32ArrayArrayOptionOption) Int32ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ArrayArrayOptionOptionList) Reduce(f func(Int64ArrayArrayOptionOption, Int64ArrayArrayOptionOption) Int64ArrayArrayOptionOption) Int64ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintArrayArrayOptionOptionList) Reduce(f func(UintArrayArrayOptionOption, UintArrayArrayOptionOption) UintArrayArrayOptionOption) UintArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ArrayArrayOptionOptionList) Reduce(f func(Uint8ArrayArrayOptionOption, Uint8ArrayArrayOptionOption) Uint8ArrayArrayOptionOption) Uint8ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ArrayArrayOptionOptionList) Reduce(f func(Uint16ArrayArrayOptionOption, Uint16ArrayArrayOptionOption) Uint16ArrayArrayOptionOption) Uint16ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ArrayArrayOptionOptionList) Reduce(f func(Uint32ArrayArrayOptionOption, Uint32ArrayArrayOptionOption) Uint32ArrayArrayOptionOption) Uint32ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ArrayArrayOptionOptionList) Reduce(f func(Uint64ArrayArrayOptionOption, Uint64ArrayArrayOptionOption) Uint64ArrayArrayOptionOption) Uint64ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrArrayArrayOptionOptionList) Reduce(f func(UintptrArrayArrayOptionOption, UintptrArrayArrayOptionOption) UintptrArrayArrayOptionOption) UintptrArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteArrayArrayOptionOptionList) Reduce(f func(ByteArrayArrayOptionOption, ByteArrayArrayOptionOption) ByteArrayArrayOptionOption) ByteArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneArrayArrayOptionOptionList) Reduce(f func(RuneArrayArrayOptionOption, RuneArrayArrayOptionOption) RuneArrayArrayOptionOption) RuneArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ArrayArrayOptionOptionList) Reduce(f func(Float32ArrayArrayOptionOption, Float32ArrayArrayOptionOption) Float32ArrayArrayOptionOption) Float32ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ArrayArrayOptionOptionList) Reduce(f func(Float64ArrayArrayOptionOption, Float64ArrayArrayOptionOption) Float64ArrayArrayOptionOption) Float64ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ArrayArrayOptionOptionList) Reduce(f func(Complex64ArrayArrayOptionOption, Complex64ArrayArrayOptionOption) Complex64ArrayArrayOptionOption) Complex64ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ArrayArrayOptionOptionList) Reduce(f func(Complex128ArrayArrayOptionOption, Complex128ArrayArrayOptionOption) Complex128ArrayArrayOptionOption) Complex128ArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyArrayArrayOptionOptionList) Reduce(f func(AnyArrayArrayOptionOption, AnyArrayArrayOptionOption) AnyArrayArrayOptionOption) AnyArrayArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolOptionArrayOptionOptionList) Reduce(f func(BoolOptionArrayOptionOption, BoolOptionArrayOptionOption) BoolOptionArrayOptionOption) BoolOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringOptionArrayOptionOptionList) Reduce(f func(StringOptionArrayOptionOption, StringOptionArrayOptionOption) StringOptionArrayOptionOption) StringOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntOptionArrayOptionOptionList) Reduce(f func(IntOptionArrayOptionOption, IntOptionArrayOptionOption) IntOptionArrayOptionOption) IntOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8OptionArrayOptionOptionList) Reduce(f func(Int8OptionArrayOptionOption, Int8OptionArrayOptionOption) Int8OptionArrayOptionOption) Int8OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16OptionArrayOptionOptionList) Reduce(f func(Int16OptionArrayOptionOption, Int16OptionArrayOptionOption) Int16OptionArrayOptionOption) Int16OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32OptionArrayOptionOptionList) Reduce(f func(Int32OptionArrayOptionOption, Int32OptionArrayOptionOption) Int32OptionArrayOptionOption) Int32OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64OptionArrayOptionOptionList) Reduce(f func(Int64OptionArrayOptionOption, Int64OptionArrayOptionOption) Int64OptionArrayOptionOption) Int64OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintOptionArrayOptionOptionList) Reduce(f func(UintOptionArrayOptionOption, UintOptionArrayOptionOption) UintOptionArrayOptionOption) UintOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8OptionArrayOptionOptionList) Reduce(f func(Uint8OptionArrayOptionOption, Uint8OptionArrayOptionOption) Uint8OptionArrayOptionOption) Uint8OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16OptionArrayOptionOptionList) Reduce(f func(Uint16OptionArrayOptionOption, Uint16OptionArrayOptionOption) Uint16OptionArrayOptionOption) Uint16OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32OptionArrayOptionOptionList) Reduce(f func(Uint32OptionArrayOptionOption, Uint32OptionArrayOptionOption) Uint32OptionArrayOptionOption) Uint32OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64OptionArrayOptionOptionList) Reduce(f func(Uint64OptionArrayOptionOption, Uint64OptionArrayOptionOption) Uint64OptionArrayOptionOption) Uint64OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrOptionArrayOptionOptionList) Reduce(f func(UintptrOptionArrayOptionOption, UintptrOptionArrayOptionOption) UintptrOptionArrayOptionOption) UintptrOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteOptionArrayOptionOptionList) Reduce(f func(ByteOptionArrayOptionOption, ByteOptionArrayOptionOption) ByteOptionArrayOptionOption) ByteOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneOptionArrayOptionOptionList) Reduce(f func(RuneOptionArrayOptionOption, RuneOptionArrayOptionOption) RuneOptionArrayOptionOption) RuneOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32OptionArrayOptionOptionList) Reduce(f func(Float32OptionArrayOptionOption, Float32OptionArrayOptionOption) Float32OptionArrayOptionOption) Float32OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64OptionArrayOptionOptionList) Reduce(f func(Float64OptionArrayOptionOption, Float64OptionArrayOptionOption) Float64OptionArrayOptionOption) Float64OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64OptionArrayOptionOptionList) Reduce(f func(Complex64OptionArrayOptionOption, Complex64OptionArrayOptionOption) Complex64OptionArrayOptionOption) Complex64OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128OptionArrayOptionOptionList) Reduce(f func(Complex128OptionArrayOptionOption, Complex128OptionArrayOptionOption) Complex128OptionArrayOptionOption) Complex128OptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyOptionArrayOptionOptionList) Reduce(f func(AnyOptionArrayOptionOption, AnyOptionArrayOptionOption) AnyOptionArrayOptionOption) AnyOptionArrayOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolListOptionOptionList) Reduce(f func(BoolListOptionOption, BoolListOptionOption) BoolListOptionOption) BoolListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringListOptionOptionList) Reduce(f func(StringListOptionOption, StringListOptionOption) StringListOptionOption) StringListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntListOptionOptionList) Reduce(f func(IntListOptionOption, IntListOptionOption) IntListOptionOption) IntListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ListOptionOptionList) Reduce(f func(Int8ListOptionOption, Int8ListOptionOption) Int8ListOptionOption) Int8ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ListOptionOptionList) Reduce(f func(Int16ListOptionOption, Int16ListOptionOption) Int16ListOptionOption) Int16ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ListOptionOptionList) Reduce(f func(Int32ListOptionOption, Int32ListOptionOption) Int32ListOptionOption) Int32ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ListOptionOptionList) Reduce(f func(Int64ListOptionOption, Int64ListOptionOption) Int64ListOptionOption) Int64ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintListOptionOptionList) Reduce(f func(UintListOptionOption, UintListOptionOption) UintListOptionOption) UintListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ListOptionOptionList) Reduce(f func(Uint8ListOptionOption, Uint8ListOptionOption) Uint8ListOptionOption) Uint8ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ListOptionOptionList) Reduce(f func(Uint16ListOptionOption, Uint16ListOptionOption) Uint16ListOptionOption) Uint16ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ListOptionOptionList) Reduce(f func(Uint32ListOptionOption, Uint32ListOptionOption) Uint32ListOptionOption) Uint32ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ListOptionOptionList) Reduce(f func(Uint64ListOptionOption, Uint64ListOptionOption) Uint64ListOptionOption) Uint64ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrListOptionOptionList) Reduce(f func(UintptrListOptionOption, UintptrListOptionOption) UintptrListOptionOption) UintptrListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteListOptionOptionList) Reduce(f func(ByteListOptionOption, ByteListOptionOption) ByteListOptionOption) ByteListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneListOptionOptionList) Reduce(f func(RuneListOptionOption, RuneListOptionOption) RuneListOptionOption) RuneListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ListOptionOptionList) Reduce(f func(Float32ListOptionOption, Float32ListOptionOption) Float32ListOptionOption) Float32ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ListOptionOptionList) Reduce(f func(Float64ListOptionOption, Float64ListOptionOption) Float64ListOptionOption) Float64ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ListOptionOptionList) Reduce(f func(Complex64ListOptionOption, Complex64ListOptionOption) Complex64ListOptionOption) Complex64ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ListOptionOptionList) Reduce(f func(Complex128ListOptionOption, Complex128ListOptionOption) Complex128ListOptionOption) Complex128ListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyListOptionOptionList) Reduce(f func(AnyListOptionOption, AnyListOptionOption) AnyListOptionOption) AnyListOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolOptionOptionOptionList) Reduce(f func(BoolOptionOptionOption, BoolOptionOptionOption) BoolOptionOptionOption) BoolOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringOptionOptionOptionList) Reduce(f func(StringOptionOptionOption, StringOptionOptionOption) StringOptionOptionOption) StringOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntOptionOptionOptionList) Reduce(f func(IntOptionOptionOption, IntOptionOptionOption) IntOptionOptionOption) IntOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8OptionOptionOptionList) Reduce(f func(Int8OptionOptionOption, Int8OptionOptionOption) Int8OptionOptionOption) Int8OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16OptionOptionOptionList) Reduce(f func(Int16OptionOptionOption, Int16OptionOptionOption) Int16OptionOptionOption) Int16OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32OptionOptionOptionList) Reduce(f func(Int32OptionOptionOption, Int32OptionOptionOption) Int32OptionOptionOption) Int32OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64OptionOptionOptionList) Reduce(f func(Int64OptionOptionOption, Int64OptionOptionOption) Int64OptionOptionOption) Int64OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintOptionOptionOptionList) Reduce(f func(UintOptionOptionOption, UintOptionOptionOption) UintOptionOptionOption) UintOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8OptionOptionOptionList) Reduce(f func(Uint8OptionOptionOption, Uint8OptionOptionOption) Uint8OptionOptionOption) Uint8OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16OptionOptionOptionList) Reduce(f func(Uint16OptionOptionOption, Uint16OptionOptionOption) Uint16OptionOptionOption) Uint16OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32OptionOptionOptionList) Reduce(f func(Uint32OptionOptionOption, Uint32OptionOptionOption) Uint32OptionOptionOption) Uint32OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64OptionOptionOptionList) Reduce(f func(Uint64OptionOptionOption, Uint64OptionOptionOption) Uint64OptionOptionOption) Uint64OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrOptionOptionOptionList) Reduce(f func(UintptrOptionOptionOption, UintptrOptionOptionOption) UintptrOptionOptionOption) UintptrOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteOptionOptionOptionList) Reduce(f func(ByteOptionOptionOption, ByteOptionOptionOption) ByteOptionOptionOption) ByteOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneOptionOptionOptionList) Reduce(f func(RuneOptionOptionOption, RuneOptionOptionOption) RuneOptionOptionOption) RuneOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32OptionOptionOptionList) Reduce(f func(Float32OptionOptionOption, Float32OptionOptionOption) Float32OptionOptionOption) Float32OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64OptionOptionOptionList) Reduce(f func(Float64OptionOptionOption, Float64OptionOptionOption) Float64OptionOptionOption) Float64OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64OptionOptionOptionList) Reduce(f func(Complex64OptionOptionOption, Complex64OptionOptionOption) Complex64OptionOptionOption) Complex64OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128OptionOptionOptionList) Reduce(f func(Complex128OptionOptionOption, Complex128OptionOptionOption) Complex128OptionOptionOption) Complex128OptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyOptionOptionOptionList) Reduce(f func(AnyOptionOptionOption, AnyOptionOptionOption) AnyOptionOptionOption) AnyOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolArrayOptionOptionOptionList) Reduce(f func(BoolArrayOptionOptionOption, BoolArrayOptionOptionOption) BoolArrayOptionOptionOption) BoolArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringArrayOptionOptionOptionList) Reduce(f func(StringArrayOptionOptionOption, StringArrayOptionOptionOption) StringArrayOptionOptionOption) StringArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntArrayOptionOptionOptionList) Reduce(f func(IntArrayOptionOptionOption, IntArrayOptionOptionOption) IntArrayOptionOptionOption) IntArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ArrayOptionOptionOptionList) Reduce(f func(Int8ArrayOptionOptionOption, Int8ArrayOptionOptionOption) Int8ArrayOptionOptionOption) Int8ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ArrayOptionOptionOptionList) Reduce(f func(Int16ArrayOptionOptionOption, Int16ArrayOptionOptionOption) Int16ArrayOptionOptionOption) Int16ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ArrayOptionOptionOptionList) Reduce(f func(Int32ArrayOptionOptionOption, Int32ArrayOptionOptionOption) Int32ArrayOptionOptionOption) Int32ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ArrayOptionOptionOptionList) Reduce(f func(Int64ArrayOptionOptionOption, Int64ArrayOptionOptionOption) Int64ArrayOptionOptionOption) Int64ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintArrayOptionOptionOptionList) Reduce(f func(UintArrayOptionOptionOption, UintArrayOptionOptionOption) UintArrayOptionOptionOption) UintArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ArrayOptionOptionOptionList) Reduce(f func(Uint8ArrayOptionOptionOption, Uint8ArrayOptionOptionOption) Uint8ArrayOptionOptionOption) Uint8ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ArrayOptionOptionOptionList) Reduce(f func(Uint16ArrayOptionOptionOption, Uint16ArrayOptionOptionOption) Uint16ArrayOptionOptionOption) Uint16ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ArrayOptionOptionOptionList) Reduce(f func(Uint32ArrayOptionOptionOption, Uint32ArrayOptionOptionOption) Uint32ArrayOptionOptionOption) Uint32ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ArrayOptionOptionOptionList) Reduce(f func(Uint64ArrayOptionOptionOption, Uint64ArrayOptionOptionOption) Uint64ArrayOptionOptionOption) Uint64ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrArrayOptionOptionOptionList) Reduce(f func(UintptrArrayOptionOptionOption, UintptrArrayOptionOptionOption) UintptrArrayOptionOptionOption) UintptrArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteArrayOptionOptionOptionList) Reduce(f func(ByteArrayOptionOptionOption, ByteArrayOptionOptionOption) ByteArrayOptionOptionOption) ByteArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneArrayOptionOptionOptionList) Reduce(f func(RuneArrayOptionOptionOption, RuneArrayOptionOptionOption) RuneArrayOptionOptionOption) RuneArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ArrayOptionOptionOptionList) Reduce(f func(Float32ArrayOptionOptionOption, Float32ArrayOptionOptionOption) Float32ArrayOptionOptionOption) Float32ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ArrayOptionOptionOptionList) Reduce(f func(Float64ArrayOptionOptionOption, Float64ArrayOptionOptionOption) Float64ArrayOptionOptionOption) Float64ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ArrayOptionOptionOptionList) Reduce(f func(Complex64ArrayOptionOptionOption, Complex64ArrayOptionOptionOption) Complex64ArrayOptionOptionOption) Complex64ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ArrayOptionOptionOptionList) Reduce(f func(Complex128ArrayOptionOptionOption, Complex128ArrayOptionOptionOption) Complex128ArrayOptionOptionOption) Complex128ArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyArrayOptionOptionOptionList) Reduce(f func(AnyArrayOptionOptionOption, AnyArrayOptionOptionOption) AnyArrayOptionOptionOption) AnyArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolArrayArrayOptionOptionOptionList) Reduce(f func(BoolArrayArrayOptionOptionOption, BoolArrayArrayOptionOptionOption) BoolArrayArrayOptionOptionOption) BoolArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringArrayArrayOptionOptionOptionList) Reduce(f func(StringArrayArrayOptionOptionOption, StringArrayArrayOptionOptionOption) StringArrayArrayOptionOptionOption) StringArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntArrayArrayOptionOptionOptionList) Reduce(f func(IntArrayArrayOptionOptionOption, IntArrayArrayOptionOptionOption) IntArrayArrayOptionOptionOption) IntArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ArrayArrayOptionOptionOptionList) Reduce(f func(Int8ArrayArrayOptionOptionOption, Int8ArrayArrayOptionOptionOption) Int8ArrayArrayOptionOptionOption) Int8ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ArrayArrayOptionOptionOptionList) Reduce(f func(Int16ArrayArrayOptionOptionOption, Int16ArrayArrayOptionOptionOption) Int16ArrayArrayOptionOptionOption) Int16ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ArrayArrayOptionOptionOptionList) Reduce(f func(Int32ArrayArrayOptionOptionOption, Int32ArrayArrayOptionOptionOption) Int32ArrayArrayOptionOptionOption) Int32ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ArrayArrayOptionOptionOptionList) Reduce(f func(Int64ArrayArrayOptionOptionOption, Int64ArrayArrayOptionOptionOption) Int64ArrayArrayOptionOptionOption) Int64ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintArrayArrayOptionOptionOptionList) Reduce(f func(UintArrayArrayOptionOptionOption, UintArrayArrayOptionOptionOption) UintArrayArrayOptionOptionOption) UintArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ArrayArrayOptionOptionOptionList) Reduce(f func(Uint8ArrayArrayOptionOptionOption, Uint8ArrayArrayOptionOptionOption) Uint8ArrayArrayOptionOptionOption) Uint8ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ArrayArrayOptionOptionOptionList) Reduce(f func(Uint16ArrayArrayOptionOptionOption, Uint16ArrayArrayOptionOptionOption) Uint16ArrayArrayOptionOptionOption) Uint16ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ArrayArrayOptionOptionOptionList) Reduce(f func(Uint32ArrayArrayOptionOptionOption, Uint32ArrayArrayOptionOptionOption) Uint32ArrayArrayOptionOptionOption) Uint32ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ArrayArrayOptionOptionOptionList) Reduce(f func(Uint64ArrayArrayOptionOptionOption, Uint64ArrayArrayOptionOptionOption) Uint64ArrayArrayOptionOptionOption) Uint64ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrArrayArrayOptionOptionOptionList) Reduce(f func(UintptrArrayArrayOptionOptionOption, UintptrArrayArrayOptionOptionOption) UintptrArrayArrayOptionOptionOption) UintptrArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteArrayArrayOptionOptionOptionList) Reduce(f func(ByteArrayArrayOptionOptionOption, ByteArrayArrayOptionOptionOption) ByteArrayArrayOptionOptionOption) ByteArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneArrayArrayOptionOptionOptionList) Reduce(f func(RuneArrayArrayOptionOptionOption, RuneArrayArrayOptionOptionOption) RuneArrayArrayOptionOptionOption) RuneArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ArrayArrayOptionOptionOptionList) Reduce(f func(Float32ArrayArrayOptionOptionOption, Float32ArrayArrayOptionOptionOption) Float32ArrayArrayOptionOptionOption) Float32ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ArrayArrayOptionOptionOptionList) Reduce(f func(Float64ArrayArrayOptionOptionOption, Float64ArrayArrayOptionOptionOption) Float64ArrayArrayOptionOptionOption) Float64ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ArrayArrayOptionOptionOptionList) Reduce(f func(Complex64ArrayArrayOptionOptionOption, Complex64ArrayArrayOptionOptionOption) Complex64ArrayArrayOptionOptionOption) Complex64ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ArrayArrayOptionOptionOptionList) Reduce(f func(Complex128ArrayArrayOptionOptionOption, Complex128ArrayArrayOptionOptionOption) Complex128ArrayArrayOptionOptionOption) Complex128ArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyArrayArrayOptionOptionOptionList) Reduce(f func(AnyArrayArrayOptionOptionOption, AnyArrayArrayOptionOptionOption) AnyArrayArrayOptionOptionOption) AnyArrayArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolOptionArrayOptionOptionOptionList) Reduce(f func(BoolOptionArrayOptionOptionOption, BoolOptionArrayOptionOptionOption) BoolOptionArrayOptionOptionOption) BoolOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringOptionArrayOptionOptionOptionList) Reduce(f func(StringOptionArrayOptionOptionOption, StringOptionArrayOptionOptionOption) StringOptionArrayOptionOptionOption) StringOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntOptionArrayOptionOptionOptionList) Reduce(f func(IntOptionArrayOptionOptionOption, IntOptionArrayOptionOptionOption) IntOptionArrayOptionOptionOption) IntOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8OptionArrayOptionOptionOptionList) Reduce(f func(Int8OptionArrayOptionOptionOption, Int8OptionArrayOptionOptionOption) Int8OptionArrayOptionOptionOption) Int8OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16OptionArrayOptionOptionOptionList) Reduce(f func(Int16OptionArrayOptionOptionOption, Int16OptionArrayOptionOptionOption) Int16OptionArrayOptionOptionOption) Int16OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32OptionArrayOptionOptionOptionList) Reduce(f func(Int32OptionArrayOptionOptionOption, Int32OptionArrayOptionOptionOption) Int32OptionArrayOptionOptionOption) Int32OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64OptionArrayOptionOptionOptionList) Reduce(f func(Int64OptionArrayOptionOptionOption, Int64OptionArrayOptionOptionOption) Int64OptionArrayOptionOptionOption) Int64OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintOptionArrayOptionOptionOptionList) Reduce(f func(UintOptionArrayOptionOptionOption, UintOptionArrayOptionOptionOption) UintOptionArrayOptionOptionOption) UintOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8OptionArrayOptionOptionOptionList) Reduce(f func(Uint8OptionArrayOptionOptionOption, Uint8OptionArrayOptionOptionOption) Uint8OptionArrayOptionOptionOption) Uint8OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16OptionArrayOptionOptionOptionList) Reduce(f func(Uint16OptionArrayOptionOptionOption, Uint16OptionArrayOptionOptionOption) Uint16OptionArrayOptionOptionOption) Uint16OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32OptionArrayOptionOptionOptionList) Reduce(f func(Uint32OptionArrayOptionOptionOption, Uint32OptionArrayOptionOptionOption) Uint32OptionArrayOptionOptionOption) Uint32OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64OptionArrayOptionOptionOptionList) Reduce(f func(Uint64OptionArrayOptionOptionOption, Uint64OptionArrayOptionOptionOption) Uint64OptionArrayOptionOptionOption) Uint64OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrOptionArrayOptionOptionOptionList) Reduce(f func(UintptrOptionArrayOptionOptionOption, UintptrOptionArrayOptionOptionOption) UintptrOptionArrayOptionOptionOption) UintptrOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteOptionArrayOptionOptionOptionList) Reduce(f func(ByteOptionArrayOptionOptionOption, ByteOptionArrayOptionOptionOption) ByteOptionArrayOptionOptionOption) ByteOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneOptionArrayOptionOptionOptionList) Reduce(f func(RuneOptionArrayOptionOptionOption, RuneOptionArrayOptionOptionOption) RuneOptionArrayOptionOptionOption) RuneOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32OptionArrayOptionOptionOptionList) Reduce(f func(Float32OptionArrayOptionOptionOption, Float32OptionArrayOptionOptionOption) Float32OptionArrayOptionOptionOption) Float32OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64OptionArrayOptionOptionOptionList) Reduce(f func(Float64OptionArrayOptionOptionOption, Float64OptionArrayOptionOptionOption) Float64OptionArrayOptionOptionOption) Float64OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64OptionArrayOptionOptionOptionList) Reduce(f func(Complex64OptionArrayOptionOptionOption, Complex64OptionArrayOptionOptionOption) Complex64OptionArrayOptionOptionOption) Complex64OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128OptionArrayOptionOptionOptionList) Reduce(f func(Complex128OptionArrayOptionOptionOption, Complex128OptionArrayOptionOptionOption) Complex128OptionArrayOptionOptionOption) Complex128OptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyOptionArrayOptionOptionOptionList) Reduce(f func(AnyOptionArrayOptionOptionOption, AnyOptionArrayOptionOptionOption) AnyOptionArrayOptionOptionOption) AnyOptionArrayOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolListOptionOptionOptionList) Reduce(f func(BoolListOptionOptionOption, BoolListOptionOptionOption) BoolListOptionOptionOption) BoolListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringListOptionOptionOptionList) Reduce(f func(StringListOptionOptionOption, StringListOptionOptionOption) StringListOptionOptionOption) StringListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntListOptionOptionOptionList) Reduce(f func(IntListOptionOptionOption, IntListOptionOptionOption) IntListOptionOptionOption) IntListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ListOptionOptionOptionList) Reduce(f func(Int8ListOptionOptionOption, Int8ListOptionOptionOption) Int8ListOptionOptionOption) Int8ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ListOptionOptionOptionList) Reduce(f func(Int16ListOptionOptionOption, Int16ListOptionOptionOption) Int16ListOptionOptionOption) Int16ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ListOptionOptionOptionList) Reduce(f func(Int32ListOptionOptionOption, Int32ListOptionOptionOption) Int32ListOptionOptionOption) Int32ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ListOptionOptionOptionList) Reduce(f func(Int64ListOptionOptionOption, Int64ListOptionOptionOption) Int64ListOptionOptionOption) Int64ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintListOptionOptionOptionList) Reduce(f func(UintListOptionOptionOption, UintListOptionOptionOption) UintListOptionOptionOption) UintListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ListOptionOptionOptionList) Reduce(f func(Uint8ListOptionOptionOption, Uint8ListOptionOptionOption) Uint8ListOptionOptionOption) Uint8ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ListOptionOptionOptionList) Reduce(f func(Uint16ListOptionOptionOption, Uint16ListOptionOptionOption) Uint16ListOptionOptionOption) Uint16ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ListOptionOptionOptionList) Reduce(f func(Uint32ListOptionOptionOption, Uint32ListOptionOptionOption) Uint32ListOptionOptionOption) Uint32ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ListOptionOptionOptionList) Reduce(f func(Uint64ListOptionOptionOption, Uint64ListOptionOptionOption) Uint64ListOptionOptionOption) Uint64ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrListOptionOptionOptionList) Reduce(f func(UintptrListOptionOptionOption, UintptrListOptionOptionOption) UintptrListOptionOptionOption) UintptrListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteListOptionOptionOptionList) Reduce(f func(ByteListOptionOptionOption, ByteListOptionOptionOption) ByteListOptionOptionOption) ByteListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneListOptionOptionOptionList) Reduce(f func(RuneListOptionOptionOption, RuneListOptionOptionOption) RuneListOptionOptionOption) RuneListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ListOptionOptionOptionList) Reduce(f func(Float32ListOptionOptionOption, Float32ListOptionOptionOption) Float32ListOptionOptionOption) Float32ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ListOptionOptionOptionList) Reduce(f func(Float64ListOptionOptionOption, Float64ListOptionOptionOption) Float64ListOptionOptionOption) Float64ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ListOptionOptionOptionList) Reduce(f func(Complex64ListOptionOptionOption, Complex64ListOptionOptionOption) Complex64ListOptionOptionOption) Complex64ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ListOptionOptionOptionList) Reduce(f func(Complex128ListOptionOptionOption, Complex128ListOptionOptionOption) Complex128ListOptionOptionOption) Complex128ListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyListOptionOptionOptionList) Reduce(f func(AnyListOptionOptionOption, AnyListOptionOptionOption) AnyListOptionOptionOption) AnyListOptionOptionOption {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l BoolListList) Reduce(f func(BoolList, BoolList) BoolList) BoolList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l StringListList) Reduce(f func(StringList, StringList) StringList) StringList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l IntListList) Reduce(f func(IntList, IntList) IntList) IntList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int8ListList) Reduce(f func(Int8List, Int8List) Int8List) Int8List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int16ListList) Reduce(f func(Int16List, Int16List) Int16List) Int16List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int32ListList) Reduce(f func(Int32List, Int32List) Int32List) Int32List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Int64ListList) Reduce(f func(Int64List, Int64List) Int64List) Int64List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintListList) Reduce(f func(UintList, UintList) UintList) UintList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint8ListList) Reduce(f func(Uint8List, Uint8List) Uint8List) Uint8List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint16ListList) Reduce(f func(Uint16List, Uint16List) Uint16List) Uint16List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint32ListList) Reduce(f func(Uint32List, Uint32List) Uint32List) Uint32List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Uint64ListList) Reduce(f func(Uint64List, Uint64List) Uint64List) Uint64List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l UintptrListList) Reduce(f func(UintptrList, UintptrList) UintptrList) UintptrList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l ByteListList) Reduce(f func(ByteList, ByteList) ByteList) ByteList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l RuneListList) Reduce(f func(RuneList, RuneList) RuneList) RuneList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float32ListList) Reduce(f func(Float32List, Float32List) Float32List) Float32List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Float64ListList) Reduce(f func(Float64List, Float64List) Float64List) Float64List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex64ListList) Reduce(f func(Complex64List, Complex64List) Complex64List) Complex64List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l Complex128ListList) Reduce(f func(Complex128List, Complex128List) Complex128List) Complex128List {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
func (l AnyListList) Reduce(f func(AnyList, AnyList) AnyList) AnyList {
	if l.IsEmpty() {
		panic("Can't reduce empty list")
	} else if l.tail.IsEmpty() {
		return *l.head
	} else {
		return f(*l.head, l.tail.Reduce(f))
	}
}
