// bootstrap_list_size.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l StringList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l IntList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Int64List) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l ByteList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l RuneList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float32List) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float64List) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l AnyList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l BoolArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l StringArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l IntArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Int64ArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l ByteArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l RuneArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float32ArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float64ArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l AnyArrayList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l BoolOptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l StringOptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l IntOptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Int64OptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l ByteOptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l RuneOptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float32OptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float64OptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l AnyOptionList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l BoolListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l StringListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l IntListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Int64ListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l ByteListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l RuneListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float32ListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l Float64ListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
func (l AnyListList) Size() int {
	count := 0
	xs := l
	for xs.NonEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
