// bootstrap_list_takewhile.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) TakeWhile(p func(bool) bool) BoolList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) TakeWhile(p func(string) bool) StringList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) TakeWhile(p func(int) bool) IntList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) TakeWhile(p func(int64) bool) Int64List {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) TakeWhile(p func(byte) bool) ByteList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) TakeWhile(p func(rune) bool) RuneList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) TakeWhile(p func(float32) bool) Float32List {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) TakeWhile(p func(float64) bool) Float64List {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) TakeWhile(p func(Any) bool) AnyList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Tuple2List) TakeWhile(p func(Tuple2) bool) Tuple2List {
	acc := NilTuple2List
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) TakeWhile(p func([]bool) bool) BoolArrayList {
	acc := NilBoolArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) TakeWhile(p func([]string) bool) StringArrayList {
	acc := NilStringArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) TakeWhile(p func([]int) bool) IntArrayList {
	acc := NilIntArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) TakeWhile(p func([]int64) bool) Int64ArrayList {
	acc := NilInt64ArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) TakeWhile(p func([]byte) bool) ByteArrayList {
	acc := NilByteArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) TakeWhile(p func([]rune) bool) RuneArrayList {
	acc := NilRuneArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) TakeWhile(p func([]float32) bool) Float32ArrayList {
	acc := NilFloat32ArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) TakeWhile(p func([]float64) bool) Float64ArrayList {
	acc := NilFloat64ArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) TakeWhile(p func([]Any) bool) AnyArrayList {
	acc := NilAnyArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Tuple2ArrayList) TakeWhile(p func([]Tuple2) bool) Tuple2ArrayList {
	acc := NilTuple2ArrayList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) TakeWhile(p func(BoolOption) bool) BoolOptionList {
	acc := NilBoolOptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) TakeWhile(p func(StringOption) bool) StringOptionList {
	acc := NilStringOptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) TakeWhile(p func(IntOption) bool) IntOptionList {
	acc := NilIntOptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) TakeWhile(p func(Int64Option) bool) Int64OptionList {
	acc := NilInt64OptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) TakeWhile(p func(ByteOption) bool) ByteOptionList {
	acc := NilByteOptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) TakeWhile(p func(RuneOption) bool) RuneOptionList {
	acc := NilRuneOptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) TakeWhile(p func(Float32Option) bool) Float32OptionList {
	acc := NilFloat32OptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) TakeWhile(p func(Float64Option) bool) Float64OptionList {
	acc := NilFloat64OptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) TakeWhile(p func(AnyOption) bool) AnyOptionList {
	acc := NilAnyOptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Tuple2OptionList) TakeWhile(p func(Tuple2Option) bool) Tuple2OptionList {
	acc := NilTuple2OptionList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) TakeWhile(p func(BoolList) bool) BoolListList {
	acc := NilBoolListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) TakeWhile(p func(StringList) bool) StringListList {
	acc := NilStringListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) TakeWhile(p func(IntList) bool) IntListList {
	acc := NilIntListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) TakeWhile(p func(Int64List) bool) Int64ListList {
	acc := NilInt64ListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) TakeWhile(p func(ByteList) bool) ByteListList {
	acc := NilByteListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) TakeWhile(p func(RuneList) bool) RuneListList {
	acc := NilRuneListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) TakeWhile(p func(Float32List) bool) Float32ListList {
	acc := NilFloat32ListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) TakeWhile(p func(Float64List) bool) Float64ListList {
	acc := NilFloat64ListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) TakeWhile(p func(AnyList) bool) AnyListList {
	acc := NilAnyListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Tuple2ListList) TakeWhile(p func(Tuple2List) bool) Tuple2ListList {
	acc := NilTuple2ListList
	xs := l
	for xs.NonEmpty() && p(*xs.head) {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return acc.Reverse()
}
