// bootstrap_list_toarray.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) ToArray() []bool {
	acc := make([]bool, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringList) ToArray() []string {
	acc := make([]string, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntList) ToArray() []int {
	acc := make([]int, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8List) ToArray() []int8 {
	acc := make([]int8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16List) ToArray() []int16 {
	acc := make([]int16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32List) ToArray() []int32 {
	acc := make([]int32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64List) ToArray() []int64 {
	acc := make([]int64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintList) ToArray() []uint {
	acc := make([]uint, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8List) ToArray() []uint8 {
	acc := make([]uint8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16List) ToArray() []uint16 {
	acc := make([]uint16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32List) ToArray() []uint32 {
	acc := make([]uint32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64List) ToArray() []uint64 {
	acc := make([]uint64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrList) ToArray() []uintptr {
	acc := make([]uintptr, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteList) ToArray() []byte {
	acc := make([]byte, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneList) ToArray() []rune {
	acc := make([]rune, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32List) ToArray() []float32 {
	acc := make([]float32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64List) ToArray() []float64 {
	acc := make([]float64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64List) ToArray() []complex64 {
	acc := make([]complex64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128List) ToArray() []complex128 {
	acc := make([]complex128, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyList) ToArray() []Any {
	acc := make([]Any, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionList) ToArray() []BoolOption {
	acc := make([]BoolOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionList) ToArray() []StringOption {
	acc := make([]StringOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionList) ToArray() []IntOption {
	acc := make([]IntOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionList) ToArray() []Int8Option {
	acc := make([]Int8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionList) ToArray() []Int16Option {
	acc := make([]Int16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionList) ToArray() []Int32Option {
	acc := make([]Int32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionList) ToArray() []Int64Option {
	acc := make([]Int64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionList) ToArray() []UintOption {
	acc := make([]UintOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionList) ToArray() []Uint8Option {
	acc := make([]Uint8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionList) ToArray() []Uint16Option {
	acc := make([]Uint16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionList) ToArray() []Uint32Option {
	acc := make([]Uint32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionList) ToArray() []Uint64Option {
	acc := make([]Uint64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionList) ToArray() []UintptrOption {
	acc := make([]UintptrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionList) ToArray() []ByteOption {
	acc := make([]ByteOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionList) ToArray() []RuneOption {
	acc := make([]RuneOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionList) ToArray() []Float32Option {
	acc := make([]Float32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionList) ToArray() []Float64Option {
	acc := make([]Float64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionList) ToArray() []Complex64Option {
	acc := make([]Complex64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionList) ToArray() []Complex128Option {
	acc := make([]Complex128Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionList) ToArray() []AnyOption {
	acc := make([]AnyOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrOptionList) ToArray() []BoolArrOption {
	acc := make([]BoolArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrOptionList) ToArray() []StringArrOption {
	acc := make([]StringArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrOptionList) ToArray() []IntArrOption {
	acc := make([]IntArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrOptionList) ToArray() []Int8ArrOption {
	acc := make([]Int8ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrOptionList) ToArray() []Int16ArrOption {
	acc := make([]Int16ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrOptionList) ToArray() []Int32ArrOption {
	acc := make([]Int32ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrOptionList) ToArray() []Int64ArrOption {
	acc := make([]Int64ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrOptionList) ToArray() []UintArrOption {
	acc := make([]UintArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrOptionList) ToArray() []Uint8ArrOption {
	acc := make([]Uint8ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrOptionList) ToArray() []Uint16ArrOption {
	acc := make([]Uint16ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrOptionList) ToArray() []Uint32ArrOption {
	acc := make([]Uint32ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrOptionList) ToArray() []Uint64ArrOption {
	acc := make([]Uint64ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrOptionList) ToArray() []UintptrArrOption {
	acc := make([]UintptrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrOptionList) ToArray() []ByteArrOption {
	acc := make([]ByteArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrOptionList) ToArray() []RuneArrOption {
	acc := make([]RuneArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrOptionList) ToArray() []Float32ArrOption {
	acc := make([]Float32ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrOptionList) ToArray() []Float64ArrOption {
	acc := make([]Float64ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrOptionList) ToArray() []Complex64ArrOption {
	acc := make([]Complex64ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrOptionList) ToArray() []Complex128ArrOption {
	acc := make([]Complex128ArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrOptionList) ToArray() []AnyArrOption {
	acc := make([]AnyArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrArrOptionList) ToArray() []BoolArrArrOption {
	acc := make([]BoolArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrArrOptionList) ToArray() []StringArrArrOption {
	acc := make([]StringArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrArrOptionList) ToArray() []IntArrArrOption {
	acc := make([]IntArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrArrOptionList) ToArray() []Int8ArrArrOption {
	acc := make([]Int8ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrArrOptionList) ToArray() []Int16ArrArrOption {
	acc := make([]Int16ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrArrOptionList) ToArray() []Int32ArrArrOption {
	acc := make([]Int32ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrArrOptionList) ToArray() []Int64ArrArrOption {
	acc := make([]Int64ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrArrOptionList) ToArray() []UintArrArrOption {
	acc := make([]UintArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrArrOptionList) ToArray() []Uint8ArrArrOption {
	acc := make([]Uint8ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrArrOptionList) ToArray() []Uint16ArrArrOption {
	acc := make([]Uint16ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrArrOptionList) ToArray() []Uint32ArrArrOption {
	acc := make([]Uint32ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrArrOptionList) ToArray() []Uint64ArrArrOption {
	acc := make([]Uint64ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrArrOptionList) ToArray() []UintptrArrArrOption {
	acc := make([]UintptrArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrArrOptionList) ToArray() []ByteArrArrOption {
	acc := make([]ByteArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrArrOptionList) ToArray() []RuneArrArrOption {
	acc := make([]RuneArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrArrOptionList) ToArray() []Float32ArrArrOption {
	acc := make([]Float32ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrArrOptionList) ToArray() []Float64ArrArrOption {
	acc := make([]Float64ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrArrOptionList) ToArray() []Complex64ArrArrOption {
	acc := make([]Complex64ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrArrOptionList) ToArray() []Complex128ArrArrOption {
	acc := make([]Complex128ArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrArrOptionList) ToArray() []AnyArrArrOption {
	acc := make([]AnyArrArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrOptionList) ToArray() []BoolOptionArrOption {
	acc := make([]BoolOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrOptionList) ToArray() []StringOptionArrOption {
	acc := make([]StringOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrOptionList) ToArray() []IntOptionArrOption {
	acc := make([]IntOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrOptionList) ToArray() []Int8OptionArrOption {
	acc := make([]Int8OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrOptionList) ToArray() []Int16OptionArrOption {
	acc := make([]Int16OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrOptionList) ToArray() []Int32OptionArrOption {
	acc := make([]Int32OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrOptionList) ToArray() []Int64OptionArrOption {
	acc := make([]Int64OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrOptionList) ToArray() []UintOptionArrOption {
	acc := make([]UintOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrOptionList) ToArray() []Uint8OptionArrOption {
	acc := make([]Uint8OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrOptionList) ToArray() []Uint16OptionArrOption {
	acc := make([]Uint16OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrOptionList) ToArray() []Uint32OptionArrOption {
	acc := make([]Uint32OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrOptionList) ToArray() []Uint64OptionArrOption {
	acc := make([]Uint64OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrOptionList) ToArray() []UintptrOptionArrOption {
	acc := make([]UintptrOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrOptionList) ToArray() []ByteOptionArrOption {
	acc := make([]ByteOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrOptionList) ToArray() []RuneOptionArrOption {
	acc := make([]RuneOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrOptionList) ToArray() []Float32OptionArrOption {
	acc := make([]Float32OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrOptionList) ToArray() []Float64OptionArrOption {
	acc := make([]Float64OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrOptionList) ToArray() []Complex64OptionArrOption {
	acc := make([]Complex64OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrOptionList) ToArray() []Complex128OptionArrOption {
	acc := make([]Complex128OptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrOptionList) ToArray() []AnyOptionArrOption {
	acc := make([]AnyOptionArrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionList) ToArray() []BoolListOption {
	acc := make([]BoolListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionList) ToArray() []StringListOption {
	acc := make([]StringListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionList) ToArray() []IntListOption {
	acc := make([]IntListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionList) ToArray() []Int8ListOption {
	acc := make([]Int8ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionList) ToArray() []Int16ListOption {
	acc := make([]Int16ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionList) ToArray() []Int32ListOption {
	acc := make([]Int32ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionList) ToArray() []Int64ListOption {
	acc := make([]Int64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionList) ToArray() []UintListOption {
	acc := make([]UintListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionList) ToArray() []Uint8ListOption {
	acc := make([]Uint8ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionList) ToArray() []Uint16ListOption {
	acc := make([]Uint16ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionList) ToArray() []Uint32ListOption {
	acc := make([]Uint32ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionList) ToArray() []Uint64ListOption {
	acc := make([]Uint64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionList) ToArray() []UintptrListOption {
	acc := make([]UintptrListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionList) ToArray() []ByteListOption {
	acc := make([]ByteListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionList) ToArray() []RuneListOption {
	acc := make([]RuneListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionList) ToArray() []Float32ListOption {
	acc := make([]Float32ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionList) ToArray() []Float64ListOption {
	acc := make([]Float64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionList) ToArray() []Complex64ListOption {
	acc := make([]Complex64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionList) ToArray() []Complex128ListOption {
	acc := make([]Complex128ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionList) ToArray() []AnyListOption {
	acc := make([]AnyListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionOptionList) ToArray() []BoolOptionOption {
	acc := make([]BoolOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionOptionList) ToArray() []StringOptionOption {
	acc := make([]StringOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionOptionList) ToArray() []IntOptionOption {
	acc := make([]IntOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionOptionList) ToArray() []Int8OptionOption {
	acc := make([]Int8OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionOptionList) ToArray() []Int16OptionOption {
	acc := make([]Int16OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionOptionList) ToArray() []Int32OptionOption {
	acc := make([]Int32OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionOptionList) ToArray() []Int64OptionOption {
	acc := make([]Int64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionOptionList) ToArray() []UintOptionOption {
	acc := make([]UintOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionOptionList) ToArray() []Uint8OptionOption {
	acc := make([]Uint8OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionOptionList) ToArray() []Uint16OptionOption {
	acc := make([]Uint16OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionOptionList) ToArray() []Uint32OptionOption {
	acc := make([]Uint32OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionOptionList) ToArray() []Uint64OptionOption {
	acc := make([]Uint64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionOptionList) ToArray() []UintptrOptionOption {
	acc := make([]UintptrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionOptionList) ToArray() []ByteOptionOption {
	acc := make([]ByteOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionOptionList) ToArray() []RuneOptionOption {
	acc := make([]RuneOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionOptionList) ToArray() []Float32OptionOption {
	acc := make([]Float32OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionOptionList) ToArray() []Float64OptionOption {
	acc := make([]Float64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionOptionList) ToArray() []Complex64OptionOption {
	acc := make([]Complex64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionOptionList) ToArray() []Complex128OptionOption {
	acc := make([]Complex128OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionOptionList) ToArray() []AnyOptionOption {
	acc := make([]AnyOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrOptionOptionList) ToArray() []BoolArrOptionOption {
	acc := make([]BoolArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrOptionOptionList) ToArray() []StringArrOptionOption {
	acc := make([]StringArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrOptionOptionList) ToArray() []IntArrOptionOption {
	acc := make([]IntArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrOptionOptionList) ToArray() []Int8ArrOptionOption {
	acc := make([]Int8ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrOptionOptionList) ToArray() []Int16ArrOptionOption {
	acc := make([]Int16ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrOptionOptionList) ToArray() []Int32ArrOptionOption {
	acc := make([]Int32ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrOptionOptionList) ToArray() []Int64ArrOptionOption {
	acc := make([]Int64ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrOptionOptionList) ToArray() []UintArrOptionOption {
	acc := make([]UintArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrOptionOptionList) ToArray() []Uint8ArrOptionOption {
	acc := make([]Uint8ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrOptionOptionList) ToArray() []Uint16ArrOptionOption {
	acc := make([]Uint16ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrOptionOptionList) ToArray() []Uint32ArrOptionOption {
	acc := make([]Uint32ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrOptionOptionList) ToArray() []Uint64ArrOptionOption {
	acc := make([]Uint64ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrOptionOptionList) ToArray() []UintptrArrOptionOption {
	acc := make([]UintptrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrOptionOptionList) ToArray() []ByteArrOptionOption {
	acc := make([]ByteArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrOptionOptionList) ToArray() []RuneArrOptionOption {
	acc := make([]RuneArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrOptionOptionList) ToArray() []Float32ArrOptionOption {
	acc := make([]Float32ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrOptionOptionList) ToArray() []Float64ArrOptionOption {
	acc := make([]Float64ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrOptionOptionList) ToArray() []Complex64ArrOptionOption {
	acc := make([]Complex64ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrOptionOptionList) ToArray() []Complex128ArrOptionOption {
	acc := make([]Complex128ArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrOptionOptionList) ToArray() []AnyArrOptionOption {
	acc := make([]AnyArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrArrOptionOptionList) ToArray() []BoolArrArrOptionOption {
	acc := make([]BoolArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrArrOptionOptionList) ToArray() []StringArrArrOptionOption {
	acc := make([]StringArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrArrOptionOptionList) ToArray() []IntArrArrOptionOption {
	acc := make([]IntArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrArrOptionOptionList) ToArray() []Int8ArrArrOptionOption {
	acc := make([]Int8ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrArrOptionOptionList) ToArray() []Int16ArrArrOptionOption {
	acc := make([]Int16ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrArrOptionOptionList) ToArray() []Int32ArrArrOptionOption {
	acc := make([]Int32ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrArrOptionOptionList) ToArray() []Int64ArrArrOptionOption {
	acc := make([]Int64ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrArrOptionOptionList) ToArray() []UintArrArrOptionOption {
	acc := make([]UintArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrArrOptionOptionList) ToArray() []Uint8ArrArrOptionOption {
	acc := make([]Uint8ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrArrOptionOptionList) ToArray() []Uint16ArrArrOptionOption {
	acc := make([]Uint16ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrArrOptionOptionList) ToArray() []Uint32ArrArrOptionOption {
	acc := make([]Uint32ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrArrOptionOptionList) ToArray() []Uint64ArrArrOptionOption {
	acc := make([]Uint64ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrArrOptionOptionList) ToArray() []UintptrArrArrOptionOption {
	acc := make([]UintptrArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrArrOptionOptionList) ToArray() []ByteArrArrOptionOption {
	acc := make([]ByteArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrArrOptionOptionList) ToArray() []RuneArrArrOptionOption {
	acc := make([]RuneArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrArrOptionOptionList) ToArray() []Float32ArrArrOptionOption {
	acc := make([]Float32ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrArrOptionOptionList) ToArray() []Float64ArrArrOptionOption {
	acc := make([]Float64ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrArrOptionOptionList) ToArray() []Complex64ArrArrOptionOption {
	acc := make([]Complex64ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrArrOptionOptionList) ToArray() []Complex128ArrArrOptionOption {
	acc := make([]Complex128ArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrArrOptionOptionList) ToArray() []AnyArrArrOptionOption {
	acc := make([]AnyArrArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrOptionOptionList) ToArray() []BoolOptionArrOptionOption {
	acc := make([]BoolOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrOptionOptionList) ToArray() []StringOptionArrOptionOption {
	acc := make([]StringOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrOptionOptionList) ToArray() []IntOptionArrOptionOption {
	acc := make([]IntOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrOptionOptionList) ToArray() []Int8OptionArrOptionOption {
	acc := make([]Int8OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrOptionOptionList) ToArray() []Int16OptionArrOptionOption {
	acc := make([]Int16OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrOptionOptionList) ToArray() []Int32OptionArrOptionOption {
	acc := make([]Int32OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrOptionOptionList) ToArray() []Int64OptionArrOptionOption {
	acc := make([]Int64OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrOptionOptionList) ToArray() []UintOptionArrOptionOption {
	acc := make([]UintOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrOptionOptionList) ToArray() []Uint8OptionArrOptionOption {
	acc := make([]Uint8OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrOptionOptionList) ToArray() []Uint16OptionArrOptionOption {
	acc := make([]Uint16OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrOptionOptionList) ToArray() []Uint32OptionArrOptionOption {
	acc := make([]Uint32OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrOptionOptionList) ToArray() []Uint64OptionArrOptionOption {
	acc := make([]Uint64OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrOptionOptionList) ToArray() []UintptrOptionArrOptionOption {
	acc := make([]UintptrOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrOptionOptionList) ToArray() []ByteOptionArrOptionOption {
	acc := make([]ByteOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrOptionOptionList) ToArray() []RuneOptionArrOptionOption {
	acc := make([]RuneOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrOptionOptionList) ToArray() []Float32OptionArrOptionOption {
	acc := make([]Float32OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrOptionOptionList) ToArray() []Float64OptionArrOptionOption {
	acc := make([]Float64OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrOptionOptionList) ToArray() []Complex64OptionArrOptionOption {
	acc := make([]Complex64OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrOptionOptionList) ToArray() []Complex128OptionArrOptionOption {
	acc := make([]Complex128OptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrOptionOptionList) ToArray() []AnyOptionArrOptionOption {
	acc := make([]AnyOptionArrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionOptionList) ToArray() []BoolListOptionOption {
	acc := make([]BoolListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionOptionList) ToArray() []StringListOptionOption {
	acc := make([]StringListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionOptionList) ToArray() []IntListOptionOption {
	acc := make([]IntListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionOptionList) ToArray() []Int8ListOptionOption {
	acc := make([]Int8ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionOptionList) ToArray() []Int16ListOptionOption {
	acc := make([]Int16ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionOptionList) ToArray() []Int32ListOptionOption {
	acc := make([]Int32ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionOptionList) ToArray() []Int64ListOptionOption {
	acc := make([]Int64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionOptionList) ToArray() []UintListOptionOption {
	acc := make([]UintListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionOptionList) ToArray() []Uint8ListOptionOption {
	acc := make([]Uint8ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionOptionList) ToArray() []Uint16ListOptionOption {
	acc := make([]Uint16ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionOptionList) ToArray() []Uint32ListOptionOption {
	acc := make([]Uint32ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionOptionList) ToArray() []Uint64ListOptionOption {
	acc := make([]Uint64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionOptionList) ToArray() []UintptrListOptionOption {
	acc := make([]UintptrListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionOptionList) ToArray() []ByteListOptionOption {
	acc := make([]ByteListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionOptionList) ToArray() []RuneListOptionOption {
	acc := make([]RuneListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionOptionList) ToArray() []Float32ListOptionOption {
	acc := make([]Float32ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionOptionList) ToArray() []Float64ListOptionOption {
	acc := make([]Float64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionOptionList) ToArray() []Complex64ListOptionOption {
	acc := make([]Complex64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionOptionList) ToArray() []Complex128ListOptionOption {
	acc := make([]Complex128ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionOptionList) ToArray() []AnyListOptionOption {
	acc := make([]AnyListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrList) ToArray() [][]bool {
	acc := make([][]bool, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrList) ToArray() [][]string {
	acc := make([][]string, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrList) ToArray() [][]int {
	acc := make([][]int, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrList) ToArray() [][]int8 {
	acc := make([][]int8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrList) ToArray() [][]int16 {
	acc := make([][]int16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrList) ToArray() [][]int32 {
	acc := make([][]int32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrList) ToArray() [][]int64 {
	acc := make([][]int64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrList) ToArray() [][]uint {
	acc := make([][]uint, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrList) ToArray() [][]uint8 {
	acc := make([][]uint8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrList) ToArray() [][]uint16 {
	acc := make([][]uint16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrList) ToArray() [][]uint32 {
	acc := make([][]uint32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrList) ToArray() [][]uint64 {
	acc := make([][]uint64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrList) ToArray() [][]uintptr {
	acc := make([][]uintptr, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrList) ToArray() [][]byte {
	acc := make([][]byte, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrList) ToArray() [][]rune {
	acc := make([][]rune, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrList) ToArray() [][]float32 {
	acc := make([][]float32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrList) ToArray() [][]float64 {
	acc := make([][]float64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrList) ToArray() [][]complex64 {
	acc := make([][]complex64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrList) ToArray() [][]complex128 {
	acc := make([][]complex128, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrList) ToArray() [][]Any {
	acc := make([][]Any, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrArrList) ToArray() [][][]bool {
	acc := make([][][]bool, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrArrList) ToArray() [][][]string {
	acc := make([][][]string, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrArrList) ToArray() [][][]int {
	acc := make([][][]int, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrArrList) ToArray() [][][]int8 {
	acc := make([][][]int8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrArrList) ToArray() [][][]int16 {
	acc := make([][][]int16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrArrList) ToArray() [][][]int32 {
	acc := make([][][]int32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrArrList) ToArray() [][][]int64 {
	acc := make([][][]int64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrArrList) ToArray() [][][]uint {
	acc := make([][][]uint, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrArrList) ToArray() [][][]uint8 {
	acc := make([][][]uint8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrArrList) ToArray() [][][]uint16 {
	acc := make([][][]uint16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrArrList) ToArray() [][][]uint32 {
	acc := make([][][]uint32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrArrList) ToArray() [][][]uint64 {
	acc := make([][][]uint64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrArrList) ToArray() [][][]uintptr {
	acc := make([][][]uintptr, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrArrList) ToArray() [][][]byte {
	acc := make([][][]byte, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrArrList) ToArray() [][][]rune {
	acc := make([][][]rune, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrArrList) ToArray() [][][]float32 {
	acc := make([][][]float32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrArrList) ToArray() [][][]float64 {
	acc := make([][][]float64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrArrList) ToArray() [][][]complex64 {
	acc := make([][][]complex64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrArrList) ToArray() [][][]complex128 {
	acc := make([][][]complex128, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrArrList) ToArray() [][][]Any {
	acc := make([][][]Any, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrList) ToArray() [][]BoolOption {
	acc := make([][]BoolOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrList) ToArray() [][]StringOption {
	acc := make([][]StringOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrList) ToArray() [][]IntOption {
	acc := make([][]IntOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrList) ToArray() [][]Int8Option {
	acc := make([][]Int8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrList) ToArray() [][]Int16Option {
	acc := make([][]Int16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrList) ToArray() [][]Int32Option {
	acc := make([][]Int32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrList) ToArray() [][]Int64Option {
	acc := make([][]Int64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrList) ToArray() [][]UintOption {
	acc := make([][]UintOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrList) ToArray() [][]Uint8Option {
	acc := make([][]Uint8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrList) ToArray() [][]Uint16Option {
	acc := make([][]Uint16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrList) ToArray() [][]Uint32Option {
	acc := make([][]Uint32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrList) ToArray() [][]Uint64Option {
	acc := make([][]Uint64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrList) ToArray() [][]UintptrOption {
	acc := make([][]UintptrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrList) ToArray() [][]ByteOption {
	acc := make([][]ByteOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrList) ToArray() [][]RuneOption {
	acc := make([][]RuneOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrList) ToArray() [][]Float32Option {
	acc := make([][]Float32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrList) ToArray() [][]Float64Option {
	acc := make([][]Float64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrList) ToArray() [][]Complex64Option {
	acc := make([][]Complex64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrList) ToArray() [][]Complex128Option {
	acc := make([][]Complex128Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrList) ToArray() [][]AnyOption {
	acc := make([][]AnyOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListList) ToArray() []BoolList {
	acc := make([]BoolList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListList) ToArray() []StringList {
	acc := make([]StringList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListList) ToArray() []IntList {
	acc := make([]IntList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListList) ToArray() []Int8List {
	acc := make([]Int8List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListList) ToArray() []Int16List {
	acc := make([]Int16List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListList) ToArray() []Int32List {
	acc := make([]Int32List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListList) ToArray() []Int64List {
	acc := make([]Int64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListList) ToArray() []UintList {
	acc := make([]UintList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListList) ToArray() []Uint8List {
	acc := make([]Uint8List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListList) ToArray() []Uint16List {
	acc := make([]Uint16List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListList) ToArray() []Uint32List {
	acc := make([]Uint32List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListList) ToArray() []Uint64List {
	acc := make([]Uint64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListList) ToArray() []UintptrList {
	acc := make([]UintptrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListList) ToArray() []ByteList {
	acc := make([]ByteList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListList) ToArray() []RuneList {
	acc := make([]RuneList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListList) ToArray() []Float32List {
	acc := make([]Float32List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListList) ToArray() []Float64List {
	acc := make([]Float64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListList) ToArray() []Complex64List {
	acc := make([]Complex64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListList) ToArray() []Complex128List {
	acc := make([]Complex128List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListList) ToArray() []AnyList {
	acc := make([]AnyList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionListList) ToArray() []BoolOptionList {
	acc := make([]BoolOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionListList) ToArray() []StringOptionList {
	acc := make([]StringOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionListList) ToArray() []IntOptionList {
	acc := make([]IntOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionListList) ToArray() []Int8OptionList {
	acc := make([]Int8OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionListList) ToArray() []Int16OptionList {
	acc := make([]Int16OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionListList) ToArray() []Int32OptionList {
	acc := make([]Int32OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionListList) ToArray() []Int64OptionList {
	acc := make([]Int64OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionListList) ToArray() []UintOptionList {
	acc := make([]UintOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionListList) ToArray() []Uint8OptionList {
	acc := make([]Uint8OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionListList) ToArray() []Uint16OptionList {
	acc := make([]Uint16OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionListList) ToArray() []Uint32OptionList {
	acc := make([]Uint32OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionListList) ToArray() []Uint64OptionList {
	acc := make([]Uint64OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionListList) ToArray() []UintptrOptionList {
	acc := make([]UintptrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionListList) ToArray() []ByteOptionList {
	acc := make([]ByteOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionListList) ToArray() []RuneOptionList {
	acc := make([]RuneOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionListList) ToArray() []Float32OptionList {
	acc := make([]Float32OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionListList) ToArray() []Float64OptionList {
	acc := make([]Float64OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionListList) ToArray() []Complex64OptionList {
	acc := make([]Complex64OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionListList) ToArray() []Complex128OptionList {
	acc := make([]Complex128OptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionListList) ToArray() []AnyOptionList {
	acc := make([]AnyOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrOptionListList) ToArray() []BoolArrOptionList {
	acc := make([]BoolArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrOptionListList) ToArray() []StringArrOptionList {
	acc := make([]StringArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrOptionListList) ToArray() []IntArrOptionList {
	acc := make([]IntArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrOptionListList) ToArray() []Int8ArrOptionList {
	acc := make([]Int8ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrOptionListList) ToArray() []Int16ArrOptionList {
	acc := make([]Int16ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrOptionListList) ToArray() []Int32ArrOptionList {
	acc := make([]Int32ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrOptionListList) ToArray() []Int64ArrOptionList {
	acc := make([]Int64ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrOptionListList) ToArray() []UintArrOptionList {
	acc := make([]UintArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrOptionListList) ToArray() []Uint8ArrOptionList {
	acc := make([]Uint8ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrOptionListList) ToArray() []Uint16ArrOptionList {
	acc := make([]Uint16ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrOptionListList) ToArray() []Uint32ArrOptionList {
	acc := make([]Uint32ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrOptionListList) ToArray() []Uint64ArrOptionList {
	acc := make([]Uint64ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrOptionListList) ToArray() []UintptrArrOptionList {
	acc := make([]UintptrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrOptionListList) ToArray() []ByteArrOptionList {
	acc := make([]ByteArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrOptionListList) ToArray() []RuneArrOptionList {
	acc := make([]RuneArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrOptionListList) ToArray() []Float32ArrOptionList {
	acc := make([]Float32ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrOptionListList) ToArray() []Float64ArrOptionList {
	acc := make([]Float64ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrOptionListList) ToArray() []Complex64ArrOptionList {
	acc := make([]Complex64ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrOptionListList) ToArray() []Complex128ArrOptionList {
	acc := make([]Complex128ArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrOptionListList) ToArray() []AnyArrOptionList {
	acc := make([]AnyArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrArrOptionListList) ToArray() []BoolArrArrOptionList {
	acc := make([]BoolArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrArrOptionListList) ToArray() []StringArrArrOptionList {
	acc := make([]StringArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrArrOptionListList) ToArray() []IntArrArrOptionList {
	acc := make([]IntArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrArrOptionListList) ToArray() []Int8ArrArrOptionList {
	acc := make([]Int8ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrArrOptionListList) ToArray() []Int16ArrArrOptionList {
	acc := make([]Int16ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrArrOptionListList) ToArray() []Int32ArrArrOptionList {
	acc := make([]Int32ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrArrOptionListList) ToArray() []Int64ArrArrOptionList {
	acc := make([]Int64ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrArrOptionListList) ToArray() []UintArrArrOptionList {
	acc := make([]UintArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrArrOptionListList) ToArray() []Uint8ArrArrOptionList {
	acc := make([]Uint8ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrArrOptionListList) ToArray() []Uint16ArrArrOptionList {
	acc := make([]Uint16ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrArrOptionListList) ToArray() []Uint32ArrArrOptionList {
	acc := make([]Uint32ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrArrOptionListList) ToArray() []Uint64ArrArrOptionList {
	acc := make([]Uint64ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrArrOptionListList) ToArray() []UintptrArrArrOptionList {
	acc := make([]UintptrArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrArrOptionListList) ToArray() []ByteArrArrOptionList {
	acc := make([]ByteArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrArrOptionListList) ToArray() []RuneArrArrOptionList {
	acc := make([]RuneArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrArrOptionListList) ToArray() []Float32ArrArrOptionList {
	acc := make([]Float32ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrArrOptionListList) ToArray() []Float64ArrArrOptionList {
	acc := make([]Float64ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrArrOptionListList) ToArray() []Complex64ArrArrOptionList {
	acc := make([]Complex64ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrArrOptionListList) ToArray() []Complex128ArrArrOptionList {
	acc := make([]Complex128ArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrArrOptionListList) ToArray() []AnyArrArrOptionList {
	acc := make([]AnyArrArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrOptionListList) ToArray() []BoolOptionArrOptionList {
	acc := make([]BoolOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrOptionListList) ToArray() []StringOptionArrOptionList {
	acc := make([]StringOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrOptionListList) ToArray() []IntOptionArrOptionList {
	acc := make([]IntOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrOptionListList) ToArray() []Int8OptionArrOptionList {
	acc := make([]Int8OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrOptionListList) ToArray() []Int16OptionArrOptionList {
	acc := make([]Int16OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrOptionListList) ToArray() []Int32OptionArrOptionList {
	acc := make([]Int32OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrOptionListList) ToArray() []Int64OptionArrOptionList {
	acc := make([]Int64OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrOptionListList) ToArray() []UintOptionArrOptionList {
	acc := make([]UintOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrOptionListList) ToArray() []Uint8OptionArrOptionList {
	acc := make([]Uint8OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrOptionListList) ToArray() []Uint16OptionArrOptionList {
	acc := make([]Uint16OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrOptionListList) ToArray() []Uint32OptionArrOptionList {
	acc := make([]Uint32OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrOptionListList) ToArray() []Uint64OptionArrOptionList {
	acc := make([]Uint64OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrOptionListList) ToArray() []UintptrOptionArrOptionList {
	acc := make([]UintptrOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrOptionListList) ToArray() []ByteOptionArrOptionList {
	acc := make([]ByteOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrOptionListList) ToArray() []RuneOptionArrOptionList {
	acc := make([]RuneOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrOptionListList) ToArray() []Float32OptionArrOptionList {
	acc := make([]Float32OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrOptionListList) ToArray() []Float64OptionArrOptionList {
	acc := make([]Float64OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrOptionListList) ToArray() []Complex64OptionArrOptionList {
	acc := make([]Complex64OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrOptionListList) ToArray() []Complex128OptionArrOptionList {
	acc := make([]Complex128OptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrOptionListList) ToArray() []AnyOptionArrOptionList {
	acc := make([]AnyOptionArrOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionListList) ToArray() []BoolListOptionList {
	acc := make([]BoolListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionListList) ToArray() []StringListOptionList {
	acc := make([]StringListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionListList) ToArray() []IntListOptionList {
	acc := make([]IntListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionListList) ToArray() []Int8ListOptionList {
	acc := make([]Int8ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionListList) ToArray() []Int16ListOptionList {
	acc := make([]Int16ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionListList) ToArray() []Int32ListOptionList {
	acc := make([]Int32ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionListList) ToArray() []Int64ListOptionList {
	acc := make([]Int64ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionListList) ToArray() []UintListOptionList {
	acc := make([]UintListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionListList) ToArray() []Uint8ListOptionList {
	acc := make([]Uint8ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionListList) ToArray() []Uint16ListOptionList {
	acc := make([]Uint16ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionListList) ToArray() []Uint32ListOptionList {
	acc := make([]Uint32ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionListList) ToArray() []Uint64ListOptionList {
	acc := make([]Uint64ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionListList) ToArray() []UintptrListOptionList {
	acc := make([]UintptrListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionListList) ToArray() []ByteListOptionList {
	acc := make([]ByteListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionListList) ToArray() []RuneListOptionList {
	acc := make([]RuneListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionListList) ToArray() []Float32ListOptionList {
	acc := make([]Float32ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionListList) ToArray() []Float64ListOptionList {
	acc := make([]Float64ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionListList) ToArray() []Complex64ListOptionList {
	acc := make([]Complex64ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionListList) ToArray() []Complex128ListOptionList {
	acc := make([]Complex128ListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionListList) ToArray() []AnyListOptionList {
	acc := make([]AnyListOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionOptionListList) ToArray() []BoolOptionOptionList {
	acc := make([]BoolOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionOptionListList) ToArray() []StringOptionOptionList {
	acc := make([]StringOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionOptionListList) ToArray() []IntOptionOptionList {
	acc := make([]IntOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionOptionListList) ToArray() []Int8OptionOptionList {
	acc := make([]Int8OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionOptionListList) ToArray() []Int16OptionOptionList {
	acc := make([]Int16OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionOptionListList) ToArray() []Int32OptionOptionList {
	acc := make([]Int32OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionOptionListList) ToArray() []Int64OptionOptionList {
	acc := make([]Int64OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionOptionListList) ToArray() []UintOptionOptionList {
	acc := make([]UintOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionOptionListList) ToArray() []Uint8OptionOptionList {
	acc := make([]Uint8OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionOptionListList) ToArray() []Uint16OptionOptionList {
	acc := make([]Uint16OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionOptionListList) ToArray() []Uint32OptionOptionList {
	acc := make([]Uint32OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionOptionListList) ToArray() []Uint64OptionOptionList {
	acc := make([]Uint64OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionOptionListList) ToArray() []UintptrOptionOptionList {
	acc := make([]UintptrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionOptionListList) ToArray() []ByteOptionOptionList {
	acc := make([]ByteOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionOptionListList) ToArray() []RuneOptionOptionList {
	acc := make([]RuneOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionOptionListList) ToArray() []Float32OptionOptionList {
	acc := make([]Float32OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionOptionListList) ToArray() []Float64OptionOptionList {
	acc := make([]Float64OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionOptionListList) ToArray() []Complex64OptionOptionList {
	acc := make([]Complex64OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionOptionListList) ToArray() []Complex128OptionOptionList {
	acc := make([]Complex128OptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionOptionListList) ToArray() []AnyOptionOptionList {
	acc := make([]AnyOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrOptionOptionListList) ToArray() []BoolArrOptionOptionList {
	acc := make([]BoolArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrOptionOptionListList) ToArray() []StringArrOptionOptionList {
	acc := make([]StringArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrOptionOptionListList) ToArray() []IntArrOptionOptionList {
	acc := make([]IntArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrOptionOptionListList) ToArray() []Int8ArrOptionOptionList {
	acc := make([]Int8ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrOptionOptionListList) ToArray() []Int16ArrOptionOptionList {
	acc := make([]Int16ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrOptionOptionListList) ToArray() []Int32ArrOptionOptionList {
	acc := make([]Int32ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrOptionOptionListList) ToArray() []Int64ArrOptionOptionList {
	acc := make([]Int64ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrOptionOptionListList) ToArray() []UintArrOptionOptionList {
	acc := make([]UintArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrOptionOptionListList) ToArray() []Uint8ArrOptionOptionList {
	acc := make([]Uint8ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrOptionOptionListList) ToArray() []Uint16ArrOptionOptionList {
	acc := make([]Uint16ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrOptionOptionListList) ToArray() []Uint32ArrOptionOptionList {
	acc := make([]Uint32ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrOptionOptionListList) ToArray() []Uint64ArrOptionOptionList {
	acc := make([]Uint64ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrOptionOptionListList) ToArray() []UintptrArrOptionOptionList {
	acc := make([]UintptrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrOptionOptionListList) ToArray() []ByteArrOptionOptionList {
	acc := make([]ByteArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrOptionOptionListList) ToArray() []RuneArrOptionOptionList {
	acc := make([]RuneArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrOptionOptionListList) ToArray() []Float32ArrOptionOptionList {
	acc := make([]Float32ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrOptionOptionListList) ToArray() []Float64ArrOptionOptionList {
	acc := make([]Float64ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrOptionOptionListList) ToArray() []Complex64ArrOptionOptionList {
	acc := make([]Complex64ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrOptionOptionListList) ToArray() []Complex128ArrOptionOptionList {
	acc := make([]Complex128ArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrOptionOptionListList) ToArray() []AnyArrOptionOptionList {
	acc := make([]AnyArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrArrOptionOptionListList) ToArray() []BoolArrArrOptionOptionList {
	acc := make([]BoolArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrArrOptionOptionListList) ToArray() []StringArrArrOptionOptionList {
	acc := make([]StringArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrArrOptionOptionListList) ToArray() []IntArrArrOptionOptionList {
	acc := make([]IntArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrArrOptionOptionListList) ToArray() []Int8ArrArrOptionOptionList {
	acc := make([]Int8ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrArrOptionOptionListList) ToArray() []Int16ArrArrOptionOptionList {
	acc := make([]Int16ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrArrOptionOptionListList) ToArray() []Int32ArrArrOptionOptionList {
	acc := make([]Int32ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrArrOptionOptionListList) ToArray() []Int64ArrArrOptionOptionList {
	acc := make([]Int64ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrArrOptionOptionListList) ToArray() []UintArrArrOptionOptionList {
	acc := make([]UintArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrArrOptionOptionListList) ToArray() []Uint8ArrArrOptionOptionList {
	acc := make([]Uint8ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrArrOptionOptionListList) ToArray() []Uint16ArrArrOptionOptionList {
	acc := make([]Uint16ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrArrOptionOptionListList) ToArray() []Uint32ArrArrOptionOptionList {
	acc := make([]Uint32ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrArrOptionOptionListList) ToArray() []Uint64ArrArrOptionOptionList {
	acc := make([]Uint64ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrArrOptionOptionListList) ToArray() []UintptrArrArrOptionOptionList {
	acc := make([]UintptrArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrArrOptionOptionListList) ToArray() []ByteArrArrOptionOptionList {
	acc := make([]ByteArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrArrOptionOptionListList) ToArray() []RuneArrArrOptionOptionList {
	acc := make([]RuneArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrArrOptionOptionListList) ToArray() []Float32ArrArrOptionOptionList {
	acc := make([]Float32ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrArrOptionOptionListList) ToArray() []Float64ArrArrOptionOptionList {
	acc := make([]Float64ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrArrOptionOptionListList) ToArray() []Complex64ArrArrOptionOptionList {
	acc := make([]Complex64ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrArrOptionOptionListList) ToArray() []Complex128ArrArrOptionOptionList {
	acc := make([]Complex128ArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrArrOptionOptionListList) ToArray() []AnyArrArrOptionOptionList {
	acc := make([]AnyArrArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrOptionOptionListList) ToArray() []BoolOptionArrOptionOptionList {
	acc := make([]BoolOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrOptionOptionListList) ToArray() []StringOptionArrOptionOptionList {
	acc := make([]StringOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrOptionOptionListList) ToArray() []IntOptionArrOptionOptionList {
	acc := make([]IntOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrOptionOptionListList) ToArray() []Int8OptionArrOptionOptionList {
	acc := make([]Int8OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrOptionOptionListList) ToArray() []Int16OptionArrOptionOptionList {
	acc := make([]Int16OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrOptionOptionListList) ToArray() []Int32OptionArrOptionOptionList {
	acc := make([]Int32OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrOptionOptionListList) ToArray() []Int64OptionArrOptionOptionList {
	acc := make([]Int64OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrOptionOptionListList) ToArray() []UintOptionArrOptionOptionList {
	acc := make([]UintOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrOptionOptionListList) ToArray() []Uint8OptionArrOptionOptionList {
	acc := make([]Uint8OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrOptionOptionListList) ToArray() []Uint16OptionArrOptionOptionList {
	acc := make([]Uint16OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrOptionOptionListList) ToArray() []Uint32OptionArrOptionOptionList {
	acc := make([]Uint32OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrOptionOptionListList) ToArray() []Uint64OptionArrOptionOptionList {
	acc := make([]Uint64OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrOptionOptionListList) ToArray() []UintptrOptionArrOptionOptionList {
	acc := make([]UintptrOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrOptionOptionListList) ToArray() []ByteOptionArrOptionOptionList {
	acc := make([]ByteOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrOptionOptionListList) ToArray() []RuneOptionArrOptionOptionList {
	acc := make([]RuneOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrOptionOptionListList) ToArray() []Float32OptionArrOptionOptionList {
	acc := make([]Float32OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrOptionOptionListList) ToArray() []Float64OptionArrOptionOptionList {
	acc := make([]Float64OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrOptionOptionListList) ToArray() []Complex64OptionArrOptionOptionList {
	acc := make([]Complex64OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrOptionOptionListList) ToArray() []Complex128OptionArrOptionOptionList {
	acc := make([]Complex128OptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrOptionOptionListList) ToArray() []AnyOptionArrOptionOptionList {
	acc := make([]AnyOptionArrOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionOptionListList) ToArray() []BoolListOptionOptionList {
	acc := make([]BoolListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionOptionListList) ToArray() []StringListOptionOptionList {
	acc := make([]StringListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionOptionListList) ToArray() []IntListOptionOptionList {
	acc := make([]IntListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionOptionListList) ToArray() []Int8ListOptionOptionList {
	acc := make([]Int8ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionOptionListList) ToArray() []Int16ListOptionOptionList {
	acc := make([]Int16ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionOptionListList) ToArray() []Int32ListOptionOptionList {
	acc := make([]Int32ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionOptionListList) ToArray() []Int64ListOptionOptionList {
	acc := make([]Int64ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionOptionListList) ToArray() []UintListOptionOptionList {
	acc := make([]UintListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionOptionListList) ToArray() []Uint8ListOptionOptionList {
	acc := make([]Uint8ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionOptionListList) ToArray() []Uint16ListOptionOptionList {
	acc := make([]Uint16ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionOptionListList) ToArray() []Uint32ListOptionOptionList {
	acc := make([]Uint32ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionOptionListList) ToArray() []Uint64ListOptionOptionList {
	acc := make([]Uint64ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionOptionListList) ToArray() []UintptrListOptionOptionList {
	acc := make([]UintptrListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionOptionListList) ToArray() []ByteListOptionOptionList {
	acc := make([]ByteListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionOptionListList) ToArray() []RuneListOptionOptionList {
	acc := make([]RuneListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionOptionListList) ToArray() []Float32ListOptionOptionList {
	acc := make([]Float32ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionOptionListList) ToArray() []Float64ListOptionOptionList {
	acc := make([]Float64ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionOptionListList) ToArray() []Complex64ListOptionOptionList {
	acc := make([]Complex64ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionOptionListList) ToArray() []Complex128ListOptionOptionList {
	acc := make([]Complex128ListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionOptionListList) ToArray() []AnyListOptionOptionList {
	acc := make([]AnyListOptionOptionList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrListList) ToArray() []BoolArrList {
	acc := make([]BoolArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrListList) ToArray() []StringArrList {
	acc := make([]StringArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrListList) ToArray() []IntArrList {
	acc := make([]IntArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrListList) ToArray() []Int8ArrList {
	acc := make([]Int8ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrListList) ToArray() []Int16ArrList {
	acc := make([]Int16ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrListList) ToArray() []Int32ArrList {
	acc := make([]Int32ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrListList) ToArray() []Int64ArrList {
	acc := make([]Int64ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrListList) ToArray() []UintArrList {
	acc := make([]UintArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrListList) ToArray() []Uint8ArrList {
	acc := make([]Uint8ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrListList) ToArray() []Uint16ArrList {
	acc := make([]Uint16ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrListList) ToArray() []Uint32ArrList {
	acc := make([]Uint32ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrListList) ToArray() []Uint64ArrList {
	acc := make([]Uint64ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrListList) ToArray() []UintptrArrList {
	acc := make([]UintptrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrListList) ToArray() []ByteArrList {
	acc := make([]ByteArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrListList) ToArray() []RuneArrList {
	acc := make([]RuneArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrListList) ToArray() []Float32ArrList {
	acc := make([]Float32ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrListList) ToArray() []Float64ArrList {
	acc := make([]Float64ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrListList) ToArray() []Complex64ArrList {
	acc := make([]Complex64ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrListList) ToArray() []Complex128ArrList {
	acc := make([]Complex128ArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrListList) ToArray() []AnyArrList {
	acc := make([]AnyArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrArrListList) ToArray() []BoolArrArrList {
	acc := make([]BoolArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrArrListList) ToArray() []StringArrArrList {
	acc := make([]StringArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrArrListList) ToArray() []IntArrArrList {
	acc := make([]IntArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrArrListList) ToArray() []Int8ArrArrList {
	acc := make([]Int8ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrArrListList) ToArray() []Int16ArrArrList {
	acc := make([]Int16ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrArrListList) ToArray() []Int32ArrArrList {
	acc := make([]Int32ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrArrListList) ToArray() []Int64ArrArrList {
	acc := make([]Int64ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrArrListList) ToArray() []UintArrArrList {
	acc := make([]UintArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrArrListList) ToArray() []Uint8ArrArrList {
	acc := make([]Uint8ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrArrListList) ToArray() []Uint16ArrArrList {
	acc := make([]Uint16ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrArrListList) ToArray() []Uint32ArrArrList {
	acc := make([]Uint32ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrArrListList) ToArray() []Uint64ArrArrList {
	acc := make([]Uint64ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrArrListList) ToArray() []UintptrArrArrList {
	acc := make([]UintptrArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrArrListList) ToArray() []ByteArrArrList {
	acc := make([]ByteArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrArrListList) ToArray() []RuneArrArrList {
	acc := make([]RuneArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrArrListList) ToArray() []Float32ArrArrList {
	acc := make([]Float32ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrArrListList) ToArray() []Float64ArrArrList {
	acc := make([]Float64ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrArrListList) ToArray() []Complex64ArrArrList {
	acc := make([]Complex64ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrArrListList) ToArray() []Complex128ArrArrList {
	acc := make([]Complex128ArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrArrListList) ToArray() []AnyArrArrList {
	acc := make([]AnyArrArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrListList) ToArray() []BoolOptionArrList {
	acc := make([]BoolOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrListList) ToArray() []StringOptionArrList {
	acc := make([]StringOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrListList) ToArray() []IntOptionArrList {
	acc := make([]IntOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrListList) ToArray() []Int8OptionArrList {
	acc := make([]Int8OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrListList) ToArray() []Int16OptionArrList {
	acc := make([]Int16OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrListList) ToArray() []Int32OptionArrList {
	acc := make([]Int32OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrListList) ToArray() []Int64OptionArrList {
	acc := make([]Int64OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrListList) ToArray() []UintOptionArrList {
	acc := make([]UintOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrListList) ToArray() []Uint8OptionArrList {
	acc := make([]Uint8OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrListList) ToArray() []Uint16OptionArrList {
	acc := make([]Uint16OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrListList) ToArray() []Uint32OptionArrList {
	acc := make([]Uint32OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrListList) ToArray() []Uint64OptionArrList {
	acc := make([]Uint64OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrListList) ToArray() []UintptrOptionArrList {
	acc := make([]UintptrOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrListList) ToArray() []ByteOptionArrList {
	acc := make([]ByteOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrListList) ToArray() []RuneOptionArrList {
	acc := make([]RuneOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrListList) ToArray() []Float32OptionArrList {
	acc := make([]Float32OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrListList) ToArray() []Float64OptionArrList {
	acc := make([]Float64OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrListList) ToArray() []Complex64OptionArrList {
	acc := make([]Complex64OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrListList) ToArray() []Complex128OptionArrList {
	acc := make([]Complex128OptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrListList) ToArray() []AnyOptionArrList {
	acc := make([]AnyOptionArrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
