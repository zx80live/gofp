// bootstrap_list_toarray.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) ToArray() []bool {
	acc := make([]bool, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringList) ToArray() []string {
	acc := make([]string, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntList) ToArray() []int {
	acc := make([]int, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8List) ToArray() []int8 {
	acc := make([]int8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16List) ToArray() []int16 {
	acc := make([]int16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32List) ToArray() []int32 {
	acc := make([]int32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64List) ToArray() []int64 {
	acc := make([]int64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintList) ToArray() []uint {
	acc := make([]uint, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8List) ToArray() []uint8 {
	acc := make([]uint8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16List) ToArray() []uint16 {
	acc := make([]uint16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32List) ToArray() []uint32 {
	acc := make([]uint32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64List) ToArray() []uint64 {
	acc := make([]uint64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrList) ToArray() []uintptr {
	acc := make([]uintptr, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteList) ToArray() []byte {
	acc := make([]byte, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneList) ToArray() []rune {
	acc := make([]rune, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32List) ToArray() []float32 {
	acc := make([]float32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64List) ToArray() []float64 {
	acc := make([]float64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64List) ToArray() []complex64 {
	acc := make([]complex64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128List) ToArray() []complex128 {
	acc := make([]complex128, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyList) ToArray() []Any {
	acc := make([]Any, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionList) ToArray() []BoolOption {
	acc := make([]BoolOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionList) ToArray() []StringOption {
	acc := make([]StringOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionList) ToArray() []IntOption {
	acc := make([]IntOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionList) ToArray() []Int8Option {
	acc := make([]Int8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionList) ToArray() []Int16Option {
	acc := make([]Int16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionList) ToArray() []Int32Option {
	acc := make([]Int32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionList) ToArray() []Int64Option {
	acc := make([]Int64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionList) ToArray() []UintOption {
	acc := make([]UintOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionList) ToArray() []Uint8Option {
	acc := make([]Uint8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionList) ToArray() []Uint16Option {
	acc := make([]Uint16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionList) ToArray() []Uint32Option {
	acc := make([]Uint32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionList) ToArray() []Uint64Option {
	acc := make([]Uint64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionList) ToArray() []UintptrOption {
	acc := make([]UintptrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionList) ToArray() []ByteOption {
	acc := make([]ByteOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionList) ToArray() []RuneOption {
	acc := make([]RuneOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionList) ToArray() []Float32Option {
	acc := make([]Float32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionList) ToArray() []Float64Option {
	acc := make([]Float64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionList) ToArray() []Complex64Option {
	acc := make([]Complex64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionList) ToArray() []Complex128Option {
	acc := make([]Complex128Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionList) ToArray() []AnyOption {
	acc := make([]AnyOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayOptionList) ToArray() []BoolArrayOption {
	acc := make([]BoolArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayOptionList) ToArray() []StringArrayOption {
	acc := make([]StringArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayOptionList) ToArray() []IntArrayOption {
	acc := make([]IntArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayOptionList) ToArray() []Int8ArrayOption {
	acc := make([]Int8ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayOptionList) ToArray() []Int16ArrayOption {
	acc := make([]Int16ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayOptionList) ToArray() []Int32ArrayOption {
	acc := make([]Int32ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayOptionList) ToArray() []Int64ArrayOption {
	acc := make([]Int64ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayOptionList) ToArray() []UintArrayOption {
	acc := make([]UintArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayOptionList) ToArray() []Uint8ArrayOption {
	acc := make([]Uint8ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayOptionList) ToArray() []Uint16ArrayOption {
	acc := make([]Uint16ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayOptionList) ToArray() []Uint32ArrayOption {
	acc := make([]Uint32ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayOptionList) ToArray() []Uint64ArrayOption {
	acc := make([]Uint64ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayOptionList) ToArray() []UintptrArrayOption {
	acc := make([]UintptrArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayOptionList) ToArray() []ByteArrayOption {
	acc := make([]ByteArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayOptionList) ToArray() []RuneArrayOption {
	acc := make([]RuneArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayOptionList) ToArray() []Float32ArrayOption {
	acc := make([]Float32ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayOptionList) ToArray() []Float64ArrayOption {
	acc := make([]Float64ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayOptionList) ToArray() []Complex64ArrayOption {
	acc := make([]Complex64ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayOptionList) ToArray() []Complex128ArrayOption {
	acc := make([]Complex128ArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayOptionList) ToArray() []AnyArrayOption {
	acc := make([]AnyArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayArrayOptionList) ToArray() []BoolArrayArrayOption {
	acc := make([]BoolArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayArrayOptionList) ToArray() []StringArrayArrayOption {
	acc := make([]StringArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayArrayOptionList) ToArray() []IntArrayArrayOption {
	acc := make([]IntArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayArrayOptionList) ToArray() []Int8ArrayArrayOption {
	acc := make([]Int8ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayArrayOptionList) ToArray() []Int16ArrayArrayOption {
	acc := make([]Int16ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayArrayOptionList) ToArray() []Int32ArrayArrayOption {
	acc := make([]Int32ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayArrayOptionList) ToArray() []Int64ArrayArrayOption {
	acc := make([]Int64ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayArrayOptionList) ToArray() []UintArrayArrayOption {
	acc := make([]UintArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayArrayOptionList) ToArray() []Uint8ArrayArrayOption {
	acc := make([]Uint8ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayArrayOptionList) ToArray() []Uint16ArrayArrayOption {
	acc := make([]Uint16ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayArrayOptionList) ToArray() []Uint32ArrayArrayOption {
	acc := make([]Uint32ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayArrayOptionList) ToArray() []Uint64ArrayArrayOption {
	acc := make([]Uint64ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayArrayOptionList) ToArray() []UintptrArrayArrayOption {
	acc := make([]UintptrArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayArrayOptionList) ToArray() []ByteArrayArrayOption {
	acc := make([]ByteArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayArrayOptionList) ToArray() []RuneArrayArrayOption {
	acc := make([]RuneArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayArrayOptionList) ToArray() []Float32ArrayArrayOption {
	acc := make([]Float32ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayArrayOptionList) ToArray() []Float64ArrayArrayOption {
	acc := make([]Float64ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayArrayOptionList) ToArray() []Complex64ArrayArrayOption {
	acc := make([]Complex64ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayArrayOptionList) ToArray() []Complex128ArrayArrayOption {
	acc := make([]Complex128ArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayArrayOptionList) ToArray() []AnyArrayArrayOption {
	acc := make([]AnyArrayArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrayOptionList) ToArray() []BoolOptionArrayOption {
	acc := make([]BoolOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrayOptionList) ToArray() []StringOptionArrayOption {
	acc := make([]StringOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrayOptionList) ToArray() []IntOptionArrayOption {
	acc := make([]IntOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrayOptionList) ToArray() []Int8OptionArrayOption {
	acc := make([]Int8OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrayOptionList) ToArray() []Int16OptionArrayOption {
	acc := make([]Int16OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrayOptionList) ToArray() []Int32OptionArrayOption {
	acc := make([]Int32OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrayOptionList) ToArray() []Int64OptionArrayOption {
	acc := make([]Int64OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrayOptionList) ToArray() []UintOptionArrayOption {
	acc := make([]UintOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrayOptionList) ToArray() []Uint8OptionArrayOption {
	acc := make([]Uint8OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrayOptionList) ToArray() []Uint16OptionArrayOption {
	acc := make([]Uint16OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrayOptionList) ToArray() []Uint32OptionArrayOption {
	acc := make([]Uint32OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrayOptionList) ToArray() []Uint64OptionArrayOption {
	acc := make([]Uint64OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrayOptionList) ToArray() []UintptrOptionArrayOption {
	acc := make([]UintptrOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrayOptionList) ToArray() []ByteOptionArrayOption {
	acc := make([]ByteOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrayOptionList) ToArray() []RuneOptionArrayOption {
	acc := make([]RuneOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrayOptionList) ToArray() []Float32OptionArrayOption {
	acc := make([]Float32OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrayOptionList) ToArray() []Float64OptionArrayOption {
	acc := make([]Float64OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrayOptionList) ToArray() []Complex64OptionArrayOption {
	acc := make([]Complex64OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrayOptionList) ToArray() []Complex128OptionArrayOption {
	acc := make([]Complex128OptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrayOptionList) ToArray() []AnyOptionArrayOption {
	acc := make([]AnyOptionArrayOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionList) ToArray() []BoolListOption {
	acc := make([]BoolListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionList) ToArray() []StringListOption {
	acc := make([]StringListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionList) ToArray() []IntListOption {
	acc := make([]IntListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionList) ToArray() []Int8ListOption {
	acc := make([]Int8ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionList) ToArray() []Int16ListOption {
	acc := make([]Int16ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionList) ToArray() []Int32ListOption {
	acc := make([]Int32ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionList) ToArray() []Int64ListOption {
	acc := make([]Int64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionList) ToArray() []UintListOption {
	acc := make([]UintListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionList) ToArray() []Uint8ListOption {
	acc := make([]Uint8ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionList) ToArray() []Uint16ListOption {
	acc := make([]Uint16ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionList) ToArray() []Uint32ListOption {
	acc := make([]Uint32ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionList) ToArray() []Uint64ListOption {
	acc := make([]Uint64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionList) ToArray() []UintptrListOption {
	acc := make([]UintptrListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionList) ToArray() []ByteListOption {
	acc := make([]ByteListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionList) ToArray() []RuneListOption {
	acc := make([]RuneListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionList) ToArray() []Float32ListOption {
	acc := make([]Float32ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionList) ToArray() []Float64ListOption {
	acc := make([]Float64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionList) ToArray() []Complex64ListOption {
	acc := make([]Complex64ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionList) ToArray() []Complex128ListOption {
	acc := make([]Complex128ListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionList) ToArray() []AnyListOption {
	acc := make([]AnyListOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionOptionList) ToArray() []BoolOptionOption {
	acc := make([]BoolOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionOptionList) ToArray() []StringOptionOption {
	acc := make([]StringOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionOptionList) ToArray() []IntOptionOption {
	acc := make([]IntOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionOptionList) ToArray() []Int8OptionOption {
	acc := make([]Int8OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionOptionList) ToArray() []Int16OptionOption {
	acc := make([]Int16OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionOptionList) ToArray() []Int32OptionOption {
	acc := make([]Int32OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionOptionList) ToArray() []Int64OptionOption {
	acc := make([]Int64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionOptionList) ToArray() []UintOptionOption {
	acc := make([]UintOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionOptionList) ToArray() []Uint8OptionOption {
	acc := make([]Uint8OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionOptionList) ToArray() []Uint16OptionOption {
	acc := make([]Uint16OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionOptionList) ToArray() []Uint32OptionOption {
	acc := make([]Uint32OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionOptionList) ToArray() []Uint64OptionOption {
	acc := make([]Uint64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionOptionList) ToArray() []UintptrOptionOption {
	acc := make([]UintptrOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionOptionList) ToArray() []ByteOptionOption {
	acc := make([]ByteOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionOptionList) ToArray() []RuneOptionOption {
	acc := make([]RuneOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionOptionList) ToArray() []Float32OptionOption {
	acc := make([]Float32OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionOptionList) ToArray() []Float64OptionOption {
	acc := make([]Float64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionOptionList) ToArray() []Complex64OptionOption {
	acc := make([]Complex64OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionOptionList) ToArray() []Complex128OptionOption {
	acc := make([]Complex128OptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionOptionList) ToArray() []AnyOptionOption {
	acc := make([]AnyOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayOptionOptionList) ToArray() []BoolArrayOptionOption {
	acc := make([]BoolArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayOptionOptionList) ToArray() []StringArrayOptionOption {
	acc := make([]StringArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayOptionOptionList) ToArray() []IntArrayOptionOption {
	acc := make([]IntArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayOptionOptionList) ToArray() []Int8ArrayOptionOption {
	acc := make([]Int8ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayOptionOptionList) ToArray() []Int16ArrayOptionOption {
	acc := make([]Int16ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayOptionOptionList) ToArray() []Int32ArrayOptionOption {
	acc := make([]Int32ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayOptionOptionList) ToArray() []Int64ArrayOptionOption {
	acc := make([]Int64ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayOptionOptionList) ToArray() []UintArrayOptionOption {
	acc := make([]UintArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayOptionOptionList) ToArray() []Uint8ArrayOptionOption {
	acc := make([]Uint8ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayOptionOptionList) ToArray() []Uint16ArrayOptionOption {
	acc := make([]Uint16ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayOptionOptionList) ToArray() []Uint32ArrayOptionOption {
	acc := make([]Uint32ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayOptionOptionList) ToArray() []Uint64ArrayOptionOption {
	acc := make([]Uint64ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayOptionOptionList) ToArray() []UintptrArrayOptionOption {
	acc := make([]UintptrArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayOptionOptionList) ToArray() []ByteArrayOptionOption {
	acc := make([]ByteArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayOptionOptionList) ToArray() []RuneArrayOptionOption {
	acc := make([]RuneArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayOptionOptionList) ToArray() []Float32ArrayOptionOption {
	acc := make([]Float32ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayOptionOptionList) ToArray() []Float64ArrayOptionOption {
	acc := make([]Float64ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayOptionOptionList) ToArray() []Complex64ArrayOptionOption {
	acc := make([]Complex64ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayOptionOptionList) ToArray() []Complex128ArrayOptionOption {
	acc := make([]Complex128ArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayOptionOptionList) ToArray() []AnyArrayOptionOption {
	acc := make([]AnyArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayArrayOptionOptionList) ToArray() []BoolArrayArrayOptionOption {
	acc := make([]BoolArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayArrayOptionOptionList) ToArray() []StringArrayArrayOptionOption {
	acc := make([]StringArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayArrayOptionOptionList) ToArray() []IntArrayArrayOptionOption {
	acc := make([]IntArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayArrayOptionOptionList) ToArray() []Int8ArrayArrayOptionOption {
	acc := make([]Int8ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayArrayOptionOptionList) ToArray() []Int16ArrayArrayOptionOption {
	acc := make([]Int16ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayArrayOptionOptionList) ToArray() []Int32ArrayArrayOptionOption {
	acc := make([]Int32ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayArrayOptionOptionList) ToArray() []Int64ArrayArrayOptionOption {
	acc := make([]Int64ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayArrayOptionOptionList) ToArray() []UintArrayArrayOptionOption {
	acc := make([]UintArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayArrayOptionOptionList) ToArray() []Uint8ArrayArrayOptionOption {
	acc := make([]Uint8ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayArrayOptionOptionList) ToArray() []Uint16ArrayArrayOptionOption {
	acc := make([]Uint16ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayArrayOptionOptionList) ToArray() []Uint32ArrayArrayOptionOption {
	acc := make([]Uint32ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayArrayOptionOptionList) ToArray() []Uint64ArrayArrayOptionOption {
	acc := make([]Uint64ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayArrayOptionOptionList) ToArray() []UintptrArrayArrayOptionOption {
	acc := make([]UintptrArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayArrayOptionOptionList) ToArray() []ByteArrayArrayOptionOption {
	acc := make([]ByteArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayArrayOptionOptionList) ToArray() []RuneArrayArrayOptionOption {
	acc := make([]RuneArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayArrayOptionOptionList) ToArray() []Float32ArrayArrayOptionOption {
	acc := make([]Float32ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayArrayOptionOptionList) ToArray() []Float64ArrayArrayOptionOption {
	acc := make([]Float64ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayArrayOptionOptionList) ToArray() []Complex64ArrayArrayOptionOption {
	acc := make([]Complex64ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayArrayOptionOptionList) ToArray() []Complex128ArrayArrayOptionOption {
	acc := make([]Complex128ArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayArrayOptionOptionList) ToArray() []AnyArrayArrayOptionOption {
	acc := make([]AnyArrayArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrayOptionOptionList) ToArray() []BoolOptionArrayOptionOption {
	acc := make([]BoolOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrayOptionOptionList) ToArray() []StringOptionArrayOptionOption {
	acc := make([]StringOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrayOptionOptionList) ToArray() []IntOptionArrayOptionOption {
	acc := make([]IntOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrayOptionOptionList) ToArray() []Int8OptionArrayOptionOption {
	acc := make([]Int8OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrayOptionOptionList) ToArray() []Int16OptionArrayOptionOption {
	acc := make([]Int16OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrayOptionOptionList) ToArray() []Int32OptionArrayOptionOption {
	acc := make([]Int32OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrayOptionOptionList) ToArray() []Int64OptionArrayOptionOption {
	acc := make([]Int64OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrayOptionOptionList) ToArray() []UintOptionArrayOptionOption {
	acc := make([]UintOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrayOptionOptionList) ToArray() []Uint8OptionArrayOptionOption {
	acc := make([]Uint8OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrayOptionOptionList) ToArray() []Uint16OptionArrayOptionOption {
	acc := make([]Uint16OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrayOptionOptionList) ToArray() []Uint32OptionArrayOptionOption {
	acc := make([]Uint32OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrayOptionOptionList) ToArray() []Uint64OptionArrayOptionOption {
	acc := make([]Uint64OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrayOptionOptionList) ToArray() []UintptrOptionArrayOptionOption {
	acc := make([]UintptrOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrayOptionOptionList) ToArray() []ByteOptionArrayOptionOption {
	acc := make([]ByteOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrayOptionOptionList) ToArray() []RuneOptionArrayOptionOption {
	acc := make([]RuneOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrayOptionOptionList) ToArray() []Float32OptionArrayOptionOption {
	acc := make([]Float32OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrayOptionOptionList) ToArray() []Float64OptionArrayOptionOption {
	acc := make([]Float64OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrayOptionOptionList) ToArray() []Complex64OptionArrayOptionOption {
	acc := make([]Complex64OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrayOptionOptionList) ToArray() []Complex128OptionArrayOptionOption {
	acc := make([]Complex128OptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrayOptionOptionList) ToArray() []AnyOptionArrayOptionOption {
	acc := make([]AnyOptionArrayOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionOptionList) ToArray() []BoolListOptionOption {
	acc := make([]BoolListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionOptionList) ToArray() []StringListOptionOption {
	acc := make([]StringListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionOptionList) ToArray() []IntListOptionOption {
	acc := make([]IntListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionOptionList) ToArray() []Int8ListOptionOption {
	acc := make([]Int8ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionOptionList) ToArray() []Int16ListOptionOption {
	acc := make([]Int16ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionOptionList) ToArray() []Int32ListOptionOption {
	acc := make([]Int32ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionOptionList) ToArray() []Int64ListOptionOption {
	acc := make([]Int64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionOptionList) ToArray() []UintListOptionOption {
	acc := make([]UintListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionOptionList) ToArray() []Uint8ListOptionOption {
	acc := make([]Uint8ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionOptionList) ToArray() []Uint16ListOptionOption {
	acc := make([]Uint16ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionOptionList) ToArray() []Uint32ListOptionOption {
	acc := make([]Uint32ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionOptionList) ToArray() []Uint64ListOptionOption {
	acc := make([]Uint64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionOptionList) ToArray() []UintptrListOptionOption {
	acc := make([]UintptrListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionOptionList) ToArray() []ByteListOptionOption {
	acc := make([]ByteListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionOptionList) ToArray() []RuneListOptionOption {
	acc := make([]RuneListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionOptionList) ToArray() []Float32ListOptionOption {
	acc := make([]Float32ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionOptionList) ToArray() []Float64ListOptionOption {
	acc := make([]Float64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionOptionList) ToArray() []Complex64ListOptionOption {
	acc := make([]Complex64ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionOptionList) ToArray() []Complex128ListOptionOption {
	acc := make([]Complex128ListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionOptionList) ToArray() []AnyListOptionOption {
	acc := make([]AnyListOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionOptionOptionList) ToArray() []BoolOptionOptionOption {
	acc := make([]BoolOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionOptionOptionList) ToArray() []StringOptionOptionOption {
	acc := make([]StringOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionOptionOptionList) ToArray() []IntOptionOptionOption {
	acc := make([]IntOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionOptionOptionList) ToArray() []Int8OptionOptionOption {
	acc := make([]Int8OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionOptionOptionList) ToArray() []Int16OptionOptionOption {
	acc := make([]Int16OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionOptionOptionList) ToArray() []Int32OptionOptionOption {
	acc := make([]Int32OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionOptionOptionList) ToArray() []Int64OptionOptionOption {
	acc := make([]Int64OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionOptionOptionList) ToArray() []UintOptionOptionOption {
	acc := make([]UintOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionOptionOptionList) ToArray() []Uint8OptionOptionOption {
	acc := make([]Uint8OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionOptionOptionList) ToArray() []Uint16OptionOptionOption {
	acc := make([]Uint16OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionOptionOptionList) ToArray() []Uint32OptionOptionOption {
	acc := make([]Uint32OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionOptionOptionList) ToArray() []Uint64OptionOptionOption {
	acc := make([]Uint64OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionOptionOptionList) ToArray() []UintptrOptionOptionOption {
	acc := make([]UintptrOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionOptionOptionList) ToArray() []ByteOptionOptionOption {
	acc := make([]ByteOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionOptionOptionList) ToArray() []RuneOptionOptionOption {
	acc := make([]RuneOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionOptionOptionList) ToArray() []Float32OptionOptionOption {
	acc := make([]Float32OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionOptionOptionList) ToArray() []Float64OptionOptionOption {
	acc := make([]Float64OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionOptionOptionList) ToArray() []Complex64OptionOptionOption {
	acc := make([]Complex64OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionOptionOptionList) ToArray() []Complex128OptionOptionOption {
	acc := make([]Complex128OptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionOptionOptionList) ToArray() []AnyOptionOptionOption {
	acc := make([]AnyOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayOptionOptionOptionList) ToArray() []BoolArrayOptionOptionOption {
	acc := make([]BoolArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayOptionOptionOptionList) ToArray() []StringArrayOptionOptionOption {
	acc := make([]StringArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayOptionOptionOptionList) ToArray() []IntArrayOptionOptionOption {
	acc := make([]IntArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayOptionOptionOptionList) ToArray() []Int8ArrayOptionOptionOption {
	acc := make([]Int8ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayOptionOptionOptionList) ToArray() []Int16ArrayOptionOptionOption {
	acc := make([]Int16ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayOptionOptionOptionList) ToArray() []Int32ArrayOptionOptionOption {
	acc := make([]Int32ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayOptionOptionOptionList) ToArray() []Int64ArrayOptionOptionOption {
	acc := make([]Int64ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayOptionOptionOptionList) ToArray() []UintArrayOptionOptionOption {
	acc := make([]UintArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayOptionOptionOptionList) ToArray() []Uint8ArrayOptionOptionOption {
	acc := make([]Uint8ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayOptionOptionOptionList) ToArray() []Uint16ArrayOptionOptionOption {
	acc := make([]Uint16ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayOptionOptionOptionList) ToArray() []Uint32ArrayOptionOptionOption {
	acc := make([]Uint32ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayOptionOptionOptionList) ToArray() []Uint64ArrayOptionOptionOption {
	acc := make([]Uint64ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayOptionOptionOptionList) ToArray() []UintptrArrayOptionOptionOption {
	acc := make([]UintptrArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayOptionOptionOptionList) ToArray() []ByteArrayOptionOptionOption {
	acc := make([]ByteArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayOptionOptionOptionList) ToArray() []RuneArrayOptionOptionOption {
	acc := make([]RuneArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayOptionOptionOptionList) ToArray() []Float32ArrayOptionOptionOption {
	acc := make([]Float32ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayOptionOptionOptionList) ToArray() []Float64ArrayOptionOptionOption {
	acc := make([]Float64ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayOptionOptionOptionList) ToArray() []Complex64ArrayOptionOptionOption {
	acc := make([]Complex64ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayOptionOptionOptionList) ToArray() []Complex128ArrayOptionOptionOption {
	acc := make([]Complex128ArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayOptionOptionOptionList) ToArray() []AnyArrayOptionOptionOption {
	acc := make([]AnyArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayArrayOptionOptionOptionList) ToArray() []BoolArrayArrayOptionOptionOption {
	acc := make([]BoolArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayArrayOptionOptionOptionList) ToArray() []StringArrayArrayOptionOptionOption {
	acc := make([]StringArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayArrayOptionOptionOptionList) ToArray() []IntArrayArrayOptionOptionOption {
	acc := make([]IntArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayArrayOptionOptionOptionList) ToArray() []Int8ArrayArrayOptionOptionOption {
	acc := make([]Int8ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayArrayOptionOptionOptionList) ToArray() []Int16ArrayArrayOptionOptionOption {
	acc := make([]Int16ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayArrayOptionOptionOptionList) ToArray() []Int32ArrayArrayOptionOptionOption {
	acc := make([]Int32ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayArrayOptionOptionOptionList) ToArray() []Int64ArrayArrayOptionOptionOption {
	acc := make([]Int64ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayArrayOptionOptionOptionList) ToArray() []UintArrayArrayOptionOptionOption {
	acc := make([]UintArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayArrayOptionOptionOptionList) ToArray() []Uint8ArrayArrayOptionOptionOption {
	acc := make([]Uint8ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayArrayOptionOptionOptionList) ToArray() []Uint16ArrayArrayOptionOptionOption {
	acc := make([]Uint16ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayArrayOptionOptionOptionList) ToArray() []Uint32ArrayArrayOptionOptionOption {
	acc := make([]Uint32ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayArrayOptionOptionOptionList) ToArray() []Uint64ArrayArrayOptionOptionOption {
	acc := make([]Uint64ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayArrayOptionOptionOptionList) ToArray() []UintptrArrayArrayOptionOptionOption {
	acc := make([]UintptrArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayArrayOptionOptionOptionList) ToArray() []ByteArrayArrayOptionOptionOption {
	acc := make([]ByteArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayArrayOptionOptionOptionList) ToArray() []RuneArrayArrayOptionOptionOption {
	acc := make([]RuneArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayArrayOptionOptionOptionList) ToArray() []Float32ArrayArrayOptionOptionOption {
	acc := make([]Float32ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayArrayOptionOptionOptionList) ToArray() []Float64ArrayArrayOptionOptionOption {
	acc := make([]Float64ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayArrayOptionOptionOptionList) ToArray() []Complex64ArrayArrayOptionOptionOption {
	acc := make([]Complex64ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayArrayOptionOptionOptionList) ToArray() []Complex128ArrayArrayOptionOptionOption {
	acc := make([]Complex128ArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayArrayOptionOptionOptionList) ToArray() []AnyArrayArrayOptionOptionOption {
	acc := make([]AnyArrayArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrayOptionOptionOptionList) ToArray() []BoolOptionArrayOptionOptionOption {
	acc := make([]BoolOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrayOptionOptionOptionList) ToArray() []StringOptionArrayOptionOptionOption {
	acc := make([]StringOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrayOptionOptionOptionList) ToArray() []IntOptionArrayOptionOptionOption {
	acc := make([]IntOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrayOptionOptionOptionList) ToArray() []Int8OptionArrayOptionOptionOption {
	acc := make([]Int8OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrayOptionOptionOptionList) ToArray() []Int16OptionArrayOptionOptionOption {
	acc := make([]Int16OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrayOptionOptionOptionList) ToArray() []Int32OptionArrayOptionOptionOption {
	acc := make([]Int32OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrayOptionOptionOptionList) ToArray() []Int64OptionArrayOptionOptionOption {
	acc := make([]Int64OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrayOptionOptionOptionList) ToArray() []UintOptionArrayOptionOptionOption {
	acc := make([]UintOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrayOptionOptionOptionList) ToArray() []Uint8OptionArrayOptionOptionOption {
	acc := make([]Uint8OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrayOptionOptionOptionList) ToArray() []Uint16OptionArrayOptionOptionOption {
	acc := make([]Uint16OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrayOptionOptionOptionList) ToArray() []Uint32OptionArrayOptionOptionOption {
	acc := make([]Uint32OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrayOptionOptionOptionList) ToArray() []Uint64OptionArrayOptionOptionOption {
	acc := make([]Uint64OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrayOptionOptionOptionList) ToArray() []UintptrOptionArrayOptionOptionOption {
	acc := make([]UintptrOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrayOptionOptionOptionList) ToArray() []ByteOptionArrayOptionOptionOption {
	acc := make([]ByteOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrayOptionOptionOptionList) ToArray() []RuneOptionArrayOptionOptionOption {
	acc := make([]RuneOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrayOptionOptionOptionList) ToArray() []Float32OptionArrayOptionOptionOption {
	acc := make([]Float32OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrayOptionOptionOptionList) ToArray() []Float64OptionArrayOptionOptionOption {
	acc := make([]Float64OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrayOptionOptionOptionList) ToArray() []Complex64OptionArrayOptionOptionOption {
	acc := make([]Complex64OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrayOptionOptionOptionList) ToArray() []Complex128OptionArrayOptionOptionOption {
	acc := make([]Complex128OptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrayOptionOptionOptionList) ToArray() []AnyOptionArrayOptionOptionOption {
	acc := make([]AnyOptionArrayOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListOptionOptionOptionList) ToArray() []BoolListOptionOptionOption {
	acc := make([]BoolListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListOptionOptionOptionList) ToArray() []StringListOptionOptionOption {
	acc := make([]StringListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListOptionOptionOptionList) ToArray() []IntListOptionOptionOption {
	acc := make([]IntListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListOptionOptionOptionList) ToArray() []Int8ListOptionOptionOption {
	acc := make([]Int8ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListOptionOptionOptionList) ToArray() []Int16ListOptionOptionOption {
	acc := make([]Int16ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListOptionOptionOptionList) ToArray() []Int32ListOptionOptionOption {
	acc := make([]Int32ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListOptionOptionOptionList) ToArray() []Int64ListOptionOptionOption {
	acc := make([]Int64ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListOptionOptionOptionList) ToArray() []UintListOptionOptionOption {
	acc := make([]UintListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListOptionOptionOptionList) ToArray() []Uint8ListOptionOptionOption {
	acc := make([]Uint8ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListOptionOptionOptionList) ToArray() []Uint16ListOptionOptionOption {
	acc := make([]Uint16ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListOptionOptionOptionList) ToArray() []Uint32ListOptionOptionOption {
	acc := make([]Uint32ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListOptionOptionOptionList) ToArray() []Uint64ListOptionOptionOption {
	acc := make([]Uint64ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListOptionOptionOptionList) ToArray() []UintptrListOptionOptionOption {
	acc := make([]UintptrListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListOptionOptionOptionList) ToArray() []ByteListOptionOptionOption {
	acc := make([]ByteListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListOptionOptionOptionList) ToArray() []RuneListOptionOptionOption {
	acc := make([]RuneListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListOptionOptionOptionList) ToArray() []Float32ListOptionOptionOption {
	acc := make([]Float32ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListOptionOptionOptionList) ToArray() []Float64ListOptionOptionOption {
	acc := make([]Float64ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListOptionOptionOptionList) ToArray() []Complex64ListOptionOptionOption {
	acc := make([]Complex64ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListOptionOptionOptionList) ToArray() []Complex128ListOptionOptionOption {
	acc := make([]Complex128ListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListOptionOptionOptionList) ToArray() []AnyListOptionOptionOption {
	acc := make([]AnyListOptionOptionOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayList) ToArray() [][]bool {
	acc := make([][]bool, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayList) ToArray() [][]string {
	acc := make([][]string, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayList) ToArray() [][]int {
	acc := make([][]int, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayList) ToArray() [][]int8 {
	acc := make([][]int8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayList) ToArray() [][]int16 {
	acc := make([][]int16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayList) ToArray() [][]int32 {
	acc := make([][]int32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayList) ToArray() [][]int64 {
	acc := make([][]int64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayList) ToArray() [][]uint {
	acc := make([][]uint, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayList) ToArray() [][]uint8 {
	acc := make([][]uint8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayList) ToArray() [][]uint16 {
	acc := make([][]uint16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayList) ToArray() [][]uint32 {
	acc := make([][]uint32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayList) ToArray() [][]uint64 {
	acc := make([][]uint64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayList) ToArray() [][]uintptr {
	acc := make([][]uintptr, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayList) ToArray() [][]byte {
	acc := make([][]byte, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayList) ToArray() [][]rune {
	acc := make([][]rune, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayList) ToArray() [][]float32 {
	acc := make([][]float32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayList) ToArray() [][]float64 {
	acc := make([][]float64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayList) ToArray() [][]complex64 {
	acc := make([][]complex64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayList) ToArray() [][]complex128 {
	acc := make([][]complex128, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayList) ToArray() [][]Any {
	acc := make([][]Any, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolArrayArrayList) ToArray() [][][]bool {
	acc := make([][][]bool, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringArrayArrayList) ToArray() [][][]string {
	acc := make([][][]string, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntArrayArrayList) ToArray() [][][]int {
	acc := make([][][]int, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ArrayArrayList) ToArray() [][][]int8 {
	acc := make([][][]int8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ArrayArrayList) ToArray() [][][]int16 {
	acc := make([][][]int16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ArrayArrayList) ToArray() [][][]int32 {
	acc := make([][][]int32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ArrayArrayList) ToArray() [][][]int64 {
	acc := make([][][]int64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintArrayArrayList) ToArray() [][][]uint {
	acc := make([][][]uint, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ArrayArrayList) ToArray() [][][]uint8 {
	acc := make([][][]uint8, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ArrayArrayList) ToArray() [][][]uint16 {
	acc := make([][][]uint16, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ArrayArrayList) ToArray() [][][]uint32 {
	acc := make([][][]uint32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ArrayArrayList) ToArray() [][][]uint64 {
	acc := make([][][]uint64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrArrayArrayList) ToArray() [][][]uintptr {
	acc := make([][][]uintptr, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteArrayArrayList) ToArray() [][][]byte {
	acc := make([][][]byte, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneArrayArrayList) ToArray() [][][]rune {
	acc := make([][][]rune, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ArrayArrayList) ToArray() [][][]float32 {
	acc := make([][][]float32, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ArrayArrayList) ToArray() [][][]float64 {
	acc := make([][][]float64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ArrayArrayList) ToArray() [][][]complex64 {
	acc := make([][][]complex64, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ArrayArrayList) ToArray() [][][]complex128 {
	acc := make([][][]complex128, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyArrayArrayList) ToArray() [][][]Any {
	acc := make([][][]Any, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolOptionArrayList) ToArray() [][]BoolOption {
	acc := make([][]BoolOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringOptionArrayList) ToArray() [][]StringOption {
	acc := make([][]StringOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntOptionArrayList) ToArray() [][]IntOption {
	acc := make([][]IntOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8OptionArrayList) ToArray() [][]Int8Option {
	acc := make([][]Int8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16OptionArrayList) ToArray() [][]Int16Option {
	acc := make([][]Int16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32OptionArrayList) ToArray() [][]Int32Option {
	acc := make([][]Int32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64OptionArrayList) ToArray() [][]Int64Option {
	acc := make([][]Int64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintOptionArrayList) ToArray() [][]UintOption {
	acc := make([][]UintOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8OptionArrayList) ToArray() [][]Uint8Option {
	acc := make([][]Uint8Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16OptionArrayList) ToArray() [][]Uint16Option {
	acc := make([][]Uint16Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32OptionArrayList) ToArray() [][]Uint32Option {
	acc := make([][]Uint32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64OptionArrayList) ToArray() [][]Uint64Option {
	acc := make([][]Uint64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrOptionArrayList) ToArray() [][]UintptrOption {
	acc := make([][]UintptrOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteOptionArrayList) ToArray() [][]ByteOption {
	acc := make([][]ByteOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneOptionArrayList) ToArray() [][]RuneOption {
	acc := make([][]RuneOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32OptionArrayList) ToArray() [][]Float32Option {
	acc := make([][]Float32Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64OptionArrayList) ToArray() [][]Float64Option {
	acc := make([][]Float64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64OptionArrayList) ToArray() [][]Complex64Option {
	acc := make([][]Complex64Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128OptionArrayList) ToArray() [][]Complex128Option {
	acc := make([][]Complex128Option, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyOptionArrayList) ToArray() [][]AnyOption {
	acc := make([][]AnyOption, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l BoolListList) ToArray() []BoolList {
	acc := make([]BoolList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l StringListList) ToArray() []StringList {
	acc := make([]StringList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l IntListList) ToArray() []IntList {
	acc := make([]IntList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int8ListList) ToArray() []Int8List {
	acc := make([]Int8List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int16ListList) ToArray() []Int16List {
	acc := make([]Int16List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int32ListList) ToArray() []Int32List {
	acc := make([]Int32List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Int64ListList) ToArray() []Int64List {
	acc := make([]Int64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintListList) ToArray() []UintList {
	acc := make([]UintList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint8ListList) ToArray() []Uint8List {
	acc := make([]Uint8List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint16ListList) ToArray() []Uint16List {
	acc := make([]Uint16List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint32ListList) ToArray() []Uint32List {
	acc := make([]Uint32List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Uint64ListList) ToArray() []Uint64List {
	acc := make([]Uint64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l UintptrListList) ToArray() []UintptrList {
	acc := make([]UintptrList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l ByteListList) ToArray() []ByteList {
	acc := make([]ByteList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l RuneListList) ToArray() []RuneList {
	acc := make([]RuneList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float32ListList) ToArray() []Float32List {
	acc := make([]Float32List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Float64ListList) ToArray() []Float64List {
	acc := make([]Float64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex64ListList) ToArray() []Complex64List {
	acc := make([]Complex64List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l Complex128ListList) ToArray() []Complex128List {
	acc := make([]Complex128List, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
func (l AnyListList) ToArray() []AnyList {
	acc := make([]AnyList, l.Size())
	xs := l
	i := 0
	for xs.NonEmpty() {
		acc[i] = *xs.head
		xs = *xs.tail
	}
	return acc
}
