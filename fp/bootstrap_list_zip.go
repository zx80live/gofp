// bootstrap_list_zip.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l BoolList) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l StringList) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l IntList) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Int64List) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l ByteList) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l RuneList) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float32List) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Float64List) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l AnyList) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipBoolList(l2 BoolList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipStringList(l2 StringList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipIntList(l2 IntList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipInt64List(l2 Int64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipByteList(l2 ByteList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipRuneList(l2 RuneList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat32List(l2 Float32List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat64List(l2 Float64List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipAnyList(l2 AnyList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipTuple2List(l2 Tuple2List) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipBoolArrayList(l2 BoolArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipStringArrayList(l2 StringArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipIntArrayList(l2 IntArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipInt64ArrayList(l2 Int64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipByteArrayList(l2 ByteArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipRuneArrayList(l2 RuneArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat32ArrayList(l2 Float32ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat64ArrayList(l2 Float64ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipAnyArrayList(l2 AnyArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipTuple2ArrayList(l2 Tuple2ArrayList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipBoolOptionList(l2 BoolOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipStringOptionList(l2 StringOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipIntOptionList(l2 IntOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipInt64OptionList(l2 Int64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipByteOptionList(l2 ByteOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipRuneOptionList(l2 RuneOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat32OptionList(l2 Float32OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat64OptionList(l2 Float64OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipAnyOptionList(l2 AnyOptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipTuple2OptionList(l2 Tuple2OptionList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipBoolListList(l2 BoolListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipStringListList(l2 StringListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipIntListList(l2 IntListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipInt64ListList(l2 Int64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipByteListList(l2 ByteListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipRuneListList(l2 RuneListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat32ListList(l2 Float32ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat64ListList(l2 Float64ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipAnyListList(l2 AnyListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipTuple2ListList(l2 Tuple2ListList) Tuple2List {
	zipped := NilTuple2
	xs1 := l
	xs2 := l2
	for xs1.NonEmpty() && xs2.NonEmpty() {
		zipped = zipped.Cons(Tuple2{*xs1.head, *xs2.head})
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipBoolArray(l2 BoolArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipStringArray(l2 StringArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipIntArray(l2 IntArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipInt64Array(l2 Int64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipByteArray(l2 ByteArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipRuneArray(l2 RuneArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat32Array(l2 Float32Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipFloat64Array(l2 Float64Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipAnyArray(l2 AnyArray) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
func (l Tuple2List) ZipTuple2Array(l2 Tuple2Array) Tuple2List {
	zipped := NilTuple2
	xs := l
	len2 := len(l2)
	for i := 0; xs.NonEmpty() && i < len2; i++ {
		zipped = zipped.Cons(Tuple2{*xs.head, l2[i]})
		xs = *xs.tail
	}
	return zipped.Reverse()
}
