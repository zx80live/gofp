// bootstrap_option_equals.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (a BoolOption) Equals(b BoolOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOption) Equals(b StringOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOption) Equals(b IntOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8Option) Equals(b Int8Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16Option) Equals(b Int16Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32Option) Equals(b Int32Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64Option) Equals(b Int64Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintOption) Equals(b UintOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8Option) Equals(b Uint8Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16Option) Equals(b Uint16Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32Option) Equals(b Uint32Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64Option) Equals(b Uint64Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrOption) Equals(b UintptrOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOption) Equals(b ByteOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOption) Equals(b RuneOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32Option) Equals(b Float32Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64Option) Equals(b Float64Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64Option) Equals(b Complex64Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128Option) Equals(b Complex128Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOption) Equals(b AnyOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayOption) Equals(b BoolArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayOption) Equals(b StringArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayOption) Equals(b IntArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ArrayOption) Equals(b Int8ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ArrayOption) Equals(b Int16ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ArrayOption) Equals(b Int32ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayOption) Equals(b Int64ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintArrayOption) Equals(b UintArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ArrayOption) Equals(b Uint8ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ArrayOption) Equals(b Uint16ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ArrayOption) Equals(b Uint32ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ArrayOption) Equals(b Uint64ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrArrayOption) Equals(b UintptrArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayOption) Equals(b ByteArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayOption) Equals(b RuneArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayOption) Equals(b Float32ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayOption) Equals(b Float64ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ArrayOption) Equals(b Complex64ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ArrayOption) Equals(b Complex128ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayOption) Equals(b AnyArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayArrayOption) Equals(b BoolArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayArrayOption) Equals(b StringArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayArrayOption) Equals(b IntArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ArrayArrayOption) Equals(b Int8ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ArrayArrayOption) Equals(b Int16ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ArrayArrayOption) Equals(b Int32ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayArrayOption) Equals(b Int64ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintArrayArrayOption) Equals(b UintArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ArrayArrayOption) Equals(b Uint8ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ArrayArrayOption) Equals(b Uint16ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ArrayArrayOption) Equals(b Uint32ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ArrayArrayOption) Equals(b Uint64ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrArrayArrayOption) Equals(b UintptrArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayArrayOption) Equals(b ByteArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayArrayOption) Equals(b RuneArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayArrayOption) Equals(b Float32ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayArrayOption) Equals(b Float64ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ArrayArrayOption) Equals(b Complex64ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ArrayArrayOption) Equals(b Complex128ArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayArrayOption) Equals(b AnyArrayArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolOptionArrayOption) Equals(b BoolOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOptionArrayOption) Equals(b StringOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOptionArrayOption) Equals(b IntOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8OptionArrayOption) Equals(b Int8OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16OptionArrayOption) Equals(b Int16OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32OptionArrayOption) Equals(b Int32OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64OptionArrayOption) Equals(b Int64OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintOptionArrayOption) Equals(b UintOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8OptionArrayOption) Equals(b Uint8OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16OptionArrayOption) Equals(b Uint16OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32OptionArrayOption) Equals(b Uint32OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64OptionArrayOption) Equals(b Uint64OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrOptionArrayOption) Equals(b UintptrOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOptionArrayOption) Equals(b ByteOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOptionArrayOption) Equals(b RuneOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32OptionArrayOption) Equals(b Float32OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64OptionArrayOption) Equals(b Float64OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64OptionArrayOption) Equals(b Complex64OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128OptionArrayOption) Equals(b Complex128OptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128OptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOptionArrayOption) Equals(b AnyOptionArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyOptionArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolListOption) Equals(b BoolListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringListOption) Equals(b StringListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntListOption) Equals(b IntListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ListOption) Equals(b Int8ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ListOption) Equals(b Int16ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ListOption) Equals(b Int32ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ListOption) Equals(b Int64ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintListOption) Equals(b UintListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ListOption) Equals(b Uint8ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ListOption) Equals(b Uint16ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ListOption) Equals(b Uint32ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ListOption) Equals(b Uint64ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrListOption) Equals(b UintptrListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteListOption) Equals(b ByteListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneListOption) Equals(b RuneListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ListOption) Equals(b Float32ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ListOption) Equals(b Float64ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ListOption) Equals(b Complex64ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ListOption) Equals(b Complex128ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyListOption) Equals(b AnyListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolOptionOption) Equals(b BoolOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOptionOption) Equals(b StringOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOptionOption) Equals(b IntOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8OptionOption) Equals(b Int8OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16OptionOption) Equals(b Int16OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32OptionOption) Equals(b Int32OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64OptionOption) Equals(b Int64OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintOptionOption) Equals(b UintOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8OptionOption) Equals(b Uint8OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16OptionOption) Equals(b Uint16OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32OptionOption) Equals(b Uint32OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64OptionOption) Equals(b Uint64OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrOptionOption) Equals(b UintptrOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOptionOption) Equals(b ByteOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOptionOption) Equals(b RuneOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32OptionOption) Equals(b Float32OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64OptionOption) Equals(b Float64OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64OptionOption) Equals(b Complex64OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128OptionOption) Equals(b Complex128OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOptionOption) Equals(b AnyOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayOptionOption) Equals(b BoolArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayOptionOption) Equals(b StringArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayOptionOption) Equals(b IntArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ArrayOptionOption) Equals(b Int8ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ArrayOptionOption) Equals(b Int16ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ArrayOptionOption) Equals(b Int32ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayOptionOption) Equals(b Int64ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintArrayOptionOption) Equals(b UintArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ArrayOptionOption) Equals(b Uint8ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ArrayOptionOption) Equals(b Uint16ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ArrayOptionOption) Equals(b Uint32ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ArrayOptionOption) Equals(b Uint64ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrArrayOptionOption) Equals(b UintptrArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayOptionOption) Equals(b ByteArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayOptionOption) Equals(b RuneArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayOptionOption) Equals(b Float32ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayOptionOption) Equals(b Float64ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ArrayOptionOption) Equals(b Complex64ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ArrayOptionOption) Equals(b Complex128ArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayOptionOption) Equals(b AnyArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayArrayOptionOption) Equals(b BoolArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayArrayOptionOption) Equals(b StringArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayArrayOptionOption) Equals(b IntArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ArrayArrayOptionOption) Equals(b Int8ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ArrayArrayOptionOption) Equals(b Int16ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ArrayArrayOptionOption) Equals(b Int32ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayArrayOptionOption) Equals(b Int64ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintArrayArrayOptionOption) Equals(b UintArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ArrayArrayOptionOption) Equals(b Uint8ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ArrayArrayOptionOption) Equals(b Uint16ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ArrayArrayOptionOption) Equals(b Uint32ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ArrayArrayOptionOption) Equals(b Uint64ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrArrayArrayOptionOption) Equals(b UintptrArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayArrayOptionOption) Equals(b ByteArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayArrayOptionOption) Equals(b RuneArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayArrayOptionOption) Equals(b Float32ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayArrayOptionOption) Equals(b Float64ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ArrayArrayOptionOption) Equals(b Complex64ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ArrayArrayOptionOption) Equals(b Complex128ArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayArrayOptionOption) Equals(b AnyArrayArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolOptionArrayOptionOption) Equals(b BoolOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOptionArrayOptionOption) Equals(b StringOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOptionArrayOptionOption) Equals(b IntOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8OptionArrayOptionOption) Equals(b Int8OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16OptionArrayOptionOption) Equals(b Int16OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32OptionArrayOptionOption) Equals(b Int32OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64OptionArrayOptionOption) Equals(b Int64OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintOptionArrayOptionOption) Equals(b UintOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8OptionArrayOptionOption) Equals(b Uint8OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16OptionArrayOptionOption) Equals(b Uint16OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32OptionArrayOptionOption) Equals(b Uint32OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64OptionArrayOptionOption) Equals(b Uint64OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrOptionArrayOptionOption) Equals(b UintptrOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOptionArrayOptionOption) Equals(b ByteOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOptionArrayOptionOption) Equals(b RuneOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32OptionArrayOptionOption) Equals(b Float32OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64OptionArrayOptionOption) Equals(b Float64OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64OptionArrayOptionOption) Equals(b Complex64OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128OptionArrayOptionOption) Equals(b Complex128OptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128OptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOptionArrayOptionOption) Equals(b AnyOptionArrayOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyOptionArrayOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolListOptionOption) Equals(b BoolListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringListOptionOption) Equals(b StringListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntListOptionOption) Equals(b IntListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ListOptionOption) Equals(b Int8ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ListOptionOption) Equals(b Int16ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ListOptionOption) Equals(b Int32ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ListOptionOption) Equals(b Int64ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintListOptionOption) Equals(b UintListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ListOptionOption) Equals(b Uint8ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ListOptionOption) Equals(b Uint16ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ListOptionOption) Equals(b Uint32ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ListOptionOption) Equals(b Uint64ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrListOptionOption) Equals(b UintptrListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteListOptionOption) Equals(b ByteListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneListOptionOption) Equals(b RuneListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ListOptionOption) Equals(b Float32ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ListOptionOption) Equals(b Float64ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ListOptionOption) Equals(b Complex64ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ListOptionOption) Equals(b Complex128ListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyListOptionOption) Equals(b AnyListOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyListOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolOptionOptionOption) Equals(b BoolOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOptionOptionOption) Equals(b StringOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOptionOptionOption) Equals(b IntOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8OptionOptionOption) Equals(b Int8OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16OptionOptionOption) Equals(b Int16OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32OptionOptionOption) Equals(b Int32OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64OptionOptionOption) Equals(b Int64OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintOptionOptionOption) Equals(b UintOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8OptionOptionOption) Equals(b Uint8OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16OptionOptionOption) Equals(b Uint16OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32OptionOptionOption) Equals(b Uint32OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64OptionOptionOption) Equals(b Uint64OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrOptionOptionOption) Equals(b UintptrOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOptionOptionOption) Equals(b ByteOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOptionOptionOption) Equals(b RuneOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32OptionOptionOption) Equals(b Float32OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64OptionOptionOption) Equals(b Float64OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64OptionOptionOption) Equals(b Complex64OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128OptionOptionOption) Equals(b Complex128OptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128OptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOptionOptionOption) Equals(b AnyOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayOptionOptionOption) Equals(b BoolArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayOptionOptionOption) Equals(b StringArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayOptionOptionOption) Equals(b IntArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ArrayOptionOptionOption) Equals(b Int8ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ArrayOptionOptionOption) Equals(b Int16ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ArrayOptionOptionOption) Equals(b Int32ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayOptionOptionOption) Equals(b Int64ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintArrayOptionOptionOption) Equals(b UintArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ArrayOptionOptionOption) Equals(b Uint8ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ArrayOptionOptionOption) Equals(b Uint16ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ArrayOptionOptionOption) Equals(b Uint32ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ArrayOptionOptionOption) Equals(b Uint64ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrArrayOptionOptionOption) Equals(b UintptrArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayOptionOptionOption) Equals(b ByteArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayOptionOptionOption) Equals(b RuneArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayOptionOptionOption) Equals(b Float32ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayOptionOptionOption) Equals(b Float64ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ArrayOptionOptionOption) Equals(b Complex64ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ArrayOptionOptionOption) Equals(b Complex128ArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayOptionOptionOption) Equals(b AnyArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayArrayOptionOptionOption) Equals(b BoolArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayArrayOptionOptionOption) Equals(b StringArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayArrayOptionOptionOption) Equals(b IntArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ArrayArrayOptionOptionOption) Equals(b Int8ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ArrayArrayOptionOptionOption) Equals(b Int16ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ArrayArrayOptionOptionOption) Equals(b Int32ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayArrayOptionOptionOption) Equals(b Int64ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintArrayArrayOptionOptionOption) Equals(b UintArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ArrayArrayOptionOptionOption) Equals(b Uint8ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ArrayArrayOptionOptionOption) Equals(b Uint16ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ArrayArrayOptionOptionOption) Equals(b Uint32ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ArrayArrayOptionOptionOption) Equals(b Uint64ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrArrayArrayOptionOptionOption) Equals(b UintptrArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayArrayOptionOptionOption) Equals(b ByteArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayArrayOptionOptionOption) Equals(b RuneArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayArrayOptionOptionOption) Equals(b Float32ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayArrayOptionOptionOption) Equals(b Float64ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ArrayArrayOptionOptionOption) Equals(b Complex64ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ArrayArrayOptionOptionOption) Equals(b Complex128ArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayArrayOptionOptionOption) Equals(b AnyArrayArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolOptionArrayOptionOptionOption) Equals(b BoolOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOptionArrayOptionOptionOption) Equals(b StringOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOptionArrayOptionOptionOption) Equals(b IntOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8OptionArrayOptionOptionOption) Equals(b Int8OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16OptionArrayOptionOptionOption) Equals(b Int16OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32OptionArrayOptionOptionOption) Equals(b Int32OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64OptionArrayOptionOptionOption) Equals(b Int64OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintOptionArrayOptionOptionOption) Equals(b UintOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8OptionArrayOptionOptionOption) Equals(b Uint8OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16OptionArrayOptionOptionOption) Equals(b Uint16OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32OptionArrayOptionOptionOption) Equals(b Uint32OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64OptionArrayOptionOptionOption) Equals(b Uint64OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrOptionArrayOptionOptionOption) Equals(b UintptrOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOptionArrayOptionOptionOption) Equals(b ByteOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOptionArrayOptionOptionOption) Equals(b RuneOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32OptionArrayOptionOptionOption) Equals(b Float32OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64OptionArrayOptionOptionOption) Equals(b Float64OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64OptionArrayOptionOptionOption) Equals(b Complex64OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128OptionArrayOptionOptionOption) Equals(b Complex128OptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128OptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOptionArrayOptionOptionOption) Equals(b AnyOptionArrayOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyOptionArrayOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolListOptionOptionOption) Equals(b BoolListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringListOptionOptionOption) Equals(b StringListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntListOptionOptionOption) Equals(b IntListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int8ListOptionOptionOption) Equals(b Int8ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int8ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int16ListOptionOptionOption) Equals(b Int16ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int16ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int32ListOptionOptionOption) Equals(b Int32ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int32ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ListOptionOptionOption) Equals(b Int64ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintListOptionOptionOption) Equals(b UintListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint8ListOptionOptionOption) Equals(b Uint8ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint8ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint16ListOptionOptionOption) Equals(b Uint16ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint16ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint32ListOptionOptionOption) Equals(b Uint32ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint32ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Uint64ListOptionOptionOption) Equals(b Uint64ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Uint64ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a UintptrListOptionOptionOption) Equals(b UintptrListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return UintptrListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteListOptionOptionOption) Equals(b ByteListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneListOptionOptionOption) Equals(b RuneListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ListOptionOptionOption) Equals(b Float32ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ListOptionOptionOption) Equals(b Float64ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex64ListOptionOptionOption) Equals(b Complex64ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex64ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Complex128ListOptionOptionOption) Equals(b Complex128ListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Complex128ListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyListOptionOptionOption) Equals(b AnyListOptionOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyListOptionOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
