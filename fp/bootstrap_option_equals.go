// bootstrap_option_equals.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (a BoolOption) Equals(b BoolOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOption) Equals(b StringOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOption) Equals(b IntOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64Option) Equals(b Int64Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOption) Equals(b ByteOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOption) Equals(b RuneOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32Option) Equals(b Float32Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64Option) Equals(b Float64Option) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64Equals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOption) Equals(b AnyOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolOptionOption) Equals(b BoolOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringOptionOption) Equals(b StringOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntOptionOption) Equals(b IntOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64OptionOption) Equals(b Int64OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteOptionOption) Equals(b ByteOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneOptionOption) Equals(b RuneOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32OptionOption) Equals(b Float32OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64OptionOption) Equals(b Float64OptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64OptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyOptionOption) Equals(b AnyOptionOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyOptionEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolArrayOption) Equals(b BoolArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringArrayOption) Equals(b StringArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntArrayOption) Equals(b IntArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ArrayOption) Equals(b Int64ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteArrayOption) Equals(b ByteArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneArrayOption) Equals(b RuneArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ArrayOption) Equals(b Float32ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ArrayOption) Equals(b Float64ArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyArrayOption) Equals(b AnyArrayOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyArrayEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a BoolListOption) Equals(b BoolListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return BoolListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a StringListOption) Equals(b StringListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return StringListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a IntListOption) Equals(b IntListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return IntListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Int64ListOption) Equals(b Int64ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Int64ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a ByteListOption) Equals(b ByteListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return ByteListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a RuneListOption) Equals(b RuneListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return RuneListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float32ListOption) Equals(b Float32ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float32ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a Float64ListOption) Equals(b Float64ListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return Float64ListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
func (a AnyListOption) Equals(b AnyListOption) bool {
	if a.IsDefined() {
		if b.IsDefined() {
			return AnyListEquals(*a.value, *b.value)
		} else {
			return false
		}
	} else if b.IsDefined() {
		return false
	} else {
		return true
	}
}
