// bootstrap_option_flatmap.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (m BoolOption) FlatMapBool(f func(bool) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolOption) FlatMapString(f func(bool) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolOption) FlatMapInt(f func(bool) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolOption) FlatMapInt8(f func(bool) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolOption) FlatMapInt16(f func(bool) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolOption) FlatMapInt32(f func(bool) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolOption) FlatMapInt64(f func(bool) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolOption) FlatMapUint(f func(bool) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolOption) FlatMapUint8(f func(bool) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolOption) FlatMapUint16(f func(bool) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolOption) FlatMapUint32(f func(bool) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolOption) FlatMapUint64(f func(bool) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolOption) FlatMapUintptr(f func(bool) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolOption) FlatMapByte(f func(bool) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolOption) FlatMapRune(f func(bool) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolOption) FlatMapFloat32(f func(bool) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolOption) FlatMapFloat64(f func(bool) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolOption) FlatMapComplex64(f func(bool) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolOption) FlatMapComplex128(f func(bool) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolOption) FlatMapAny(f func(bool) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringOption) FlatMapBool(f func(string) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringOption) FlatMapString(f func(string) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringOption) FlatMapInt(f func(string) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringOption) FlatMapInt8(f func(string) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringOption) FlatMapInt16(f func(string) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringOption) FlatMapInt32(f func(string) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringOption) FlatMapInt64(f func(string) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringOption) FlatMapUint(f func(string) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringOption) FlatMapUint8(f func(string) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringOption) FlatMapUint16(f func(string) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringOption) FlatMapUint32(f func(string) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringOption) FlatMapUint64(f func(string) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringOption) FlatMapUintptr(f func(string) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringOption) FlatMapByte(f func(string) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringOption) FlatMapRune(f func(string) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringOption) FlatMapFloat32(f func(string) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringOption) FlatMapFloat64(f func(string) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringOption) FlatMapComplex64(f func(string) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringOption) FlatMapComplex128(f func(string) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringOption) FlatMapAny(f func(string) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntOption) FlatMapBool(f func(int) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntOption) FlatMapString(f func(int) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntOption) FlatMapInt(f func(int) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntOption) FlatMapInt8(f func(int) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntOption) FlatMapInt16(f func(int) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntOption) FlatMapInt32(f func(int) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntOption) FlatMapInt64(f func(int) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntOption) FlatMapUint(f func(int) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntOption) FlatMapUint8(f func(int) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntOption) FlatMapUint16(f func(int) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntOption) FlatMapUint32(f func(int) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntOption) FlatMapUint64(f func(int) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntOption) FlatMapUintptr(f func(int) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntOption) FlatMapByte(f func(int) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntOption) FlatMapRune(f func(int) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntOption) FlatMapFloat32(f func(int) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntOption) FlatMapFloat64(f func(int) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntOption) FlatMapComplex64(f func(int) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntOption) FlatMapComplex128(f func(int) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntOption) FlatMapAny(f func(int) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8Option) FlatMapBool(f func(int8) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8Option) FlatMapString(f func(int8) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8Option) FlatMapInt(f func(int8) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8Option) FlatMapInt8(f func(int8) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8Option) FlatMapInt16(f func(int8) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8Option) FlatMapInt32(f func(int8) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8Option) FlatMapInt64(f func(int8) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8Option) FlatMapUint(f func(int8) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8Option) FlatMapUint8(f func(int8) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8Option) FlatMapUint16(f func(int8) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8Option) FlatMapUint32(f func(int8) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8Option) FlatMapUint64(f func(int8) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8Option) FlatMapUintptr(f func(int8) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8Option) FlatMapByte(f func(int8) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8Option) FlatMapRune(f func(int8) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8Option) FlatMapFloat32(f func(int8) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8Option) FlatMapFloat64(f func(int8) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8Option) FlatMapComplex64(f func(int8) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8Option) FlatMapComplex128(f func(int8) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8Option) FlatMapAny(f func(int8) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16Option) FlatMapBool(f func(int16) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16Option) FlatMapString(f func(int16) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16Option) FlatMapInt(f func(int16) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16Option) FlatMapInt8(f func(int16) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16Option) FlatMapInt16(f func(int16) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16Option) FlatMapInt32(f func(int16) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16Option) FlatMapInt64(f func(int16) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16Option) FlatMapUint(f func(int16) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16Option) FlatMapUint8(f func(int16) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16Option) FlatMapUint16(f func(int16) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16Option) FlatMapUint32(f func(int16) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16Option) FlatMapUint64(f func(int16) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16Option) FlatMapUintptr(f func(int16) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16Option) FlatMapByte(f func(int16) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16Option) FlatMapRune(f func(int16) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16Option) FlatMapFloat32(f func(int16) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16Option) FlatMapFloat64(f func(int16) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16Option) FlatMapComplex64(f func(int16) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16Option) FlatMapComplex128(f func(int16) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16Option) FlatMapAny(f func(int16) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32Option) FlatMapBool(f func(int32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32Option) FlatMapString(f func(int32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32Option) FlatMapInt(f func(int32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32Option) FlatMapInt8(f func(int32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32Option) FlatMapInt16(f func(int32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32Option) FlatMapInt32(f func(int32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32Option) FlatMapInt64(f func(int32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32Option) FlatMapUint(f func(int32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32Option) FlatMapUint8(f func(int32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32Option) FlatMapUint16(f func(int32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32Option) FlatMapUint32(f func(int32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32Option) FlatMapUint64(f func(int32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32Option) FlatMapUintptr(f func(int32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32Option) FlatMapByte(f func(int32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32Option) FlatMapRune(f func(int32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32Option) FlatMapFloat32(f func(int32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32Option) FlatMapFloat64(f func(int32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32Option) FlatMapComplex64(f func(int32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32Option) FlatMapComplex128(f func(int32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32Option) FlatMapAny(f func(int32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64Option) FlatMapBool(f func(int64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64Option) FlatMapString(f func(int64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64Option) FlatMapInt(f func(int64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64Option) FlatMapInt8(f func(int64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64Option) FlatMapInt16(f func(int64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64Option) FlatMapInt32(f func(int64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64Option) FlatMapInt64(f func(int64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64Option) FlatMapUint(f func(int64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64Option) FlatMapUint8(f func(int64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64Option) FlatMapUint16(f func(int64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64Option) FlatMapUint32(f func(int64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64Option) FlatMapUint64(f func(int64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64Option) FlatMapUintptr(f func(int64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64Option) FlatMapByte(f func(int64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64Option) FlatMapRune(f func(int64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64Option) FlatMapFloat32(f func(int64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64Option) FlatMapFloat64(f func(int64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64Option) FlatMapComplex64(f func(int64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64Option) FlatMapComplex128(f func(int64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64Option) FlatMapAny(f func(int64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintOption) FlatMapBool(f func(uint) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintOption) FlatMapString(f func(uint) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintOption) FlatMapInt(f func(uint) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintOption) FlatMapInt8(f func(uint) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintOption) FlatMapInt16(f func(uint) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintOption) FlatMapInt32(f func(uint) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintOption) FlatMapInt64(f func(uint) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintOption) FlatMapUint(f func(uint) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintOption) FlatMapUint8(f func(uint) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintOption) FlatMapUint16(f func(uint) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintOption) FlatMapUint32(f func(uint) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintOption) FlatMapUint64(f func(uint) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintOption) FlatMapUintptr(f func(uint) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintOption) FlatMapByte(f func(uint) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintOption) FlatMapRune(f func(uint) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintOption) FlatMapFloat32(f func(uint) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintOption) FlatMapFloat64(f func(uint) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintOption) FlatMapComplex64(f func(uint) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintOption) FlatMapComplex128(f func(uint) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintOption) FlatMapAny(f func(uint) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8Option) FlatMapBool(f func(uint8) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8Option) FlatMapString(f func(uint8) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8Option) FlatMapInt(f func(uint8) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8Option) FlatMapInt8(f func(uint8) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8Option) FlatMapInt16(f func(uint8) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8Option) FlatMapInt32(f func(uint8) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8Option) FlatMapInt64(f func(uint8) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8Option) FlatMapUint(f func(uint8) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8Option) FlatMapUint8(f func(uint8) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8Option) FlatMapUint16(f func(uint8) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8Option) FlatMapUint32(f func(uint8) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8Option) FlatMapUint64(f func(uint8) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8Option) FlatMapUintptr(f func(uint8) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8Option) FlatMapByte(f func(uint8) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8Option) FlatMapRune(f func(uint8) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8Option) FlatMapFloat32(f func(uint8) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8Option) FlatMapFloat64(f func(uint8) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8Option) FlatMapComplex64(f func(uint8) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8Option) FlatMapComplex128(f func(uint8) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8Option) FlatMapAny(f func(uint8) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16Option) FlatMapBool(f func(uint16) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16Option) FlatMapString(f func(uint16) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16Option) FlatMapInt(f func(uint16) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16Option) FlatMapInt8(f func(uint16) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16Option) FlatMapInt16(f func(uint16) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16Option) FlatMapInt32(f func(uint16) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16Option) FlatMapInt64(f func(uint16) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16Option) FlatMapUint(f func(uint16) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16Option) FlatMapUint8(f func(uint16) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16Option) FlatMapUint16(f func(uint16) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16Option) FlatMapUint32(f func(uint16) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16Option) FlatMapUint64(f func(uint16) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16Option) FlatMapUintptr(f func(uint16) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16Option) FlatMapByte(f func(uint16) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16Option) FlatMapRune(f func(uint16) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16Option) FlatMapFloat32(f func(uint16) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16Option) FlatMapFloat64(f func(uint16) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16Option) FlatMapComplex64(f func(uint16) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16Option) FlatMapComplex128(f func(uint16) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16Option) FlatMapAny(f func(uint16) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32Option) FlatMapBool(f func(uint32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32Option) FlatMapString(f func(uint32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32Option) FlatMapInt(f func(uint32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32Option) FlatMapInt8(f func(uint32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32Option) FlatMapInt16(f func(uint32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32Option) FlatMapInt32(f func(uint32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32Option) FlatMapInt64(f func(uint32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32Option) FlatMapUint(f func(uint32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32Option) FlatMapUint8(f func(uint32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32Option) FlatMapUint16(f func(uint32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32Option) FlatMapUint32(f func(uint32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32Option) FlatMapUint64(f func(uint32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32Option) FlatMapUintptr(f func(uint32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32Option) FlatMapByte(f func(uint32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32Option) FlatMapRune(f func(uint32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32Option) FlatMapFloat32(f func(uint32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32Option) FlatMapFloat64(f func(uint32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32Option) FlatMapComplex64(f func(uint32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32Option) FlatMapComplex128(f func(uint32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32Option) FlatMapAny(f func(uint32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64Option) FlatMapBool(f func(uint64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64Option) FlatMapString(f func(uint64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64Option) FlatMapInt(f func(uint64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64Option) FlatMapInt8(f func(uint64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64Option) FlatMapInt16(f func(uint64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64Option) FlatMapInt32(f func(uint64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64Option) FlatMapInt64(f func(uint64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64Option) FlatMapUint(f func(uint64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64Option) FlatMapUint8(f func(uint64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64Option) FlatMapUint16(f func(uint64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64Option) FlatMapUint32(f func(uint64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64Option) FlatMapUint64(f func(uint64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64Option) FlatMapUintptr(f func(uint64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64Option) FlatMapByte(f func(uint64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64Option) FlatMapRune(f func(uint64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64Option) FlatMapFloat32(f func(uint64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64Option) FlatMapFloat64(f func(uint64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64Option) FlatMapComplex64(f func(uint64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64Option) FlatMapComplex128(f func(uint64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64Option) FlatMapAny(f func(uint64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrOption) FlatMapBool(f func(uintptr) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrOption) FlatMapString(f func(uintptr) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrOption) FlatMapInt(f func(uintptr) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrOption) FlatMapInt8(f func(uintptr) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrOption) FlatMapInt16(f func(uintptr) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrOption) FlatMapInt32(f func(uintptr) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrOption) FlatMapInt64(f func(uintptr) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrOption) FlatMapUint(f func(uintptr) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrOption) FlatMapUint8(f func(uintptr) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrOption) FlatMapUint16(f func(uintptr) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrOption) FlatMapUint32(f func(uintptr) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrOption) FlatMapUint64(f func(uintptr) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrOption) FlatMapUintptr(f func(uintptr) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrOption) FlatMapByte(f func(uintptr) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrOption) FlatMapRune(f func(uintptr) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrOption) FlatMapFloat32(f func(uintptr) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrOption) FlatMapFloat64(f func(uintptr) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrOption) FlatMapComplex64(f func(uintptr) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrOption) FlatMapComplex128(f func(uintptr) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrOption) FlatMapAny(f func(uintptr) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteOption) FlatMapBool(f func(byte) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteOption) FlatMapString(f func(byte) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteOption) FlatMapInt(f func(byte) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteOption) FlatMapInt8(f func(byte) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteOption) FlatMapInt16(f func(byte) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteOption) FlatMapInt32(f func(byte) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteOption) FlatMapInt64(f func(byte) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteOption) FlatMapUint(f func(byte) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteOption) FlatMapUint8(f func(byte) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteOption) FlatMapUint16(f func(byte) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteOption) FlatMapUint32(f func(byte) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteOption) FlatMapUint64(f func(byte) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteOption) FlatMapUintptr(f func(byte) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteOption) FlatMapByte(f func(byte) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteOption) FlatMapRune(f func(byte) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteOption) FlatMapFloat32(f func(byte) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteOption) FlatMapFloat64(f func(byte) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteOption) FlatMapComplex64(f func(byte) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteOption) FlatMapComplex128(f func(byte) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteOption) FlatMapAny(f func(byte) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneOption) FlatMapBool(f func(rune) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneOption) FlatMapString(f func(rune) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneOption) FlatMapInt(f func(rune) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneOption) FlatMapInt8(f func(rune) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneOption) FlatMapInt16(f func(rune) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneOption) FlatMapInt32(f func(rune) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneOption) FlatMapInt64(f func(rune) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneOption) FlatMapUint(f func(rune) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneOption) FlatMapUint8(f func(rune) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneOption) FlatMapUint16(f func(rune) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneOption) FlatMapUint32(f func(rune) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneOption) FlatMapUint64(f func(rune) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneOption) FlatMapUintptr(f func(rune) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneOption) FlatMapByte(f func(rune) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneOption) FlatMapRune(f func(rune) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneOption) FlatMapFloat32(f func(rune) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneOption) FlatMapFloat64(f func(rune) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneOption) FlatMapComplex64(f func(rune) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneOption) FlatMapComplex128(f func(rune) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneOption) FlatMapAny(f func(rune) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32Option) FlatMapBool(f func(float32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32Option) FlatMapString(f func(float32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32Option) FlatMapInt(f func(float32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32Option) FlatMapInt8(f func(float32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32Option) FlatMapInt16(f func(float32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32Option) FlatMapInt32(f func(float32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32Option) FlatMapInt64(f func(float32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32Option) FlatMapUint(f func(float32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32Option) FlatMapUint8(f func(float32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32Option) FlatMapUint16(f func(float32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32Option) FlatMapUint32(f func(float32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32Option) FlatMapUint64(f func(float32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32Option) FlatMapUintptr(f func(float32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32Option) FlatMapByte(f func(float32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32Option) FlatMapRune(f func(float32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32Option) FlatMapFloat32(f func(float32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32Option) FlatMapFloat64(f func(float32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32Option) FlatMapComplex64(f func(float32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32Option) FlatMapComplex128(f func(float32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32Option) FlatMapAny(f func(float32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64Option) FlatMapBool(f func(float64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64Option) FlatMapString(f func(float64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64Option) FlatMapInt(f func(float64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64Option) FlatMapInt8(f func(float64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64Option) FlatMapInt16(f func(float64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64Option) FlatMapInt32(f func(float64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64Option) FlatMapInt64(f func(float64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64Option) FlatMapUint(f func(float64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64Option) FlatMapUint8(f func(float64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64Option) FlatMapUint16(f func(float64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64Option) FlatMapUint32(f func(float64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64Option) FlatMapUint64(f func(float64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64Option) FlatMapUintptr(f func(float64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64Option) FlatMapByte(f func(float64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64Option) FlatMapRune(f func(float64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64Option) FlatMapFloat32(f func(float64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64Option) FlatMapFloat64(f func(float64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64Option) FlatMapComplex64(f func(float64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64Option) FlatMapComplex128(f func(float64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64Option) FlatMapAny(f func(float64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64Option) FlatMapBool(f func(complex64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64Option) FlatMapString(f func(complex64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64Option) FlatMapInt(f func(complex64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64Option) FlatMapInt8(f func(complex64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64Option) FlatMapInt16(f func(complex64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64Option) FlatMapInt32(f func(complex64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64Option) FlatMapInt64(f func(complex64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64Option) FlatMapUint(f func(complex64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64Option) FlatMapUint8(f func(complex64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64Option) FlatMapUint16(f func(complex64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64Option) FlatMapUint32(f func(complex64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64Option) FlatMapUint64(f func(complex64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64Option) FlatMapUintptr(f func(complex64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64Option) FlatMapByte(f func(complex64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64Option) FlatMapRune(f func(complex64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64Option) FlatMapFloat32(f func(complex64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64Option) FlatMapFloat64(f func(complex64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64Option) FlatMapComplex64(f func(complex64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64Option) FlatMapComplex128(f func(complex64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64Option) FlatMapAny(f func(complex64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128Option) FlatMapBool(f func(complex128) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128Option) FlatMapString(f func(complex128) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128Option) FlatMapInt(f func(complex128) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128Option) FlatMapInt8(f func(complex128) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128Option) FlatMapInt16(f func(complex128) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128Option) FlatMapInt32(f func(complex128) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128Option) FlatMapInt64(f func(complex128) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128Option) FlatMapUint(f func(complex128) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128Option) FlatMapUint8(f func(complex128) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128Option) FlatMapUint16(f func(complex128) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128Option) FlatMapUint32(f func(complex128) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128Option) FlatMapUint64(f func(complex128) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128Option) FlatMapUintptr(f func(complex128) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128Option) FlatMapByte(f func(complex128) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128Option) FlatMapRune(f func(complex128) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128Option) FlatMapFloat32(f func(complex128) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128Option) FlatMapFloat64(f func(complex128) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128Option) FlatMapComplex64(f func(complex128) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128Option) FlatMapComplex128(f func(complex128) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128Option) FlatMapAny(f func(complex128) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyOption) FlatMapBool(f func(Any) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyOption) FlatMapString(f func(Any) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyOption) FlatMapInt(f func(Any) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyOption) FlatMapInt8(f func(Any) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyOption) FlatMapInt16(f func(Any) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyOption) FlatMapInt32(f func(Any) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyOption) FlatMapInt64(f func(Any) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyOption) FlatMapUint(f func(Any) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyOption) FlatMapUint8(f func(Any) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyOption) FlatMapUint16(f func(Any) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyOption) FlatMapUint32(f func(Any) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyOption) FlatMapUint64(f func(Any) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyOption) FlatMapUintptr(f func(Any) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyOption) FlatMapByte(f func(Any) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyOption) FlatMapRune(f func(Any) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyOption) FlatMapFloat32(f func(Any) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyOption) FlatMapFloat64(f func(Any) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyOption) FlatMapComplex64(f func(Any) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyOption) FlatMapComplex128(f func(Any) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyOption) FlatMapAny(f func(Any) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolArrayOption) FlatMapBool(f func([]bool) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolArrayOption) FlatMapString(f func([]bool) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolArrayOption) FlatMapInt(f func([]bool) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolArrayOption) FlatMapInt8(f func([]bool) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolArrayOption) FlatMapInt16(f func([]bool) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolArrayOption) FlatMapInt32(f func([]bool) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolArrayOption) FlatMapInt64(f func([]bool) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolArrayOption) FlatMapUint(f func([]bool) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolArrayOption) FlatMapUint8(f func([]bool) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolArrayOption) FlatMapUint16(f func([]bool) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolArrayOption) FlatMapUint32(f func([]bool) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolArrayOption) FlatMapUint64(f func([]bool) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolArrayOption) FlatMapUintptr(f func([]bool) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayOption) FlatMapByte(f func([]bool) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolArrayOption) FlatMapRune(f func([]bool) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolArrayOption) FlatMapFloat32(f func([]bool) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayOption) FlatMapFloat64(f func([]bool) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayOption) FlatMapComplex64(f func([]bool) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayOption) FlatMapComplex128(f func([]bool) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayOption) FlatMapAny(f func([]bool) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringArrayOption) FlatMapBool(f func([]string) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringArrayOption) FlatMapString(f func([]string) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringArrayOption) FlatMapInt(f func([]string) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringArrayOption) FlatMapInt8(f func([]string) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringArrayOption) FlatMapInt16(f func([]string) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringArrayOption) FlatMapInt32(f func([]string) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringArrayOption) FlatMapInt64(f func([]string) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringArrayOption) FlatMapUint(f func([]string) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringArrayOption) FlatMapUint8(f func([]string) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringArrayOption) FlatMapUint16(f func([]string) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringArrayOption) FlatMapUint32(f func([]string) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringArrayOption) FlatMapUint64(f func([]string) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringArrayOption) FlatMapUintptr(f func([]string) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringArrayOption) FlatMapByte(f func([]string) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringArrayOption) FlatMapRune(f func([]string) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringArrayOption) FlatMapFloat32(f func([]string) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringArrayOption) FlatMapFloat64(f func([]string) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringArrayOption) FlatMapComplex64(f func([]string) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringArrayOption) FlatMapComplex128(f func([]string) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringArrayOption) FlatMapAny(f func([]string) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntArrayOption) FlatMapBool(f func([]int) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntArrayOption) FlatMapString(f func([]int) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntArrayOption) FlatMapInt(f func([]int) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntArrayOption) FlatMapInt8(f func([]int) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntArrayOption) FlatMapInt16(f func([]int) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntArrayOption) FlatMapInt32(f func([]int) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntArrayOption) FlatMapInt64(f func([]int) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntArrayOption) FlatMapUint(f func([]int) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntArrayOption) FlatMapUint8(f func([]int) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntArrayOption) FlatMapUint16(f func([]int) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntArrayOption) FlatMapUint32(f func([]int) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntArrayOption) FlatMapUint64(f func([]int) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntArrayOption) FlatMapUintptr(f func([]int) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntArrayOption) FlatMapByte(f func([]int) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntArrayOption) FlatMapRune(f func([]int) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntArrayOption) FlatMapFloat32(f func([]int) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntArrayOption) FlatMapFloat64(f func([]int) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntArrayOption) FlatMapComplex64(f func([]int) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntArrayOption) FlatMapComplex128(f func([]int) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntArrayOption) FlatMapAny(f func([]int) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ArrayOption) FlatMapBool(f func([]int8) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ArrayOption) FlatMapString(f func([]int8) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ArrayOption) FlatMapInt(f func([]int8) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ArrayOption) FlatMapInt8(f func([]int8) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayOption) FlatMapInt16(f func([]int8) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayOption) FlatMapInt32(f func([]int8) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayOption) FlatMapInt64(f func([]int8) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayOption) FlatMapUint(f func([]int8) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ArrayOption) FlatMapUint8(f func([]int8) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayOption) FlatMapUint16(f func([]int8) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayOption) FlatMapUint32(f func([]int8) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayOption) FlatMapUint64(f func([]int8) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayOption) FlatMapUintptr(f func([]int8) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayOption) FlatMapByte(f func([]int8) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ArrayOption) FlatMapRune(f func([]int8) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ArrayOption) FlatMapFloat32(f func([]int8) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayOption) FlatMapFloat64(f func([]int8) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayOption) FlatMapComplex64(f func([]int8) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayOption) FlatMapComplex128(f func([]int8) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayOption) FlatMapAny(f func([]int8) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ArrayOption) FlatMapBool(f func([]int16) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ArrayOption) FlatMapString(f func([]int16) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ArrayOption) FlatMapInt(f func([]int16) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ArrayOption) FlatMapInt8(f func([]int16) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayOption) FlatMapInt16(f func([]int16) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayOption) FlatMapInt32(f func([]int16) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayOption) FlatMapInt64(f func([]int16) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayOption) FlatMapUint(f func([]int16) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ArrayOption) FlatMapUint8(f func([]int16) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayOption) FlatMapUint16(f func([]int16) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayOption) FlatMapUint32(f func([]int16) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayOption) FlatMapUint64(f func([]int16) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayOption) FlatMapUintptr(f func([]int16) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayOption) FlatMapByte(f func([]int16) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ArrayOption) FlatMapRune(f func([]int16) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ArrayOption) FlatMapFloat32(f func([]int16) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayOption) FlatMapFloat64(f func([]int16) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayOption) FlatMapComplex64(f func([]int16) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayOption) FlatMapComplex128(f func([]int16) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayOption) FlatMapAny(f func([]int16) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ArrayOption) FlatMapBool(f func([]int32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ArrayOption) FlatMapString(f func([]int32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ArrayOption) FlatMapInt(f func([]int32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ArrayOption) FlatMapInt8(f func([]int32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayOption) FlatMapInt16(f func([]int32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayOption) FlatMapInt32(f func([]int32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayOption) FlatMapInt64(f func([]int32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayOption) FlatMapUint(f func([]int32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ArrayOption) FlatMapUint8(f func([]int32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayOption) FlatMapUint16(f func([]int32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayOption) FlatMapUint32(f func([]int32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayOption) FlatMapUint64(f func([]int32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayOption) FlatMapUintptr(f func([]int32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayOption) FlatMapByte(f func([]int32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ArrayOption) FlatMapRune(f func([]int32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ArrayOption) FlatMapFloat32(f func([]int32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayOption) FlatMapFloat64(f func([]int32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayOption) FlatMapComplex64(f func([]int32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayOption) FlatMapComplex128(f func([]int32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayOption) FlatMapAny(f func([]int32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ArrayOption) FlatMapBool(f func([]int64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ArrayOption) FlatMapString(f func([]int64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ArrayOption) FlatMapInt(f func([]int64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ArrayOption) FlatMapInt8(f func([]int64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayOption) FlatMapInt16(f func([]int64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayOption) FlatMapInt32(f func([]int64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayOption) FlatMapInt64(f func([]int64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayOption) FlatMapUint(f func([]int64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ArrayOption) FlatMapUint8(f func([]int64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayOption) FlatMapUint16(f func([]int64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayOption) FlatMapUint32(f func([]int64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayOption) FlatMapUint64(f func([]int64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayOption) FlatMapUintptr(f func([]int64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayOption) FlatMapByte(f func([]int64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ArrayOption) FlatMapRune(f func([]int64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ArrayOption) FlatMapFloat32(f func([]int64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayOption) FlatMapFloat64(f func([]int64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayOption) FlatMapComplex64(f func([]int64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayOption) FlatMapComplex128(f func([]int64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayOption) FlatMapAny(f func([]int64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintArrayOption) FlatMapBool(f func([]uint) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintArrayOption) FlatMapString(f func([]uint) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintArrayOption) FlatMapInt(f func([]uint) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintArrayOption) FlatMapInt8(f func([]uint) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintArrayOption) FlatMapInt16(f func([]uint) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintArrayOption) FlatMapInt32(f func([]uint) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintArrayOption) FlatMapInt64(f func([]uint) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintArrayOption) FlatMapUint(f func([]uint) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintArrayOption) FlatMapUint8(f func([]uint) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintArrayOption) FlatMapUint16(f func([]uint) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintArrayOption) FlatMapUint32(f func([]uint) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintArrayOption) FlatMapUint64(f func([]uint) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintArrayOption) FlatMapUintptr(f func([]uint) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintArrayOption) FlatMapByte(f func([]uint) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintArrayOption) FlatMapRune(f func([]uint) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintArrayOption) FlatMapFloat32(f func([]uint) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintArrayOption) FlatMapFloat64(f func([]uint) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintArrayOption) FlatMapComplex64(f func([]uint) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintArrayOption) FlatMapComplex128(f func([]uint) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintArrayOption) FlatMapAny(f func([]uint) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayOption) FlatMapBool(f func([]uint8) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayOption) FlatMapString(f func([]uint8) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ArrayOption) FlatMapInt(f func([]uint8) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayOption) FlatMapInt8(f func([]uint8) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayOption) FlatMapInt16(f func([]uint8) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayOption) FlatMapInt32(f func([]uint8) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayOption) FlatMapInt64(f func([]uint8) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayOption) FlatMapUint(f func([]uint8) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayOption) FlatMapUint8(f func([]uint8) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayOption) FlatMapUint16(f func([]uint8) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayOption) FlatMapUint32(f func([]uint8) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayOption) FlatMapUint64(f func([]uint8) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayOption) FlatMapUintptr(f func([]uint8) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayOption) FlatMapByte(f func([]uint8) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayOption) FlatMapRune(f func([]uint8) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayOption) FlatMapFloat32(f func([]uint8) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayOption) FlatMapFloat64(f func([]uint8) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayOption) FlatMapComplex64(f func([]uint8) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayOption) FlatMapComplex128(f func([]uint8) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayOption) FlatMapAny(f func([]uint8) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayOption) FlatMapBool(f func([]uint16) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayOption) FlatMapString(f func([]uint16) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ArrayOption) FlatMapInt(f func([]uint16) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayOption) FlatMapInt8(f func([]uint16) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayOption) FlatMapInt16(f func([]uint16) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayOption) FlatMapInt32(f func([]uint16) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayOption) FlatMapInt64(f func([]uint16) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayOption) FlatMapUint(f func([]uint16) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayOption) FlatMapUint8(f func([]uint16) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayOption) FlatMapUint16(f func([]uint16) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayOption) FlatMapUint32(f func([]uint16) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayOption) FlatMapUint64(f func([]uint16) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayOption) FlatMapUintptr(f func([]uint16) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayOption) FlatMapByte(f func([]uint16) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayOption) FlatMapRune(f func([]uint16) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayOption) FlatMapFloat32(f func([]uint16) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayOption) FlatMapFloat64(f func([]uint16) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayOption) FlatMapComplex64(f func([]uint16) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayOption) FlatMapComplex128(f func([]uint16) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayOption) FlatMapAny(f func([]uint16) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayOption) FlatMapBool(f func([]uint32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayOption) FlatMapString(f func([]uint32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ArrayOption) FlatMapInt(f func([]uint32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayOption) FlatMapInt8(f func([]uint32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayOption) FlatMapInt16(f func([]uint32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayOption) FlatMapInt32(f func([]uint32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayOption) FlatMapInt64(f func([]uint32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayOption) FlatMapUint(f func([]uint32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayOption) FlatMapUint8(f func([]uint32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayOption) FlatMapUint16(f func([]uint32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayOption) FlatMapUint32(f func([]uint32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayOption) FlatMapUint64(f func([]uint32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayOption) FlatMapUintptr(f func([]uint32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayOption) FlatMapByte(f func([]uint32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayOption) FlatMapRune(f func([]uint32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayOption) FlatMapFloat32(f func([]uint32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayOption) FlatMapFloat64(f func([]uint32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayOption) FlatMapComplex64(f func([]uint32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayOption) FlatMapComplex128(f func([]uint32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayOption) FlatMapAny(f func([]uint32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayOption) FlatMapBool(f func([]uint64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayOption) FlatMapString(f func([]uint64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ArrayOption) FlatMapInt(f func([]uint64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayOption) FlatMapInt8(f func([]uint64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayOption) FlatMapInt16(f func([]uint64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayOption) FlatMapInt32(f func([]uint64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayOption) FlatMapInt64(f func([]uint64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayOption) FlatMapUint(f func([]uint64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayOption) FlatMapUint8(f func([]uint64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayOption) FlatMapUint16(f func([]uint64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayOption) FlatMapUint32(f func([]uint64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayOption) FlatMapUint64(f func([]uint64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayOption) FlatMapUintptr(f func([]uint64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayOption) FlatMapByte(f func([]uint64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayOption) FlatMapRune(f func([]uint64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayOption) FlatMapFloat32(f func([]uint64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayOption) FlatMapFloat64(f func([]uint64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayOption) FlatMapComplex64(f func([]uint64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayOption) FlatMapComplex128(f func([]uint64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayOption) FlatMapAny(f func([]uint64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrArrayOption) FlatMapBool(f func([]uintptr) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrArrayOption) FlatMapString(f func([]uintptr) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrArrayOption) FlatMapInt(f func([]uintptr) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrArrayOption) FlatMapInt8(f func([]uintptr) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayOption) FlatMapInt16(f func([]uintptr) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayOption) FlatMapInt32(f func([]uintptr) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayOption) FlatMapInt64(f func([]uintptr) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayOption) FlatMapUint(f func([]uintptr) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrArrayOption) FlatMapUint8(f func([]uintptr) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayOption) FlatMapUint16(f func([]uintptr) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayOption) FlatMapUint32(f func([]uintptr) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayOption) FlatMapUint64(f func([]uintptr) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayOption) FlatMapUintptr(f func([]uintptr) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayOption) FlatMapByte(f func([]uintptr) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrArrayOption) FlatMapRune(f func([]uintptr) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrArrayOption) FlatMapFloat32(f func([]uintptr) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayOption) FlatMapFloat64(f func([]uintptr) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayOption) FlatMapComplex64(f func([]uintptr) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayOption) FlatMapComplex128(f func([]uintptr) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayOption) FlatMapAny(f func([]uintptr) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteArrayOption) FlatMapBool(f func([]byte) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteArrayOption) FlatMapString(f func([]byte) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteArrayOption) FlatMapInt(f func([]byte) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteArrayOption) FlatMapInt8(f func([]byte) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteArrayOption) FlatMapInt16(f func([]byte) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteArrayOption) FlatMapInt32(f func([]byte) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteArrayOption) FlatMapInt64(f func([]byte) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteArrayOption) FlatMapUint(f func([]byte) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteArrayOption) FlatMapUint8(f func([]byte) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteArrayOption) FlatMapUint16(f func([]byte) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteArrayOption) FlatMapUint32(f func([]byte) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteArrayOption) FlatMapUint64(f func([]byte) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteArrayOption) FlatMapUintptr(f func([]byte) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayOption) FlatMapByte(f func([]byte) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteArrayOption) FlatMapRune(f func([]byte) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteArrayOption) FlatMapFloat32(f func([]byte) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayOption) FlatMapFloat64(f func([]byte) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayOption) FlatMapComplex64(f func([]byte) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayOption) FlatMapComplex128(f func([]byte) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayOption) FlatMapAny(f func([]byte) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneArrayOption) FlatMapBool(f func([]rune) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneArrayOption) FlatMapString(f func([]rune) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneArrayOption) FlatMapInt(f func([]rune) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneArrayOption) FlatMapInt8(f func([]rune) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneArrayOption) FlatMapInt16(f func([]rune) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneArrayOption) FlatMapInt32(f func([]rune) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneArrayOption) FlatMapInt64(f func([]rune) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneArrayOption) FlatMapUint(f func([]rune) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneArrayOption) FlatMapUint8(f func([]rune) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneArrayOption) FlatMapUint16(f func([]rune) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneArrayOption) FlatMapUint32(f func([]rune) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneArrayOption) FlatMapUint64(f func([]rune) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneArrayOption) FlatMapUintptr(f func([]rune) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayOption) FlatMapByte(f func([]rune) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneArrayOption) FlatMapRune(f func([]rune) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneArrayOption) FlatMapFloat32(f func([]rune) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayOption) FlatMapFloat64(f func([]rune) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayOption) FlatMapComplex64(f func([]rune) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayOption) FlatMapComplex128(f func([]rune) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayOption) FlatMapAny(f func([]rune) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ArrayOption) FlatMapBool(f func([]float32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ArrayOption) FlatMapString(f func([]float32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ArrayOption) FlatMapInt(f func([]float32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ArrayOption) FlatMapInt8(f func([]float32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayOption) FlatMapInt16(f func([]float32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayOption) FlatMapInt32(f func([]float32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayOption) FlatMapInt64(f func([]float32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayOption) FlatMapUint(f func([]float32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ArrayOption) FlatMapUint8(f func([]float32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayOption) FlatMapUint16(f func([]float32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayOption) FlatMapUint32(f func([]float32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayOption) FlatMapUint64(f func([]float32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayOption) FlatMapUintptr(f func([]float32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayOption) FlatMapByte(f func([]float32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ArrayOption) FlatMapRune(f func([]float32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ArrayOption) FlatMapFloat32(f func([]float32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayOption) FlatMapFloat64(f func([]float32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayOption) FlatMapComplex64(f func([]float32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayOption) FlatMapComplex128(f func([]float32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayOption) FlatMapAny(f func([]float32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ArrayOption) FlatMapBool(f func([]float64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ArrayOption) FlatMapString(f func([]float64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ArrayOption) FlatMapInt(f func([]float64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ArrayOption) FlatMapInt8(f func([]float64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayOption) FlatMapInt16(f func([]float64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayOption) FlatMapInt32(f func([]float64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayOption) FlatMapInt64(f func([]float64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayOption) FlatMapUint(f func([]float64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ArrayOption) FlatMapUint8(f func([]float64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayOption) FlatMapUint16(f func([]float64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayOption) FlatMapUint32(f func([]float64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayOption) FlatMapUint64(f func([]float64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayOption) FlatMapUintptr(f func([]float64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayOption) FlatMapByte(f func([]float64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ArrayOption) FlatMapRune(f func([]float64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ArrayOption) FlatMapFloat32(f func([]float64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayOption) FlatMapFloat64(f func([]float64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayOption) FlatMapComplex64(f func([]float64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayOption) FlatMapComplex128(f func([]float64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayOption) FlatMapAny(f func([]float64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayOption) FlatMapBool(f func([]complex64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayOption) FlatMapString(f func([]complex64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ArrayOption) FlatMapInt(f func([]complex64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayOption) FlatMapInt8(f func([]complex64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayOption) FlatMapInt16(f func([]complex64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayOption) FlatMapInt32(f func([]complex64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayOption) FlatMapInt64(f func([]complex64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayOption) FlatMapUint(f func([]complex64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayOption) FlatMapUint8(f func([]complex64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayOption) FlatMapUint16(f func([]complex64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayOption) FlatMapUint32(f func([]complex64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayOption) FlatMapUint64(f func([]complex64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayOption) FlatMapUintptr(f func([]complex64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayOption) FlatMapByte(f func([]complex64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayOption) FlatMapRune(f func([]complex64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayOption) FlatMapFloat32(f func([]complex64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayOption) FlatMapFloat64(f func([]complex64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayOption) FlatMapComplex64(f func([]complex64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayOption) FlatMapComplex128(f func([]complex64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayOption) FlatMapAny(f func([]complex64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayOption) FlatMapBool(f func([]complex128) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayOption) FlatMapString(f func([]complex128) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ArrayOption) FlatMapInt(f func([]complex128) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayOption) FlatMapInt8(f func([]complex128) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayOption) FlatMapInt16(f func([]complex128) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayOption) FlatMapInt32(f func([]complex128) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayOption) FlatMapInt64(f func([]complex128) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayOption) FlatMapUint(f func([]complex128) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayOption) FlatMapUint8(f func([]complex128) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayOption) FlatMapUint16(f func([]complex128) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayOption) FlatMapUint32(f func([]complex128) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayOption) FlatMapUint64(f func([]complex128) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayOption) FlatMapUintptr(f func([]complex128) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayOption) FlatMapByte(f func([]complex128) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayOption) FlatMapRune(f func([]complex128) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayOption) FlatMapFloat32(f func([]complex128) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayOption) FlatMapFloat64(f func([]complex128) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayOption) FlatMapComplex64(f func([]complex128) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayOption) FlatMapComplex128(f func([]complex128) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayOption) FlatMapAny(f func([]complex128) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyArrayOption) FlatMapBool(f func([]Any) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyArrayOption) FlatMapString(f func([]Any) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyArrayOption) FlatMapInt(f func([]Any) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyArrayOption) FlatMapInt8(f func([]Any) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyArrayOption) FlatMapInt16(f func([]Any) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyArrayOption) FlatMapInt32(f func([]Any) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyArrayOption) FlatMapInt64(f func([]Any) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyArrayOption) FlatMapUint(f func([]Any) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyArrayOption) FlatMapUint8(f func([]Any) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyArrayOption) FlatMapUint16(f func([]Any) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyArrayOption) FlatMapUint32(f func([]Any) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyArrayOption) FlatMapUint64(f func([]Any) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyArrayOption) FlatMapUintptr(f func([]Any) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayOption) FlatMapByte(f func([]Any) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyArrayOption) FlatMapRune(f func([]Any) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyArrayOption) FlatMapFloat32(f func([]Any) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayOption) FlatMapFloat64(f func([]Any) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayOption) FlatMapComplex64(f func([]Any) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayOption) FlatMapComplex128(f func([]Any) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayOption) FlatMapAny(f func([]Any) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolArrayArrayOption) FlatMapBool(f func([][]bool) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolArrayArrayOption) FlatMapString(f func([][]bool) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolArrayArrayOption) FlatMapInt(f func([][]bool) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolArrayArrayOption) FlatMapInt8(f func([][]bool) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolArrayArrayOption) FlatMapInt16(f func([][]bool) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolArrayArrayOption) FlatMapInt32(f func([][]bool) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolArrayArrayOption) FlatMapInt64(f func([][]bool) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolArrayArrayOption) FlatMapUint(f func([][]bool) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolArrayArrayOption) FlatMapUint8(f func([][]bool) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolArrayArrayOption) FlatMapUint16(f func([][]bool) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolArrayArrayOption) FlatMapUint32(f func([][]bool) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolArrayArrayOption) FlatMapUint64(f func([][]bool) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolArrayArrayOption) FlatMapUintptr(f func([][]bool) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayArrayOption) FlatMapByte(f func([][]bool) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolArrayArrayOption) FlatMapRune(f func([][]bool) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolArrayArrayOption) FlatMapFloat32(f func([][]bool) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayArrayOption) FlatMapFloat64(f func([][]bool) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayArrayOption) FlatMapComplex64(f func([][]bool) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayArrayOption) FlatMapComplex128(f func([][]bool) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayArrayOption) FlatMapAny(f func([][]bool) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringArrayArrayOption) FlatMapBool(f func([][]string) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringArrayArrayOption) FlatMapString(f func([][]string) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringArrayArrayOption) FlatMapInt(f func([][]string) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringArrayArrayOption) FlatMapInt8(f func([][]string) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringArrayArrayOption) FlatMapInt16(f func([][]string) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringArrayArrayOption) FlatMapInt32(f func([][]string) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringArrayArrayOption) FlatMapInt64(f func([][]string) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringArrayArrayOption) FlatMapUint(f func([][]string) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringArrayArrayOption) FlatMapUint8(f func([][]string) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringArrayArrayOption) FlatMapUint16(f func([][]string) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringArrayArrayOption) FlatMapUint32(f func([][]string) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringArrayArrayOption) FlatMapUint64(f func([][]string) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringArrayArrayOption) FlatMapUintptr(f func([][]string) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringArrayArrayOption) FlatMapByte(f func([][]string) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringArrayArrayOption) FlatMapRune(f func([][]string) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringArrayArrayOption) FlatMapFloat32(f func([][]string) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringArrayArrayOption) FlatMapFloat64(f func([][]string) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringArrayArrayOption) FlatMapComplex64(f func([][]string) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringArrayArrayOption) FlatMapComplex128(f func([][]string) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringArrayArrayOption) FlatMapAny(f func([][]string) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntArrayArrayOption) FlatMapBool(f func([][]int) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntArrayArrayOption) FlatMapString(f func([][]int) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntArrayArrayOption) FlatMapInt(f func([][]int) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntArrayArrayOption) FlatMapInt8(f func([][]int) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntArrayArrayOption) FlatMapInt16(f func([][]int) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntArrayArrayOption) FlatMapInt32(f func([][]int) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntArrayArrayOption) FlatMapInt64(f func([][]int) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntArrayArrayOption) FlatMapUint(f func([][]int) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntArrayArrayOption) FlatMapUint8(f func([][]int) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntArrayArrayOption) FlatMapUint16(f func([][]int) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntArrayArrayOption) FlatMapUint32(f func([][]int) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntArrayArrayOption) FlatMapUint64(f func([][]int) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntArrayArrayOption) FlatMapUintptr(f func([][]int) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntArrayArrayOption) FlatMapByte(f func([][]int) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntArrayArrayOption) FlatMapRune(f func([][]int) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntArrayArrayOption) FlatMapFloat32(f func([][]int) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntArrayArrayOption) FlatMapFloat64(f func([][]int) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntArrayArrayOption) FlatMapComplex64(f func([][]int) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntArrayArrayOption) FlatMapComplex128(f func([][]int) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntArrayArrayOption) FlatMapAny(f func([][]int) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ArrayArrayOption) FlatMapBool(f func([][]int8) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ArrayArrayOption) FlatMapString(f func([][]int8) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ArrayArrayOption) FlatMapInt(f func([][]int8) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ArrayArrayOption) FlatMapInt8(f func([][]int8) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayArrayOption) FlatMapInt16(f func([][]int8) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayArrayOption) FlatMapInt32(f func([][]int8) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayArrayOption) FlatMapInt64(f func([][]int8) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayArrayOption) FlatMapUint(f func([][]int8) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ArrayArrayOption) FlatMapUint8(f func([][]int8) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayArrayOption) FlatMapUint16(f func([][]int8) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayArrayOption) FlatMapUint32(f func([][]int8) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayArrayOption) FlatMapUint64(f func([][]int8) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayArrayOption) FlatMapUintptr(f func([][]int8) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayArrayOption) FlatMapByte(f func([][]int8) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ArrayArrayOption) FlatMapRune(f func([][]int8) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ArrayArrayOption) FlatMapFloat32(f func([][]int8) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayArrayOption) FlatMapFloat64(f func([][]int8) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayArrayOption) FlatMapComplex64(f func([][]int8) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayArrayOption) FlatMapComplex128(f func([][]int8) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayArrayOption) FlatMapAny(f func([][]int8) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ArrayArrayOption) FlatMapBool(f func([][]int16) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ArrayArrayOption) FlatMapString(f func([][]int16) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ArrayArrayOption) FlatMapInt(f func([][]int16) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ArrayArrayOption) FlatMapInt8(f func([][]int16) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayArrayOption) FlatMapInt16(f func([][]int16) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayArrayOption) FlatMapInt32(f func([][]int16) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayArrayOption) FlatMapInt64(f func([][]int16) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayArrayOption) FlatMapUint(f func([][]int16) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ArrayArrayOption) FlatMapUint8(f func([][]int16) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayArrayOption) FlatMapUint16(f func([][]int16) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayArrayOption) FlatMapUint32(f func([][]int16) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayArrayOption) FlatMapUint64(f func([][]int16) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayArrayOption) FlatMapUintptr(f func([][]int16) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayArrayOption) FlatMapByte(f func([][]int16) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ArrayArrayOption) FlatMapRune(f func([][]int16) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ArrayArrayOption) FlatMapFloat32(f func([][]int16) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayArrayOption) FlatMapFloat64(f func([][]int16) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayArrayOption) FlatMapComplex64(f func([][]int16) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayArrayOption) FlatMapComplex128(f func([][]int16) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayArrayOption) FlatMapAny(f func([][]int16) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ArrayArrayOption) FlatMapBool(f func([][]int32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ArrayArrayOption) FlatMapString(f func([][]int32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ArrayArrayOption) FlatMapInt(f func([][]int32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ArrayArrayOption) FlatMapInt8(f func([][]int32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayArrayOption) FlatMapInt16(f func([][]int32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayArrayOption) FlatMapInt32(f func([][]int32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayArrayOption) FlatMapInt64(f func([][]int32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayArrayOption) FlatMapUint(f func([][]int32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ArrayArrayOption) FlatMapUint8(f func([][]int32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayArrayOption) FlatMapUint16(f func([][]int32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayArrayOption) FlatMapUint32(f func([][]int32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayArrayOption) FlatMapUint64(f func([][]int32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayArrayOption) FlatMapUintptr(f func([][]int32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayArrayOption) FlatMapByte(f func([][]int32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ArrayArrayOption) FlatMapRune(f func([][]int32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ArrayArrayOption) FlatMapFloat32(f func([][]int32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayArrayOption) FlatMapFloat64(f func([][]int32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayArrayOption) FlatMapComplex64(f func([][]int32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayArrayOption) FlatMapComplex128(f func([][]int32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayArrayOption) FlatMapAny(f func([][]int32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ArrayArrayOption) FlatMapBool(f func([][]int64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ArrayArrayOption) FlatMapString(f func([][]int64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ArrayArrayOption) FlatMapInt(f func([][]int64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ArrayArrayOption) FlatMapInt8(f func([][]int64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayArrayOption) FlatMapInt16(f func([][]int64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayArrayOption) FlatMapInt32(f func([][]int64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayArrayOption) FlatMapInt64(f func([][]int64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayArrayOption) FlatMapUint(f func([][]int64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ArrayArrayOption) FlatMapUint8(f func([][]int64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayArrayOption) FlatMapUint16(f func([][]int64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayArrayOption) FlatMapUint32(f func([][]int64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayArrayOption) FlatMapUint64(f func([][]int64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayArrayOption) FlatMapUintptr(f func([][]int64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayArrayOption) FlatMapByte(f func([][]int64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ArrayArrayOption) FlatMapRune(f func([][]int64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ArrayArrayOption) FlatMapFloat32(f func([][]int64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayArrayOption) FlatMapFloat64(f func([][]int64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayArrayOption) FlatMapComplex64(f func([][]int64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayArrayOption) FlatMapComplex128(f func([][]int64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayArrayOption) FlatMapAny(f func([][]int64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintArrayArrayOption) FlatMapBool(f func([][]uint) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintArrayArrayOption) FlatMapString(f func([][]uint) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintArrayArrayOption) FlatMapInt(f func([][]uint) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintArrayArrayOption) FlatMapInt8(f func([][]uint) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintArrayArrayOption) FlatMapInt16(f func([][]uint) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintArrayArrayOption) FlatMapInt32(f func([][]uint) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintArrayArrayOption) FlatMapInt64(f func([][]uint) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintArrayArrayOption) FlatMapUint(f func([][]uint) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintArrayArrayOption) FlatMapUint8(f func([][]uint) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintArrayArrayOption) FlatMapUint16(f func([][]uint) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintArrayArrayOption) FlatMapUint32(f func([][]uint) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintArrayArrayOption) FlatMapUint64(f func([][]uint) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintArrayArrayOption) FlatMapUintptr(f func([][]uint) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintArrayArrayOption) FlatMapByte(f func([][]uint) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintArrayArrayOption) FlatMapRune(f func([][]uint) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintArrayArrayOption) FlatMapFloat32(f func([][]uint) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintArrayArrayOption) FlatMapFloat64(f func([][]uint) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintArrayArrayOption) FlatMapComplex64(f func([][]uint) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintArrayArrayOption) FlatMapComplex128(f func([][]uint) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintArrayArrayOption) FlatMapAny(f func([][]uint) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayArrayOption) FlatMapBool(f func([][]uint8) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayArrayOption) FlatMapString(f func([][]uint8) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ArrayArrayOption) FlatMapInt(f func([][]uint8) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayArrayOption) FlatMapInt8(f func([][]uint8) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayArrayOption) FlatMapInt16(f func([][]uint8) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayArrayOption) FlatMapInt32(f func([][]uint8) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayArrayOption) FlatMapInt64(f func([][]uint8) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayArrayOption) FlatMapUint(f func([][]uint8) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayArrayOption) FlatMapUint8(f func([][]uint8) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayArrayOption) FlatMapUint16(f func([][]uint8) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayArrayOption) FlatMapUint32(f func([][]uint8) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayArrayOption) FlatMapUint64(f func([][]uint8) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayArrayOption) FlatMapUintptr(f func([][]uint8) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayArrayOption) FlatMapByte(f func([][]uint8) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayArrayOption) FlatMapRune(f func([][]uint8) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayArrayOption) FlatMapFloat32(f func([][]uint8) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayArrayOption) FlatMapFloat64(f func([][]uint8) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayArrayOption) FlatMapComplex64(f func([][]uint8) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayArrayOption) FlatMapComplex128(f func([][]uint8) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayArrayOption) FlatMapAny(f func([][]uint8) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayArrayOption) FlatMapBool(f func([][]uint16) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayArrayOption) FlatMapString(f func([][]uint16) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ArrayArrayOption) FlatMapInt(f func([][]uint16) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayArrayOption) FlatMapInt8(f func([][]uint16) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayArrayOption) FlatMapInt16(f func([][]uint16) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayArrayOption) FlatMapInt32(f func([][]uint16) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayArrayOption) FlatMapInt64(f func([][]uint16) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayArrayOption) FlatMapUint(f func([][]uint16) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayArrayOption) FlatMapUint8(f func([][]uint16) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayArrayOption) FlatMapUint16(f func([][]uint16) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayArrayOption) FlatMapUint32(f func([][]uint16) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayArrayOption) FlatMapUint64(f func([][]uint16) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayArrayOption) FlatMapUintptr(f func([][]uint16) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayArrayOption) FlatMapByte(f func([][]uint16) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayArrayOption) FlatMapRune(f func([][]uint16) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayArrayOption) FlatMapFloat32(f func([][]uint16) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayArrayOption) FlatMapFloat64(f func([][]uint16) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayArrayOption) FlatMapComplex64(f func([][]uint16) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayArrayOption) FlatMapComplex128(f func([][]uint16) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayArrayOption) FlatMapAny(f func([][]uint16) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayArrayOption) FlatMapBool(f func([][]uint32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayArrayOption) FlatMapString(f func([][]uint32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ArrayArrayOption) FlatMapInt(f func([][]uint32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayArrayOption) FlatMapInt8(f func([][]uint32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayArrayOption) FlatMapInt16(f func([][]uint32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayArrayOption) FlatMapInt32(f func([][]uint32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayArrayOption) FlatMapInt64(f func([][]uint32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayArrayOption) FlatMapUint(f func([][]uint32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayArrayOption) FlatMapUint8(f func([][]uint32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayArrayOption) FlatMapUint16(f func([][]uint32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayArrayOption) FlatMapUint32(f func([][]uint32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayArrayOption) FlatMapUint64(f func([][]uint32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayArrayOption) FlatMapUintptr(f func([][]uint32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayArrayOption) FlatMapByte(f func([][]uint32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayArrayOption) FlatMapRune(f func([][]uint32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayArrayOption) FlatMapFloat32(f func([][]uint32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayArrayOption) FlatMapFloat64(f func([][]uint32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayArrayOption) FlatMapComplex64(f func([][]uint32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayArrayOption) FlatMapComplex128(f func([][]uint32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayArrayOption) FlatMapAny(f func([][]uint32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayArrayOption) FlatMapBool(f func([][]uint64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayArrayOption) FlatMapString(f func([][]uint64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ArrayArrayOption) FlatMapInt(f func([][]uint64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayArrayOption) FlatMapInt8(f func([][]uint64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayArrayOption) FlatMapInt16(f func([][]uint64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayArrayOption) FlatMapInt32(f func([][]uint64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayArrayOption) FlatMapInt64(f func([][]uint64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayArrayOption) FlatMapUint(f func([][]uint64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayArrayOption) FlatMapUint8(f func([][]uint64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayArrayOption) FlatMapUint16(f func([][]uint64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayArrayOption) FlatMapUint32(f func([][]uint64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayArrayOption) FlatMapUint64(f func([][]uint64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayArrayOption) FlatMapUintptr(f func([][]uint64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayArrayOption) FlatMapByte(f func([][]uint64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayArrayOption) FlatMapRune(f func([][]uint64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayArrayOption) FlatMapFloat32(f func([][]uint64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayArrayOption) FlatMapFloat64(f func([][]uint64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayArrayOption) FlatMapComplex64(f func([][]uint64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayArrayOption) FlatMapComplex128(f func([][]uint64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayArrayOption) FlatMapAny(f func([][]uint64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrArrayArrayOption) FlatMapBool(f func([][]uintptr) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrArrayArrayOption) FlatMapString(f func([][]uintptr) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrArrayArrayOption) FlatMapInt(f func([][]uintptr) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrArrayArrayOption) FlatMapInt8(f func([][]uintptr) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayArrayOption) FlatMapInt16(f func([][]uintptr) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayArrayOption) FlatMapInt32(f func([][]uintptr) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayArrayOption) FlatMapInt64(f func([][]uintptr) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayArrayOption) FlatMapUint(f func([][]uintptr) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrArrayArrayOption) FlatMapUint8(f func([][]uintptr) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayArrayOption) FlatMapUint16(f func([][]uintptr) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayArrayOption) FlatMapUint32(f func([][]uintptr) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayArrayOption) FlatMapUint64(f func([][]uintptr) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayArrayOption) FlatMapUintptr(f func([][]uintptr) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayArrayOption) FlatMapByte(f func([][]uintptr) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrArrayArrayOption) FlatMapRune(f func([][]uintptr) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrArrayArrayOption) FlatMapFloat32(f func([][]uintptr) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayArrayOption) FlatMapFloat64(f func([][]uintptr) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayArrayOption) FlatMapComplex64(f func([][]uintptr) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayArrayOption) FlatMapComplex128(f func([][]uintptr) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayArrayOption) FlatMapAny(f func([][]uintptr) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteArrayArrayOption) FlatMapBool(f func([][]byte) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteArrayArrayOption) FlatMapString(f func([][]byte) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteArrayArrayOption) FlatMapInt(f func([][]byte) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteArrayArrayOption) FlatMapInt8(f func([][]byte) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteArrayArrayOption) FlatMapInt16(f func([][]byte) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteArrayArrayOption) FlatMapInt32(f func([][]byte) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteArrayArrayOption) FlatMapInt64(f func([][]byte) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteArrayArrayOption) FlatMapUint(f func([][]byte) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteArrayArrayOption) FlatMapUint8(f func([][]byte) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteArrayArrayOption) FlatMapUint16(f func([][]byte) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteArrayArrayOption) FlatMapUint32(f func([][]byte) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteArrayArrayOption) FlatMapUint64(f func([][]byte) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteArrayArrayOption) FlatMapUintptr(f func([][]byte) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayArrayOption) FlatMapByte(f func([][]byte) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteArrayArrayOption) FlatMapRune(f func([][]byte) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteArrayArrayOption) FlatMapFloat32(f func([][]byte) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayArrayOption) FlatMapFloat64(f func([][]byte) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayArrayOption) FlatMapComplex64(f func([][]byte) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayArrayOption) FlatMapComplex128(f func([][]byte) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayArrayOption) FlatMapAny(f func([][]byte) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneArrayArrayOption) FlatMapBool(f func([][]rune) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneArrayArrayOption) FlatMapString(f func([][]rune) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneArrayArrayOption) FlatMapInt(f func([][]rune) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneArrayArrayOption) FlatMapInt8(f func([][]rune) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneArrayArrayOption) FlatMapInt16(f func([][]rune) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneArrayArrayOption) FlatMapInt32(f func([][]rune) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneArrayArrayOption) FlatMapInt64(f func([][]rune) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneArrayArrayOption) FlatMapUint(f func([][]rune) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneArrayArrayOption) FlatMapUint8(f func([][]rune) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneArrayArrayOption) FlatMapUint16(f func([][]rune) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneArrayArrayOption) FlatMapUint32(f func([][]rune) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneArrayArrayOption) FlatMapUint64(f func([][]rune) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneArrayArrayOption) FlatMapUintptr(f func([][]rune) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayArrayOption) FlatMapByte(f func([][]rune) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneArrayArrayOption) FlatMapRune(f func([][]rune) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneArrayArrayOption) FlatMapFloat32(f func([][]rune) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayArrayOption) FlatMapFloat64(f func([][]rune) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayArrayOption) FlatMapComplex64(f func([][]rune) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayArrayOption) FlatMapComplex128(f func([][]rune) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayArrayOption) FlatMapAny(f func([][]rune) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ArrayArrayOption) FlatMapBool(f func([][]float32) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ArrayArrayOption) FlatMapString(f func([][]float32) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ArrayArrayOption) FlatMapInt(f func([][]float32) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ArrayArrayOption) FlatMapInt8(f func([][]float32) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayArrayOption) FlatMapInt16(f func([][]float32) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayArrayOption) FlatMapInt32(f func([][]float32) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayArrayOption) FlatMapInt64(f func([][]float32) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayArrayOption) FlatMapUint(f func([][]float32) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ArrayArrayOption) FlatMapUint8(f func([][]float32) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayArrayOption) FlatMapUint16(f func([][]float32) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayArrayOption) FlatMapUint32(f func([][]float32) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayArrayOption) FlatMapUint64(f func([][]float32) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayArrayOption) FlatMapUintptr(f func([][]float32) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayArrayOption) FlatMapByte(f func([][]float32) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ArrayArrayOption) FlatMapRune(f func([][]float32) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ArrayArrayOption) FlatMapFloat32(f func([][]float32) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayArrayOption) FlatMapFloat64(f func([][]float32) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayArrayOption) FlatMapComplex64(f func([][]float32) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayArrayOption) FlatMapComplex128(f func([][]float32) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayArrayOption) FlatMapAny(f func([][]float32) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ArrayArrayOption) FlatMapBool(f func([][]float64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ArrayArrayOption) FlatMapString(f func([][]float64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ArrayArrayOption) FlatMapInt(f func([][]float64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ArrayArrayOption) FlatMapInt8(f func([][]float64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayArrayOption) FlatMapInt16(f func([][]float64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayArrayOption) FlatMapInt32(f func([][]float64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayArrayOption) FlatMapInt64(f func([][]float64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayArrayOption) FlatMapUint(f func([][]float64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ArrayArrayOption) FlatMapUint8(f func([][]float64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayArrayOption) FlatMapUint16(f func([][]float64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayArrayOption) FlatMapUint32(f func([][]float64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayArrayOption) FlatMapUint64(f func([][]float64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayArrayOption) FlatMapUintptr(f func([][]float64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayArrayOption) FlatMapByte(f func([][]float64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ArrayArrayOption) FlatMapRune(f func([][]float64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ArrayArrayOption) FlatMapFloat32(f func([][]float64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayArrayOption) FlatMapFloat64(f func([][]float64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayArrayOption) FlatMapComplex64(f func([][]float64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayArrayOption) FlatMapComplex128(f func([][]float64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayArrayOption) FlatMapAny(f func([][]float64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayArrayOption) FlatMapBool(f func([][]complex64) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayArrayOption) FlatMapString(f func([][]complex64) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ArrayArrayOption) FlatMapInt(f func([][]complex64) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayArrayOption) FlatMapInt8(f func([][]complex64) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayArrayOption) FlatMapInt16(f func([][]complex64) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayArrayOption) FlatMapInt32(f func([][]complex64) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayArrayOption) FlatMapInt64(f func([][]complex64) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayArrayOption) FlatMapUint(f func([][]complex64) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayArrayOption) FlatMapUint8(f func([][]complex64) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayArrayOption) FlatMapUint16(f func([][]complex64) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayArrayOption) FlatMapUint32(f func([][]complex64) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayArrayOption) FlatMapUint64(f func([][]complex64) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayArrayOption) FlatMapUintptr(f func([][]complex64) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayArrayOption) FlatMapByte(f func([][]complex64) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayArrayOption) FlatMapRune(f func([][]complex64) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayArrayOption) FlatMapFloat32(f func([][]complex64) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayArrayOption) FlatMapFloat64(f func([][]complex64) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayArrayOption) FlatMapComplex64(f func([][]complex64) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayArrayOption) FlatMapComplex128(f func([][]complex64) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayArrayOption) FlatMapAny(f func([][]complex64) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayArrayOption) FlatMapBool(f func([][]complex128) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayArrayOption) FlatMapString(f func([][]complex128) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ArrayArrayOption) FlatMapInt(f func([][]complex128) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayArrayOption) FlatMapInt8(f func([][]complex128) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayArrayOption) FlatMapInt16(f func([][]complex128) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayArrayOption) FlatMapInt32(f func([][]complex128) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayArrayOption) FlatMapInt64(f func([][]complex128) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayArrayOption) FlatMapUint(f func([][]complex128) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayArrayOption) FlatMapUint8(f func([][]complex128) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayArrayOption) FlatMapUint16(f func([][]complex128) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayArrayOption) FlatMapUint32(f func([][]complex128) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayArrayOption) FlatMapUint64(f func([][]complex128) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayArrayOption) FlatMapUintptr(f func([][]complex128) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayArrayOption) FlatMapByte(f func([][]complex128) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayArrayOption) FlatMapRune(f func([][]complex128) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayArrayOption) FlatMapFloat32(f func([][]complex128) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayArrayOption) FlatMapFloat64(f func([][]complex128) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayArrayOption) FlatMapComplex64(f func([][]complex128) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayArrayOption) FlatMapComplex128(f func([][]complex128) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayArrayOption) FlatMapAny(f func([][]complex128) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyArrayArrayOption) FlatMapBool(f func([][]Any) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyArrayArrayOption) FlatMapString(f func([][]Any) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyArrayArrayOption) FlatMapInt(f func([][]Any) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyArrayArrayOption) FlatMapInt8(f func([][]Any) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyArrayArrayOption) FlatMapInt16(f func([][]Any) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyArrayArrayOption) FlatMapInt32(f func([][]Any) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyArrayArrayOption) FlatMapInt64(f func([][]Any) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyArrayArrayOption) FlatMapUint(f func([][]Any) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyArrayArrayOption) FlatMapUint8(f func([][]Any) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyArrayArrayOption) FlatMapUint16(f func([][]Any) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyArrayArrayOption) FlatMapUint32(f func([][]Any) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyArrayArrayOption) FlatMapUint64(f func([][]Any) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyArrayArrayOption) FlatMapUintptr(f func([][]Any) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayArrayOption) FlatMapByte(f func([][]Any) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyArrayArrayOption) FlatMapRune(f func([][]Any) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyArrayArrayOption) FlatMapFloat32(f func([][]Any) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayArrayOption) FlatMapFloat64(f func([][]Any) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayArrayOption) FlatMapComplex64(f func([][]Any) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayArrayOption) FlatMapComplex128(f func([][]Any) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayArrayOption) FlatMapAny(f func([][]Any) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolOptionArrayOption) FlatMapBool(f func([]BoolOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolOptionArrayOption) FlatMapString(f func([]BoolOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolOptionArrayOption) FlatMapInt(f func([]BoolOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolOptionArrayOption) FlatMapInt8(f func([]BoolOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolOptionArrayOption) FlatMapInt16(f func([]BoolOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolOptionArrayOption) FlatMapInt32(f func([]BoolOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolOptionArrayOption) FlatMapInt64(f func([]BoolOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolOptionArrayOption) FlatMapUint(f func([]BoolOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolOptionArrayOption) FlatMapUint8(f func([]BoolOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolOptionArrayOption) FlatMapUint16(f func([]BoolOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolOptionArrayOption) FlatMapUint32(f func([]BoolOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolOptionArrayOption) FlatMapUint64(f func([]BoolOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolOptionArrayOption) FlatMapUintptr(f func([]BoolOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolOptionArrayOption) FlatMapByte(f func([]BoolOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolOptionArrayOption) FlatMapRune(f func([]BoolOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolOptionArrayOption) FlatMapFloat32(f func([]BoolOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolOptionArrayOption) FlatMapFloat64(f func([]BoolOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolOptionArrayOption) FlatMapComplex64(f func([]BoolOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolOptionArrayOption) FlatMapComplex128(f func([]BoolOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolOptionArrayOption) FlatMapAny(f func([]BoolOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringOptionArrayOption) FlatMapBool(f func([]StringOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringOptionArrayOption) FlatMapString(f func([]StringOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringOptionArrayOption) FlatMapInt(f func([]StringOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringOptionArrayOption) FlatMapInt8(f func([]StringOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringOptionArrayOption) FlatMapInt16(f func([]StringOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringOptionArrayOption) FlatMapInt32(f func([]StringOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringOptionArrayOption) FlatMapInt64(f func([]StringOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringOptionArrayOption) FlatMapUint(f func([]StringOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringOptionArrayOption) FlatMapUint8(f func([]StringOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringOptionArrayOption) FlatMapUint16(f func([]StringOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringOptionArrayOption) FlatMapUint32(f func([]StringOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringOptionArrayOption) FlatMapUint64(f func([]StringOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringOptionArrayOption) FlatMapUintptr(f func([]StringOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringOptionArrayOption) FlatMapByte(f func([]StringOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringOptionArrayOption) FlatMapRune(f func([]StringOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringOptionArrayOption) FlatMapFloat32(f func([]StringOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringOptionArrayOption) FlatMapFloat64(f func([]StringOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringOptionArrayOption) FlatMapComplex64(f func([]StringOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringOptionArrayOption) FlatMapComplex128(f func([]StringOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringOptionArrayOption) FlatMapAny(f func([]StringOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntOptionArrayOption) FlatMapBool(f func([]IntOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntOptionArrayOption) FlatMapString(f func([]IntOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntOptionArrayOption) FlatMapInt(f func([]IntOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntOptionArrayOption) FlatMapInt8(f func([]IntOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntOptionArrayOption) FlatMapInt16(f func([]IntOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntOptionArrayOption) FlatMapInt32(f func([]IntOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntOptionArrayOption) FlatMapInt64(f func([]IntOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntOptionArrayOption) FlatMapUint(f func([]IntOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntOptionArrayOption) FlatMapUint8(f func([]IntOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntOptionArrayOption) FlatMapUint16(f func([]IntOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntOptionArrayOption) FlatMapUint32(f func([]IntOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntOptionArrayOption) FlatMapUint64(f func([]IntOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntOptionArrayOption) FlatMapUintptr(f func([]IntOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntOptionArrayOption) FlatMapByte(f func([]IntOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntOptionArrayOption) FlatMapRune(f func([]IntOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntOptionArrayOption) FlatMapFloat32(f func([]IntOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntOptionArrayOption) FlatMapFloat64(f func([]IntOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntOptionArrayOption) FlatMapComplex64(f func([]IntOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntOptionArrayOption) FlatMapComplex128(f func([]IntOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntOptionArrayOption) FlatMapAny(f func([]IntOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8OptionArrayOption) FlatMapBool(f func([]Int8Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8OptionArrayOption) FlatMapString(f func([]Int8Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8OptionArrayOption) FlatMapInt(f func([]Int8Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8OptionArrayOption) FlatMapInt8(f func([]Int8Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8OptionArrayOption) FlatMapInt16(f func([]Int8Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8OptionArrayOption) FlatMapInt32(f func([]Int8Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8OptionArrayOption) FlatMapInt64(f func([]Int8Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8OptionArrayOption) FlatMapUint(f func([]Int8Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8OptionArrayOption) FlatMapUint8(f func([]Int8Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8OptionArrayOption) FlatMapUint16(f func([]Int8Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8OptionArrayOption) FlatMapUint32(f func([]Int8Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8OptionArrayOption) FlatMapUint64(f func([]Int8Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8OptionArrayOption) FlatMapUintptr(f func([]Int8Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8OptionArrayOption) FlatMapByte(f func([]Int8Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8OptionArrayOption) FlatMapRune(f func([]Int8Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8OptionArrayOption) FlatMapFloat32(f func([]Int8Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8OptionArrayOption) FlatMapFloat64(f func([]Int8Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8OptionArrayOption) FlatMapComplex64(f func([]Int8Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8OptionArrayOption) FlatMapComplex128(f func([]Int8Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8OptionArrayOption) FlatMapAny(f func([]Int8Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16OptionArrayOption) FlatMapBool(f func([]Int16Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16OptionArrayOption) FlatMapString(f func([]Int16Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16OptionArrayOption) FlatMapInt(f func([]Int16Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16OptionArrayOption) FlatMapInt8(f func([]Int16Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16OptionArrayOption) FlatMapInt16(f func([]Int16Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16OptionArrayOption) FlatMapInt32(f func([]Int16Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16OptionArrayOption) FlatMapInt64(f func([]Int16Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16OptionArrayOption) FlatMapUint(f func([]Int16Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16OptionArrayOption) FlatMapUint8(f func([]Int16Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16OptionArrayOption) FlatMapUint16(f func([]Int16Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16OptionArrayOption) FlatMapUint32(f func([]Int16Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16OptionArrayOption) FlatMapUint64(f func([]Int16Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16OptionArrayOption) FlatMapUintptr(f func([]Int16Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16OptionArrayOption) FlatMapByte(f func([]Int16Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16OptionArrayOption) FlatMapRune(f func([]Int16Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16OptionArrayOption) FlatMapFloat32(f func([]Int16Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16OptionArrayOption) FlatMapFloat64(f func([]Int16Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16OptionArrayOption) FlatMapComplex64(f func([]Int16Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16OptionArrayOption) FlatMapComplex128(f func([]Int16Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16OptionArrayOption) FlatMapAny(f func([]Int16Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32OptionArrayOption) FlatMapBool(f func([]Int32Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32OptionArrayOption) FlatMapString(f func([]Int32Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32OptionArrayOption) FlatMapInt(f func([]Int32Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32OptionArrayOption) FlatMapInt8(f func([]Int32Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32OptionArrayOption) FlatMapInt16(f func([]Int32Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32OptionArrayOption) FlatMapInt32(f func([]Int32Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32OptionArrayOption) FlatMapInt64(f func([]Int32Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32OptionArrayOption) FlatMapUint(f func([]Int32Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32OptionArrayOption) FlatMapUint8(f func([]Int32Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32OptionArrayOption) FlatMapUint16(f func([]Int32Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32OptionArrayOption) FlatMapUint32(f func([]Int32Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32OptionArrayOption) FlatMapUint64(f func([]Int32Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32OptionArrayOption) FlatMapUintptr(f func([]Int32Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32OptionArrayOption) FlatMapByte(f func([]Int32Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32OptionArrayOption) FlatMapRune(f func([]Int32Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32OptionArrayOption) FlatMapFloat32(f func([]Int32Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32OptionArrayOption) FlatMapFloat64(f func([]Int32Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32OptionArrayOption) FlatMapComplex64(f func([]Int32Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32OptionArrayOption) FlatMapComplex128(f func([]Int32Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32OptionArrayOption) FlatMapAny(f func([]Int32Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64OptionArrayOption) FlatMapBool(f func([]Int64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64OptionArrayOption) FlatMapString(f func([]Int64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64OptionArrayOption) FlatMapInt(f func([]Int64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64OptionArrayOption) FlatMapInt8(f func([]Int64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64OptionArrayOption) FlatMapInt16(f func([]Int64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64OptionArrayOption) FlatMapInt32(f func([]Int64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64OptionArrayOption) FlatMapInt64(f func([]Int64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64OptionArrayOption) FlatMapUint(f func([]Int64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64OptionArrayOption) FlatMapUint8(f func([]Int64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64OptionArrayOption) FlatMapUint16(f func([]Int64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64OptionArrayOption) FlatMapUint32(f func([]Int64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64OptionArrayOption) FlatMapUint64(f func([]Int64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64OptionArrayOption) FlatMapUintptr(f func([]Int64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64OptionArrayOption) FlatMapByte(f func([]Int64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64OptionArrayOption) FlatMapRune(f func([]Int64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64OptionArrayOption) FlatMapFloat32(f func([]Int64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64OptionArrayOption) FlatMapFloat64(f func([]Int64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64OptionArrayOption) FlatMapComplex64(f func([]Int64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64OptionArrayOption) FlatMapComplex128(f func([]Int64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64OptionArrayOption) FlatMapAny(f func([]Int64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintOptionArrayOption) FlatMapBool(f func([]UintOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintOptionArrayOption) FlatMapString(f func([]UintOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintOptionArrayOption) FlatMapInt(f func([]UintOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintOptionArrayOption) FlatMapInt8(f func([]UintOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintOptionArrayOption) FlatMapInt16(f func([]UintOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintOptionArrayOption) FlatMapInt32(f func([]UintOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintOptionArrayOption) FlatMapInt64(f func([]UintOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintOptionArrayOption) FlatMapUint(f func([]UintOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintOptionArrayOption) FlatMapUint8(f func([]UintOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintOptionArrayOption) FlatMapUint16(f func([]UintOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintOptionArrayOption) FlatMapUint32(f func([]UintOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintOptionArrayOption) FlatMapUint64(f func([]UintOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintOptionArrayOption) FlatMapUintptr(f func([]UintOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintOptionArrayOption) FlatMapByte(f func([]UintOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintOptionArrayOption) FlatMapRune(f func([]UintOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintOptionArrayOption) FlatMapFloat32(f func([]UintOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintOptionArrayOption) FlatMapFloat64(f func([]UintOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintOptionArrayOption) FlatMapComplex64(f func([]UintOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintOptionArrayOption) FlatMapComplex128(f func([]UintOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintOptionArrayOption) FlatMapAny(f func([]UintOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8OptionArrayOption) FlatMapBool(f func([]Uint8Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8OptionArrayOption) FlatMapString(f func([]Uint8Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8OptionArrayOption) FlatMapInt(f func([]Uint8Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8OptionArrayOption) FlatMapInt8(f func([]Uint8Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8OptionArrayOption) FlatMapInt16(f func([]Uint8Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8OptionArrayOption) FlatMapInt32(f func([]Uint8Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8OptionArrayOption) FlatMapInt64(f func([]Uint8Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8OptionArrayOption) FlatMapUint(f func([]Uint8Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8OptionArrayOption) FlatMapUint8(f func([]Uint8Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8OptionArrayOption) FlatMapUint16(f func([]Uint8Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8OptionArrayOption) FlatMapUint32(f func([]Uint8Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8OptionArrayOption) FlatMapUint64(f func([]Uint8Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8OptionArrayOption) FlatMapUintptr(f func([]Uint8Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8OptionArrayOption) FlatMapByte(f func([]Uint8Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8OptionArrayOption) FlatMapRune(f func([]Uint8Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8OptionArrayOption) FlatMapFloat32(f func([]Uint8Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8OptionArrayOption) FlatMapFloat64(f func([]Uint8Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8OptionArrayOption) FlatMapComplex64(f func([]Uint8Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8OptionArrayOption) FlatMapComplex128(f func([]Uint8Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8OptionArrayOption) FlatMapAny(f func([]Uint8Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16OptionArrayOption) FlatMapBool(f func([]Uint16Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16OptionArrayOption) FlatMapString(f func([]Uint16Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16OptionArrayOption) FlatMapInt(f func([]Uint16Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16OptionArrayOption) FlatMapInt8(f func([]Uint16Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16OptionArrayOption) FlatMapInt16(f func([]Uint16Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16OptionArrayOption) FlatMapInt32(f func([]Uint16Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16OptionArrayOption) FlatMapInt64(f func([]Uint16Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16OptionArrayOption) FlatMapUint(f func([]Uint16Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16OptionArrayOption) FlatMapUint8(f func([]Uint16Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16OptionArrayOption) FlatMapUint16(f func([]Uint16Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16OptionArrayOption) FlatMapUint32(f func([]Uint16Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16OptionArrayOption) FlatMapUint64(f func([]Uint16Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16OptionArrayOption) FlatMapUintptr(f func([]Uint16Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16OptionArrayOption) FlatMapByte(f func([]Uint16Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16OptionArrayOption) FlatMapRune(f func([]Uint16Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16OptionArrayOption) FlatMapFloat32(f func([]Uint16Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16OptionArrayOption) FlatMapFloat64(f func([]Uint16Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16OptionArrayOption) FlatMapComplex64(f func([]Uint16Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16OptionArrayOption) FlatMapComplex128(f func([]Uint16Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16OptionArrayOption) FlatMapAny(f func([]Uint16Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32OptionArrayOption) FlatMapBool(f func([]Uint32Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32OptionArrayOption) FlatMapString(f func([]Uint32Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32OptionArrayOption) FlatMapInt(f func([]Uint32Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32OptionArrayOption) FlatMapInt8(f func([]Uint32Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32OptionArrayOption) FlatMapInt16(f func([]Uint32Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32OptionArrayOption) FlatMapInt32(f func([]Uint32Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32OptionArrayOption) FlatMapInt64(f func([]Uint32Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32OptionArrayOption) FlatMapUint(f func([]Uint32Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32OptionArrayOption) FlatMapUint8(f func([]Uint32Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32OptionArrayOption) FlatMapUint16(f func([]Uint32Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32OptionArrayOption) FlatMapUint32(f func([]Uint32Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32OptionArrayOption) FlatMapUint64(f func([]Uint32Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32OptionArrayOption) FlatMapUintptr(f func([]Uint32Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32OptionArrayOption) FlatMapByte(f func([]Uint32Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32OptionArrayOption) FlatMapRune(f func([]Uint32Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32OptionArrayOption) FlatMapFloat32(f func([]Uint32Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32OptionArrayOption) FlatMapFloat64(f func([]Uint32Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32OptionArrayOption) FlatMapComplex64(f func([]Uint32Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32OptionArrayOption) FlatMapComplex128(f func([]Uint32Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32OptionArrayOption) FlatMapAny(f func([]Uint32Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64OptionArrayOption) FlatMapBool(f func([]Uint64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64OptionArrayOption) FlatMapString(f func([]Uint64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64OptionArrayOption) FlatMapInt(f func([]Uint64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64OptionArrayOption) FlatMapInt8(f func([]Uint64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64OptionArrayOption) FlatMapInt16(f func([]Uint64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64OptionArrayOption) FlatMapInt32(f func([]Uint64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64OptionArrayOption) FlatMapInt64(f func([]Uint64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64OptionArrayOption) FlatMapUint(f func([]Uint64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64OptionArrayOption) FlatMapUint8(f func([]Uint64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64OptionArrayOption) FlatMapUint16(f func([]Uint64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64OptionArrayOption) FlatMapUint32(f func([]Uint64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64OptionArrayOption) FlatMapUint64(f func([]Uint64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64OptionArrayOption) FlatMapUintptr(f func([]Uint64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64OptionArrayOption) FlatMapByte(f func([]Uint64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64OptionArrayOption) FlatMapRune(f func([]Uint64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64OptionArrayOption) FlatMapFloat32(f func([]Uint64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64OptionArrayOption) FlatMapFloat64(f func([]Uint64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64OptionArrayOption) FlatMapComplex64(f func([]Uint64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64OptionArrayOption) FlatMapComplex128(f func([]Uint64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64OptionArrayOption) FlatMapAny(f func([]Uint64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrOptionArrayOption) FlatMapBool(f func([]UintptrOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrOptionArrayOption) FlatMapString(f func([]UintptrOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrOptionArrayOption) FlatMapInt(f func([]UintptrOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrOptionArrayOption) FlatMapInt8(f func([]UintptrOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrOptionArrayOption) FlatMapInt16(f func([]UintptrOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrOptionArrayOption) FlatMapInt32(f func([]UintptrOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrOptionArrayOption) FlatMapInt64(f func([]UintptrOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrOptionArrayOption) FlatMapUint(f func([]UintptrOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrOptionArrayOption) FlatMapUint8(f func([]UintptrOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrOptionArrayOption) FlatMapUint16(f func([]UintptrOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrOptionArrayOption) FlatMapUint32(f func([]UintptrOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrOptionArrayOption) FlatMapUint64(f func([]UintptrOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrOptionArrayOption) FlatMapUintptr(f func([]UintptrOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrOptionArrayOption) FlatMapByte(f func([]UintptrOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrOptionArrayOption) FlatMapRune(f func([]UintptrOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrOptionArrayOption) FlatMapFloat32(f func([]UintptrOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrOptionArrayOption) FlatMapFloat64(f func([]UintptrOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrOptionArrayOption) FlatMapComplex64(f func([]UintptrOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrOptionArrayOption) FlatMapComplex128(f func([]UintptrOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrOptionArrayOption) FlatMapAny(f func([]UintptrOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteOptionArrayOption) FlatMapBool(f func([]ByteOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteOptionArrayOption) FlatMapString(f func([]ByteOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteOptionArrayOption) FlatMapInt(f func([]ByteOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteOptionArrayOption) FlatMapInt8(f func([]ByteOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteOptionArrayOption) FlatMapInt16(f func([]ByteOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteOptionArrayOption) FlatMapInt32(f func([]ByteOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteOptionArrayOption) FlatMapInt64(f func([]ByteOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteOptionArrayOption) FlatMapUint(f func([]ByteOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteOptionArrayOption) FlatMapUint8(f func([]ByteOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteOptionArrayOption) FlatMapUint16(f func([]ByteOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteOptionArrayOption) FlatMapUint32(f func([]ByteOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteOptionArrayOption) FlatMapUint64(f func([]ByteOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteOptionArrayOption) FlatMapUintptr(f func([]ByteOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteOptionArrayOption) FlatMapByte(f func([]ByteOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteOptionArrayOption) FlatMapRune(f func([]ByteOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteOptionArrayOption) FlatMapFloat32(f func([]ByteOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteOptionArrayOption) FlatMapFloat64(f func([]ByteOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteOptionArrayOption) FlatMapComplex64(f func([]ByteOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteOptionArrayOption) FlatMapComplex128(f func([]ByteOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteOptionArrayOption) FlatMapAny(f func([]ByteOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneOptionArrayOption) FlatMapBool(f func([]RuneOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneOptionArrayOption) FlatMapString(f func([]RuneOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneOptionArrayOption) FlatMapInt(f func([]RuneOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneOptionArrayOption) FlatMapInt8(f func([]RuneOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneOptionArrayOption) FlatMapInt16(f func([]RuneOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneOptionArrayOption) FlatMapInt32(f func([]RuneOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneOptionArrayOption) FlatMapInt64(f func([]RuneOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneOptionArrayOption) FlatMapUint(f func([]RuneOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneOptionArrayOption) FlatMapUint8(f func([]RuneOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneOptionArrayOption) FlatMapUint16(f func([]RuneOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneOptionArrayOption) FlatMapUint32(f func([]RuneOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneOptionArrayOption) FlatMapUint64(f func([]RuneOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneOptionArrayOption) FlatMapUintptr(f func([]RuneOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneOptionArrayOption) FlatMapByte(f func([]RuneOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneOptionArrayOption) FlatMapRune(f func([]RuneOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneOptionArrayOption) FlatMapFloat32(f func([]RuneOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneOptionArrayOption) FlatMapFloat64(f func([]RuneOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneOptionArrayOption) FlatMapComplex64(f func([]RuneOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneOptionArrayOption) FlatMapComplex128(f func([]RuneOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneOptionArrayOption) FlatMapAny(f func([]RuneOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32OptionArrayOption) FlatMapBool(f func([]Float32Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32OptionArrayOption) FlatMapString(f func([]Float32Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32OptionArrayOption) FlatMapInt(f func([]Float32Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32OptionArrayOption) FlatMapInt8(f func([]Float32Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32OptionArrayOption) FlatMapInt16(f func([]Float32Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32OptionArrayOption) FlatMapInt32(f func([]Float32Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32OptionArrayOption) FlatMapInt64(f func([]Float32Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32OptionArrayOption) FlatMapUint(f func([]Float32Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32OptionArrayOption) FlatMapUint8(f func([]Float32Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32OptionArrayOption) FlatMapUint16(f func([]Float32Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32OptionArrayOption) FlatMapUint32(f func([]Float32Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32OptionArrayOption) FlatMapUint64(f func([]Float32Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32OptionArrayOption) FlatMapUintptr(f func([]Float32Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32OptionArrayOption) FlatMapByte(f func([]Float32Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32OptionArrayOption) FlatMapRune(f func([]Float32Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32OptionArrayOption) FlatMapFloat32(f func([]Float32Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32OptionArrayOption) FlatMapFloat64(f func([]Float32Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32OptionArrayOption) FlatMapComplex64(f func([]Float32Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32OptionArrayOption) FlatMapComplex128(f func([]Float32Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32OptionArrayOption) FlatMapAny(f func([]Float32Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64OptionArrayOption) FlatMapBool(f func([]Float64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64OptionArrayOption) FlatMapString(f func([]Float64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64OptionArrayOption) FlatMapInt(f func([]Float64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64OptionArrayOption) FlatMapInt8(f func([]Float64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64OptionArrayOption) FlatMapInt16(f func([]Float64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64OptionArrayOption) FlatMapInt32(f func([]Float64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64OptionArrayOption) FlatMapInt64(f func([]Float64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64OptionArrayOption) FlatMapUint(f func([]Float64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64OptionArrayOption) FlatMapUint8(f func([]Float64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64OptionArrayOption) FlatMapUint16(f func([]Float64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64OptionArrayOption) FlatMapUint32(f func([]Float64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64OptionArrayOption) FlatMapUint64(f func([]Float64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64OptionArrayOption) FlatMapUintptr(f func([]Float64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64OptionArrayOption) FlatMapByte(f func([]Float64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64OptionArrayOption) FlatMapRune(f func([]Float64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64OptionArrayOption) FlatMapFloat32(f func([]Float64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64OptionArrayOption) FlatMapFloat64(f func([]Float64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64OptionArrayOption) FlatMapComplex64(f func([]Float64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64OptionArrayOption) FlatMapComplex128(f func([]Float64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64OptionArrayOption) FlatMapAny(f func([]Float64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64OptionArrayOption) FlatMapBool(f func([]Complex64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64OptionArrayOption) FlatMapString(f func([]Complex64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64OptionArrayOption) FlatMapInt(f func([]Complex64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64OptionArrayOption) FlatMapInt8(f func([]Complex64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64OptionArrayOption) FlatMapInt16(f func([]Complex64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64OptionArrayOption) FlatMapInt32(f func([]Complex64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64OptionArrayOption) FlatMapInt64(f func([]Complex64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64OptionArrayOption) FlatMapUint(f func([]Complex64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64OptionArrayOption) FlatMapUint8(f func([]Complex64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64OptionArrayOption) FlatMapUint16(f func([]Complex64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64OptionArrayOption) FlatMapUint32(f func([]Complex64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64OptionArrayOption) FlatMapUint64(f func([]Complex64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64OptionArrayOption) FlatMapUintptr(f func([]Complex64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64OptionArrayOption) FlatMapByte(f func([]Complex64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64OptionArrayOption) FlatMapRune(f func([]Complex64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64OptionArrayOption) FlatMapFloat32(f func([]Complex64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64OptionArrayOption) FlatMapFloat64(f func([]Complex64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64OptionArrayOption) FlatMapComplex64(f func([]Complex64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64OptionArrayOption) FlatMapComplex128(f func([]Complex64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64OptionArrayOption) FlatMapAny(f func([]Complex64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128OptionArrayOption) FlatMapBool(f func([]Complex128Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128OptionArrayOption) FlatMapString(f func([]Complex128Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128OptionArrayOption) FlatMapInt(f func([]Complex128Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128OptionArrayOption) FlatMapInt8(f func([]Complex128Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128OptionArrayOption) FlatMapInt16(f func([]Complex128Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128OptionArrayOption) FlatMapInt32(f func([]Complex128Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128OptionArrayOption) FlatMapInt64(f func([]Complex128Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128OptionArrayOption) FlatMapUint(f func([]Complex128Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128OptionArrayOption) FlatMapUint8(f func([]Complex128Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128OptionArrayOption) FlatMapUint16(f func([]Complex128Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128OptionArrayOption) FlatMapUint32(f func([]Complex128Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128OptionArrayOption) FlatMapUint64(f func([]Complex128Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128OptionArrayOption) FlatMapUintptr(f func([]Complex128Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128OptionArrayOption) FlatMapByte(f func([]Complex128Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128OptionArrayOption) FlatMapRune(f func([]Complex128Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128OptionArrayOption) FlatMapFloat32(f func([]Complex128Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128OptionArrayOption) FlatMapFloat64(f func([]Complex128Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128OptionArrayOption) FlatMapComplex64(f func([]Complex128Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128OptionArrayOption) FlatMapComplex128(f func([]Complex128Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128OptionArrayOption) FlatMapAny(f func([]Complex128Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyOptionArrayOption) FlatMapBool(f func([]AnyOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyOptionArrayOption) FlatMapString(f func([]AnyOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyOptionArrayOption) FlatMapInt(f func([]AnyOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyOptionArrayOption) FlatMapInt8(f func([]AnyOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyOptionArrayOption) FlatMapInt16(f func([]AnyOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyOptionArrayOption) FlatMapInt32(f func([]AnyOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyOptionArrayOption) FlatMapInt64(f func([]AnyOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyOptionArrayOption) FlatMapUint(f func([]AnyOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyOptionArrayOption) FlatMapUint8(f func([]AnyOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyOptionArrayOption) FlatMapUint16(f func([]AnyOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyOptionArrayOption) FlatMapUint32(f func([]AnyOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyOptionArrayOption) FlatMapUint64(f func([]AnyOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyOptionArrayOption) FlatMapUintptr(f func([]AnyOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyOptionArrayOption) FlatMapByte(f func([]AnyOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyOptionArrayOption) FlatMapRune(f func([]AnyOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyOptionArrayOption) FlatMapFloat32(f func([]AnyOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyOptionArrayOption) FlatMapFloat64(f func([]AnyOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyOptionArrayOption) FlatMapComplex64(f func([]AnyOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyOptionArrayOption) FlatMapComplex128(f func([]AnyOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyOptionArrayOption) FlatMapAny(f func([]AnyOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolListOption) FlatMapBool(f func(BoolList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolListOption) FlatMapString(f func(BoolList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolListOption) FlatMapInt(f func(BoolList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolListOption) FlatMapInt8(f func(BoolList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolListOption) FlatMapInt16(f func(BoolList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolListOption) FlatMapInt32(f func(BoolList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolListOption) FlatMapInt64(f func(BoolList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolListOption) FlatMapUint(f func(BoolList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolListOption) FlatMapUint8(f func(BoolList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolListOption) FlatMapUint16(f func(BoolList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolListOption) FlatMapUint32(f func(BoolList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolListOption) FlatMapUint64(f func(BoolList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolListOption) FlatMapUintptr(f func(BoolList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolListOption) FlatMapByte(f func(BoolList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolListOption) FlatMapRune(f func(BoolList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolListOption) FlatMapFloat32(f func(BoolList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolListOption) FlatMapFloat64(f func(BoolList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolListOption) FlatMapComplex64(f func(BoolList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolListOption) FlatMapComplex128(f func(BoolList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolListOption) FlatMapAny(f func(BoolList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringListOption) FlatMapBool(f func(StringList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringListOption) FlatMapString(f func(StringList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringListOption) FlatMapInt(f func(StringList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringListOption) FlatMapInt8(f func(StringList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringListOption) FlatMapInt16(f func(StringList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringListOption) FlatMapInt32(f func(StringList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringListOption) FlatMapInt64(f func(StringList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringListOption) FlatMapUint(f func(StringList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringListOption) FlatMapUint8(f func(StringList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringListOption) FlatMapUint16(f func(StringList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringListOption) FlatMapUint32(f func(StringList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringListOption) FlatMapUint64(f func(StringList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringListOption) FlatMapUintptr(f func(StringList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringListOption) FlatMapByte(f func(StringList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringListOption) FlatMapRune(f func(StringList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringListOption) FlatMapFloat32(f func(StringList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringListOption) FlatMapFloat64(f func(StringList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringListOption) FlatMapComplex64(f func(StringList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringListOption) FlatMapComplex128(f func(StringList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringListOption) FlatMapAny(f func(StringList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntListOption) FlatMapBool(f func(IntList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntListOption) FlatMapString(f func(IntList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntListOption) FlatMapInt(f func(IntList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntListOption) FlatMapInt8(f func(IntList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntListOption) FlatMapInt16(f func(IntList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntListOption) FlatMapInt32(f func(IntList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntListOption) FlatMapInt64(f func(IntList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntListOption) FlatMapUint(f func(IntList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntListOption) FlatMapUint8(f func(IntList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntListOption) FlatMapUint16(f func(IntList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntListOption) FlatMapUint32(f func(IntList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntListOption) FlatMapUint64(f func(IntList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntListOption) FlatMapUintptr(f func(IntList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntListOption) FlatMapByte(f func(IntList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntListOption) FlatMapRune(f func(IntList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntListOption) FlatMapFloat32(f func(IntList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntListOption) FlatMapFloat64(f func(IntList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntListOption) FlatMapComplex64(f func(IntList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntListOption) FlatMapComplex128(f func(IntList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntListOption) FlatMapAny(f func(IntList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ListOption) FlatMapBool(f func(Int8List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ListOption) FlatMapString(f func(Int8List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ListOption) FlatMapInt(f func(Int8List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ListOption) FlatMapInt8(f func(Int8List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ListOption) FlatMapInt16(f func(Int8List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ListOption) FlatMapInt32(f func(Int8List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ListOption) FlatMapInt64(f func(Int8List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ListOption) FlatMapUint(f func(Int8List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ListOption) FlatMapUint8(f func(Int8List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ListOption) FlatMapUint16(f func(Int8List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ListOption) FlatMapUint32(f func(Int8List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ListOption) FlatMapUint64(f func(Int8List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ListOption) FlatMapUintptr(f func(Int8List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ListOption) FlatMapByte(f func(Int8List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ListOption) FlatMapRune(f func(Int8List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ListOption) FlatMapFloat32(f func(Int8List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ListOption) FlatMapFloat64(f func(Int8List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ListOption) FlatMapComplex64(f func(Int8List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ListOption) FlatMapComplex128(f func(Int8List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ListOption) FlatMapAny(f func(Int8List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ListOption) FlatMapBool(f func(Int16List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ListOption) FlatMapString(f func(Int16List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ListOption) FlatMapInt(f func(Int16List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ListOption) FlatMapInt8(f func(Int16List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ListOption) FlatMapInt16(f func(Int16List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ListOption) FlatMapInt32(f func(Int16List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ListOption) FlatMapInt64(f func(Int16List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ListOption) FlatMapUint(f func(Int16List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ListOption) FlatMapUint8(f func(Int16List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ListOption) FlatMapUint16(f func(Int16List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ListOption) FlatMapUint32(f func(Int16List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ListOption) FlatMapUint64(f func(Int16List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ListOption) FlatMapUintptr(f func(Int16List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ListOption) FlatMapByte(f func(Int16List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ListOption) FlatMapRune(f func(Int16List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ListOption) FlatMapFloat32(f func(Int16List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ListOption) FlatMapFloat64(f func(Int16List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ListOption) FlatMapComplex64(f func(Int16List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ListOption) FlatMapComplex128(f func(Int16List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ListOption) FlatMapAny(f func(Int16List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ListOption) FlatMapBool(f func(Int32List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ListOption) FlatMapString(f func(Int32List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ListOption) FlatMapInt(f func(Int32List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ListOption) FlatMapInt8(f func(Int32List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ListOption) FlatMapInt16(f func(Int32List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ListOption) FlatMapInt32(f func(Int32List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ListOption) FlatMapInt64(f func(Int32List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ListOption) FlatMapUint(f func(Int32List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ListOption) FlatMapUint8(f func(Int32List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ListOption) FlatMapUint16(f func(Int32List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ListOption) FlatMapUint32(f func(Int32List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ListOption) FlatMapUint64(f func(Int32List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ListOption) FlatMapUintptr(f func(Int32List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ListOption) FlatMapByte(f func(Int32List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ListOption) FlatMapRune(f func(Int32List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ListOption) FlatMapFloat32(f func(Int32List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ListOption) FlatMapFloat64(f func(Int32List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ListOption) FlatMapComplex64(f func(Int32List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ListOption) FlatMapComplex128(f func(Int32List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ListOption) FlatMapAny(f func(Int32List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ListOption) FlatMapBool(f func(Int64List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ListOption) FlatMapString(f func(Int64List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ListOption) FlatMapInt(f func(Int64List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ListOption) FlatMapInt8(f func(Int64List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ListOption) FlatMapInt16(f func(Int64List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ListOption) FlatMapInt32(f func(Int64List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ListOption) FlatMapInt64(f func(Int64List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ListOption) FlatMapUint(f func(Int64List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ListOption) FlatMapUint8(f func(Int64List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ListOption) FlatMapUint16(f func(Int64List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ListOption) FlatMapUint32(f func(Int64List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ListOption) FlatMapUint64(f func(Int64List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ListOption) FlatMapUintptr(f func(Int64List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ListOption) FlatMapByte(f func(Int64List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ListOption) FlatMapRune(f func(Int64List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ListOption) FlatMapFloat32(f func(Int64List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ListOption) FlatMapFloat64(f func(Int64List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ListOption) FlatMapComplex64(f func(Int64List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ListOption) FlatMapComplex128(f func(Int64List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ListOption) FlatMapAny(f func(Int64List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintListOption) FlatMapBool(f func(UintList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintListOption) FlatMapString(f func(UintList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintListOption) FlatMapInt(f func(UintList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintListOption) FlatMapInt8(f func(UintList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintListOption) FlatMapInt16(f func(UintList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintListOption) FlatMapInt32(f func(UintList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintListOption) FlatMapInt64(f func(UintList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintListOption) FlatMapUint(f func(UintList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintListOption) FlatMapUint8(f func(UintList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintListOption) FlatMapUint16(f func(UintList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintListOption) FlatMapUint32(f func(UintList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintListOption) FlatMapUint64(f func(UintList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintListOption) FlatMapUintptr(f func(UintList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintListOption) FlatMapByte(f func(UintList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintListOption) FlatMapRune(f func(UintList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintListOption) FlatMapFloat32(f func(UintList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintListOption) FlatMapFloat64(f func(UintList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintListOption) FlatMapComplex64(f func(UintList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintListOption) FlatMapComplex128(f func(UintList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintListOption) FlatMapAny(f func(UintList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ListOption) FlatMapBool(f func(Uint8List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ListOption) FlatMapString(f func(Uint8List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ListOption) FlatMapInt(f func(Uint8List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ListOption) FlatMapInt8(f func(Uint8List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ListOption) FlatMapInt16(f func(Uint8List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ListOption) FlatMapInt32(f func(Uint8List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ListOption) FlatMapInt64(f func(Uint8List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ListOption) FlatMapUint(f func(Uint8List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ListOption) FlatMapUint8(f func(Uint8List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ListOption) FlatMapUint16(f func(Uint8List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ListOption) FlatMapUint32(f func(Uint8List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ListOption) FlatMapUint64(f func(Uint8List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ListOption) FlatMapUintptr(f func(Uint8List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ListOption) FlatMapByte(f func(Uint8List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ListOption) FlatMapRune(f func(Uint8List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ListOption) FlatMapFloat32(f func(Uint8List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ListOption) FlatMapFloat64(f func(Uint8List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ListOption) FlatMapComplex64(f func(Uint8List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ListOption) FlatMapComplex128(f func(Uint8List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ListOption) FlatMapAny(f func(Uint8List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ListOption) FlatMapBool(f func(Uint16List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ListOption) FlatMapString(f func(Uint16List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ListOption) FlatMapInt(f func(Uint16List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ListOption) FlatMapInt8(f func(Uint16List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ListOption) FlatMapInt16(f func(Uint16List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ListOption) FlatMapInt32(f func(Uint16List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ListOption) FlatMapInt64(f func(Uint16List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ListOption) FlatMapUint(f func(Uint16List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ListOption) FlatMapUint8(f func(Uint16List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ListOption) FlatMapUint16(f func(Uint16List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ListOption) FlatMapUint32(f func(Uint16List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ListOption) FlatMapUint64(f func(Uint16List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ListOption) FlatMapUintptr(f func(Uint16List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ListOption) FlatMapByte(f func(Uint16List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ListOption) FlatMapRune(f func(Uint16List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ListOption) FlatMapFloat32(f func(Uint16List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ListOption) FlatMapFloat64(f func(Uint16List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ListOption) FlatMapComplex64(f func(Uint16List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ListOption) FlatMapComplex128(f func(Uint16List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ListOption) FlatMapAny(f func(Uint16List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ListOption) FlatMapBool(f func(Uint32List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ListOption) FlatMapString(f func(Uint32List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ListOption) FlatMapInt(f func(Uint32List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ListOption) FlatMapInt8(f func(Uint32List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ListOption) FlatMapInt16(f func(Uint32List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ListOption) FlatMapInt32(f func(Uint32List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ListOption) FlatMapInt64(f func(Uint32List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ListOption) FlatMapUint(f func(Uint32List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ListOption) FlatMapUint8(f func(Uint32List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ListOption) FlatMapUint16(f func(Uint32List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ListOption) FlatMapUint32(f func(Uint32List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ListOption) FlatMapUint64(f func(Uint32List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ListOption) FlatMapUintptr(f func(Uint32List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ListOption) FlatMapByte(f func(Uint32List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ListOption) FlatMapRune(f func(Uint32List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ListOption) FlatMapFloat32(f func(Uint32List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ListOption) FlatMapFloat64(f func(Uint32List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ListOption) FlatMapComplex64(f func(Uint32List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ListOption) FlatMapComplex128(f func(Uint32List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ListOption) FlatMapAny(f func(Uint32List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ListOption) FlatMapBool(f func(Uint64List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ListOption) FlatMapString(f func(Uint64List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ListOption) FlatMapInt(f func(Uint64List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ListOption) FlatMapInt8(f func(Uint64List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ListOption) FlatMapInt16(f func(Uint64List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ListOption) FlatMapInt32(f func(Uint64List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ListOption) FlatMapInt64(f func(Uint64List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ListOption) FlatMapUint(f func(Uint64List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ListOption) FlatMapUint8(f func(Uint64List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ListOption) FlatMapUint16(f func(Uint64List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ListOption) FlatMapUint32(f func(Uint64List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ListOption) FlatMapUint64(f func(Uint64List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ListOption) FlatMapUintptr(f func(Uint64List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ListOption) FlatMapByte(f func(Uint64List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ListOption) FlatMapRune(f func(Uint64List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ListOption) FlatMapFloat32(f func(Uint64List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ListOption) FlatMapFloat64(f func(Uint64List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ListOption) FlatMapComplex64(f func(Uint64List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ListOption) FlatMapComplex128(f func(Uint64List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ListOption) FlatMapAny(f func(Uint64List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrListOption) FlatMapBool(f func(UintptrList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrListOption) FlatMapString(f func(UintptrList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrListOption) FlatMapInt(f func(UintptrList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrListOption) FlatMapInt8(f func(UintptrList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrListOption) FlatMapInt16(f func(UintptrList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrListOption) FlatMapInt32(f func(UintptrList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrListOption) FlatMapInt64(f func(UintptrList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrListOption) FlatMapUint(f func(UintptrList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrListOption) FlatMapUint8(f func(UintptrList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrListOption) FlatMapUint16(f func(UintptrList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrListOption) FlatMapUint32(f func(UintptrList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrListOption) FlatMapUint64(f func(UintptrList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrListOption) FlatMapUintptr(f func(UintptrList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrListOption) FlatMapByte(f func(UintptrList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrListOption) FlatMapRune(f func(UintptrList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrListOption) FlatMapFloat32(f func(UintptrList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrListOption) FlatMapFloat64(f func(UintptrList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrListOption) FlatMapComplex64(f func(UintptrList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrListOption) FlatMapComplex128(f func(UintptrList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrListOption) FlatMapAny(f func(UintptrList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteListOption) FlatMapBool(f func(ByteList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteListOption) FlatMapString(f func(ByteList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteListOption) FlatMapInt(f func(ByteList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteListOption) FlatMapInt8(f func(ByteList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteListOption) FlatMapInt16(f func(ByteList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteListOption) FlatMapInt32(f func(ByteList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteListOption) FlatMapInt64(f func(ByteList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteListOption) FlatMapUint(f func(ByteList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteListOption) FlatMapUint8(f func(ByteList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteListOption) FlatMapUint16(f func(ByteList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteListOption) FlatMapUint32(f func(ByteList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteListOption) FlatMapUint64(f func(ByteList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteListOption) FlatMapUintptr(f func(ByteList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteListOption) FlatMapByte(f func(ByteList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteListOption) FlatMapRune(f func(ByteList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteListOption) FlatMapFloat32(f func(ByteList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteListOption) FlatMapFloat64(f func(ByteList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteListOption) FlatMapComplex64(f func(ByteList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteListOption) FlatMapComplex128(f func(ByteList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteListOption) FlatMapAny(f func(ByteList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneListOption) FlatMapBool(f func(RuneList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneListOption) FlatMapString(f func(RuneList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneListOption) FlatMapInt(f func(RuneList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneListOption) FlatMapInt8(f func(RuneList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneListOption) FlatMapInt16(f func(RuneList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneListOption) FlatMapInt32(f func(RuneList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneListOption) FlatMapInt64(f func(RuneList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneListOption) FlatMapUint(f func(RuneList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneListOption) FlatMapUint8(f func(RuneList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneListOption) FlatMapUint16(f func(RuneList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneListOption) FlatMapUint32(f func(RuneList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneListOption) FlatMapUint64(f func(RuneList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneListOption) FlatMapUintptr(f func(RuneList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneListOption) FlatMapByte(f func(RuneList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneListOption) FlatMapRune(f func(RuneList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneListOption) FlatMapFloat32(f func(RuneList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneListOption) FlatMapFloat64(f func(RuneList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneListOption) FlatMapComplex64(f func(RuneList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneListOption) FlatMapComplex128(f func(RuneList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneListOption) FlatMapAny(f func(RuneList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ListOption) FlatMapBool(f func(Float32List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ListOption) FlatMapString(f func(Float32List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ListOption) FlatMapInt(f func(Float32List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ListOption) FlatMapInt8(f func(Float32List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ListOption) FlatMapInt16(f func(Float32List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ListOption) FlatMapInt32(f func(Float32List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ListOption) FlatMapInt64(f func(Float32List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ListOption) FlatMapUint(f func(Float32List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ListOption) FlatMapUint8(f func(Float32List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ListOption) FlatMapUint16(f func(Float32List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ListOption) FlatMapUint32(f func(Float32List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ListOption) FlatMapUint64(f func(Float32List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ListOption) FlatMapUintptr(f func(Float32List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ListOption) FlatMapByte(f func(Float32List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ListOption) FlatMapRune(f func(Float32List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ListOption) FlatMapFloat32(f func(Float32List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ListOption) FlatMapFloat64(f func(Float32List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ListOption) FlatMapComplex64(f func(Float32List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ListOption) FlatMapComplex128(f func(Float32List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ListOption) FlatMapAny(f func(Float32List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ListOption) FlatMapBool(f func(Float64List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ListOption) FlatMapString(f func(Float64List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ListOption) FlatMapInt(f func(Float64List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ListOption) FlatMapInt8(f func(Float64List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ListOption) FlatMapInt16(f func(Float64List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ListOption) FlatMapInt32(f func(Float64List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ListOption) FlatMapInt64(f func(Float64List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ListOption) FlatMapUint(f func(Float64List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ListOption) FlatMapUint8(f func(Float64List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ListOption) FlatMapUint16(f func(Float64List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ListOption) FlatMapUint32(f func(Float64List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ListOption) FlatMapUint64(f func(Float64List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ListOption) FlatMapUintptr(f func(Float64List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ListOption) FlatMapByte(f func(Float64List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ListOption) FlatMapRune(f func(Float64List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ListOption) FlatMapFloat32(f func(Float64List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ListOption) FlatMapFloat64(f func(Float64List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ListOption) FlatMapComplex64(f func(Float64List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ListOption) FlatMapComplex128(f func(Float64List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ListOption) FlatMapAny(f func(Float64List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ListOption) FlatMapBool(f func(Complex64List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ListOption) FlatMapString(f func(Complex64List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ListOption) FlatMapInt(f func(Complex64List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ListOption) FlatMapInt8(f func(Complex64List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ListOption) FlatMapInt16(f func(Complex64List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ListOption) FlatMapInt32(f func(Complex64List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ListOption) FlatMapInt64(f func(Complex64List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ListOption) FlatMapUint(f func(Complex64List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ListOption) FlatMapUint8(f func(Complex64List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ListOption) FlatMapUint16(f func(Complex64List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ListOption) FlatMapUint32(f func(Complex64List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ListOption) FlatMapUint64(f func(Complex64List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ListOption) FlatMapUintptr(f func(Complex64List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ListOption) FlatMapByte(f func(Complex64List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ListOption) FlatMapRune(f func(Complex64List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ListOption) FlatMapFloat32(f func(Complex64List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ListOption) FlatMapFloat64(f func(Complex64List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ListOption) FlatMapComplex64(f func(Complex64List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ListOption) FlatMapComplex128(f func(Complex64List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ListOption) FlatMapAny(f func(Complex64List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ListOption) FlatMapBool(f func(Complex128List) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ListOption) FlatMapString(f func(Complex128List) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ListOption) FlatMapInt(f func(Complex128List) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ListOption) FlatMapInt8(f func(Complex128List) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ListOption) FlatMapInt16(f func(Complex128List) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ListOption) FlatMapInt32(f func(Complex128List) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ListOption) FlatMapInt64(f func(Complex128List) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ListOption) FlatMapUint(f func(Complex128List) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ListOption) FlatMapUint8(f func(Complex128List) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ListOption) FlatMapUint16(f func(Complex128List) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ListOption) FlatMapUint32(f func(Complex128List) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ListOption) FlatMapUint64(f func(Complex128List) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ListOption) FlatMapUintptr(f func(Complex128List) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ListOption) FlatMapByte(f func(Complex128List) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ListOption) FlatMapRune(f func(Complex128List) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ListOption) FlatMapFloat32(f func(Complex128List) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ListOption) FlatMapFloat64(f func(Complex128List) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ListOption) FlatMapComplex64(f func(Complex128List) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ListOption) FlatMapComplex128(f func(Complex128List) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ListOption) FlatMapAny(f func(Complex128List) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyListOption) FlatMapBool(f func(AnyList) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyListOption) FlatMapString(f func(AnyList) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyListOption) FlatMapInt(f func(AnyList) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyListOption) FlatMapInt8(f func(AnyList) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyListOption) FlatMapInt16(f func(AnyList) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyListOption) FlatMapInt32(f func(AnyList) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyListOption) FlatMapInt64(f func(AnyList) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyListOption) FlatMapUint(f func(AnyList) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyListOption) FlatMapUint8(f func(AnyList) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyListOption) FlatMapUint16(f func(AnyList) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyListOption) FlatMapUint32(f func(AnyList) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyListOption) FlatMapUint64(f func(AnyList) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyListOption) FlatMapUintptr(f func(AnyList) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyListOption) FlatMapByte(f func(AnyList) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyListOption) FlatMapRune(f func(AnyList) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyListOption) FlatMapFloat32(f func(AnyList) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyListOption) FlatMapFloat64(f func(AnyList) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyListOption) FlatMapComplex64(f func(AnyList) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyListOption) FlatMapComplex128(f func(AnyList) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyListOption) FlatMapAny(f func(AnyList) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolOptionOption) FlatMapBool(f func(BoolOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolOptionOption) FlatMapString(f func(BoolOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolOptionOption) FlatMapInt(f func(BoolOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolOptionOption) FlatMapInt8(f func(BoolOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolOptionOption) FlatMapInt16(f func(BoolOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolOptionOption) FlatMapInt32(f func(BoolOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolOptionOption) FlatMapInt64(f func(BoolOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolOptionOption) FlatMapUint(f func(BoolOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolOptionOption) FlatMapUint8(f func(BoolOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolOptionOption) FlatMapUint16(f func(BoolOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolOptionOption) FlatMapUint32(f func(BoolOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolOptionOption) FlatMapUint64(f func(BoolOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolOptionOption) FlatMapUintptr(f func(BoolOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolOptionOption) FlatMapByte(f func(BoolOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolOptionOption) FlatMapRune(f func(BoolOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolOptionOption) FlatMapFloat32(f func(BoolOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolOptionOption) FlatMapFloat64(f func(BoolOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolOptionOption) FlatMapComplex64(f func(BoolOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolOptionOption) FlatMapComplex128(f func(BoolOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolOptionOption) FlatMapAny(f func(BoolOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringOptionOption) FlatMapBool(f func(StringOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringOptionOption) FlatMapString(f func(StringOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringOptionOption) FlatMapInt(f func(StringOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringOptionOption) FlatMapInt8(f func(StringOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringOptionOption) FlatMapInt16(f func(StringOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringOptionOption) FlatMapInt32(f func(StringOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringOptionOption) FlatMapInt64(f func(StringOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringOptionOption) FlatMapUint(f func(StringOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringOptionOption) FlatMapUint8(f func(StringOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringOptionOption) FlatMapUint16(f func(StringOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringOptionOption) FlatMapUint32(f func(StringOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringOptionOption) FlatMapUint64(f func(StringOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringOptionOption) FlatMapUintptr(f func(StringOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringOptionOption) FlatMapByte(f func(StringOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringOptionOption) FlatMapRune(f func(StringOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringOptionOption) FlatMapFloat32(f func(StringOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringOptionOption) FlatMapFloat64(f func(StringOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringOptionOption) FlatMapComplex64(f func(StringOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringOptionOption) FlatMapComplex128(f func(StringOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringOptionOption) FlatMapAny(f func(StringOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntOptionOption) FlatMapBool(f func(IntOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntOptionOption) FlatMapString(f func(IntOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntOptionOption) FlatMapInt(f func(IntOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntOptionOption) FlatMapInt8(f func(IntOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntOptionOption) FlatMapInt16(f func(IntOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntOptionOption) FlatMapInt32(f func(IntOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntOptionOption) FlatMapInt64(f func(IntOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntOptionOption) FlatMapUint(f func(IntOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntOptionOption) FlatMapUint8(f func(IntOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntOptionOption) FlatMapUint16(f func(IntOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntOptionOption) FlatMapUint32(f func(IntOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntOptionOption) FlatMapUint64(f func(IntOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntOptionOption) FlatMapUintptr(f func(IntOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntOptionOption) FlatMapByte(f func(IntOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntOptionOption) FlatMapRune(f func(IntOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntOptionOption) FlatMapFloat32(f func(IntOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntOptionOption) FlatMapFloat64(f func(IntOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntOptionOption) FlatMapComplex64(f func(IntOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntOptionOption) FlatMapComplex128(f func(IntOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntOptionOption) FlatMapAny(f func(IntOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8OptionOption) FlatMapBool(f func(Int8Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8OptionOption) FlatMapString(f func(Int8Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8OptionOption) FlatMapInt(f func(Int8Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8OptionOption) FlatMapInt8(f func(Int8Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8OptionOption) FlatMapInt16(f func(Int8Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8OptionOption) FlatMapInt32(f func(Int8Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8OptionOption) FlatMapInt64(f func(Int8Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8OptionOption) FlatMapUint(f func(Int8Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8OptionOption) FlatMapUint8(f func(Int8Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8OptionOption) FlatMapUint16(f func(Int8Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8OptionOption) FlatMapUint32(f func(Int8Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8OptionOption) FlatMapUint64(f func(Int8Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8OptionOption) FlatMapUintptr(f func(Int8Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8OptionOption) FlatMapByte(f func(Int8Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8OptionOption) FlatMapRune(f func(Int8Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8OptionOption) FlatMapFloat32(f func(Int8Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8OptionOption) FlatMapFloat64(f func(Int8Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8OptionOption) FlatMapComplex64(f func(Int8Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8OptionOption) FlatMapComplex128(f func(Int8Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8OptionOption) FlatMapAny(f func(Int8Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16OptionOption) FlatMapBool(f func(Int16Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16OptionOption) FlatMapString(f func(Int16Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16OptionOption) FlatMapInt(f func(Int16Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16OptionOption) FlatMapInt8(f func(Int16Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16OptionOption) FlatMapInt16(f func(Int16Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16OptionOption) FlatMapInt32(f func(Int16Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16OptionOption) FlatMapInt64(f func(Int16Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16OptionOption) FlatMapUint(f func(Int16Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16OptionOption) FlatMapUint8(f func(Int16Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16OptionOption) FlatMapUint16(f func(Int16Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16OptionOption) FlatMapUint32(f func(Int16Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16OptionOption) FlatMapUint64(f func(Int16Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16OptionOption) FlatMapUintptr(f func(Int16Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16OptionOption) FlatMapByte(f func(Int16Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16OptionOption) FlatMapRune(f func(Int16Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16OptionOption) FlatMapFloat32(f func(Int16Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16OptionOption) FlatMapFloat64(f func(Int16Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16OptionOption) FlatMapComplex64(f func(Int16Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16OptionOption) FlatMapComplex128(f func(Int16Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16OptionOption) FlatMapAny(f func(Int16Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32OptionOption) FlatMapBool(f func(Int32Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32OptionOption) FlatMapString(f func(Int32Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32OptionOption) FlatMapInt(f func(Int32Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32OptionOption) FlatMapInt8(f func(Int32Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32OptionOption) FlatMapInt16(f func(Int32Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32OptionOption) FlatMapInt32(f func(Int32Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32OptionOption) FlatMapInt64(f func(Int32Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32OptionOption) FlatMapUint(f func(Int32Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32OptionOption) FlatMapUint8(f func(Int32Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32OptionOption) FlatMapUint16(f func(Int32Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32OptionOption) FlatMapUint32(f func(Int32Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32OptionOption) FlatMapUint64(f func(Int32Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32OptionOption) FlatMapUintptr(f func(Int32Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32OptionOption) FlatMapByte(f func(Int32Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32OptionOption) FlatMapRune(f func(Int32Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32OptionOption) FlatMapFloat32(f func(Int32Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32OptionOption) FlatMapFloat64(f func(Int32Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32OptionOption) FlatMapComplex64(f func(Int32Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32OptionOption) FlatMapComplex128(f func(Int32Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32OptionOption) FlatMapAny(f func(Int32Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64OptionOption) FlatMapBool(f func(Int64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64OptionOption) FlatMapString(f func(Int64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64OptionOption) FlatMapInt(f func(Int64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64OptionOption) FlatMapInt8(f func(Int64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64OptionOption) FlatMapInt16(f func(Int64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64OptionOption) FlatMapInt32(f func(Int64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64OptionOption) FlatMapInt64(f func(Int64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64OptionOption) FlatMapUint(f func(Int64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64OptionOption) FlatMapUint8(f func(Int64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64OptionOption) FlatMapUint16(f func(Int64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64OptionOption) FlatMapUint32(f func(Int64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64OptionOption) FlatMapUint64(f func(Int64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64OptionOption) FlatMapUintptr(f func(Int64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64OptionOption) FlatMapByte(f func(Int64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64OptionOption) FlatMapRune(f func(Int64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64OptionOption) FlatMapFloat32(f func(Int64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64OptionOption) FlatMapFloat64(f func(Int64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64OptionOption) FlatMapComplex64(f func(Int64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64OptionOption) FlatMapComplex128(f func(Int64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64OptionOption) FlatMapAny(f func(Int64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintOptionOption) FlatMapBool(f func(UintOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintOptionOption) FlatMapString(f func(UintOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintOptionOption) FlatMapInt(f func(UintOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintOptionOption) FlatMapInt8(f func(UintOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintOptionOption) FlatMapInt16(f func(UintOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintOptionOption) FlatMapInt32(f func(UintOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintOptionOption) FlatMapInt64(f func(UintOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintOptionOption) FlatMapUint(f func(UintOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintOptionOption) FlatMapUint8(f func(UintOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintOptionOption) FlatMapUint16(f func(UintOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintOptionOption) FlatMapUint32(f func(UintOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintOptionOption) FlatMapUint64(f func(UintOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintOptionOption) FlatMapUintptr(f func(UintOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintOptionOption) FlatMapByte(f func(UintOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintOptionOption) FlatMapRune(f func(UintOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintOptionOption) FlatMapFloat32(f func(UintOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintOptionOption) FlatMapFloat64(f func(UintOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintOptionOption) FlatMapComplex64(f func(UintOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintOptionOption) FlatMapComplex128(f func(UintOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintOptionOption) FlatMapAny(f func(UintOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8OptionOption) FlatMapBool(f func(Uint8Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8OptionOption) FlatMapString(f func(Uint8Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8OptionOption) FlatMapInt(f func(Uint8Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8OptionOption) FlatMapInt8(f func(Uint8Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8OptionOption) FlatMapInt16(f func(Uint8Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8OptionOption) FlatMapInt32(f func(Uint8Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8OptionOption) FlatMapInt64(f func(Uint8Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8OptionOption) FlatMapUint(f func(Uint8Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8OptionOption) FlatMapUint8(f func(Uint8Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8OptionOption) FlatMapUint16(f func(Uint8Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8OptionOption) FlatMapUint32(f func(Uint8Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8OptionOption) FlatMapUint64(f func(Uint8Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8OptionOption) FlatMapUintptr(f func(Uint8Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8OptionOption) FlatMapByte(f func(Uint8Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8OptionOption) FlatMapRune(f func(Uint8Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8OptionOption) FlatMapFloat32(f func(Uint8Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8OptionOption) FlatMapFloat64(f func(Uint8Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8OptionOption) FlatMapComplex64(f func(Uint8Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8OptionOption) FlatMapComplex128(f func(Uint8Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8OptionOption) FlatMapAny(f func(Uint8Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16OptionOption) FlatMapBool(f func(Uint16Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16OptionOption) FlatMapString(f func(Uint16Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16OptionOption) FlatMapInt(f func(Uint16Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16OptionOption) FlatMapInt8(f func(Uint16Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16OptionOption) FlatMapInt16(f func(Uint16Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16OptionOption) FlatMapInt32(f func(Uint16Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16OptionOption) FlatMapInt64(f func(Uint16Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16OptionOption) FlatMapUint(f func(Uint16Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16OptionOption) FlatMapUint8(f func(Uint16Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16OptionOption) FlatMapUint16(f func(Uint16Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16OptionOption) FlatMapUint32(f func(Uint16Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16OptionOption) FlatMapUint64(f func(Uint16Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16OptionOption) FlatMapUintptr(f func(Uint16Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16OptionOption) FlatMapByte(f func(Uint16Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16OptionOption) FlatMapRune(f func(Uint16Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16OptionOption) FlatMapFloat32(f func(Uint16Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16OptionOption) FlatMapFloat64(f func(Uint16Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16OptionOption) FlatMapComplex64(f func(Uint16Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16OptionOption) FlatMapComplex128(f func(Uint16Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16OptionOption) FlatMapAny(f func(Uint16Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32OptionOption) FlatMapBool(f func(Uint32Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32OptionOption) FlatMapString(f func(Uint32Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32OptionOption) FlatMapInt(f func(Uint32Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32OptionOption) FlatMapInt8(f func(Uint32Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32OptionOption) FlatMapInt16(f func(Uint32Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32OptionOption) FlatMapInt32(f func(Uint32Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32OptionOption) FlatMapInt64(f func(Uint32Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32OptionOption) FlatMapUint(f func(Uint32Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32OptionOption) FlatMapUint8(f func(Uint32Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32OptionOption) FlatMapUint16(f func(Uint32Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32OptionOption) FlatMapUint32(f func(Uint32Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32OptionOption) FlatMapUint64(f func(Uint32Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32OptionOption) FlatMapUintptr(f func(Uint32Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32OptionOption) FlatMapByte(f func(Uint32Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32OptionOption) FlatMapRune(f func(Uint32Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32OptionOption) FlatMapFloat32(f func(Uint32Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32OptionOption) FlatMapFloat64(f func(Uint32Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32OptionOption) FlatMapComplex64(f func(Uint32Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32OptionOption) FlatMapComplex128(f func(Uint32Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32OptionOption) FlatMapAny(f func(Uint32Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64OptionOption) FlatMapBool(f func(Uint64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64OptionOption) FlatMapString(f func(Uint64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64OptionOption) FlatMapInt(f func(Uint64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64OptionOption) FlatMapInt8(f func(Uint64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64OptionOption) FlatMapInt16(f func(Uint64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64OptionOption) FlatMapInt32(f func(Uint64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64OptionOption) FlatMapInt64(f func(Uint64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64OptionOption) FlatMapUint(f func(Uint64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64OptionOption) FlatMapUint8(f func(Uint64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64OptionOption) FlatMapUint16(f func(Uint64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64OptionOption) FlatMapUint32(f func(Uint64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64OptionOption) FlatMapUint64(f func(Uint64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64OptionOption) FlatMapUintptr(f func(Uint64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64OptionOption) FlatMapByte(f func(Uint64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64OptionOption) FlatMapRune(f func(Uint64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64OptionOption) FlatMapFloat32(f func(Uint64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64OptionOption) FlatMapFloat64(f func(Uint64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64OptionOption) FlatMapComplex64(f func(Uint64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64OptionOption) FlatMapComplex128(f func(Uint64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64OptionOption) FlatMapAny(f func(Uint64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrOptionOption) FlatMapBool(f func(UintptrOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrOptionOption) FlatMapString(f func(UintptrOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrOptionOption) FlatMapInt(f func(UintptrOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrOptionOption) FlatMapInt8(f func(UintptrOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrOptionOption) FlatMapInt16(f func(UintptrOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrOptionOption) FlatMapInt32(f func(UintptrOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrOptionOption) FlatMapInt64(f func(UintptrOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrOptionOption) FlatMapUint(f func(UintptrOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrOptionOption) FlatMapUint8(f func(UintptrOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrOptionOption) FlatMapUint16(f func(UintptrOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrOptionOption) FlatMapUint32(f func(UintptrOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrOptionOption) FlatMapUint64(f func(UintptrOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrOptionOption) FlatMapUintptr(f func(UintptrOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrOptionOption) FlatMapByte(f func(UintptrOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrOptionOption) FlatMapRune(f func(UintptrOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrOptionOption) FlatMapFloat32(f func(UintptrOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrOptionOption) FlatMapFloat64(f func(UintptrOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrOptionOption) FlatMapComplex64(f func(UintptrOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrOptionOption) FlatMapComplex128(f func(UintptrOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrOptionOption) FlatMapAny(f func(UintptrOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteOptionOption) FlatMapBool(f func(ByteOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteOptionOption) FlatMapString(f func(ByteOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteOptionOption) FlatMapInt(f func(ByteOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteOptionOption) FlatMapInt8(f func(ByteOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteOptionOption) FlatMapInt16(f func(ByteOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteOptionOption) FlatMapInt32(f func(ByteOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteOptionOption) FlatMapInt64(f func(ByteOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteOptionOption) FlatMapUint(f func(ByteOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteOptionOption) FlatMapUint8(f func(ByteOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteOptionOption) FlatMapUint16(f func(ByteOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteOptionOption) FlatMapUint32(f func(ByteOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteOptionOption) FlatMapUint64(f func(ByteOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteOptionOption) FlatMapUintptr(f func(ByteOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteOptionOption) FlatMapByte(f func(ByteOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteOptionOption) FlatMapRune(f func(ByteOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteOptionOption) FlatMapFloat32(f func(ByteOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteOptionOption) FlatMapFloat64(f func(ByteOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteOptionOption) FlatMapComplex64(f func(ByteOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteOptionOption) FlatMapComplex128(f func(ByteOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteOptionOption) FlatMapAny(f func(ByteOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneOptionOption) FlatMapBool(f func(RuneOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneOptionOption) FlatMapString(f func(RuneOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneOptionOption) FlatMapInt(f func(RuneOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneOptionOption) FlatMapInt8(f func(RuneOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneOptionOption) FlatMapInt16(f func(RuneOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneOptionOption) FlatMapInt32(f func(RuneOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneOptionOption) FlatMapInt64(f func(RuneOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneOptionOption) FlatMapUint(f func(RuneOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneOptionOption) FlatMapUint8(f func(RuneOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneOptionOption) FlatMapUint16(f func(RuneOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneOptionOption) FlatMapUint32(f func(RuneOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneOptionOption) FlatMapUint64(f func(RuneOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneOptionOption) FlatMapUintptr(f func(RuneOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneOptionOption) FlatMapByte(f func(RuneOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneOptionOption) FlatMapRune(f func(RuneOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneOptionOption) FlatMapFloat32(f func(RuneOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneOptionOption) FlatMapFloat64(f func(RuneOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneOptionOption) FlatMapComplex64(f func(RuneOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneOptionOption) FlatMapComplex128(f func(RuneOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneOptionOption) FlatMapAny(f func(RuneOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32OptionOption) FlatMapBool(f func(Float32Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32OptionOption) FlatMapString(f func(Float32Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32OptionOption) FlatMapInt(f func(Float32Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32OptionOption) FlatMapInt8(f func(Float32Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32OptionOption) FlatMapInt16(f func(Float32Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32OptionOption) FlatMapInt32(f func(Float32Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32OptionOption) FlatMapInt64(f func(Float32Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32OptionOption) FlatMapUint(f func(Float32Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32OptionOption) FlatMapUint8(f func(Float32Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32OptionOption) FlatMapUint16(f func(Float32Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32OptionOption) FlatMapUint32(f func(Float32Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32OptionOption) FlatMapUint64(f func(Float32Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32OptionOption) FlatMapUintptr(f func(Float32Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32OptionOption) FlatMapByte(f func(Float32Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32OptionOption) FlatMapRune(f func(Float32Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32OptionOption) FlatMapFloat32(f func(Float32Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32OptionOption) FlatMapFloat64(f func(Float32Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32OptionOption) FlatMapComplex64(f func(Float32Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32OptionOption) FlatMapComplex128(f func(Float32Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32OptionOption) FlatMapAny(f func(Float32Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64OptionOption) FlatMapBool(f func(Float64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64OptionOption) FlatMapString(f func(Float64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64OptionOption) FlatMapInt(f func(Float64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64OptionOption) FlatMapInt8(f func(Float64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64OptionOption) FlatMapInt16(f func(Float64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64OptionOption) FlatMapInt32(f func(Float64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64OptionOption) FlatMapInt64(f func(Float64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64OptionOption) FlatMapUint(f func(Float64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64OptionOption) FlatMapUint8(f func(Float64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64OptionOption) FlatMapUint16(f func(Float64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64OptionOption) FlatMapUint32(f func(Float64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64OptionOption) FlatMapUint64(f func(Float64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64OptionOption) FlatMapUintptr(f func(Float64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64OptionOption) FlatMapByte(f func(Float64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64OptionOption) FlatMapRune(f func(Float64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64OptionOption) FlatMapFloat32(f func(Float64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64OptionOption) FlatMapFloat64(f func(Float64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64OptionOption) FlatMapComplex64(f func(Float64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64OptionOption) FlatMapComplex128(f func(Float64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64OptionOption) FlatMapAny(f func(Float64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64OptionOption) FlatMapBool(f func(Complex64Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64OptionOption) FlatMapString(f func(Complex64Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64OptionOption) FlatMapInt(f func(Complex64Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64OptionOption) FlatMapInt8(f func(Complex64Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64OptionOption) FlatMapInt16(f func(Complex64Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64OptionOption) FlatMapInt32(f func(Complex64Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64OptionOption) FlatMapInt64(f func(Complex64Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64OptionOption) FlatMapUint(f func(Complex64Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64OptionOption) FlatMapUint8(f func(Complex64Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64OptionOption) FlatMapUint16(f func(Complex64Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64OptionOption) FlatMapUint32(f func(Complex64Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64OptionOption) FlatMapUint64(f func(Complex64Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64OptionOption) FlatMapUintptr(f func(Complex64Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64OptionOption) FlatMapByte(f func(Complex64Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64OptionOption) FlatMapRune(f func(Complex64Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64OptionOption) FlatMapFloat32(f func(Complex64Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64OptionOption) FlatMapFloat64(f func(Complex64Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64OptionOption) FlatMapComplex64(f func(Complex64Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64OptionOption) FlatMapComplex128(f func(Complex64Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64OptionOption) FlatMapAny(f func(Complex64Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128OptionOption) FlatMapBool(f func(Complex128Option) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128OptionOption) FlatMapString(f func(Complex128Option) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128OptionOption) FlatMapInt(f func(Complex128Option) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128OptionOption) FlatMapInt8(f func(Complex128Option) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128OptionOption) FlatMapInt16(f func(Complex128Option) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128OptionOption) FlatMapInt32(f func(Complex128Option) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128OptionOption) FlatMapInt64(f func(Complex128Option) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128OptionOption) FlatMapUint(f func(Complex128Option) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128OptionOption) FlatMapUint8(f func(Complex128Option) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128OptionOption) FlatMapUint16(f func(Complex128Option) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128OptionOption) FlatMapUint32(f func(Complex128Option) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128OptionOption) FlatMapUint64(f func(Complex128Option) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128OptionOption) FlatMapUintptr(f func(Complex128Option) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128OptionOption) FlatMapByte(f func(Complex128Option) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128OptionOption) FlatMapRune(f func(Complex128Option) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128OptionOption) FlatMapFloat32(f func(Complex128Option) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128OptionOption) FlatMapFloat64(f func(Complex128Option) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128OptionOption) FlatMapComplex64(f func(Complex128Option) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128OptionOption) FlatMapComplex128(f func(Complex128Option) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128OptionOption) FlatMapAny(f func(Complex128Option) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyOptionOption) FlatMapBool(f func(AnyOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyOptionOption) FlatMapString(f func(AnyOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyOptionOption) FlatMapInt(f func(AnyOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyOptionOption) FlatMapInt8(f func(AnyOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyOptionOption) FlatMapInt16(f func(AnyOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyOptionOption) FlatMapInt32(f func(AnyOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyOptionOption) FlatMapInt64(f func(AnyOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyOptionOption) FlatMapUint(f func(AnyOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyOptionOption) FlatMapUint8(f func(AnyOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyOptionOption) FlatMapUint16(f func(AnyOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyOptionOption) FlatMapUint32(f func(AnyOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyOptionOption) FlatMapUint64(f func(AnyOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyOptionOption) FlatMapUintptr(f func(AnyOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyOptionOption) FlatMapByte(f func(AnyOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyOptionOption) FlatMapRune(f func(AnyOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyOptionOption) FlatMapFloat32(f func(AnyOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyOptionOption) FlatMapFloat64(f func(AnyOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyOptionOption) FlatMapComplex64(f func(AnyOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyOptionOption) FlatMapComplex128(f func(AnyOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyOptionOption) FlatMapAny(f func(AnyOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolArrayOptionOption) FlatMapBool(f func(BoolArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolArrayOptionOption) FlatMapString(f func(BoolArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolArrayOptionOption) FlatMapInt(f func(BoolArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolArrayOptionOption) FlatMapInt8(f func(BoolArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolArrayOptionOption) FlatMapInt16(f func(BoolArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolArrayOptionOption) FlatMapInt32(f func(BoolArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolArrayOptionOption) FlatMapInt64(f func(BoolArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolArrayOptionOption) FlatMapUint(f func(BoolArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolArrayOptionOption) FlatMapUint8(f func(BoolArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolArrayOptionOption) FlatMapUint16(f func(BoolArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolArrayOptionOption) FlatMapUint32(f func(BoolArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolArrayOptionOption) FlatMapUint64(f func(BoolArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolArrayOptionOption) FlatMapUintptr(f func(BoolArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayOptionOption) FlatMapByte(f func(BoolArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolArrayOptionOption) FlatMapRune(f func(BoolArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolArrayOptionOption) FlatMapFloat32(f func(BoolArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayOptionOption) FlatMapFloat64(f func(BoolArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayOptionOption) FlatMapComplex64(f func(BoolArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayOptionOption) FlatMapComplex128(f func(BoolArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayOptionOption) FlatMapAny(f func(BoolArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringArrayOptionOption) FlatMapBool(f func(StringArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringArrayOptionOption) FlatMapString(f func(StringArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringArrayOptionOption) FlatMapInt(f func(StringArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringArrayOptionOption) FlatMapInt8(f func(StringArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringArrayOptionOption) FlatMapInt16(f func(StringArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringArrayOptionOption) FlatMapInt32(f func(StringArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringArrayOptionOption) FlatMapInt64(f func(StringArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringArrayOptionOption) FlatMapUint(f func(StringArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringArrayOptionOption) FlatMapUint8(f func(StringArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringArrayOptionOption) FlatMapUint16(f func(StringArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringArrayOptionOption) FlatMapUint32(f func(StringArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringArrayOptionOption) FlatMapUint64(f func(StringArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringArrayOptionOption) FlatMapUintptr(f func(StringArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringArrayOptionOption) FlatMapByte(f func(StringArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringArrayOptionOption) FlatMapRune(f func(StringArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringArrayOptionOption) FlatMapFloat32(f func(StringArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringArrayOptionOption) FlatMapFloat64(f func(StringArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringArrayOptionOption) FlatMapComplex64(f func(StringArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringArrayOptionOption) FlatMapComplex128(f func(StringArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringArrayOptionOption) FlatMapAny(f func(StringArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntArrayOptionOption) FlatMapBool(f func(IntArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntArrayOptionOption) FlatMapString(f func(IntArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntArrayOptionOption) FlatMapInt(f func(IntArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntArrayOptionOption) FlatMapInt8(f func(IntArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntArrayOptionOption) FlatMapInt16(f func(IntArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntArrayOptionOption) FlatMapInt32(f func(IntArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntArrayOptionOption) FlatMapInt64(f func(IntArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntArrayOptionOption) FlatMapUint(f func(IntArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntArrayOptionOption) FlatMapUint8(f func(IntArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntArrayOptionOption) FlatMapUint16(f func(IntArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntArrayOptionOption) FlatMapUint32(f func(IntArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntArrayOptionOption) FlatMapUint64(f func(IntArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntArrayOptionOption) FlatMapUintptr(f func(IntArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntArrayOptionOption) FlatMapByte(f func(IntArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntArrayOptionOption) FlatMapRune(f func(IntArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntArrayOptionOption) FlatMapFloat32(f func(IntArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntArrayOptionOption) FlatMapFloat64(f func(IntArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntArrayOptionOption) FlatMapComplex64(f func(IntArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntArrayOptionOption) FlatMapComplex128(f func(IntArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntArrayOptionOption) FlatMapAny(f func(IntArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ArrayOptionOption) FlatMapBool(f func(Int8ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ArrayOptionOption) FlatMapString(f func(Int8ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ArrayOptionOption) FlatMapInt(f func(Int8ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ArrayOptionOption) FlatMapInt8(f func(Int8ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayOptionOption) FlatMapInt16(f func(Int8ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayOptionOption) FlatMapInt32(f func(Int8ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayOptionOption) FlatMapInt64(f func(Int8ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayOptionOption) FlatMapUint(f func(Int8ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ArrayOptionOption) FlatMapUint8(f func(Int8ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayOptionOption) FlatMapUint16(f func(Int8ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayOptionOption) FlatMapUint32(f func(Int8ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayOptionOption) FlatMapUint64(f func(Int8ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayOptionOption) FlatMapUintptr(f func(Int8ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayOptionOption) FlatMapByte(f func(Int8ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ArrayOptionOption) FlatMapRune(f func(Int8ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ArrayOptionOption) FlatMapFloat32(f func(Int8ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayOptionOption) FlatMapFloat64(f func(Int8ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayOptionOption) FlatMapComplex64(f func(Int8ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayOptionOption) FlatMapComplex128(f func(Int8ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayOptionOption) FlatMapAny(f func(Int8ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ArrayOptionOption) FlatMapBool(f func(Int16ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ArrayOptionOption) FlatMapString(f func(Int16ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ArrayOptionOption) FlatMapInt(f func(Int16ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ArrayOptionOption) FlatMapInt8(f func(Int16ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayOptionOption) FlatMapInt16(f func(Int16ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayOptionOption) FlatMapInt32(f func(Int16ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayOptionOption) FlatMapInt64(f func(Int16ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayOptionOption) FlatMapUint(f func(Int16ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ArrayOptionOption) FlatMapUint8(f func(Int16ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayOptionOption) FlatMapUint16(f func(Int16ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayOptionOption) FlatMapUint32(f func(Int16ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayOptionOption) FlatMapUint64(f func(Int16ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayOptionOption) FlatMapUintptr(f func(Int16ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayOptionOption) FlatMapByte(f func(Int16ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ArrayOptionOption) FlatMapRune(f func(Int16ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ArrayOptionOption) FlatMapFloat32(f func(Int16ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayOptionOption) FlatMapFloat64(f func(Int16ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayOptionOption) FlatMapComplex64(f func(Int16ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayOptionOption) FlatMapComplex128(f func(Int16ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayOptionOption) FlatMapAny(f func(Int16ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ArrayOptionOption) FlatMapBool(f func(Int32ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ArrayOptionOption) FlatMapString(f func(Int32ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ArrayOptionOption) FlatMapInt(f func(Int32ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ArrayOptionOption) FlatMapInt8(f func(Int32ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayOptionOption) FlatMapInt16(f func(Int32ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayOptionOption) FlatMapInt32(f func(Int32ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayOptionOption) FlatMapInt64(f func(Int32ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayOptionOption) FlatMapUint(f func(Int32ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ArrayOptionOption) FlatMapUint8(f func(Int32ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayOptionOption) FlatMapUint16(f func(Int32ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayOptionOption) FlatMapUint32(f func(Int32ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayOptionOption) FlatMapUint64(f func(Int32ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayOptionOption) FlatMapUintptr(f func(Int32ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayOptionOption) FlatMapByte(f func(Int32ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ArrayOptionOption) FlatMapRune(f func(Int32ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ArrayOptionOption) FlatMapFloat32(f func(Int32ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayOptionOption) FlatMapFloat64(f func(Int32ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayOptionOption) FlatMapComplex64(f func(Int32ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayOptionOption) FlatMapComplex128(f func(Int32ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayOptionOption) FlatMapAny(f func(Int32ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ArrayOptionOption) FlatMapBool(f func(Int64ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ArrayOptionOption) FlatMapString(f func(Int64ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ArrayOptionOption) FlatMapInt(f func(Int64ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ArrayOptionOption) FlatMapInt8(f func(Int64ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayOptionOption) FlatMapInt16(f func(Int64ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayOptionOption) FlatMapInt32(f func(Int64ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayOptionOption) FlatMapInt64(f func(Int64ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayOptionOption) FlatMapUint(f func(Int64ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ArrayOptionOption) FlatMapUint8(f func(Int64ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayOptionOption) FlatMapUint16(f func(Int64ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayOptionOption) FlatMapUint32(f func(Int64ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayOptionOption) FlatMapUint64(f func(Int64ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayOptionOption) FlatMapUintptr(f func(Int64ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayOptionOption) FlatMapByte(f func(Int64ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ArrayOptionOption) FlatMapRune(f func(Int64ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ArrayOptionOption) FlatMapFloat32(f func(Int64ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayOptionOption) FlatMapFloat64(f func(Int64ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayOptionOption) FlatMapComplex64(f func(Int64ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayOptionOption) FlatMapComplex128(f func(Int64ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayOptionOption) FlatMapAny(f func(Int64ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintArrayOptionOption) FlatMapBool(f func(UintArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintArrayOptionOption) FlatMapString(f func(UintArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintArrayOptionOption) FlatMapInt(f func(UintArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintArrayOptionOption) FlatMapInt8(f func(UintArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintArrayOptionOption) FlatMapInt16(f func(UintArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintArrayOptionOption) FlatMapInt32(f func(UintArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintArrayOptionOption) FlatMapInt64(f func(UintArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintArrayOptionOption) FlatMapUint(f func(UintArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintArrayOptionOption) FlatMapUint8(f func(UintArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintArrayOptionOption) FlatMapUint16(f func(UintArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintArrayOptionOption) FlatMapUint32(f func(UintArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintArrayOptionOption) FlatMapUint64(f func(UintArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintArrayOptionOption) FlatMapUintptr(f func(UintArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintArrayOptionOption) FlatMapByte(f func(UintArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintArrayOptionOption) FlatMapRune(f func(UintArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintArrayOptionOption) FlatMapFloat32(f func(UintArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintArrayOptionOption) FlatMapFloat64(f func(UintArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintArrayOptionOption) FlatMapComplex64(f func(UintArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintArrayOptionOption) FlatMapComplex128(f func(UintArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintArrayOptionOption) FlatMapAny(f func(UintArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayOptionOption) FlatMapBool(f func(Uint8ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayOptionOption) FlatMapString(f func(Uint8ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ArrayOptionOption) FlatMapInt(f func(Uint8ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayOptionOption) FlatMapInt8(f func(Uint8ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayOptionOption) FlatMapInt16(f func(Uint8ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayOptionOption) FlatMapInt32(f func(Uint8ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayOptionOption) FlatMapInt64(f func(Uint8ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayOptionOption) FlatMapUint(f func(Uint8ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayOptionOption) FlatMapUint8(f func(Uint8ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayOptionOption) FlatMapUint16(f func(Uint8ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayOptionOption) FlatMapUint32(f func(Uint8ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayOptionOption) FlatMapUint64(f func(Uint8ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayOptionOption) FlatMapUintptr(f func(Uint8ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayOptionOption) FlatMapByte(f func(Uint8ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayOptionOption) FlatMapRune(f func(Uint8ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayOptionOption) FlatMapFloat32(f func(Uint8ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayOptionOption) FlatMapFloat64(f func(Uint8ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayOptionOption) FlatMapComplex64(f func(Uint8ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayOptionOption) FlatMapComplex128(f func(Uint8ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayOptionOption) FlatMapAny(f func(Uint8ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayOptionOption) FlatMapBool(f func(Uint16ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayOptionOption) FlatMapString(f func(Uint16ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ArrayOptionOption) FlatMapInt(f func(Uint16ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayOptionOption) FlatMapInt8(f func(Uint16ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayOptionOption) FlatMapInt16(f func(Uint16ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayOptionOption) FlatMapInt32(f func(Uint16ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayOptionOption) FlatMapInt64(f func(Uint16ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayOptionOption) FlatMapUint(f func(Uint16ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayOptionOption) FlatMapUint8(f func(Uint16ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayOptionOption) FlatMapUint16(f func(Uint16ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayOptionOption) FlatMapUint32(f func(Uint16ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayOptionOption) FlatMapUint64(f func(Uint16ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayOptionOption) FlatMapUintptr(f func(Uint16ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayOptionOption) FlatMapByte(f func(Uint16ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayOptionOption) FlatMapRune(f func(Uint16ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayOptionOption) FlatMapFloat32(f func(Uint16ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayOptionOption) FlatMapFloat64(f func(Uint16ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayOptionOption) FlatMapComplex64(f func(Uint16ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayOptionOption) FlatMapComplex128(f func(Uint16ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayOptionOption) FlatMapAny(f func(Uint16ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayOptionOption) FlatMapBool(f func(Uint32ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayOptionOption) FlatMapString(f func(Uint32ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ArrayOptionOption) FlatMapInt(f func(Uint32ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayOptionOption) FlatMapInt8(f func(Uint32ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayOptionOption) FlatMapInt16(f func(Uint32ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayOptionOption) FlatMapInt32(f func(Uint32ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayOptionOption) FlatMapInt64(f func(Uint32ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayOptionOption) FlatMapUint(f func(Uint32ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayOptionOption) FlatMapUint8(f func(Uint32ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayOptionOption) FlatMapUint16(f func(Uint32ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayOptionOption) FlatMapUint32(f func(Uint32ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayOptionOption) FlatMapUint64(f func(Uint32ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayOptionOption) FlatMapUintptr(f func(Uint32ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayOptionOption) FlatMapByte(f func(Uint32ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayOptionOption) FlatMapRune(f func(Uint32ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayOptionOption) FlatMapFloat32(f func(Uint32ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayOptionOption) FlatMapFloat64(f func(Uint32ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayOptionOption) FlatMapComplex64(f func(Uint32ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayOptionOption) FlatMapComplex128(f func(Uint32ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayOptionOption) FlatMapAny(f func(Uint32ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayOptionOption) FlatMapBool(f func(Uint64ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayOptionOption) FlatMapString(f func(Uint64ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ArrayOptionOption) FlatMapInt(f func(Uint64ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayOptionOption) FlatMapInt8(f func(Uint64ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayOptionOption) FlatMapInt16(f func(Uint64ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayOptionOption) FlatMapInt32(f func(Uint64ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayOptionOption) FlatMapInt64(f func(Uint64ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayOptionOption) FlatMapUint(f func(Uint64ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayOptionOption) FlatMapUint8(f func(Uint64ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayOptionOption) FlatMapUint16(f func(Uint64ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayOptionOption) FlatMapUint32(f func(Uint64ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayOptionOption) FlatMapUint64(f func(Uint64ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayOptionOption) FlatMapUintptr(f func(Uint64ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayOptionOption) FlatMapByte(f func(Uint64ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayOptionOption) FlatMapRune(f func(Uint64ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayOptionOption) FlatMapFloat32(f func(Uint64ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayOptionOption) FlatMapFloat64(f func(Uint64ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayOptionOption) FlatMapComplex64(f func(Uint64ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayOptionOption) FlatMapComplex128(f func(Uint64ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayOptionOption) FlatMapAny(f func(Uint64ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrArrayOptionOption) FlatMapBool(f func(UintptrArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrArrayOptionOption) FlatMapString(f func(UintptrArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrArrayOptionOption) FlatMapInt(f func(UintptrArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrArrayOptionOption) FlatMapInt8(f func(UintptrArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayOptionOption) FlatMapInt16(f func(UintptrArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayOptionOption) FlatMapInt32(f func(UintptrArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayOptionOption) FlatMapInt64(f func(UintptrArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayOptionOption) FlatMapUint(f func(UintptrArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrArrayOptionOption) FlatMapUint8(f func(UintptrArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayOptionOption) FlatMapUint16(f func(UintptrArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayOptionOption) FlatMapUint32(f func(UintptrArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayOptionOption) FlatMapUint64(f func(UintptrArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayOptionOption) FlatMapUintptr(f func(UintptrArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayOptionOption) FlatMapByte(f func(UintptrArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrArrayOptionOption) FlatMapRune(f func(UintptrArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrArrayOptionOption) FlatMapFloat32(f func(UintptrArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayOptionOption) FlatMapFloat64(f func(UintptrArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayOptionOption) FlatMapComplex64(f func(UintptrArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayOptionOption) FlatMapComplex128(f func(UintptrArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayOptionOption) FlatMapAny(f func(UintptrArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteArrayOptionOption) FlatMapBool(f func(ByteArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteArrayOptionOption) FlatMapString(f func(ByteArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteArrayOptionOption) FlatMapInt(f func(ByteArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteArrayOptionOption) FlatMapInt8(f func(ByteArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteArrayOptionOption) FlatMapInt16(f func(ByteArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteArrayOptionOption) FlatMapInt32(f func(ByteArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteArrayOptionOption) FlatMapInt64(f func(ByteArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteArrayOptionOption) FlatMapUint(f func(ByteArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteArrayOptionOption) FlatMapUint8(f func(ByteArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteArrayOptionOption) FlatMapUint16(f func(ByteArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteArrayOptionOption) FlatMapUint32(f func(ByteArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteArrayOptionOption) FlatMapUint64(f func(ByteArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteArrayOptionOption) FlatMapUintptr(f func(ByteArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayOptionOption) FlatMapByte(f func(ByteArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteArrayOptionOption) FlatMapRune(f func(ByteArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteArrayOptionOption) FlatMapFloat32(f func(ByteArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayOptionOption) FlatMapFloat64(f func(ByteArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayOptionOption) FlatMapComplex64(f func(ByteArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayOptionOption) FlatMapComplex128(f func(ByteArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayOptionOption) FlatMapAny(f func(ByteArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneArrayOptionOption) FlatMapBool(f func(RuneArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneArrayOptionOption) FlatMapString(f func(RuneArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneArrayOptionOption) FlatMapInt(f func(RuneArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneArrayOptionOption) FlatMapInt8(f func(RuneArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneArrayOptionOption) FlatMapInt16(f func(RuneArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneArrayOptionOption) FlatMapInt32(f func(RuneArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneArrayOptionOption) FlatMapInt64(f func(RuneArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneArrayOptionOption) FlatMapUint(f func(RuneArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneArrayOptionOption) FlatMapUint8(f func(RuneArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneArrayOptionOption) FlatMapUint16(f func(RuneArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneArrayOptionOption) FlatMapUint32(f func(RuneArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneArrayOptionOption) FlatMapUint64(f func(RuneArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneArrayOptionOption) FlatMapUintptr(f func(RuneArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayOptionOption) FlatMapByte(f func(RuneArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneArrayOptionOption) FlatMapRune(f func(RuneArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneArrayOptionOption) FlatMapFloat32(f func(RuneArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayOptionOption) FlatMapFloat64(f func(RuneArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayOptionOption) FlatMapComplex64(f func(RuneArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayOptionOption) FlatMapComplex128(f func(RuneArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayOptionOption) FlatMapAny(f func(RuneArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ArrayOptionOption) FlatMapBool(f func(Float32ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ArrayOptionOption) FlatMapString(f func(Float32ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ArrayOptionOption) FlatMapInt(f func(Float32ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ArrayOptionOption) FlatMapInt8(f func(Float32ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayOptionOption) FlatMapInt16(f func(Float32ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayOptionOption) FlatMapInt32(f func(Float32ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayOptionOption) FlatMapInt64(f func(Float32ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayOptionOption) FlatMapUint(f func(Float32ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ArrayOptionOption) FlatMapUint8(f func(Float32ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayOptionOption) FlatMapUint16(f func(Float32ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayOptionOption) FlatMapUint32(f func(Float32ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayOptionOption) FlatMapUint64(f func(Float32ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayOptionOption) FlatMapUintptr(f func(Float32ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayOptionOption) FlatMapByte(f func(Float32ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ArrayOptionOption) FlatMapRune(f func(Float32ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ArrayOptionOption) FlatMapFloat32(f func(Float32ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayOptionOption) FlatMapFloat64(f func(Float32ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayOptionOption) FlatMapComplex64(f func(Float32ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayOptionOption) FlatMapComplex128(f func(Float32ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayOptionOption) FlatMapAny(f func(Float32ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ArrayOptionOption) FlatMapBool(f func(Float64ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ArrayOptionOption) FlatMapString(f func(Float64ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ArrayOptionOption) FlatMapInt(f func(Float64ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ArrayOptionOption) FlatMapInt8(f func(Float64ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayOptionOption) FlatMapInt16(f func(Float64ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayOptionOption) FlatMapInt32(f func(Float64ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayOptionOption) FlatMapInt64(f func(Float64ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayOptionOption) FlatMapUint(f func(Float64ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ArrayOptionOption) FlatMapUint8(f func(Float64ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayOptionOption) FlatMapUint16(f func(Float64ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayOptionOption) FlatMapUint32(f func(Float64ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayOptionOption) FlatMapUint64(f func(Float64ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayOptionOption) FlatMapUintptr(f func(Float64ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayOptionOption) FlatMapByte(f func(Float64ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ArrayOptionOption) FlatMapRune(f func(Float64ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ArrayOptionOption) FlatMapFloat32(f func(Float64ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayOptionOption) FlatMapFloat64(f func(Float64ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayOptionOption) FlatMapComplex64(f func(Float64ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayOptionOption) FlatMapComplex128(f func(Float64ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayOptionOption) FlatMapAny(f func(Float64ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayOptionOption) FlatMapBool(f func(Complex64ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayOptionOption) FlatMapString(f func(Complex64ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ArrayOptionOption) FlatMapInt(f func(Complex64ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayOptionOption) FlatMapInt8(f func(Complex64ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayOptionOption) FlatMapInt16(f func(Complex64ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayOptionOption) FlatMapInt32(f func(Complex64ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayOptionOption) FlatMapInt64(f func(Complex64ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayOptionOption) FlatMapUint(f func(Complex64ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayOptionOption) FlatMapUint8(f func(Complex64ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayOptionOption) FlatMapUint16(f func(Complex64ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayOptionOption) FlatMapUint32(f func(Complex64ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayOptionOption) FlatMapUint64(f func(Complex64ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayOptionOption) FlatMapUintptr(f func(Complex64ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayOptionOption) FlatMapByte(f func(Complex64ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayOptionOption) FlatMapRune(f func(Complex64ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayOptionOption) FlatMapFloat32(f func(Complex64ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayOptionOption) FlatMapFloat64(f func(Complex64ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayOptionOption) FlatMapComplex64(f func(Complex64ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayOptionOption) FlatMapComplex128(f func(Complex64ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayOptionOption) FlatMapAny(f func(Complex64ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayOptionOption) FlatMapBool(f func(Complex128ArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayOptionOption) FlatMapString(f func(Complex128ArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ArrayOptionOption) FlatMapInt(f func(Complex128ArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayOptionOption) FlatMapInt8(f func(Complex128ArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayOptionOption) FlatMapInt16(f func(Complex128ArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayOptionOption) FlatMapInt32(f func(Complex128ArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayOptionOption) FlatMapInt64(f func(Complex128ArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayOptionOption) FlatMapUint(f func(Complex128ArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayOptionOption) FlatMapUint8(f func(Complex128ArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayOptionOption) FlatMapUint16(f func(Complex128ArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayOptionOption) FlatMapUint32(f func(Complex128ArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayOptionOption) FlatMapUint64(f func(Complex128ArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayOptionOption) FlatMapUintptr(f func(Complex128ArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayOptionOption) FlatMapByte(f func(Complex128ArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayOptionOption) FlatMapRune(f func(Complex128ArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayOptionOption) FlatMapFloat32(f func(Complex128ArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayOptionOption) FlatMapFloat64(f func(Complex128ArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayOptionOption) FlatMapComplex64(f func(Complex128ArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayOptionOption) FlatMapComplex128(f func(Complex128ArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayOptionOption) FlatMapAny(f func(Complex128ArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyArrayOptionOption) FlatMapBool(f func(AnyArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyArrayOptionOption) FlatMapString(f func(AnyArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyArrayOptionOption) FlatMapInt(f func(AnyArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyArrayOptionOption) FlatMapInt8(f func(AnyArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyArrayOptionOption) FlatMapInt16(f func(AnyArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyArrayOptionOption) FlatMapInt32(f func(AnyArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyArrayOptionOption) FlatMapInt64(f func(AnyArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyArrayOptionOption) FlatMapUint(f func(AnyArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyArrayOptionOption) FlatMapUint8(f func(AnyArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyArrayOptionOption) FlatMapUint16(f func(AnyArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyArrayOptionOption) FlatMapUint32(f func(AnyArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyArrayOptionOption) FlatMapUint64(f func(AnyArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyArrayOptionOption) FlatMapUintptr(f func(AnyArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayOptionOption) FlatMapByte(f func(AnyArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyArrayOptionOption) FlatMapRune(f func(AnyArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyArrayOptionOption) FlatMapFloat32(f func(AnyArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayOptionOption) FlatMapFloat64(f func(AnyArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayOptionOption) FlatMapComplex64(f func(AnyArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayOptionOption) FlatMapComplex128(f func(AnyArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayOptionOption) FlatMapAny(f func(AnyArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolArrayArrayOptionOption) FlatMapBool(f func(BoolArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolArrayArrayOptionOption) FlatMapString(f func(BoolArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolArrayArrayOptionOption) FlatMapInt(f func(BoolArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolArrayArrayOptionOption) FlatMapInt8(f func(BoolArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolArrayArrayOptionOption) FlatMapInt16(f func(BoolArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolArrayArrayOptionOption) FlatMapInt32(f func(BoolArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolArrayArrayOptionOption) FlatMapInt64(f func(BoolArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolArrayArrayOptionOption) FlatMapUint(f func(BoolArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolArrayArrayOptionOption) FlatMapUint8(f func(BoolArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolArrayArrayOptionOption) FlatMapUint16(f func(BoolArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolArrayArrayOptionOption) FlatMapUint32(f func(BoolArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolArrayArrayOptionOption) FlatMapUint64(f func(BoolArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolArrayArrayOptionOption) FlatMapUintptr(f func(BoolArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayArrayOptionOption) FlatMapByte(f func(BoolArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolArrayArrayOptionOption) FlatMapRune(f func(BoolArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolArrayArrayOptionOption) FlatMapFloat32(f func(BoolArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayArrayOptionOption) FlatMapFloat64(f func(BoolArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayArrayOptionOption) FlatMapComplex64(f func(BoolArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayArrayOptionOption) FlatMapComplex128(f func(BoolArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayArrayOptionOption) FlatMapAny(f func(BoolArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringArrayArrayOptionOption) FlatMapBool(f func(StringArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringArrayArrayOptionOption) FlatMapString(f func(StringArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringArrayArrayOptionOption) FlatMapInt(f func(StringArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringArrayArrayOptionOption) FlatMapInt8(f func(StringArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringArrayArrayOptionOption) FlatMapInt16(f func(StringArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringArrayArrayOptionOption) FlatMapInt32(f func(StringArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringArrayArrayOptionOption) FlatMapInt64(f func(StringArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringArrayArrayOptionOption) FlatMapUint(f func(StringArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringArrayArrayOptionOption) FlatMapUint8(f func(StringArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringArrayArrayOptionOption) FlatMapUint16(f func(StringArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringArrayArrayOptionOption) FlatMapUint32(f func(StringArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringArrayArrayOptionOption) FlatMapUint64(f func(StringArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringArrayArrayOptionOption) FlatMapUintptr(f func(StringArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringArrayArrayOptionOption) FlatMapByte(f func(StringArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringArrayArrayOptionOption) FlatMapRune(f func(StringArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringArrayArrayOptionOption) FlatMapFloat32(f func(StringArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringArrayArrayOptionOption) FlatMapFloat64(f func(StringArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringArrayArrayOptionOption) FlatMapComplex64(f func(StringArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringArrayArrayOptionOption) FlatMapComplex128(f func(StringArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringArrayArrayOptionOption) FlatMapAny(f func(StringArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntArrayArrayOptionOption) FlatMapBool(f func(IntArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntArrayArrayOptionOption) FlatMapString(f func(IntArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntArrayArrayOptionOption) FlatMapInt(f func(IntArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntArrayArrayOptionOption) FlatMapInt8(f func(IntArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntArrayArrayOptionOption) FlatMapInt16(f func(IntArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntArrayArrayOptionOption) FlatMapInt32(f func(IntArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntArrayArrayOptionOption) FlatMapInt64(f func(IntArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntArrayArrayOptionOption) FlatMapUint(f func(IntArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntArrayArrayOptionOption) FlatMapUint8(f func(IntArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntArrayArrayOptionOption) FlatMapUint16(f func(IntArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntArrayArrayOptionOption) FlatMapUint32(f func(IntArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntArrayArrayOptionOption) FlatMapUint64(f func(IntArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntArrayArrayOptionOption) FlatMapUintptr(f func(IntArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntArrayArrayOptionOption) FlatMapByte(f func(IntArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntArrayArrayOptionOption) FlatMapRune(f func(IntArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntArrayArrayOptionOption) FlatMapFloat32(f func(IntArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntArrayArrayOptionOption) FlatMapFloat64(f func(IntArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntArrayArrayOptionOption) FlatMapComplex64(f func(IntArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntArrayArrayOptionOption) FlatMapComplex128(f func(IntArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntArrayArrayOptionOption) FlatMapAny(f func(IntArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapBool(f func(Int8ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapString(f func(Int8ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapInt(f func(Int8ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapInt8(f func(Int8ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapInt16(f func(Int8ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapInt32(f func(Int8ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapInt64(f func(Int8ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapUint(f func(Int8ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapUint8(f func(Int8ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapUint16(f func(Int8ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapUint32(f func(Int8ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapUint64(f func(Int8ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapUintptr(f func(Int8ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapByte(f func(Int8ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapRune(f func(Int8ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapFloat32(f func(Int8ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapFloat64(f func(Int8ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapComplex64(f func(Int8ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapComplex128(f func(Int8ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayArrayOptionOption) FlatMapAny(f func(Int8ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapBool(f func(Int16ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapString(f func(Int16ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapInt(f func(Int16ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapInt8(f func(Int16ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapInt16(f func(Int16ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapInt32(f func(Int16ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapInt64(f func(Int16ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapUint(f func(Int16ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapUint8(f func(Int16ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapUint16(f func(Int16ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapUint32(f func(Int16ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapUint64(f func(Int16ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapUintptr(f func(Int16ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapByte(f func(Int16ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapRune(f func(Int16ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapFloat32(f func(Int16ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapFloat64(f func(Int16ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapComplex64(f func(Int16ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapComplex128(f func(Int16ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayArrayOptionOption) FlatMapAny(f func(Int16ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapBool(f func(Int32ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapString(f func(Int32ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapInt(f func(Int32ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapInt8(f func(Int32ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapInt16(f func(Int32ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapInt32(f func(Int32ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapInt64(f func(Int32ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapUint(f func(Int32ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapUint8(f func(Int32ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapUint16(f func(Int32ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapUint32(f func(Int32ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapUint64(f func(Int32ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapUintptr(f func(Int32ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapByte(f func(Int32ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapRune(f func(Int32ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapFloat32(f func(Int32ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapFloat64(f func(Int32ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapComplex64(f func(Int32ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapComplex128(f func(Int32ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayArrayOptionOption) FlatMapAny(f func(Int32ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapBool(f func(Int64ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapString(f func(Int64ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapInt(f func(Int64ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapInt8(f func(Int64ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapInt16(f func(Int64ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapInt32(f func(Int64ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapInt64(f func(Int64ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapUint(f func(Int64ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapUint8(f func(Int64ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapUint16(f func(Int64ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapUint32(f func(Int64ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapUint64(f func(Int64ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapUintptr(f func(Int64ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapByte(f func(Int64ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapRune(f func(Int64ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapFloat32(f func(Int64ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapFloat64(f func(Int64ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapComplex64(f func(Int64ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapComplex128(f func(Int64ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayArrayOptionOption) FlatMapAny(f func(Int64ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintArrayArrayOptionOption) FlatMapBool(f func(UintArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintArrayArrayOptionOption) FlatMapString(f func(UintArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintArrayArrayOptionOption) FlatMapInt(f func(UintArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintArrayArrayOptionOption) FlatMapInt8(f func(UintArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintArrayArrayOptionOption) FlatMapInt16(f func(UintArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintArrayArrayOptionOption) FlatMapInt32(f func(UintArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintArrayArrayOptionOption) FlatMapInt64(f func(UintArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintArrayArrayOptionOption) FlatMapUint(f func(UintArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintArrayArrayOptionOption) FlatMapUint8(f func(UintArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintArrayArrayOptionOption) FlatMapUint16(f func(UintArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintArrayArrayOptionOption) FlatMapUint32(f func(UintArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintArrayArrayOptionOption) FlatMapUint64(f func(UintArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintArrayArrayOptionOption) FlatMapUintptr(f func(UintArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintArrayArrayOptionOption) FlatMapByte(f func(UintArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintArrayArrayOptionOption) FlatMapRune(f func(UintArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintArrayArrayOptionOption) FlatMapFloat32(f func(UintArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintArrayArrayOptionOption) FlatMapFloat64(f func(UintArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintArrayArrayOptionOption) FlatMapComplex64(f func(UintArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintArrayArrayOptionOption) FlatMapComplex128(f func(UintArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintArrayArrayOptionOption) FlatMapAny(f func(UintArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapBool(f func(Uint8ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapString(f func(Uint8ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapInt(f func(Uint8ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapInt8(f func(Uint8ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapInt16(f func(Uint8ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapInt32(f func(Uint8ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapInt64(f func(Uint8ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapUint(f func(Uint8ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapUint8(f func(Uint8ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapUint16(f func(Uint8ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapUint32(f func(Uint8ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapUint64(f func(Uint8ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapUintptr(f func(Uint8ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapByte(f func(Uint8ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapRune(f func(Uint8ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapFloat32(f func(Uint8ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapFloat64(f func(Uint8ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapComplex64(f func(Uint8ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapComplex128(f func(Uint8ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayArrayOptionOption) FlatMapAny(f func(Uint8ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapBool(f func(Uint16ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapString(f func(Uint16ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapInt(f func(Uint16ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapInt8(f func(Uint16ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapInt16(f func(Uint16ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapInt32(f func(Uint16ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapInt64(f func(Uint16ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapUint(f func(Uint16ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapUint8(f func(Uint16ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapUint16(f func(Uint16ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapUint32(f func(Uint16ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapUint64(f func(Uint16ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapUintptr(f func(Uint16ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapByte(f func(Uint16ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapRune(f func(Uint16ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapFloat32(f func(Uint16ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapFloat64(f func(Uint16ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapComplex64(f func(Uint16ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapComplex128(f func(Uint16ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayArrayOptionOption) FlatMapAny(f func(Uint16ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapBool(f func(Uint32ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapString(f func(Uint32ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapInt(f func(Uint32ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapInt8(f func(Uint32ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapInt16(f func(Uint32ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapInt32(f func(Uint32ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapInt64(f func(Uint32ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapUint(f func(Uint32ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapUint8(f func(Uint32ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapUint16(f func(Uint32ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapUint32(f func(Uint32ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapUint64(f func(Uint32ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapUintptr(f func(Uint32ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapByte(f func(Uint32ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapRune(f func(Uint32ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapFloat32(f func(Uint32ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapFloat64(f func(Uint32ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapComplex64(f func(Uint32ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapComplex128(f func(Uint32ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayArrayOptionOption) FlatMapAny(f func(Uint32ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapBool(f func(Uint64ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapString(f func(Uint64ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapInt(f func(Uint64ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapInt8(f func(Uint64ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapInt16(f func(Uint64ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapInt32(f func(Uint64ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapInt64(f func(Uint64ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapUint(f func(Uint64ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapUint8(f func(Uint64ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapUint16(f func(Uint64ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapUint32(f func(Uint64ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapUint64(f func(Uint64ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapUintptr(f func(Uint64ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapByte(f func(Uint64ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapRune(f func(Uint64ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapFloat32(f func(Uint64ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapFloat64(f func(Uint64ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapComplex64(f func(Uint64ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapComplex128(f func(Uint64ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayArrayOptionOption) FlatMapAny(f func(Uint64ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapBool(f func(UintptrArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapString(f func(UintptrArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapInt(f func(UintptrArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapInt8(f func(UintptrArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapInt16(f func(UintptrArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapInt32(f func(UintptrArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapInt64(f func(UintptrArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapUint(f func(UintptrArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapUint8(f func(UintptrArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapUint16(f func(UintptrArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapUint32(f func(UintptrArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapUint64(f func(UintptrArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapUintptr(f func(UintptrArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapByte(f func(UintptrArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapRune(f func(UintptrArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapFloat32(f func(UintptrArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapFloat64(f func(UintptrArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapComplex64(f func(UintptrArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapComplex128(f func(UintptrArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayArrayOptionOption) FlatMapAny(f func(UintptrArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteArrayArrayOptionOption) FlatMapBool(f func(ByteArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteArrayArrayOptionOption) FlatMapString(f func(ByteArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteArrayArrayOptionOption) FlatMapInt(f func(ByteArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteArrayArrayOptionOption) FlatMapInt8(f func(ByteArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteArrayArrayOptionOption) FlatMapInt16(f func(ByteArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteArrayArrayOptionOption) FlatMapInt32(f func(ByteArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteArrayArrayOptionOption) FlatMapInt64(f func(ByteArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteArrayArrayOptionOption) FlatMapUint(f func(ByteArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteArrayArrayOptionOption) FlatMapUint8(f func(ByteArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteArrayArrayOptionOption) FlatMapUint16(f func(ByteArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteArrayArrayOptionOption) FlatMapUint32(f func(ByteArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteArrayArrayOptionOption) FlatMapUint64(f func(ByteArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteArrayArrayOptionOption) FlatMapUintptr(f func(ByteArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayArrayOptionOption) FlatMapByte(f func(ByteArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteArrayArrayOptionOption) FlatMapRune(f func(ByteArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteArrayArrayOptionOption) FlatMapFloat32(f func(ByteArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayArrayOptionOption) FlatMapFloat64(f func(ByteArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayArrayOptionOption) FlatMapComplex64(f func(ByteArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayArrayOptionOption) FlatMapComplex128(f func(ByteArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayArrayOptionOption) FlatMapAny(f func(ByteArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneArrayArrayOptionOption) FlatMapBool(f func(RuneArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneArrayArrayOptionOption) FlatMapString(f func(RuneArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneArrayArrayOptionOption) FlatMapInt(f func(RuneArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneArrayArrayOptionOption) FlatMapInt8(f func(RuneArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneArrayArrayOptionOption) FlatMapInt16(f func(RuneArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneArrayArrayOptionOption) FlatMapInt32(f func(RuneArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneArrayArrayOptionOption) FlatMapInt64(f func(RuneArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneArrayArrayOptionOption) FlatMapUint(f func(RuneArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneArrayArrayOptionOption) FlatMapUint8(f func(RuneArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneArrayArrayOptionOption) FlatMapUint16(f func(RuneArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneArrayArrayOptionOption) FlatMapUint32(f func(RuneArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneArrayArrayOptionOption) FlatMapUint64(f func(RuneArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneArrayArrayOptionOption) FlatMapUintptr(f func(RuneArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayArrayOptionOption) FlatMapByte(f func(RuneArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneArrayArrayOptionOption) FlatMapRune(f func(RuneArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneArrayArrayOptionOption) FlatMapFloat32(f func(RuneArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayArrayOptionOption) FlatMapFloat64(f func(RuneArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayArrayOptionOption) FlatMapComplex64(f func(RuneArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayArrayOptionOption) FlatMapComplex128(f func(RuneArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayArrayOptionOption) FlatMapAny(f func(RuneArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapBool(f func(Float32ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapString(f func(Float32ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapInt(f func(Float32ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapInt8(f func(Float32ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapInt16(f func(Float32ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapInt32(f func(Float32ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapInt64(f func(Float32ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapUint(f func(Float32ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapUint8(f func(Float32ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapUint16(f func(Float32ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapUint32(f func(Float32ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapUint64(f func(Float32ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapUintptr(f func(Float32ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapByte(f func(Float32ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapRune(f func(Float32ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapFloat32(f func(Float32ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapFloat64(f func(Float32ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapComplex64(f func(Float32ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapComplex128(f func(Float32ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayArrayOptionOption) FlatMapAny(f func(Float32ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapBool(f func(Float64ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapString(f func(Float64ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapInt(f func(Float64ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapInt8(f func(Float64ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapInt16(f func(Float64ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapInt32(f func(Float64ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapInt64(f func(Float64ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapUint(f func(Float64ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapUint8(f func(Float64ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapUint16(f func(Float64ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapUint32(f func(Float64ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapUint64(f func(Float64ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapUintptr(f func(Float64ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapByte(f func(Float64ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapRune(f func(Float64ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapFloat32(f func(Float64ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapFloat64(f func(Float64ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapComplex64(f func(Float64ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapComplex128(f func(Float64ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayArrayOptionOption) FlatMapAny(f func(Float64ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapBool(f func(Complex64ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapString(f func(Complex64ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapInt(f func(Complex64ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapInt8(f func(Complex64ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapInt16(f func(Complex64ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapInt32(f func(Complex64ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapInt64(f func(Complex64ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapUint(f func(Complex64ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapUint8(f func(Complex64ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapUint16(f func(Complex64ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapUint32(f func(Complex64ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapUint64(f func(Complex64ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapUintptr(f func(Complex64ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapByte(f func(Complex64ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapRune(f func(Complex64ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapFloat32(f func(Complex64ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapFloat64(f func(Complex64ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapComplex64(f func(Complex64ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapComplex128(f func(Complex64ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayArrayOptionOption) FlatMapAny(f func(Complex64ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapBool(f func(Complex128ArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapString(f func(Complex128ArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapInt(f func(Complex128ArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapInt8(f func(Complex128ArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapInt16(f func(Complex128ArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapInt32(f func(Complex128ArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapInt64(f func(Complex128ArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapUint(f func(Complex128ArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapUint8(f func(Complex128ArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapUint16(f func(Complex128ArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapUint32(f func(Complex128ArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapUint64(f func(Complex128ArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapUintptr(f func(Complex128ArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapByte(f func(Complex128ArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapRune(f func(Complex128ArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapFloat32(f func(Complex128ArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapFloat64(f func(Complex128ArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapComplex64(f func(Complex128ArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapComplex128(f func(Complex128ArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayArrayOptionOption) FlatMapAny(f func(Complex128ArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyArrayArrayOptionOption) FlatMapBool(f func(AnyArrayArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyArrayArrayOptionOption) FlatMapString(f func(AnyArrayArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyArrayArrayOptionOption) FlatMapInt(f func(AnyArrayArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyArrayArrayOptionOption) FlatMapInt8(f func(AnyArrayArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyArrayArrayOptionOption) FlatMapInt16(f func(AnyArrayArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyArrayArrayOptionOption) FlatMapInt32(f func(AnyArrayArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyArrayArrayOptionOption) FlatMapInt64(f func(AnyArrayArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyArrayArrayOptionOption) FlatMapUint(f func(AnyArrayArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyArrayArrayOptionOption) FlatMapUint8(f func(AnyArrayArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyArrayArrayOptionOption) FlatMapUint16(f func(AnyArrayArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyArrayArrayOptionOption) FlatMapUint32(f func(AnyArrayArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyArrayArrayOptionOption) FlatMapUint64(f func(AnyArrayArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyArrayArrayOptionOption) FlatMapUintptr(f func(AnyArrayArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayArrayOptionOption) FlatMapByte(f func(AnyArrayArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyArrayArrayOptionOption) FlatMapRune(f func(AnyArrayArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyArrayArrayOptionOption) FlatMapFloat32(f func(AnyArrayArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayArrayOptionOption) FlatMapFloat64(f func(AnyArrayArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayArrayOptionOption) FlatMapComplex64(f func(AnyArrayArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayArrayOptionOption) FlatMapComplex128(f func(AnyArrayArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayArrayOptionOption) FlatMapAny(f func(AnyArrayArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolOptionArrayOptionOption) FlatMapBool(f func(BoolOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolOptionArrayOptionOption) FlatMapString(f func(BoolOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolOptionArrayOptionOption) FlatMapInt(f func(BoolOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolOptionArrayOptionOption) FlatMapInt8(f func(BoolOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolOptionArrayOptionOption) FlatMapInt16(f func(BoolOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolOptionArrayOptionOption) FlatMapInt32(f func(BoolOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolOptionArrayOptionOption) FlatMapInt64(f func(BoolOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolOptionArrayOptionOption) FlatMapUint(f func(BoolOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolOptionArrayOptionOption) FlatMapUint8(f func(BoolOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolOptionArrayOptionOption) FlatMapUint16(f func(BoolOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolOptionArrayOptionOption) FlatMapUint32(f func(BoolOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolOptionArrayOptionOption) FlatMapUint64(f func(BoolOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolOptionArrayOptionOption) FlatMapUintptr(f func(BoolOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolOptionArrayOptionOption) FlatMapByte(f func(BoolOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolOptionArrayOptionOption) FlatMapRune(f func(BoolOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolOptionArrayOptionOption) FlatMapFloat32(f func(BoolOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolOptionArrayOptionOption) FlatMapFloat64(f func(BoolOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolOptionArrayOptionOption) FlatMapComplex64(f func(BoolOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolOptionArrayOptionOption) FlatMapComplex128(f func(BoolOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolOptionArrayOptionOption) FlatMapAny(f func(BoolOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringOptionArrayOptionOption) FlatMapBool(f func(StringOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringOptionArrayOptionOption) FlatMapString(f func(StringOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringOptionArrayOptionOption) FlatMapInt(f func(StringOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringOptionArrayOptionOption) FlatMapInt8(f func(StringOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringOptionArrayOptionOption) FlatMapInt16(f func(StringOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringOptionArrayOptionOption) FlatMapInt32(f func(StringOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringOptionArrayOptionOption) FlatMapInt64(f func(StringOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringOptionArrayOptionOption) FlatMapUint(f func(StringOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringOptionArrayOptionOption) FlatMapUint8(f func(StringOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringOptionArrayOptionOption) FlatMapUint16(f func(StringOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringOptionArrayOptionOption) FlatMapUint32(f func(StringOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringOptionArrayOptionOption) FlatMapUint64(f func(StringOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringOptionArrayOptionOption) FlatMapUintptr(f func(StringOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringOptionArrayOptionOption) FlatMapByte(f func(StringOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringOptionArrayOptionOption) FlatMapRune(f func(StringOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringOptionArrayOptionOption) FlatMapFloat32(f func(StringOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringOptionArrayOptionOption) FlatMapFloat64(f func(StringOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringOptionArrayOptionOption) FlatMapComplex64(f func(StringOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringOptionArrayOptionOption) FlatMapComplex128(f func(StringOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringOptionArrayOptionOption) FlatMapAny(f func(StringOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntOptionArrayOptionOption) FlatMapBool(f func(IntOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntOptionArrayOptionOption) FlatMapString(f func(IntOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntOptionArrayOptionOption) FlatMapInt(f func(IntOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntOptionArrayOptionOption) FlatMapInt8(f func(IntOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntOptionArrayOptionOption) FlatMapInt16(f func(IntOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntOptionArrayOptionOption) FlatMapInt32(f func(IntOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntOptionArrayOptionOption) FlatMapInt64(f func(IntOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntOptionArrayOptionOption) FlatMapUint(f func(IntOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntOptionArrayOptionOption) FlatMapUint8(f func(IntOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntOptionArrayOptionOption) FlatMapUint16(f func(IntOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntOptionArrayOptionOption) FlatMapUint32(f func(IntOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntOptionArrayOptionOption) FlatMapUint64(f func(IntOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntOptionArrayOptionOption) FlatMapUintptr(f func(IntOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntOptionArrayOptionOption) FlatMapByte(f func(IntOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntOptionArrayOptionOption) FlatMapRune(f func(IntOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntOptionArrayOptionOption) FlatMapFloat32(f func(IntOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntOptionArrayOptionOption) FlatMapFloat64(f func(IntOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntOptionArrayOptionOption) FlatMapComplex64(f func(IntOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntOptionArrayOptionOption) FlatMapComplex128(f func(IntOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntOptionArrayOptionOption) FlatMapAny(f func(IntOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8OptionArrayOptionOption) FlatMapBool(f func(Int8OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8OptionArrayOptionOption) FlatMapString(f func(Int8OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8OptionArrayOptionOption) FlatMapInt(f func(Int8OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8OptionArrayOptionOption) FlatMapInt8(f func(Int8OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8OptionArrayOptionOption) FlatMapInt16(f func(Int8OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8OptionArrayOptionOption) FlatMapInt32(f func(Int8OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8OptionArrayOptionOption) FlatMapInt64(f func(Int8OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8OptionArrayOptionOption) FlatMapUint(f func(Int8OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8OptionArrayOptionOption) FlatMapUint8(f func(Int8OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8OptionArrayOptionOption) FlatMapUint16(f func(Int8OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8OptionArrayOptionOption) FlatMapUint32(f func(Int8OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8OptionArrayOptionOption) FlatMapUint64(f func(Int8OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8OptionArrayOptionOption) FlatMapUintptr(f func(Int8OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8OptionArrayOptionOption) FlatMapByte(f func(Int8OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8OptionArrayOptionOption) FlatMapRune(f func(Int8OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8OptionArrayOptionOption) FlatMapFloat32(f func(Int8OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8OptionArrayOptionOption) FlatMapFloat64(f func(Int8OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8OptionArrayOptionOption) FlatMapComplex64(f func(Int8OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8OptionArrayOptionOption) FlatMapComplex128(f func(Int8OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8OptionArrayOptionOption) FlatMapAny(f func(Int8OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16OptionArrayOptionOption) FlatMapBool(f func(Int16OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16OptionArrayOptionOption) FlatMapString(f func(Int16OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16OptionArrayOptionOption) FlatMapInt(f func(Int16OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16OptionArrayOptionOption) FlatMapInt8(f func(Int16OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16OptionArrayOptionOption) FlatMapInt16(f func(Int16OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16OptionArrayOptionOption) FlatMapInt32(f func(Int16OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16OptionArrayOptionOption) FlatMapInt64(f func(Int16OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16OptionArrayOptionOption) FlatMapUint(f func(Int16OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16OptionArrayOptionOption) FlatMapUint8(f func(Int16OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16OptionArrayOptionOption) FlatMapUint16(f func(Int16OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16OptionArrayOptionOption) FlatMapUint32(f func(Int16OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16OptionArrayOptionOption) FlatMapUint64(f func(Int16OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16OptionArrayOptionOption) FlatMapUintptr(f func(Int16OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16OptionArrayOptionOption) FlatMapByte(f func(Int16OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16OptionArrayOptionOption) FlatMapRune(f func(Int16OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16OptionArrayOptionOption) FlatMapFloat32(f func(Int16OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16OptionArrayOptionOption) FlatMapFloat64(f func(Int16OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16OptionArrayOptionOption) FlatMapComplex64(f func(Int16OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16OptionArrayOptionOption) FlatMapComplex128(f func(Int16OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16OptionArrayOptionOption) FlatMapAny(f func(Int16OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32OptionArrayOptionOption) FlatMapBool(f func(Int32OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32OptionArrayOptionOption) FlatMapString(f func(Int32OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32OptionArrayOptionOption) FlatMapInt(f func(Int32OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32OptionArrayOptionOption) FlatMapInt8(f func(Int32OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32OptionArrayOptionOption) FlatMapInt16(f func(Int32OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32OptionArrayOptionOption) FlatMapInt32(f func(Int32OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32OptionArrayOptionOption) FlatMapInt64(f func(Int32OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32OptionArrayOptionOption) FlatMapUint(f func(Int32OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32OptionArrayOptionOption) FlatMapUint8(f func(Int32OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32OptionArrayOptionOption) FlatMapUint16(f func(Int32OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32OptionArrayOptionOption) FlatMapUint32(f func(Int32OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32OptionArrayOptionOption) FlatMapUint64(f func(Int32OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32OptionArrayOptionOption) FlatMapUintptr(f func(Int32OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32OptionArrayOptionOption) FlatMapByte(f func(Int32OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32OptionArrayOptionOption) FlatMapRune(f func(Int32OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32OptionArrayOptionOption) FlatMapFloat32(f func(Int32OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32OptionArrayOptionOption) FlatMapFloat64(f func(Int32OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32OptionArrayOptionOption) FlatMapComplex64(f func(Int32OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32OptionArrayOptionOption) FlatMapComplex128(f func(Int32OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32OptionArrayOptionOption) FlatMapAny(f func(Int32OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64OptionArrayOptionOption) FlatMapBool(f func(Int64OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64OptionArrayOptionOption) FlatMapString(f func(Int64OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64OptionArrayOptionOption) FlatMapInt(f func(Int64OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64OptionArrayOptionOption) FlatMapInt8(f func(Int64OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64OptionArrayOptionOption) FlatMapInt16(f func(Int64OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64OptionArrayOptionOption) FlatMapInt32(f func(Int64OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64OptionArrayOptionOption) FlatMapInt64(f func(Int64OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64OptionArrayOptionOption) FlatMapUint(f func(Int64OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64OptionArrayOptionOption) FlatMapUint8(f func(Int64OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64OptionArrayOptionOption) FlatMapUint16(f func(Int64OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64OptionArrayOptionOption) FlatMapUint32(f func(Int64OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64OptionArrayOptionOption) FlatMapUint64(f func(Int64OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64OptionArrayOptionOption) FlatMapUintptr(f func(Int64OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64OptionArrayOptionOption) FlatMapByte(f func(Int64OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64OptionArrayOptionOption) FlatMapRune(f func(Int64OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64OptionArrayOptionOption) FlatMapFloat32(f func(Int64OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64OptionArrayOptionOption) FlatMapFloat64(f func(Int64OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64OptionArrayOptionOption) FlatMapComplex64(f func(Int64OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64OptionArrayOptionOption) FlatMapComplex128(f func(Int64OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64OptionArrayOptionOption) FlatMapAny(f func(Int64OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintOptionArrayOptionOption) FlatMapBool(f func(UintOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintOptionArrayOptionOption) FlatMapString(f func(UintOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintOptionArrayOptionOption) FlatMapInt(f func(UintOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintOptionArrayOptionOption) FlatMapInt8(f func(UintOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintOptionArrayOptionOption) FlatMapInt16(f func(UintOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintOptionArrayOptionOption) FlatMapInt32(f func(UintOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintOptionArrayOptionOption) FlatMapInt64(f func(UintOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintOptionArrayOptionOption) FlatMapUint(f func(UintOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintOptionArrayOptionOption) FlatMapUint8(f func(UintOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintOptionArrayOptionOption) FlatMapUint16(f func(UintOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintOptionArrayOptionOption) FlatMapUint32(f func(UintOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintOptionArrayOptionOption) FlatMapUint64(f func(UintOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintOptionArrayOptionOption) FlatMapUintptr(f func(UintOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintOptionArrayOptionOption) FlatMapByte(f func(UintOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintOptionArrayOptionOption) FlatMapRune(f func(UintOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintOptionArrayOptionOption) FlatMapFloat32(f func(UintOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintOptionArrayOptionOption) FlatMapFloat64(f func(UintOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintOptionArrayOptionOption) FlatMapComplex64(f func(UintOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintOptionArrayOptionOption) FlatMapComplex128(f func(UintOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintOptionArrayOptionOption) FlatMapAny(f func(UintOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapBool(f func(Uint8OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapString(f func(Uint8OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapInt(f func(Uint8OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapInt8(f func(Uint8OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapInt16(f func(Uint8OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapInt32(f func(Uint8OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapInt64(f func(Uint8OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapUint(f func(Uint8OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapUint8(f func(Uint8OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapUint16(f func(Uint8OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapUint32(f func(Uint8OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapUint64(f func(Uint8OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapUintptr(f func(Uint8OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapByte(f func(Uint8OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapRune(f func(Uint8OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapFloat32(f func(Uint8OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapFloat64(f func(Uint8OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapComplex64(f func(Uint8OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapComplex128(f func(Uint8OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8OptionArrayOptionOption) FlatMapAny(f func(Uint8OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapBool(f func(Uint16OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapString(f func(Uint16OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapInt(f func(Uint16OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapInt8(f func(Uint16OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapInt16(f func(Uint16OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapInt32(f func(Uint16OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapInt64(f func(Uint16OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapUint(f func(Uint16OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapUint8(f func(Uint16OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapUint16(f func(Uint16OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapUint32(f func(Uint16OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapUint64(f func(Uint16OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapUintptr(f func(Uint16OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapByte(f func(Uint16OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapRune(f func(Uint16OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapFloat32(f func(Uint16OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapFloat64(f func(Uint16OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapComplex64(f func(Uint16OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapComplex128(f func(Uint16OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16OptionArrayOptionOption) FlatMapAny(f func(Uint16OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapBool(f func(Uint32OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapString(f func(Uint32OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapInt(f func(Uint32OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapInt8(f func(Uint32OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapInt16(f func(Uint32OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapInt32(f func(Uint32OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapInt64(f func(Uint32OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapUint(f func(Uint32OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapUint8(f func(Uint32OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapUint16(f func(Uint32OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapUint32(f func(Uint32OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapUint64(f func(Uint32OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapUintptr(f func(Uint32OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapByte(f func(Uint32OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapRune(f func(Uint32OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapFloat32(f func(Uint32OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapFloat64(f func(Uint32OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapComplex64(f func(Uint32OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapComplex128(f func(Uint32OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32OptionArrayOptionOption) FlatMapAny(f func(Uint32OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapBool(f func(Uint64OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapString(f func(Uint64OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapInt(f func(Uint64OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapInt8(f func(Uint64OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapInt16(f func(Uint64OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapInt32(f func(Uint64OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapInt64(f func(Uint64OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapUint(f func(Uint64OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapUint8(f func(Uint64OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapUint16(f func(Uint64OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapUint32(f func(Uint64OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapUint64(f func(Uint64OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapUintptr(f func(Uint64OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapByte(f func(Uint64OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapRune(f func(Uint64OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapFloat32(f func(Uint64OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapFloat64(f func(Uint64OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapComplex64(f func(Uint64OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapComplex128(f func(Uint64OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64OptionArrayOptionOption) FlatMapAny(f func(Uint64OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapBool(f func(UintptrOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapString(f func(UintptrOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapInt(f func(UintptrOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapInt8(f func(UintptrOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapInt16(f func(UintptrOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapInt32(f func(UintptrOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapInt64(f func(UintptrOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapUint(f func(UintptrOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapUint8(f func(UintptrOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapUint16(f func(UintptrOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapUint32(f func(UintptrOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapUint64(f func(UintptrOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapUintptr(f func(UintptrOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapByte(f func(UintptrOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapRune(f func(UintptrOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapFloat32(f func(UintptrOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapFloat64(f func(UintptrOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapComplex64(f func(UintptrOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapComplex128(f func(UintptrOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrOptionArrayOptionOption) FlatMapAny(f func(UintptrOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteOptionArrayOptionOption) FlatMapBool(f func(ByteOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteOptionArrayOptionOption) FlatMapString(f func(ByteOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteOptionArrayOptionOption) FlatMapInt(f func(ByteOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteOptionArrayOptionOption) FlatMapInt8(f func(ByteOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteOptionArrayOptionOption) FlatMapInt16(f func(ByteOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteOptionArrayOptionOption) FlatMapInt32(f func(ByteOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteOptionArrayOptionOption) FlatMapInt64(f func(ByteOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteOptionArrayOptionOption) FlatMapUint(f func(ByteOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteOptionArrayOptionOption) FlatMapUint8(f func(ByteOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteOptionArrayOptionOption) FlatMapUint16(f func(ByteOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteOptionArrayOptionOption) FlatMapUint32(f func(ByteOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteOptionArrayOptionOption) FlatMapUint64(f func(ByteOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteOptionArrayOptionOption) FlatMapUintptr(f func(ByteOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteOptionArrayOptionOption) FlatMapByte(f func(ByteOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteOptionArrayOptionOption) FlatMapRune(f func(ByteOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteOptionArrayOptionOption) FlatMapFloat32(f func(ByteOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteOptionArrayOptionOption) FlatMapFloat64(f func(ByteOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteOptionArrayOptionOption) FlatMapComplex64(f func(ByteOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteOptionArrayOptionOption) FlatMapComplex128(f func(ByteOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteOptionArrayOptionOption) FlatMapAny(f func(ByteOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneOptionArrayOptionOption) FlatMapBool(f func(RuneOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneOptionArrayOptionOption) FlatMapString(f func(RuneOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneOptionArrayOptionOption) FlatMapInt(f func(RuneOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneOptionArrayOptionOption) FlatMapInt8(f func(RuneOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneOptionArrayOptionOption) FlatMapInt16(f func(RuneOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneOptionArrayOptionOption) FlatMapInt32(f func(RuneOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneOptionArrayOptionOption) FlatMapInt64(f func(RuneOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneOptionArrayOptionOption) FlatMapUint(f func(RuneOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneOptionArrayOptionOption) FlatMapUint8(f func(RuneOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneOptionArrayOptionOption) FlatMapUint16(f func(RuneOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneOptionArrayOptionOption) FlatMapUint32(f func(RuneOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneOptionArrayOptionOption) FlatMapUint64(f func(RuneOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneOptionArrayOptionOption) FlatMapUintptr(f func(RuneOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneOptionArrayOptionOption) FlatMapByte(f func(RuneOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneOptionArrayOptionOption) FlatMapRune(f func(RuneOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneOptionArrayOptionOption) FlatMapFloat32(f func(RuneOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneOptionArrayOptionOption) FlatMapFloat64(f func(RuneOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneOptionArrayOptionOption) FlatMapComplex64(f func(RuneOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneOptionArrayOptionOption) FlatMapComplex128(f func(RuneOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneOptionArrayOptionOption) FlatMapAny(f func(RuneOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32OptionArrayOptionOption) FlatMapBool(f func(Float32OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32OptionArrayOptionOption) FlatMapString(f func(Float32OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32OptionArrayOptionOption) FlatMapInt(f func(Float32OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32OptionArrayOptionOption) FlatMapInt8(f func(Float32OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32OptionArrayOptionOption) FlatMapInt16(f func(Float32OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32OptionArrayOptionOption) FlatMapInt32(f func(Float32OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32OptionArrayOptionOption) FlatMapInt64(f func(Float32OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32OptionArrayOptionOption) FlatMapUint(f func(Float32OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32OptionArrayOptionOption) FlatMapUint8(f func(Float32OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32OptionArrayOptionOption) FlatMapUint16(f func(Float32OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32OptionArrayOptionOption) FlatMapUint32(f func(Float32OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32OptionArrayOptionOption) FlatMapUint64(f func(Float32OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32OptionArrayOptionOption) FlatMapUintptr(f func(Float32OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32OptionArrayOptionOption) FlatMapByte(f func(Float32OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32OptionArrayOptionOption) FlatMapRune(f func(Float32OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32OptionArrayOptionOption) FlatMapFloat32(f func(Float32OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32OptionArrayOptionOption) FlatMapFloat64(f func(Float32OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32OptionArrayOptionOption) FlatMapComplex64(f func(Float32OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32OptionArrayOptionOption) FlatMapComplex128(f func(Float32OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32OptionArrayOptionOption) FlatMapAny(f func(Float32OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64OptionArrayOptionOption) FlatMapBool(f func(Float64OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64OptionArrayOptionOption) FlatMapString(f func(Float64OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64OptionArrayOptionOption) FlatMapInt(f func(Float64OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64OptionArrayOptionOption) FlatMapInt8(f func(Float64OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64OptionArrayOptionOption) FlatMapInt16(f func(Float64OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64OptionArrayOptionOption) FlatMapInt32(f func(Float64OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64OptionArrayOptionOption) FlatMapInt64(f func(Float64OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64OptionArrayOptionOption) FlatMapUint(f func(Float64OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64OptionArrayOptionOption) FlatMapUint8(f func(Float64OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64OptionArrayOptionOption) FlatMapUint16(f func(Float64OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64OptionArrayOptionOption) FlatMapUint32(f func(Float64OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64OptionArrayOptionOption) FlatMapUint64(f func(Float64OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64OptionArrayOptionOption) FlatMapUintptr(f func(Float64OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64OptionArrayOptionOption) FlatMapByte(f func(Float64OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64OptionArrayOptionOption) FlatMapRune(f func(Float64OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64OptionArrayOptionOption) FlatMapFloat32(f func(Float64OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64OptionArrayOptionOption) FlatMapFloat64(f func(Float64OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64OptionArrayOptionOption) FlatMapComplex64(f func(Float64OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64OptionArrayOptionOption) FlatMapComplex128(f func(Float64OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64OptionArrayOptionOption) FlatMapAny(f func(Float64OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapBool(f func(Complex64OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapString(f func(Complex64OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapInt(f func(Complex64OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapInt8(f func(Complex64OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapInt16(f func(Complex64OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapInt32(f func(Complex64OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapInt64(f func(Complex64OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapUint(f func(Complex64OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapUint8(f func(Complex64OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapUint16(f func(Complex64OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapUint32(f func(Complex64OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapUint64(f func(Complex64OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapUintptr(f func(Complex64OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapByte(f func(Complex64OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapRune(f func(Complex64OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapFloat32(f func(Complex64OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapFloat64(f func(Complex64OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapComplex64(f func(Complex64OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapComplex128(f func(Complex64OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64OptionArrayOptionOption) FlatMapAny(f func(Complex64OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapBool(f func(Complex128OptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapString(f func(Complex128OptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapInt(f func(Complex128OptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapInt8(f func(Complex128OptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapInt16(f func(Complex128OptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapInt32(f func(Complex128OptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapInt64(f func(Complex128OptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapUint(f func(Complex128OptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapUint8(f func(Complex128OptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapUint16(f func(Complex128OptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapUint32(f func(Complex128OptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapUint64(f func(Complex128OptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapUintptr(f func(Complex128OptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapByte(f func(Complex128OptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapRune(f func(Complex128OptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapFloat32(f func(Complex128OptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapFloat64(f func(Complex128OptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapComplex64(f func(Complex128OptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapComplex128(f func(Complex128OptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128OptionArrayOptionOption) FlatMapAny(f func(Complex128OptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyOptionArrayOptionOption) FlatMapBool(f func(AnyOptionArrayOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyOptionArrayOptionOption) FlatMapString(f func(AnyOptionArrayOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyOptionArrayOptionOption) FlatMapInt(f func(AnyOptionArrayOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyOptionArrayOptionOption) FlatMapInt8(f func(AnyOptionArrayOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyOptionArrayOptionOption) FlatMapInt16(f func(AnyOptionArrayOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyOptionArrayOptionOption) FlatMapInt32(f func(AnyOptionArrayOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyOptionArrayOptionOption) FlatMapInt64(f func(AnyOptionArrayOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyOptionArrayOptionOption) FlatMapUint(f func(AnyOptionArrayOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyOptionArrayOptionOption) FlatMapUint8(f func(AnyOptionArrayOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyOptionArrayOptionOption) FlatMapUint16(f func(AnyOptionArrayOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyOptionArrayOptionOption) FlatMapUint32(f func(AnyOptionArrayOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyOptionArrayOptionOption) FlatMapUint64(f func(AnyOptionArrayOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyOptionArrayOptionOption) FlatMapUintptr(f func(AnyOptionArrayOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyOptionArrayOptionOption) FlatMapByte(f func(AnyOptionArrayOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyOptionArrayOptionOption) FlatMapRune(f func(AnyOptionArrayOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyOptionArrayOptionOption) FlatMapFloat32(f func(AnyOptionArrayOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyOptionArrayOptionOption) FlatMapFloat64(f func(AnyOptionArrayOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyOptionArrayOptionOption) FlatMapComplex64(f func(AnyOptionArrayOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyOptionArrayOptionOption) FlatMapComplex128(f func(AnyOptionArrayOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyOptionArrayOptionOption) FlatMapAny(f func(AnyOptionArrayOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolListOptionOption) FlatMapBool(f func(BoolListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolListOptionOption) FlatMapString(f func(BoolListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolListOptionOption) FlatMapInt(f func(BoolListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolListOptionOption) FlatMapInt8(f func(BoolListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolListOptionOption) FlatMapInt16(f func(BoolListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolListOptionOption) FlatMapInt32(f func(BoolListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolListOptionOption) FlatMapInt64(f func(BoolListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolListOptionOption) FlatMapUint(f func(BoolListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolListOptionOption) FlatMapUint8(f func(BoolListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolListOptionOption) FlatMapUint16(f func(BoolListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolListOptionOption) FlatMapUint32(f func(BoolListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolListOptionOption) FlatMapUint64(f func(BoolListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolListOptionOption) FlatMapUintptr(f func(BoolListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolListOptionOption) FlatMapByte(f func(BoolListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolListOptionOption) FlatMapRune(f func(BoolListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolListOptionOption) FlatMapFloat32(f func(BoolListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolListOptionOption) FlatMapFloat64(f func(BoolListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolListOptionOption) FlatMapComplex64(f func(BoolListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolListOptionOption) FlatMapComplex128(f func(BoolListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolListOptionOption) FlatMapAny(f func(BoolListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringListOptionOption) FlatMapBool(f func(StringListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringListOptionOption) FlatMapString(f func(StringListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringListOptionOption) FlatMapInt(f func(StringListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringListOptionOption) FlatMapInt8(f func(StringListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringListOptionOption) FlatMapInt16(f func(StringListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringListOptionOption) FlatMapInt32(f func(StringListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringListOptionOption) FlatMapInt64(f func(StringListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringListOptionOption) FlatMapUint(f func(StringListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringListOptionOption) FlatMapUint8(f func(StringListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringListOptionOption) FlatMapUint16(f func(StringListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringListOptionOption) FlatMapUint32(f func(StringListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringListOptionOption) FlatMapUint64(f func(StringListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringListOptionOption) FlatMapUintptr(f func(StringListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringListOptionOption) FlatMapByte(f func(StringListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringListOptionOption) FlatMapRune(f func(StringListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringListOptionOption) FlatMapFloat32(f func(StringListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringListOptionOption) FlatMapFloat64(f func(StringListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringListOptionOption) FlatMapComplex64(f func(StringListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringListOptionOption) FlatMapComplex128(f func(StringListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringListOptionOption) FlatMapAny(f func(StringListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntListOptionOption) FlatMapBool(f func(IntListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntListOptionOption) FlatMapString(f func(IntListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntListOptionOption) FlatMapInt(f func(IntListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntListOptionOption) FlatMapInt8(f func(IntListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntListOptionOption) FlatMapInt16(f func(IntListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntListOptionOption) FlatMapInt32(f func(IntListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntListOptionOption) FlatMapInt64(f func(IntListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntListOptionOption) FlatMapUint(f func(IntListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntListOptionOption) FlatMapUint8(f func(IntListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntListOptionOption) FlatMapUint16(f func(IntListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntListOptionOption) FlatMapUint32(f func(IntListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntListOptionOption) FlatMapUint64(f func(IntListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntListOptionOption) FlatMapUintptr(f func(IntListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntListOptionOption) FlatMapByte(f func(IntListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntListOptionOption) FlatMapRune(f func(IntListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntListOptionOption) FlatMapFloat32(f func(IntListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntListOptionOption) FlatMapFloat64(f func(IntListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntListOptionOption) FlatMapComplex64(f func(IntListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntListOptionOption) FlatMapComplex128(f func(IntListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntListOptionOption) FlatMapAny(f func(IntListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ListOptionOption) FlatMapBool(f func(Int8ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ListOptionOption) FlatMapString(f func(Int8ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ListOptionOption) FlatMapInt(f func(Int8ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ListOptionOption) FlatMapInt8(f func(Int8ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ListOptionOption) FlatMapInt16(f func(Int8ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ListOptionOption) FlatMapInt32(f func(Int8ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ListOptionOption) FlatMapInt64(f func(Int8ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ListOptionOption) FlatMapUint(f func(Int8ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ListOptionOption) FlatMapUint8(f func(Int8ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ListOptionOption) FlatMapUint16(f func(Int8ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ListOptionOption) FlatMapUint32(f func(Int8ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ListOptionOption) FlatMapUint64(f func(Int8ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ListOptionOption) FlatMapUintptr(f func(Int8ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ListOptionOption) FlatMapByte(f func(Int8ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ListOptionOption) FlatMapRune(f func(Int8ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ListOptionOption) FlatMapFloat32(f func(Int8ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ListOptionOption) FlatMapFloat64(f func(Int8ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ListOptionOption) FlatMapComplex64(f func(Int8ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ListOptionOption) FlatMapComplex128(f func(Int8ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ListOptionOption) FlatMapAny(f func(Int8ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ListOptionOption) FlatMapBool(f func(Int16ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ListOptionOption) FlatMapString(f func(Int16ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ListOptionOption) FlatMapInt(f func(Int16ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ListOptionOption) FlatMapInt8(f func(Int16ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ListOptionOption) FlatMapInt16(f func(Int16ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ListOptionOption) FlatMapInt32(f func(Int16ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ListOptionOption) FlatMapInt64(f func(Int16ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ListOptionOption) FlatMapUint(f func(Int16ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ListOptionOption) FlatMapUint8(f func(Int16ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ListOptionOption) FlatMapUint16(f func(Int16ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ListOptionOption) FlatMapUint32(f func(Int16ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ListOptionOption) FlatMapUint64(f func(Int16ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ListOptionOption) FlatMapUintptr(f func(Int16ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ListOptionOption) FlatMapByte(f func(Int16ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ListOptionOption) FlatMapRune(f func(Int16ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ListOptionOption) FlatMapFloat32(f func(Int16ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ListOptionOption) FlatMapFloat64(f func(Int16ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ListOptionOption) FlatMapComplex64(f func(Int16ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ListOptionOption) FlatMapComplex128(f func(Int16ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ListOptionOption) FlatMapAny(f func(Int16ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ListOptionOption) FlatMapBool(f func(Int32ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ListOptionOption) FlatMapString(f func(Int32ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ListOptionOption) FlatMapInt(f func(Int32ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ListOptionOption) FlatMapInt8(f func(Int32ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ListOptionOption) FlatMapInt16(f func(Int32ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ListOptionOption) FlatMapInt32(f func(Int32ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ListOptionOption) FlatMapInt64(f func(Int32ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ListOptionOption) FlatMapUint(f func(Int32ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ListOptionOption) FlatMapUint8(f func(Int32ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ListOptionOption) FlatMapUint16(f func(Int32ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ListOptionOption) FlatMapUint32(f func(Int32ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ListOptionOption) FlatMapUint64(f func(Int32ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ListOptionOption) FlatMapUintptr(f func(Int32ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ListOptionOption) FlatMapByte(f func(Int32ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ListOptionOption) FlatMapRune(f func(Int32ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ListOptionOption) FlatMapFloat32(f func(Int32ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ListOptionOption) FlatMapFloat64(f func(Int32ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ListOptionOption) FlatMapComplex64(f func(Int32ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ListOptionOption) FlatMapComplex128(f func(Int32ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ListOptionOption) FlatMapAny(f func(Int32ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ListOptionOption) FlatMapBool(f func(Int64ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ListOptionOption) FlatMapString(f func(Int64ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ListOptionOption) FlatMapInt(f func(Int64ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ListOptionOption) FlatMapInt8(f func(Int64ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ListOptionOption) FlatMapInt16(f func(Int64ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ListOptionOption) FlatMapInt32(f func(Int64ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ListOptionOption) FlatMapInt64(f func(Int64ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ListOptionOption) FlatMapUint(f func(Int64ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ListOptionOption) FlatMapUint8(f func(Int64ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ListOptionOption) FlatMapUint16(f func(Int64ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ListOptionOption) FlatMapUint32(f func(Int64ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ListOptionOption) FlatMapUint64(f func(Int64ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ListOptionOption) FlatMapUintptr(f func(Int64ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ListOptionOption) FlatMapByte(f func(Int64ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ListOptionOption) FlatMapRune(f func(Int64ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ListOptionOption) FlatMapFloat32(f func(Int64ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ListOptionOption) FlatMapFloat64(f func(Int64ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ListOptionOption) FlatMapComplex64(f func(Int64ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ListOptionOption) FlatMapComplex128(f func(Int64ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ListOptionOption) FlatMapAny(f func(Int64ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintListOptionOption) FlatMapBool(f func(UintListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintListOptionOption) FlatMapString(f func(UintListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintListOptionOption) FlatMapInt(f func(UintListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintListOptionOption) FlatMapInt8(f func(UintListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintListOptionOption) FlatMapInt16(f func(UintListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintListOptionOption) FlatMapInt32(f func(UintListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintListOptionOption) FlatMapInt64(f func(UintListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintListOptionOption) FlatMapUint(f func(UintListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintListOptionOption) FlatMapUint8(f func(UintListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintListOptionOption) FlatMapUint16(f func(UintListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintListOptionOption) FlatMapUint32(f func(UintListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintListOptionOption) FlatMapUint64(f func(UintListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintListOptionOption) FlatMapUintptr(f func(UintListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintListOptionOption) FlatMapByte(f func(UintListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintListOptionOption) FlatMapRune(f func(UintListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintListOptionOption) FlatMapFloat32(f func(UintListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintListOptionOption) FlatMapFloat64(f func(UintListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintListOptionOption) FlatMapComplex64(f func(UintListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintListOptionOption) FlatMapComplex128(f func(UintListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintListOptionOption) FlatMapAny(f func(UintListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ListOptionOption) FlatMapBool(f func(Uint8ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ListOptionOption) FlatMapString(f func(Uint8ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ListOptionOption) FlatMapInt(f func(Uint8ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ListOptionOption) FlatMapInt8(f func(Uint8ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ListOptionOption) FlatMapInt16(f func(Uint8ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ListOptionOption) FlatMapInt32(f func(Uint8ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ListOptionOption) FlatMapInt64(f func(Uint8ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ListOptionOption) FlatMapUint(f func(Uint8ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ListOptionOption) FlatMapUint8(f func(Uint8ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ListOptionOption) FlatMapUint16(f func(Uint8ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ListOptionOption) FlatMapUint32(f func(Uint8ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ListOptionOption) FlatMapUint64(f func(Uint8ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ListOptionOption) FlatMapUintptr(f func(Uint8ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ListOptionOption) FlatMapByte(f func(Uint8ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ListOptionOption) FlatMapRune(f func(Uint8ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ListOptionOption) FlatMapFloat32(f func(Uint8ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ListOptionOption) FlatMapFloat64(f func(Uint8ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ListOptionOption) FlatMapComplex64(f func(Uint8ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ListOptionOption) FlatMapComplex128(f func(Uint8ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ListOptionOption) FlatMapAny(f func(Uint8ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ListOptionOption) FlatMapBool(f func(Uint16ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ListOptionOption) FlatMapString(f func(Uint16ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ListOptionOption) FlatMapInt(f func(Uint16ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ListOptionOption) FlatMapInt8(f func(Uint16ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ListOptionOption) FlatMapInt16(f func(Uint16ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ListOptionOption) FlatMapInt32(f func(Uint16ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ListOptionOption) FlatMapInt64(f func(Uint16ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ListOptionOption) FlatMapUint(f func(Uint16ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ListOptionOption) FlatMapUint8(f func(Uint16ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ListOptionOption) FlatMapUint16(f func(Uint16ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ListOptionOption) FlatMapUint32(f func(Uint16ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ListOptionOption) FlatMapUint64(f func(Uint16ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ListOptionOption) FlatMapUintptr(f func(Uint16ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ListOptionOption) FlatMapByte(f func(Uint16ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ListOptionOption) FlatMapRune(f func(Uint16ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ListOptionOption) FlatMapFloat32(f func(Uint16ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ListOptionOption) FlatMapFloat64(f func(Uint16ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ListOptionOption) FlatMapComplex64(f func(Uint16ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ListOptionOption) FlatMapComplex128(f func(Uint16ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ListOptionOption) FlatMapAny(f func(Uint16ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ListOptionOption) FlatMapBool(f func(Uint32ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ListOptionOption) FlatMapString(f func(Uint32ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ListOptionOption) FlatMapInt(f func(Uint32ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ListOptionOption) FlatMapInt8(f func(Uint32ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ListOptionOption) FlatMapInt16(f func(Uint32ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ListOptionOption) FlatMapInt32(f func(Uint32ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ListOptionOption) FlatMapInt64(f func(Uint32ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ListOptionOption) FlatMapUint(f func(Uint32ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ListOptionOption) FlatMapUint8(f func(Uint32ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ListOptionOption) FlatMapUint16(f func(Uint32ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ListOptionOption) FlatMapUint32(f func(Uint32ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ListOptionOption) FlatMapUint64(f func(Uint32ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ListOptionOption) FlatMapUintptr(f func(Uint32ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ListOptionOption) FlatMapByte(f func(Uint32ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ListOptionOption) FlatMapRune(f func(Uint32ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ListOptionOption) FlatMapFloat32(f func(Uint32ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ListOptionOption) FlatMapFloat64(f func(Uint32ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ListOptionOption) FlatMapComplex64(f func(Uint32ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ListOptionOption) FlatMapComplex128(f func(Uint32ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ListOptionOption) FlatMapAny(f func(Uint32ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ListOptionOption) FlatMapBool(f func(Uint64ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ListOptionOption) FlatMapString(f func(Uint64ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ListOptionOption) FlatMapInt(f func(Uint64ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ListOptionOption) FlatMapInt8(f func(Uint64ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ListOptionOption) FlatMapInt16(f func(Uint64ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ListOptionOption) FlatMapInt32(f func(Uint64ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ListOptionOption) FlatMapInt64(f func(Uint64ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ListOptionOption) FlatMapUint(f func(Uint64ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ListOptionOption) FlatMapUint8(f func(Uint64ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ListOptionOption) FlatMapUint16(f func(Uint64ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ListOptionOption) FlatMapUint32(f func(Uint64ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ListOptionOption) FlatMapUint64(f func(Uint64ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ListOptionOption) FlatMapUintptr(f func(Uint64ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ListOptionOption) FlatMapByte(f func(Uint64ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ListOptionOption) FlatMapRune(f func(Uint64ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ListOptionOption) FlatMapFloat32(f func(Uint64ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ListOptionOption) FlatMapFloat64(f func(Uint64ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ListOptionOption) FlatMapComplex64(f func(Uint64ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ListOptionOption) FlatMapComplex128(f func(Uint64ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ListOptionOption) FlatMapAny(f func(Uint64ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrListOptionOption) FlatMapBool(f func(UintptrListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrListOptionOption) FlatMapString(f func(UintptrListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrListOptionOption) FlatMapInt(f func(UintptrListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrListOptionOption) FlatMapInt8(f func(UintptrListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrListOptionOption) FlatMapInt16(f func(UintptrListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrListOptionOption) FlatMapInt32(f func(UintptrListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrListOptionOption) FlatMapInt64(f func(UintptrListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrListOptionOption) FlatMapUint(f func(UintptrListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrListOptionOption) FlatMapUint8(f func(UintptrListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrListOptionOption) FlatMapUint16(f func(UintptrListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrListOptionOption) FlatMapUint32(f func(UintptrListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrListOptionOption) FlatMapUint64(f func(UintptrListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrListOptionOption) FlatMapUintptr(f func(UintptrListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrListOptionOption) FlatMapByte(f func(UintptrListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrListOptionOption) FlatMapRune(f func(UintptrListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrListOptionOption) FlatMapFloat32(f func(UintptrListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrListOptionOption) FlatMapFloat64(f func(UintptrListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrListOptionOption) FlatMapComplex64(f func(UintptrListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrListOptionOption) FlatMapComplex128(f func(UintptrListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrListOptionOption) FlatMapAny(f func(UintptrListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteListOptionOption) FlatMapBool(f func(ByteListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteListOptionOption) FlatMapString(f func(ByteListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteListOptionOption) FlatMapInt(f func(ByteListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteListOptionOption) FlatMapInt8(f func(ByteListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteListOptionOption) FlatMapInt16(f func(ByteListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteListOptionOption) FlatMapInt32(f func(ByteListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteListOptionOption) FlatMapInt64(f func(ByteListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteListOptionOption) FlatMapUint(f func(ByteListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteListOptionOption) FlatMapUint8(f func(ByteListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteListOptionOption) FlatMapUint16(f func(ByteListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteListOptionOption) FlatMapUint32(f func(ByteListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteListOptionOption) FlatMapUint64(f func(ByteListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteListOptionOption) FlatMapUintptr(f func(ByteListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteListOptionOption) FlatMapByte(f func(ByteListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteListOptionOption) FlatMapRune(f func(ByteListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteListOptionOption) FlatMapFloat32(f func(ByteListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteListOptionOption) FlatMapFloat64(f func(ByteListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteListOptionOption) FlatMapComplex64(f func(ByteListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteListOptionOption) FlatMapComplex128(f func(ByteListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteListOptionOption) FlatMapAny(f func(ByteListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneListOptionOption) FlatMapBool(f func(RuneListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneListOptionOption) FlatMapString(f func(RuneListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneListOptionOption) FlatMapInt(f func(RuneListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneListOptionOption) FlatMapInt8(f func(RuneListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneListOptionOption) FlatMapInt16(f func(RuneListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneListOptionOption) FlatMapInt32(f func(RuneListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneListOptionOption) FlatMapInt64(f func(RuneListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneListOptionOption) FlatMapUint(f func(RuneListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneListOptionOption) FlatMapUint8(f func(RuneListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneListOptionOption) FlatMapUint16(f func(RuneListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneListOptionOption) FlatMapUint32(f func(RuneListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneListOptionOption) FlatMapUint64(f func(RuneListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneListOptionOption) FlatMapUintptr(f func(RuneListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneListOptionOption) FlatMapByte(f func(RuneListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneListOptionOption) FlatMapRune(f func(RuneListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneListOptionOption) FlatMapFloat32(f func(RuneListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneListOptionOption) FlatMapFloat64(f func(RuneListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneListOptionOption) FlatMapComplex64(f func(RuneListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneListOptionOption) FlatMapComplex128(f func(RuneListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneListOptionOption) FlatMapAny(f func(RuneListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ListOptionOption) FlatMapBool(f func(Float32ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ListOptionOption) FlatMapString(f func(Float32ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ListOptionOption) FlatMapInt(f func(Float32ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ListOptionOption) FlatMapInt8(f func(Float32ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ListOptionOption) FlatMapInt16(f func(Float32ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ListOptionOption) FlatMapInt32(f func(Float32ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ListOptionOption) FlatMapInt64(f func(Float32ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ListOptionOption) FlatMapUint(f func(Float32ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ListOptionOption) FlatMapUint8(f func(Float32ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ListOptionOption) FlatMapUint16(f func(Float32ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ListOptionOption) FlatMapUint32(f func(Float32ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ListOptionOption) FlatMapUint64(f func(Float32ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ListOptionOption) FlatMapUintptr(f func(Float32ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ListOptionOption) FlatMapByte(f func(Float32ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ListOptionOption) FlatMapRune(f func(Float32ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ListOptionOption) FlatMapFloat32(f func(Float32ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ListOptionOption) FlatMapFloat64(f func(Float32ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ListOptionOption) FlatMapComplex64(f func(Float32ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ListOptionOption) FlatMapComplex128(f func(Float32ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ListOptionOption) FlatMapAny(f func(Float32ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ListOptionOption) FlatMapBool(f func(Float64ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ListOptionOption) FlatMapString(f func(Float64ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ListOptionOption) FlatMapInt(f func(Float64ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ListOptionOption) FlatMapInt8(f func(Float64ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ListOptionOption) FlatMapInt16(f func(Float64ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ListOptionOption) FlatMapInt32(f func(Float64ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ListOptionOption) FlatMapInt64(f func(Float64ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ListOptionOption) FlatMapUint(f func(Float64ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ListOptionOption) FlatMapUint8(f func(Float64ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ListOptionOption) FlatMapUint16(f func(Float64ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ListOptionOption) FlatMapUint32(f func(Float64ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ListOptionOption) FlatMapUint64(f func(Float64ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ListOptionOption) FlatMapUintptr(f func(Float64ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ListOptionOption) FlatMapByte(f func(Float64ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ListOptionOption) FlatMapRune(f func(Float64ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ListOptionOption) FlatMapFloat32(f func(Float64ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ListOptionOption) FlatMapFloat64(f func(Float64ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ListOptionOption) FlatMapComplex64(f func(Float64ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ListOptionOption) FlatMapComplex128(f func(Float64ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ListOptionOption) FlatMapAny(f func(Float64ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ListOptionOption) FlatMapBool(f func(Complex64ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ListOptionOption) FlatMapString(f func(Complex64ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ListOptionOption) FlatMapInt(f func(Complex64ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ListOptionOption) FlatMapInt8(f func(Complex64ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ListOptionOption) FlatMapInt16(f func(Complex64ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ListOptionOption) FlatMapInt32(f func(Complex64ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ListOptionOption) FlatMapInt64(f func(Complex64ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ListOptionOption) FlatMapUint(f func(Complex64ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ListOptionOption) FlatMapUint8(f func(Complex64ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ListOptionOption) FlatMapUint16(f func(Complex64ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ListOptionOption) FlatMapUint32(f func(Complex64ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ListOptionOption) FlatMapUint64(f func(Complex64ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ListOptionOption) FlatMapUintptr(f func(Complex64ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ListOptionOption) FlatMapByte(f func(Complex64ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ListOptionOption) FlatMapRune(f func(Complex64ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ListOptionOption) FlatMapFloat32(f func(Complex64ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ListOptionOption) FlatMapFloat64(f func(Complex64ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ListOptionOption) FlatMapComplex64(f func(Complex64ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ListOptionOption) FlatMapComplex128(f func(Complex64ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ListOptionOption) FlatMapAny(f func(Complex64ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ListOptionOption) FlatMapBool(f func(Complex128ListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ListOptionOption) FlatMapString(f func(Complex128ListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ListOptionOption) FlatMapInt(f func(Complex128ListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ListOptionOption) FlatMapInt8(f func(Complex128ListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ListOptionOption) FlatMapInt16(f func(Complex128ListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ListOptionOption) FlatMapInt32(f func(Complex128ListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ListOptionOption) FlatMapInt64(f func(Complex128ListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ListOptionOption) FlatMapUint(f func(Complex128ListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ListOptionOption) FlatMapUint8(f func(Complex128ListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ListOptionOption) FlatMapUint16(f func(Complex128ListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ListOptionOption) FlatMapUint32(f func(Complex128ListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ListOptionOption) FlatMapUint64(f func(Complex128ListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ListOptionOption) FlatMapUintptr(f func(Complex128ListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ListOptionOption) FlatMapByte(f func(Complex128ListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ListOptionOption) FlatMapRune(f func(Complex128ListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ListOptionOption) FlatMapFloat32(f func(Complex128ListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ListOptionOption) FlatMapFloat64(f func(Complex128ListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ListOptionOption) FlatMapComplex64(f func(Complex128ListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ListOptionOption) FlatMapComplex128(f func(Complex128ListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ListOptionOption) FlatMapAny(f func(Complex128ListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyListOptionOption) FlatMapBool(f func(AnyListOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyListOptionOption) FlatMapString(f func(AnyListOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyListOptionOption) FlatMapInt(f func(AnyListOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyListOptionOption) FlatMapInt8(f func(AnyListOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyListOptionOption) FlatMapInt16(f func(AnyListOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyListOptionOption) FlatMapInt32(f func(AnyListOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyListOptionOption) FlatMapInt64(f func(AnyListOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyListOptionOption) FlatMapUint(f func(AnyListOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyListOptionOption) FlatMapUint8(f func(AnyListOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyListOptionOption) FlatMapUint16(f func(AnyListOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyListOptionOption) FlatMapUint32(f func(AnyListOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyListOptionOption) FlatMapUint64(f func(AnyListOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyListOptionOption) FlatMapUintptr(f func(AnyListOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyListOptionOption) FlatMapByte(f func(AnyListOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyListOptionOption) FlatMapRune(f func(AnyListOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyListOptionOption) FlatMapFloat32(f func(AnyListOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyListOptionOption) FlatMapFloat64(f func(AnyListOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyListOptionOption) FlatMapComplex64(f func(AnyListOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyListOptionOption) FlatMapComplex128(f func(AnyListOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyListOptionOption) FlatMapAny(f func(AnyListOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolOptionOptionOption) FlatMapBool(f func(BoolOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolOptionOptionOption) FlatMapString(f func(BoolOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolOptionOptionOption) FlatMapInt(f func(BoolOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolOptionOptionOption) FlatMapInt8(f func(BoolOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolOptionOptionOption) FlatMapInt16(f func(BoolOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolOptionOptionOption) FlatMapInt32(f func(BoolOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolOptionOptionOption) FlatMapInt64(f func(BoolOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolOptionOptionOption) FlatMapUint(f func(BoolOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolOptionOptionOption) FlatMapUint8(f func(BoolOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolOptionOptionOption) FlatMapUint16(f func(BoolOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolOptionOptionOption) FlatMapUint32(f func(BoolOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolOptionOptionOption) FlatMapUint64(f func(BoolOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolOptionOptionOption) FlatMapUintptr(f func(BoolOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolOptionOptionOption) FlatMapByte(f func(BoolOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolOptionOptionOption) FlatMapRune(f func(BoolOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolOptionOptionOption) FlatMapFloat32(f func(BoolOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolOptionOptionOption) FlatMapFloat64(f func(BoolOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolOptionOptionOption) FlatMapComplex64(f func(BoolOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolOptionOptionOption) FlatMapComplex128(f func(BoolOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolOptionOptionOption) FlatMapAny(f func(BoolOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringOptionOptionOption) FlatMapBool(f func(StringOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringOptionOptionOption) FlatMapString(f func(StringOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringOptionOptionOption) FlatMapInt(f func(StringOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringOptionOptionOption) FlatMapInt8(f func(StringOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringOptionOptionOption) FlatMapInt16(f func(StringOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringOptionOptionOption) FlatMapInt32(f func(StringOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringOptionOptionOption) FlatMapInt64(f func(StringOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringOptionOptionOption) FlatMapUint(f func(StringOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringOptionOptionOption) FlatMapUint8(f func(StringOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringOptionOptionOption) FlatMapUint16(f func(StringOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringOptionOptionOption) FlatMapUint32(f func(StringOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringOptionOptionOption) FlatMapUint64(f func(StringOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringOptionOptionOption) FlatMapUintptr(f func(StringOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringOptionOptionOption) FlatMapByte(f func(StringOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringOptionOptionOption) FlatMapRune(f func(StringOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringOptionOptionOption) FlatMapFloat32(f func(StringOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringOptionOptionOption) FlatMapFloat64(f func(StringOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringOptionOptionOption) FlatMapComplex64(f func(StringOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringOptionOptionOption) FlatMapComplex128(f func(StringOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringOptionOptionOption) FlatMapAny(f func(StringOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntOptionOptionOption) FlatMapBool(f func(IntOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntOptionOptionOption) FlatMapString(f func(IntOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntOptionOptionOption) FlatMapInt(f func(IntOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntOptionOptionOption) FlatMapInt8(f func(IntOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntOptionOptionOption) FlatMapInt16(f func(IntOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntOptionOptionOption) FlatMapInt32(f func(IntOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntOptionOptionOption) FlatMapInt64(f func(IntOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntOptionOptionOption) FlatMapUint(f func(IntOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntOptionOptionOption) FlatMapUint8(f func(IntOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntOptionOptionOption) FlatMapUint16(f func(IntOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntOptionOptionOption) FlatMapUint32(f func(IntOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntOptionOptionOption) FlatMapUint64(f func(IntOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntOptionOptionOption) FlatMapUintptr(f func(IntOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntOptionOptionOption) FlatMapByte(f func(IntOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntOptionOptionOption) FlatMapRune(f func(IntOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntOptionOptionOption) FlatMapFloat32(f func(IntOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntOptionOptionOption) FlatMapFloat64(f func(IntOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntOptionOptionOption) FlatMapComplex64(f func(IntOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntOptionOptionOption) FlatMapComplex128(f func(IntOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntOptionOptionOption) FlatMapAny(f func(IntOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8OptionOptionOption) FlatMapBool(f func(Int8OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8OptionOptionOption) FlatMapString(f func(Int8OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8OptionOptionOption) FlatMapInt(f func(Int8OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8OptionOptionOption) FlatMapInt8(f func(Int8OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8OptionOptionOption) FlatMapInt16(f func(Int8OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8OptionOptionOption) FlatMapInt32(f func(Int8OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8OptionOptionOption) FlatMapInt64(f func(Int8OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8OptionOptionOption) FlatMapUint(f func(Int8OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8OptionOptionOption) FlatMapUint8(f func(Int8OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8OptionOptionOption) FlatMapUint16(f func(Int8OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8OptionOptionOption) FlatMapUint32(f func(Int8OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8OptionOptionOption) FlatMapUint64(f func(Int8OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8OptionOptionOption) FlatMapUintptr(f func(Int8OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8OptionOptionOption) FlatMapByte(f func(Int8OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8OptionOptionOption) FlatMapRune(f func(Int8OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8OptionOptionOption) FlatMapFloat32(f func(Int8OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8OptionOptionOption) FlatMapFloat64(f func(Int8OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8OptionOptionOption) FlatMapComplex64(f func(Int8OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8OptionOptionOption) FlatMapComplex128(f func(Int8OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8OptionOptionOption) FlatMapAny(f func(Int8OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16OptionOptionOption) FlatMapBool(f func(Int16OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16OptionOptionOption) FlatMapString(f func(Int16OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16OptionOptionOption) FlatMapInt(f func(Int16OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16OptionOptionOption) FlatMapInt8(f func(Int16OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16OptionOptionOption) FlatMapInt16(f func(Int16OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16OptionOptionOption) FlatMapInt32(f func(Int16OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16OptionOptionOption) FlatMapInt64(f func(Int16OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16OptionOptionOption) FlatMapUint(f func(Int16OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16OptionOptionOption) FlatMapUint8(f func(Int16OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16OptionOptionOption) FlatMapUint16(f func(Int16OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16OptionOptionOption) FlatMapUint32(f func(Int16OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16OptionOptionOption) FlatMapUint64(f func(Int16OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16OptionOptionOption) FlatMapUintptr(f func(Int16OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16OptionOptionOption) FlatMapByte(f func(Int16OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16OptionOptionOption) FlatMapRune(f func(Int16OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16OptionOptionOption) FlatMapFloat32(f func(Int16OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16OptionOptionOption) FlatMapFloat64(f func(Int16OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16OptionOptionOption) FlatMapComplex64(f func(Int16OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16OptionOptionOption) FlatMapComplex128(f func(Int16OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16OptionOptionOption) FlatMapAny(f func(Int16OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32OptionOptionOption) FlatMapBool(f func(Int32OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32OptionOptionOption) FlatMapString(f func(Int32OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32OptionOptionOption) FlatMapInt(f func(Int32OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32OptionOptionOption) FlatMapInt8(f func(Int32OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32OptionOptionOption) FlatMapInt16(f func(Int32OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32OptionOptionOption) FlatMapInt32(f func(Int32OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32OptionOptionOption) FlatMapInt64(f func(Int32OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32OptionOptionOption) FlatMapUint(f func(Int32OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32OptionOptionOption) FlatMapUint8(f func(Int32OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32OptionOptionOption) FlatMapUint16(f func(Int32OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32OptionOptionOption) FlatMapUint32(f func(Int32OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32OptionOptionOption) FlatMapUint64(f func(Int32OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32OptionOptionOption) FlatMapUintptr(f func(Int32OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32OptionOptionOption) FlatMapByte(f func(Int32OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32OptionOptionOption) FlatMapRune(f func(Int32OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32OptionOptionOption) FlatMapFloat32(f func(Int32OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32OptionOptionOption) FlatMapFloat64(f func(Int32OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32OptionOptionOption) FlatMapComplex64(f func(Int32OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32OptionOptionOption) FlatMapComplex128(f func(Int32OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32OptionOptionOption) FlatMapAny(f func(Int32OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64OptionOptionOption) FlatMapBool(f func(Int64OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64OptionOptionOption) FlatMapString(f func(Int64OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64OptionOptionOption) FlatMapInt(f func(Int64OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64OptionOptionOption) FlatMapInt8(f func(Int64OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64OptionOptionOption) FlatMapInt16(f func(Int64OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64OptionOptionOption) FlatMapInt32(f func(Int64OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64OptionOptionOption) FlatMapInt64(f func(Int64OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64OptionOptionOption) FlatMapUint(f func(Int64OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64OptionOptionOption) FlatMapUint8(f func(Int64OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64OptionOptionOption) FlatMapUint16(f func(Int64OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64OptionOptionOption) FlatMapUint32(f func(Int64OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64OptionOptionOption) FlatMapUint64(f func(Int64OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64OptionOptionOption) FlatMapUintptr(f func(Int64OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64OptionOptionOption) FlatMapByte(f func(Int64OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64OptionOptionOption) FlatMapRune(f func(Int64OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64OptionOptionOption) FlatMapFloat32(f func(Int64OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64OptionOptionOption) FlatMapFloat64(f func(Int64OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64OptionOptionOption) FlatMapComplex64(f func(Int64OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64OptionOptionOption) FlatMapComplex128(f func(Int64OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64OptionOptionOption) FlatMapAny(f func(Int64OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintOptionOptionOption) FlatMapBool(f func(UintOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintOptionOptionOption) FlatMapString(f func(UintOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintOptionOptionOption) FlatMapInt(f func(UintOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintOptionOptionOption) FlatMapInt8(f func(UintOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintOptionOptionOption) FlatMapInt16(f func(UintOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintOptionOptionOption) FlatMapInt32(f func(UintOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintOptionOptionOption) FlatMapInt64(f func(UintOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintOptionOptionOption) FlatMapUint(f func(UintOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintOptionOptionOption) FlatMapUint8(f func(UintOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintOptionOptionOption) FlatMapUint16(f func(UintOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintOptionOptionOption) FlatMapUint32(f func(UintOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintOptionOptionOption) FlatMapUint64(f func(UintOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintOptionOptionOption) FlatMapUintptr(f func(UintOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintOptionOptionOption) FlatMapByte(f func(UintOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintOptionOptionOption) FlatMapRune(f func(UintOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintOptionOptionOption) FlatMapFloat32(f func(UintOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintOptionOptionOption) FlatMapFloat64(f func(UintOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintOptionOptionOption) FlatMapComplex64(f func(UintOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintOptionOptionOption) FlatMapComplex128(f func(UintOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintOptionOptionOption) FlatMapAny(f func(UintOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8OptionOptionOption) FlatMapBool(f func(Uint8OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8OptionOptionOption) FlatMapString(f func(Uint8OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8OptionOptionOption) FlatMapInt(f func(Uint8OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8OptionOptionOption) FlatMapInt8(f func(Uint8OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8OptionOptionOption) FlatMapInt16(f func(Uint8OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8OptionOptionOption) FlatMapInt32(f func(Uint8OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8OptionOptionOption) FlatMapInt64(f func(Uint8OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8OptionOptionOption) FlatMapUint(f func(Uint8OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8OptionOptionOption) FlatMapUint8(f func(Uint8OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8OptionOptionOption) FlatMapUint16(f func(Uint8OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8OptionOptionOption) FlatMapUint32(f func(Uint8OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8OptionOptionOption) FlatMapUint64(f func(Uint8OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8OptionOptionOption) FlatMapUintptr(f func(Uint8OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8OptionOptionOption) FlatMapByte(f func(Uint8OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8OptionOptionOption) FlatMapRune(f func(Uint8OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8OptionOptionOption) FlatMapFloat32(f func(Uint8OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8OptionOptionOption) FlatMapFloat64(f func(Uint8OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8OptionOptionOption) FlatMapComplex64(f func(Uint8OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8OptionOptionOption) FlatMapComplex128(f func(Uint8OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8OptionOptionOption) FlatMapAny(f func(Uint8OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16OptionOptionOption) FlatMapBool(f func(Uint16OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16OptionOptionOption) FlatMapString(f func(Uint16OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16OptionOptionOption) FlatMapInt(f func(Uint16OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16OptionOptionOption) FlatMapInt8(f func(Uint16OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16OptionOptionOption) FlatMapInt16(f func(Uint16OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16OptionOptionOption) FlatMapInt32(f func(Uint16OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16OptionOptionOption) FlatMapInt64(f func(Uint16OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16OptionOptionOption) FlatMapUint(f func(Uint16OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16OptionOptionOption) FlatMapUint8(f func(Uint16OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16OptionOptionOption) FlatMapUint16(f func(Uint16OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16OptionOptionOption) FlatMapUint32(f func(Uint16OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16OptionOptionOption) FlatMapUint64(f func(Uint16OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16OptionOptionOption) FlatMapUintptr(f func(Uint16OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16OptionOptionOption) FlatMapByte(f func(Uint16OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16OptionOptionOption) FlatMapRune(f func(Uint16OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16OptionOptionOption) FlatMapFloat32(f func(Uint16OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16OptionOptionOption) FlatMapFloat64(f func(Uint16OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16OptionOptionOption) FlatMapComplex64(f func(Uint16OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16OptionOptionOption) FlatMapComplex128(f func(Uint16OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16OptionOptionOption) FlatMapAny(f func(Uint16OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32OptionOptionOption) FlatMapBool(f func(Uint32OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32OptionOptionOption) FlatMapString(f func(Uint32OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32OptionOptionOption) FlatMapInt(f func(Uint32OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32OptionOptionOption) FlatMapInt8(f func(Uint32OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32OptionOptionOption) FlatMapInt16(f func(Uint32OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32OptionOptionOption) FlatMapInt32(f func(Uint32OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32OptionOptionOption) FlatMapInt64(f func(Uint32OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32OptionOptionOption) FlatMapUint(f func(Uint32OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32OptionOptionOption) FlatMapUint8(f func(Uint32OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32OptionOptionOption) FlatMapUint16(f func(Uint32OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32OptionOptionOption) FlatMapUint32(f func(Uint32OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32OptionOptionOption) FlatMapUint64(f func(Uint32OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32OptionOptionOption) FlatMapUintptr(f func(Uint32OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32OptionOptionOption) FlatMapByte(f func(Uint32OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32OptionOptionOption) FlatMapRune(f func(Uint32OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32OptionOptionOption) FlatMapFloat32(f func(Uint32OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32OptionOptionOption) FlatMapFloat64(f func(Uint32OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32OptionOptionOption) FlatMapComplex64(f func(Uint32OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32OptionOptionOption) FlatMapComplex128(f func(Uint32OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32OptionOptionOption) FlatMapAny(f func(Uint32OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64OptionOptionOption) FlatMapBool(f func(Uint64OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64OptionOptionOption) FlatMapString(f func(Uint64OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64OptionOptionOption) FlatMapInt(f func(Uint64OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64OptionOptionOption) FlatMapInt8(f func(Uint64OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64OptionOptionOption) FlatMapInt16(f func(Uint64OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64OptionOptionOption) FlatMapInt32(f func(Uint64OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64OptionOptionOption) FlatMapInt64(f func(Uint64OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64OptionOptionOption) FlatMapUint(f func(Uint64OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64OptionOptionOption) FlatMapUint8(f func(Uint64OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64OptionOptionOption) FlatMapUint16(f func(Uint64OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64OptionOptionOption) FlatMapUint32(f func(Uint64OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64OptionOptionOption) FlatMapUint64(f func(Uint64OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64OptionOptionOption) FlatMapUintptr(f func(Uint64OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64OptionOptionOption) FlatMapByte(f func(Uint64OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64OptionOptionOption) FlatMapRune(f func(Uint64OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64OptionOptionOption) FlatMapFloat32(f func(Uint64OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64OptionOptionOption) FlatMapFloat64(f func(Uint64OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64OptionOptionOption) FlatMapComplex64(f func(Uint64OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64OptionOptionOption) FlatMapComplex128(f func(Uint64OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64OptionOptionOption) FlatMapAny(f func(Uint64OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrOptionOptionOption) FlatMapBool(f func(UintptrOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrOptionOptionOption) FlatMapString(f func(UintptrOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrOptionOptionOption) FlatMapInt(f func(UintptrOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrOptionOptionOption) FlatMapInt8(f func(UintptrOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrOptionOptionOption) FlatMapInt16(f func(UintptrOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrOptionOptionOption) FlatMapInt32(f func(UintptrOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrOptionOptionOption) FlatMapInt64(f func(UintptrOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrOptionOptionOption) FlatMapUint(f func(UintptrOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrOptionOptionOption) FlatMapUint8(f func(UintptrOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrOptionOptionOption) FlatMapUint16(f func(UintptrOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrOptionOptionOption) FlatMapUint32(f func(UintptrOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrOptionOptionOption) FlatMapUint64(f func(UintptrOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrOptionOptionOption) FlatMapUintptr(f func(UintptrOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrOptionOptionOption) FlatMapByte(f func(UintptrOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrOptionOptionOption) FlatMapRune(f func(UintptrOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrOptionOptionOption) FlatMapFloat32(f func(UintptrOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrOptionOptionOption) FlatMapFloat64(f func(UintptrOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrOptionOptionOption) FlatMapComplex64(f func(UintptrOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrOptionOptionOption) FlatMapComplex128(f func(UintptrOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrOptionOptionOption) FlatMapAny(f func(UintptrOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteOptionOptionOption) FlatMapBool(f func(ByteOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteOptionOptionOption) FlatMapString(f func(ByteOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteOptionOptionOption) FlatMapInt(f func(ByteOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteOptionOptionOption) FlatMapInt8(f func(ByteOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteOptionOptionOption) FlatMapInt16(f func(ByteOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteOptionOptionOption) FlatMapInt32(f func(ByteOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteOptionOptionOption) FlatMapInt64(f func(ByteOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteOptionOptionOption) FlatMapUint(f func(ByteOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteOptionOptionOption) FlatMapUint8(f func(ByteOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteOptionOptionOption) FlatMapUint16(f func(ByteOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteOptionOptionOption) FlatMapUint32(f func(ByteOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteOptionOptionOption) FlatMapUint64(f func(ByteOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteOptionOptionOption) FlatMapUintptr(f func(ByteOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteOptionOptionOption) FlatMapByte(f func(ByteOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteOptionOptionOption) FlatMapRune(f func(ByteOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteOptionOptionOption) FlatMapFloat32(f func(ByteOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteOptionOptionOption) FlatMapFloat64(f func(ByteOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteOptionOptionOption) FlatMapComplex64(f func(ByteOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteOptionOptionOption) FlatMapComplex128(f func(ByteOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteOptionOptionOption) FlatMapAny(f func(ByteOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneOptionOptionOption) FlatMapBool(f func(RuneOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneOptionOptionOption) FlatMapString(f func(RuneOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneOptionOptionOption) FlatMapInt(f func(RuneOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneOptionOptionOption) FlatMapInt8(f func(RuneOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneOptionOptionOption) FlatMapInt16(f func(RuneOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneOptionOptionOption) FlatMapInt32(f func(RuneOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneOptionOptionOption) FlatMapInt64(f func(RuneOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneOptionOptionOption) FlatMapUint(f func(RuneOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneOptionOptionOption) FlatMapUint8(f func(RuneOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneOptionOptionOption) FlatMapUint16(f func(RuneOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneOptionOptionOption) FlatMapUint32(f func(RuneOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneOptionOptionOption) FlatMapUint64(f func(RuneOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneOptionOptionOption) FlatMapUintptr(f func(RuneOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneOptionOptionOption) FlatMapByte(f func(RuneOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneOptionOptionOption) FlatMapRune(f func(RuneOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneOptionOptionOption) FlatMapFloat32(f func(RuneOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneOptionOptionOption) FlatMapFloat64(f func(RuneOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneOptionOptionOption) FlatMapComplex64(f func(RuneOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneOptionOptionOption) FlatMapComplex128(f func(RuneOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneOptionOptionOption) FlatMapAny(f func(RuneOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32OptionOptionOption) FlatMapBool(f func(Float32OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32OptionOptionOption) FlatMapString(f func(Float32OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32OptionOptionOption) FlatMapInt(f func(Float32OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32OptionOptionOption) FlatMapInt8(f func(Float32OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32OptionOptionOption) FlatMapInt16(f func(Float32OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32OptionOptionOption) FlatMapInt32(f func(Float32OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32OptionOptionOption) FlatMapInt64(f func(Float32OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32OptionOptionOption) FlatMapUint(f func(Float32OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32OptionOptionOption) FlatMapUint8(f func(Float32OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32OptionOptionOption) FlatMapUint16(f func(Float32OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32OptionOptionOption) FlatMapUint32(f func(Float32OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32OptionOptionOption) FlatMapUint64(f func(Float32OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32OptionOptionOption) FlatMapUintptr(f func(Float32OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32OptionOptionOption) FlatMapByte(f func(Float32OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32OptionOptionOption) FlatMapRune(f func(Float32OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32OptionOptionOption) FlatMapFloat32(f func(Float32OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32OptionOptionOption) FlatMapFloat64(f func(Float32OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32OptionOptionOption) FlatMapComplex64(f func(Float32OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32OptionOptionOption) FlatMapComplex128(f func(Float32OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32OptionOptionOption) FlatMapAny(f func(Float32OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64OptionOptionOption) FlatMapBool(f func(Float64OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64OptionOptionOption) FlatMapString(f func(Float64OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64OptionOptionOption) FlatMapInt(f func(Float64OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64OptionOptionOption) FlatMapInt8(f func(Float64OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64OptionOptionOption) FlatMapInt16(f func(Float64OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64OptionOptionOption) FlatMapInt32(f func(Float64OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64OptionOptionOption) FlatMapInt64(f func(Float64OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64OptionOptionOption) FlatMapUint(f func(Float64OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64OptionOptionOption) FlatMapUint8(f func(Float64OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64OptionOptionOption) FlatMapUint16(f func(Float64OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64OptionOptionOption) FlatMapUint32(f func(Float64OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64OptionOptionOption) FlatMapUint64(f func(Float64OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64OptionOptionOption) FlatMapUintptr(f func(Float64OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64OptionOptionOption) FlatMapByte(f func(Float64OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64OptionOptionOption) FlatMapRune(f func(Float64OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64OptionOptionOption) FlatMapFloat32(f func(Float64OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64OptionOptionOption) FlatMapFloat64(f func(Float64OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64OptionOptionOption) FlatMapComplex64(f func(Float64OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64OptionOptionOption) FlatMapComplex128(f func(Float64OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64OptionOptionOption) FlatMapAny(f func(Float64OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64OptionOptionOption) FlatMapBool(f func(Complex64OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64OptionOptionOption) FlatMapString(f func(Complex64OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64OptionOptionOption) FlatMapInt(f func(Complex64OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64OptionOptionOption) FlatMapInt8(f func(Complex64OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64OptionOptionOption) FlatMapInt16(f func(Complex64OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64OptionOptionOption) FlatMapInt32(f func(Complex64OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64OptionOptionOption) FlatMapInt64(f func(Complex64OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64OptionOptionOption) FlatMapUint(f func(Complex64OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64OptionOptionOption) FlatMapUint8(f func(Complex64OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64OptionOptionOption) FlatMapUint16(f func(Complex64OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64OptionOptionOption) FlatMapUint32(f func(Complex64OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64OptionOptionOption) FlatMapUint64(f func(Complex64OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64OptionOptionOption) FlatMapUintptr(f func(Complex64OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64OptionOptionOption) FlatMapByte(f func(Complex64OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64OptionOptionOption) FlatMapRune(f func(Complex64OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64OptionOptionOption) FlatMapFloat32(f func(Complex64OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64OptionOptionOption) FlatMapFloat64(f func(Complex64OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64OptionOptionOption) FlatMapComplex64(f func(Complex64OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64OptionOptionOption) FlatMapComplex128(f func(Complex64OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64OptionOptionOption) FlatMapAny(f func(Complex64OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128OptionOptionOption) FlatMapBool(f func(Complex128OptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128OptionOptionOption) FlatMapString(f func(Complex128OptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128OptionOptionOption) FlatMapInt(f func(Complex128OptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128OptionOptionOption) FlatMapInt8(f func(Complex128OptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128OptionOptionOption) FlatMapInt16(f func(Complex128OptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128OptionOptionOption) FlatMapInt32(f func(Complex128OptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128OptionOptionOption) FlatMapInt64(f func(Complex128OptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128OptionOptionOption) FlatMapUint(f func(Complex128OptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128OptionOptionOption) FlatMapUint8(f func(Complex128OptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128OptionOptionOption) FlatMapUint16(f func(Complex128OptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128OptionOptionOption) FlatMapUint32(f func(Complex128OptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128OptionOptionOption) FlatMapUint64(f func(Complex128OptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128OptionOptionOption) FlatMapUintptr(f func(Complex128OptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128OptionOptionOption) FlatMapByte(f func(Complex128OptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128OptionOptionOption) FlatMapRune(f func(Complex128OptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128OptionOptionOption) FlatMapFloat32(f func(Complex128OptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128OptionOptionOption) FlatMapFloat64(f func(Complex128OptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128OptionOptionOption) FlatMapComplex64(f func(Complex128OptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128OptionOptionOption) FlatMapComplex128(f func(Complex128OptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128OptionOptionOption) FlatMapAny(f func(Complex128OptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyOptionOptionOption) FlatMapBool(f func(AnyOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyOptionOptionOption) FlatMapString(f func(AnyOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyOptionOptionOption) FlatMapInt(f func(AnyOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyOptionOptionOption) FlatMapInt8(f func(AnyOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyOptionOptionOption) FlatMapInt16(f func(AnyOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyOptionOptionOption) FlatMapInt32(f func(AnyOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyOptionOptionOption) FlatMapInt64(f func(AnyOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyOptionOptionOption) FlatMapUint(f func(AnyOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyOptionOptionOption) FlatMapUint8(f func(AnyOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyOptionOptionOption) FlatMapUint16(f func(AnyOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyOptionOptionOption) FlatMapUint32(f func(AnyOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyOptionOptionOption) FlatMapUint64(f func(AnyOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyOptionOptionOption) FlatMapUintptr(f func(AnyOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyOptionOptionOption) FlatMapByte(f func(AnyOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyOptionOptionOption) FlatMapRune(f func(AnyOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyOptionOptionOption) FlatMapFloat32(f func(AnyOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyOptionOptionOption) FlatMapFloat64(f func(AnyOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyOptionOptionOption) FlatMapComplex64(f func(AnyOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyOptionOptionOption) FlatMapComplex128(f func(AnyOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyOptionOptionOption) FlatMapAny(f func(AnyOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolArrayOptionOptionOption) FlatMapBool(f func(BoolArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolArrayOptionOptionOption) FlatMapString(f func(BoolArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolArrayOptionOptionOption) FlatMapInt(f func(BoolArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolArrayOptionOptionOption) FlatMapInt8(f func(BoolArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolArrayOptionOptionOption) FlatMapInt16(f func(BoolArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolArrayOptionOptionOption) FlatMapInt32(f func(BoolArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolArrayOptionOptionOption) FlatMapInt64(f func(BoolArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolArrayOptionOptionOption) FlatMapUint(f func(BoolArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolArrayOptionOptionOption) FlatMapUint8(f func(BoolArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolArrayOptionOptionOption) FlatMapUint16(f func(BoolArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolArrayOptionOptionOption) FlatMapUint32(f func(BoolArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolArrayOptionOptionOption) FlatMapUint64(f func(BoolArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolArrayOptionOptionOption) FlatMapUintptr(f func(BoolArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayOptionOptionOption) FlatMapByte(f func(BoolArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolArrayOptionOptionOption) FlatMapRune(f func(BoolArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolArrayOptionOptionOption) FlatMapFloat32(f func(BoolArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayOptionOptionOption) FlatMapFloat64(f func(BoolArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayOptionOptionOption) FlatMapComplex64(f func(BoolArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayOptionOptionOption) FlatMapComplex128(f func(BoolArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayOptionOptionOption) FlatMapAny(f func(BoolArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringArrayOptionOptionOption) FlatMapBool(f func(StringArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringArrayOptionOptionOption) FlatMapString(f func(StringArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringArrayOptionOptionOption) FlatMapInt(f func(StringArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringArrayOptionOptionOption) FlatMapInt8(f func(StringArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringArrayOptionOptionOption) FlatMapInt16(f func(StringArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringArrayOptionOptionOption) FlatMapInt32(f func(StringArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringArrayOptionOptionOption) FlatMapInt64(f func(StringArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringArrayOptionOptionOption) FlatMapUint(f func(StringArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringArrayOptionOptionOption) FlatMapUint8(f func(StringArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringArrayOptionOptionOption) FlatMapUint16(f func(StringArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringArrayOptionOptionOption) FlatMapUint32(f func(StringArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringArrayOptionOptionOption) FlatMapUint64(f func(StringArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringArrayOptionOptionOption) FlatMapUintptr(f func(StringArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringArrayOptionOptionOption) FlatMapByte(f func(StringArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringArrayOptionOptionOption) FlatMapRune(f func(StringArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringArrayOptionOptionOption) FlatMapFloat32(f func(StringArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringArrayOptionOptionOption) FlatMapFloat64(f func(StringArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringArrayOptionOptionOption) FlatMapComplex64(f func(StringArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringArrayOptionOptionOption) FlatMapComplex128(f func(StringArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringArrayOptionOptionOption) FlatMapAny(f func(StringArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntArrayOptionOptionOption) FlatMapBool(f func(IntArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntArrayOptionOptionOption) FlatMapString(f func(IntArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntArrayOptionOptionOption) FlatMapInt(f func(IntArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntArrayOptionOptionOption) FlatMapInt8(f func(IntArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntArrayOptionOptionOption) FlatMapInt16(f func(IntArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntArrayOptionOptionOption) FlatMapInt32(f func(IntArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntArrayOptionOptionOption) FlatMapInt64(f func(IntArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntArrayOptionOptionOption) FlatMapUint(f func(IntArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntArrayOptionOptionOption) FlatMapUint8(f func(IntArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntArrayOptionOptionOption) FlatMapUint16(f func(IntArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntArrayOptionOptionOption) FlatMapUint32(f func(IntArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntArrayOptionOptionOption) FlatMapUint64(f func(IntArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntArrayOptionOptionOption) FlatMapUintptr(f func(IntArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntArrayOptionOptionOption) FlatMapByte(f func(IntArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntArrayOptionOptionOption) FlatMapRune(f func(IntArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntArrayOptionOptionOption) FlatMapFloat32(f func(IntArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntArrayOptionOptionOption) FlatMapFloat64(f func(IntArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntArrayOptionOptionOption) FlatMapComplex64(f func(IntArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntArrayOptionOptionOption) FlatMapComplex128(f func(IntArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntArrayOptionOptionOption) FlatMapAny(f func(IntArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapBool(f func(Int8ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapString(f func(Int8ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapInt(f func(Int8ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapInt8(f func(Int8ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapInt16(f func(Int8ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapInt32(f func(Int8ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapInt64(f func(Int8ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapUint(f func(Int8ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapUint8(f func(Int8ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapUint16(f func(Int8ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapUint32(f func(Int8ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapUint64(f func(Int8ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapUintptr(f func(Int8ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapByte(f func(Int8ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapRune(f func(Int8ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapFloat32(f func(Int8ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapFloat64(f func(Int8ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapComplex64(f func(Int8ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapComplex128(f func(Int8ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayOptionOptionOption) FlatMapAny(f func(Int8ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapBool(f func(Int16ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapString(f func(Int16ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapInt(f func(Int16ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapInt8(f func(Int16ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapInt16(f func(Int16ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapInt32(f func(Int16ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapInt64(f func(Int16ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapUint(f func(Int16ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapUint8(f func(Int16ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapUint16(f func(Int16ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapUint32(f func(Int16ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapUint64(f func(Int16ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapUintptr(f func(Int16ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapByte(f func(Int16ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapRune(f func(Int16ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapFloat32(f func(Int16ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapFloat64(f func(Int16ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapComplex64(f func(Int16ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapComplex128(f func(Int16ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayOptionOptionOption) FlatMapAny(f func(Int16ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapBool(f func(Int32ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapString(f func(Int32ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapInt(f func(Int32ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapInt8(f func(Int32ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapInt16(f func(Int32ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapInt32(f func(Int32ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapInt64(f func(Int32ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapUint(f func(Int32ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapUint8(f func(Int32ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapUint16(f func(Int32ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapUint32(f func(Int32ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapUint64(f func(Int32ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapUintptr(f func(Int32ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapByte(f func(Int32ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapRune(f func(Int32ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapFloat32(f func(Int32ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapFloat64(f func(Int32ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapComplex64(f func(Int32ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapComplex128(f func(Int32ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayOptionOptionOption) FlatMapAny(f func(Int32ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapBool(f func(Int64ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapString(f func(Int64ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapInt(f func(Int64ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapInt8(f func(Int64ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapInt16(f func(Int64ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapInt32(f func(Int64ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapInt64(f func(Int64ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapUint(f func(Int64ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapUint8(f func(Int64ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapUint16(f func(Int64ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapUint32(f func(Int64ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapUint64(f func(Int64ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapUintptr(f func(Int64ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapByte(f func(Int64ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapRune(f func(Int64ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapFloat32(f func(Int64ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapFloat64(f func(Int64ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapComplex64(f func(Int64ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapComplex128(f func(Int64ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayOptionOptionOption) FlatMapAny(f func(Int64ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintArrayOptionOptionOption) FlatMapBool(f func(UintArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintArrayOptionOptionOption) FlatMapString(f func(UintArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintArrayOptionOptionOption) FlatMapInt(f func(UintArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintArrayOptionOptionOption) FlatMapInt8(f func(UintArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintArrayOptionOptionOption) FlatMapInt16(f func(UintArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintArrayOptionOptionOption) FlatMapInt32(f func(UintArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintArrayOptionOptionOption) FlatMapInt64(f func(UintArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintArrayOptionOptionOption) FlatMapUint(f func(UintArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintArrayOptionOptionOption) FlatMapUint8(f func(UintArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintArrayOptionOptionOption) FlatMapUint16(f func(UintArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintArrayOptionOptionOption) FlatMapUint32(f func(UintArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintArrayOptionOptionOption) FlatMapUint64(f func(UintArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintArrayOptionOptionOption) FlatMapUintptr(f func(UintArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintArrayOptionOptionOption) FlatMapByte(f func(UintArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintArrayOptionOptionOption) FlatMapRune(f func(UintArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintArrayOptionOptionOption) FlatMapFloat32(f func(UintArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintArrayOptionOptionOption) FlatMapFloat64(f func(UintArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintArrayOptionOptionOption) FlatMapComplex64(f func(UintArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintArrayOptionOptionOption) FlatMapComplex128(f func(UintArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintArrayOptionOptionOption) FlatMapAny(f func(UintArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapBool(f func(Uint8ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapString(f func(Uint8ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapInt(f func(Uint8ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapInt8(f func(Uint8ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapInt16(f func(Uint8ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapInt32(f func(Uint8ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapInt64(f func(Uint8ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapUint(f func(Uint8ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapUint8(f func(Uint8ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapUint16(f func(Uint8ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapUint32(f func(Uint8ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapUint64(f func(Uint8ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapUintptr(f func(Uint8ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapByte(f func(Uint8ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapRune(f func(Uint8ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapFloat32(f func(Uint8ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapFloat64(f func(Uint8ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapComplex64(f func(Uint8ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapComplex128(f func(Uint8ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayOptionOptionOption) FlatMapAny(f func(Uint8ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapBool(f func(Uint16ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapString(f func(Uint16ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapInt(f func(Uint16ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapInt8(f func(Uint16ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapInt16(f func(Uint16ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapInt32(f func(Uint16ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapInt64(f func(Uint16ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapUint(f func(Uint16ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapUint8(f func(Uint16ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapUint16(f func(Uint16ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapUint32(f func(Uint16ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapUint64(f func(Uint16ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapUintptr(f func(Uint16ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapByte(f func(Uint16ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapRune(f func(Uint16ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapFloat32(f func(Uint16ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapFloat64(f func(Uint16ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapComplex64(f func(Uint16ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapComplex128(f func(Uint16ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayOptionOptionOption) FlatMapAny(f func(Uint16ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapBool(f func(Uint32ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapString(f func(Uint32ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapInt(f func(Uint32ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapInt8(f func(Uint32ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapInt16(f func(Uint32ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapInt32(f func(Uint32ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapInt64(f func(Uint32ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapUint(f func(Uint32ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapUint8(f func(Uint32ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapUint16(f func(Uint32ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapUint32(f func(Uint32ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapUint64(f func(Uint32ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapUintptr(f func(Uint32ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapByte(f func(Uint32ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapRune(f func(Uint32ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapFloat32(f func(Uint32ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapFloat64(f func(Uint32ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapComplex64(f func(Uint32ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapComplex128(f func(Uint32ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayOptionOptionOption) FlatMapAny(f func(Uint32ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapBool(f func(Uint64ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapString(f func(Uint64ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapInt(f func(Uint64ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapInt8(f func(Uint64ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapInt16(f func(Uint64ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapInt32(f func(Uint64ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapInt64(f func(Uint64ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapUint(f func(Uint64ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapUint8(f func(Uint64ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapUint16(f func(Uint64ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapUint32(f func(Uint64ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapUint64(f func(Uint64ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapUintptr(f func(Uint64ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapByte(f func(Uint64ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapRune(f func(Uint64ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapFloat32(f func(Uint64ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapFloat64(f func(Uint64ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapComplex64(f func(Uint64ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapComplex128(f func(Uint64ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayOptionOptionOption) FlatMapAny(f func(Uint64ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapBool(f func(UintptrArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapString(f func(UintptrArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapInt(f func(UintptrArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapInt8(f func(UintptrArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapInt16(f func(UintptrArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapInt32(f func(UintptrArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapInt64(f func(UintptrArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapUint(f func(UintptrArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapUint8(f func(UintptrArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapUint16(f func(UintptrArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapUint32(f func(UintptrArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapUint64(f func(UintptrArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapUintptr(f func(UintptrArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapByte(f func(UintptrArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapRune(f func(UintptrArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapFloat32(f func(UintptrArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapFloat64(f func(UintptrArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapComplex64(f func(UintptrArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapComplex128(f func(UintptrArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayOptionOptionOption) FlatMapAny(f func(UintptrArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteArrayOptionOptionOption) FlatMapBool(f func(ByteArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteArrayOptionOptionOption) FlatMapString(f func(ByteArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteArrayOptionOptionOption) FlatMapInt(f func(ByteArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteArrayOptionOptionOption) FlatMapInt8(f func(ByteArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteArrayOptionOptionOption) FlatMapInt16(f func(ByteArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteArrayOptionOptionOption) FlatMapInt32(f func(ByteArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteArrayOptionOptionOption) FlatMapInt64(f func(ByteArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteArrayOptionOptionOption) FlatMapUint(f func(ByteArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteArrayOptionOptionOption) FlatMapUint8(f func(ByteArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteArrayOptionOptionOption) FlatMapUint16(f func(ByteArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteArrayOptionOptionOption) FlatMapUint32(f func(ByteArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteArrayOptionOptionOption) FlatMapUint64(f func(ByteArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteArrayOptionOptionOption) FlatMapUintptr(f func(ByteArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayOptionOptionOption) FlatMapByte(f func(ByteArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteArrayOptionOptionOption) FlatMapRune(f func(ByteArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteArrayOptionOptionOption) FlatMapFloat32(f func(ByteArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayOptionOptionOption) FlatMapFloat64(f func(ByteArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayOptionOptionOption) FlatMapComplex64(f func(ByteArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayOptionOptionOption) FlatMapComplex128(f func(ByteArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayOptionOptionOption) FlatMapAny(f func(ByteArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneArrayOptionOptionOption) FlatMapBool(f func(RuneArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneArrayOptionOptionOption) FlatMapString(f func(RuneArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneArrayOptionOptionOption) FlatMapInt(f func(RuneArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneArrayOptionOptionOption) FlatMapInt8(f func(RuneArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneArrayOptionOptionOption) FlatMapInt16(f func(RuneArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneArrayOptionOptionOption) FlatMapInt32(f func(RuneArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneArrayOptionOptionOption) FlatMapInt64(f func(RuneArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneArrayOptionOptionOption) FlatMapUint(f func(RuneArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneArrayOptionOptionOption) FlatMapUint8(f func(RuneArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneArrayOptionOptionOption) FlatMapUint16(f func(RuneArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneArrayOptionOptionOption) FlatMapUint32(f func(RuneArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneArrayOptionOptionOption) FlatMapUint64(f func(RuneArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneArrayOptionOptionOption) FlatMapUintptr(f func(RuneArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayOptionOptionOption) FlatMapByte(f func(RuneArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneArrayOptionOptionOption) FlatMapRune(f func(RuneArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneArrayOptionOptionOption) FlatMapFloat32(f func(RuneArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayOptionOptionOption) FlatMapFloat64(f func(RuneArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayOptionOptionOption) FlatMapComplex64(f func(RuneArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayOptionOptionOption) FlatMapComplex128(f func(RuneArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayOptionOptionOption) FlatMapAny(f func(RuneArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapBool(f func(Float32ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapString(f func(Float32ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapInt(f func(Float32ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapInt8(f func(Float32ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapInt16(f func(Float32ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapInt32(f func(Float32ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapInt64(f func(Float32ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapUint(f func(Float32ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapUint8(f func(Float32ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapUint16(f func(Float32ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapUint32(f func(Float32ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapUint64(f func(Float32ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapUintptr(f func(Float32ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapByte(f func(Float32ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapRune(f func(Float32ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapFloat32(f func(Float32ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapFloat64(f func(Float32ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapComplex64(f func(Float32ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapComplex128(f func(Float32ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayOptionOptionOption) FlatMapAny(f func(Float32ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapBool(f func(Float64ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapString(f func(Float64ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapInt(f func(Float64ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapInt8(f func(Float64ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapInt16(f func(Float64ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapInt32(f func(Float64ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapInt64(f func(Float64ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapUint(f func(Float64ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapUint8(f func(Float64ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapUint16(f func(Float64ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapUint32(f func(Float64ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapUint64(f func(Float64ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapUintptr(f func(Float64ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapByte(f func(Float64ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapRune(f func(Float64ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapFloat32(f func(Float64ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapFloat64(f func(Float64ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapComplex64(f func(Float64ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapComplex128(f func(Float64ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayOptionOptionOption) FlatMapAny(f func(Float64ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapBool(f func(Complex64ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapString(f func(Complex64ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapInt(f func(Complex64ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapInt8(f func(Complex64ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapInt16(f func(Complex64ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapInt32(f func(Complex64ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapInt64(f func(Complex64ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapUint(f func(Complex64ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapUint8(f func(Complex64ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapUint16(f func(Complex64ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapUint32(f func(Complex64ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapUint64(f func(Complex64ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapUintptr(f func(Complex64ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapByte(f func(Complex64ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapRune(f func(Complex64ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapFloat32(f func(Complex64ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapFloat64(f func(Complex64ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapComplex64(f func(Complex64ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapComplex128(f func(Complex64ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayOptionOptionOption) FlatMapAny(f func(Complex64ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapBool(f func(Complex128ArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapString(f func(Complex128ArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapInt(f func(Complex128ArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapInt8(f func(Complex128ArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapInt16(f func(Complex128ArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapInt32(f func(Complex128ArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapInt64(f func(Complex128ArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapUint(f func(Complex128ArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapUint8(f func(Complex128ArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapUint16(f func(Complex128ArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapUint32(f func(Complex128ArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapUint64(f func(Complex128ArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapUintptr(f func(Complex128ArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapByte(f func(Complex128ArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapRune(f func(Complex128ArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapFloat32(f func(Complex128ArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapFloat64(f func(Complex128ArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapComplex64(f func(Complex128ArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapComplex128(f func(Complex128ArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayOptionOptionOption) FlatMapAny(f func(Complex128ArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyArrayOptionOptionOption) FlatMapBool(f func(AnyArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyArrayOptionOptionOption) FlatMapString(f func(AnyArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyArrayOptionOptionOption) FlatMapInt(f func(AnyArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyArrayOptionOptionOption) FlatMapInt8(f func(AnyArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyArrayOptionOptionOption) FlatMapInt16(f func(AnyArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyArrayOptionOptionOption) FlatMapInt32(f func(AnyArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyArrayOptionOptionOption) FlatMapInt64(f func(AnyArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyArrayOptionOptionOption) FlatMapUint(f func(AnyArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyArrayOptionOptionOption) FlatMapUint8(f func(AnyArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyArrayOptionOptionOption) FlatMapUint16(f func(AnyArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyArrayOptionOptionOption) FlatMapUint32(f func(AnyArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyArrayOptionOptionOption) FlatMapUint64(f func(AnyArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyArrayOptionOptionOption) FlatMapUintptr(f func(AnyArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayOptionOptionOption) FlatMapByte(f func(AnyArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyArrayOptionOptionOption) FlatMapRune(f func(AnyArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyArrayOptionOptionOption) FlatMapFloat32(f func(AnyArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayOptionOptionOption) FlatMapFloat64(f func(AnyArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayOptionOptionOption) FlatMapComplex64(f func(AnyArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayOptionOptionOption) FlatMapComplex128(f func(AnyArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayOptionOptionOption) FlatMapAny(f func(AnyArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapBool(f func(BoolArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapString(f func(BoolArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapInt(f func(BoolArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapInt8(f func(BoolArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapInt16(f func(BoolArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapInt32(f func(BoolArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapInt64(f func(BoolArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapUint(f func(BoolArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapUint8(f func(BoolArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapUint16(f func(BoolArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapUint32(f func(BoolArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapUint64(f func(BoolArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapUintptr(f func(BoolArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapByte(f func(BoolArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapRune(f func(BoolArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapFloat32(f func(BoolArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapFloat64(f func(BoolArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapComplex64(f func(BoolArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapComplex128(f func(BoolArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayArrayOptionOptionOption) FlatMapAny(f func(BoolArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapBool(f func(StringArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapString(f func(StringArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapInt(f func(StringArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapInt8(f func(StringArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapInt16(f func(StringArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapInt32(f func(StringArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapInt64(f func(StringArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapUint(f func(StringArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapUint8(f func(StringArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapUint16(f func(StringArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapUint32(f func(StringArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapUint64(f func(StringArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapUintptr(f func(StringArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapByte(f func(StringArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapRune(f func(StringArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapFloat32(f func(StringArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapFloat64(f func(StringArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapComplex64(f func(StringArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapComplex128(f func(StringArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringArrayArrayOptionOptionOption) FlatMapAny(f func(StringArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapBool(f func(IntArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapString(f func(IntArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapInt(f func(IntArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapInt8(f func(IntArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapInt16(f func(IntArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapInt32(f func(IntArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapInt64(f func(IntArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapUint(f func(IntArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapUint8(f func(IntArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapUint16(f func(IntArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapUint32(f func(IntArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapUint64(f func(IntArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapUintptr(f func(IntArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapByte(f func(IntArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapRune(f func(IntArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapFloat32(f func(IntArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapFloat64(f func(IntArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapComplex64(f func(IntArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapComplex128(f func(IntArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntArrayArrayOptionOptionOption) FlatMapAny(f func(IntArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapBool(f func(Int8ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapString(f func(Int8ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapInt(f func(Int8ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapInt8(f func(Int8ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapInt16(f func(Int8ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapInt32(f func(Int8ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapInt64(f func(Int8ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapUint(f func(Int8ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapUint8(f func(Int8ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapUint16(f func(Int8ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapUint32(f func(Int8ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapUint64(f func(Int8ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Int8ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapByte(f func(Int8ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapRune(f func(Int8ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Int8ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Int8ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Int8ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Int8ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayArrayOptionOptionOption) FlatMapAny(f func(Int8ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapBool(f func(Int16ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapString(f func(Int16ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapInt(f func(Int16ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapInt8(f func(Int16ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapInt16(f func(Int16ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapInt32(f func(Int16ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapInt64(f func(Int16ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapUint(f func(Int16ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapUint8(f func(Int16ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapUint16(f func(Int16ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapUint32(f func(Int16ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapUint64(f func(Int16ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Int16ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapByte(f func(Int16ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapRune(f func(Int16ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Int16ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Int16ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Int16ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Int16ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayArrayOptionOptionOption) FlatMapAny(f func(Int16ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapBool(f func(Int32ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapString(f func(Int32ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapInt(f func(Int32ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapInt8(f func(Int32ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapInt16(f func(Int32ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapInt32(f func(Int32ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapInt64(f func(Int32ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapUint(f func(Int32ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapUint8(f func(Int32ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapUint16(f func(Int32ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapUint32(f func(Int32ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapUint64(f func(Int32ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Int32ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapByte(f func(Int32ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapRune(f func(Int32ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Int32ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Int32ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Int32ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Int32ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayArrayOptionOptionOption) FlatMapAny(f func(Int32ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapBool(f func(Int64ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapString(f func(Int64ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapInt(f func(Int64ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapInt8(f func(Int64ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapInt16(f func(Int64ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapInt32(f func(Int64ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapInt64(f func(Int64ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapUint(f func(Int64ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapUint8(f func(Int64ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapUint16(f func(Int64ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapUint32(f func(Int64ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapUint64(f func(Int64ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Int64ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapByte(f func(Int64ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapRune(f func(Int64ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Int64ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Int64ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Int64ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Int64ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayArrayOptionOptionOption) FlatMapAny(f func(Int64ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapBool(f func(UintArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapString(f func(UintArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapInt(f func(UintArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapInt8(f func(UintArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapInt16(f func(UintArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapInt32(f func(UintArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapInt64(f func(UintArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapUint(f func(UintArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapUint8(f func(UintArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapUint16(f func(UintArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapUint32(f func(UintArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapUint64(f func(UintArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapUintptr(f func(UintArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapByte(f func(UintArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapRune(f func(UintArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapFloat32(f func(UintArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapFloat64(f func(UintArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapComplex64(f func(UintArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapComplex128(f func(UintArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintArrayArrayOptionOptionOption) FlatMapAny(f func(UintArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapBool(f func(Uint8ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapString(f func(Uint8ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapInt(f func(Uint8ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapInt8(f func(Uint8ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapInt16(f func(Uint8ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapInt32(f func(Uint8ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapInt64(f func(Uint8ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapUint(f func(Uint8ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapUint8(f func(Uint8ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapUint16(f func(Uint8ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapUint32(f func(Uint8ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapUint64(f func(Uint8ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Uint8ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapByte(f func(Uint8ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapRune(f func(Uint8ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Uint8ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Uint8ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Uint8ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Uint8ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayArrayOptionOptionOption) FlatMapAny(f func(Uint8ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapBool(f func(Uint16ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapString(f func(Uint16ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapInt(f func(Uint16ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapInt8(f func(Uint16ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapInt16(f func(Uint16ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapInt32(f func(Uint16ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapInt64(f func(Uint16ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapUint(f func(Uint16ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapUint8(f func(Uint16ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapUint16(f func(Uint16ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapUint32(f func(Uint16ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapUint64(f func(Uint16ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Uint16ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapByte(f func(Uint16ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapRune(f func(Uint16ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Uint16ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Uint16ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Uint16ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Uint16ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayArrayOptionOptionOption) FlatMapAny(f func(Uint16ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapBool(f func(Uint32ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapString(f func(Uint32ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapInt(f func(Uint32ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapInt8(f func(Uint32ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapInt16(f func(Uint32ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapInt32(f func(Uint32ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapInt64(f func(Uint32ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapUint(f func(Uint32ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapUint8(f func(Uint32ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapUint16(f func(Uint32ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapUint32(f func(Uint32ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapUint64(f func(Uint32ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Uint32ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapByte(f func(Uint32ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapRune(f func(Uint32ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Uint32ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Uint32ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Uint32ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Uint32ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayArrayOptionOptionOption) FlatMapAny(f func(Uint32ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapBool(f func(Uint64ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapString(f func(Uint64ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapInt(f func(Uint64ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapInt8(f func(Uint64ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapInt16(f func(Uint64ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapInt32(f func(Uint64ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapInt64(f func(Uint64ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapUint(f func(Uint64ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapUint8(f func(Uint64ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapUint16(f func(Uint64ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapUint32(f func(Uint64ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapUint64(f func(Uint64ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Uint64ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapByte(f func(Uint64ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapRune(f func(Uint64ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Uint64ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Uint64ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Uint64ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Uint64ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayArrayOptionOptionOption) FlatMapAny(f func(Uint64ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapBool(f func(UintptrArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapString(f func(UintptrArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapInt(f func(UintptrArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapInt8(f func(UintptrArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapInt16(f func(UintptrArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapInt32(f func(UintptrArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapInt64(f func(UintptrArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapUint(f func(UintptrArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapUint8(f func(UintptrArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapUint16(f func(UintptrArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapUint32(f func(UintptrArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapUint64(f func(UintptrArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapUintptr(f func(UintptrArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapByte(f func(UintptrArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapRune(f func(UintptrArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapFloat32(f func(UintptrArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapFloat64(f func(UintptrArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapComplex64(f func(UintptrArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapComplex128(f func(UintptrArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayArrayOptionOptionOption) FlatMapAny(f func(UintptrArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapBool(f func(ByteArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapString(f func(ByteArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapInt(f func(ByteArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapInt8(f func(ByteArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapInt16(f func(ByteArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapInt32(f func(ByteArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapInt64(f func(ByteArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapUint(f func(ByteArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapUint8(f func(ByteArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapUint16(f func(ByteArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapUint32(f func(ByteArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapUint64(f func(ByteArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapUintptr(f func(ByteArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapByte(f func(ByteArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapRune(f func(ByteArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapFloat32(f func(ByteArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapFloat64(f func(ByteArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapComplex64(f func(ByteArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapComplex128(f func(ByteArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayArrayOptionOptionOption) FlatMapAny(f func(ByteArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapBool(f func(RuneArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapString(f func(RuneArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapInt(f func(RuneArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapInt8(f func(RuneArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapInt16(f func(RuneArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapInt32(f func(RuneArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapInt64(f func(RuneArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapUint(f func(RuneArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapUint8(f func(RuneArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapUint16(f func(RuneArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapUint32(f func(RuneArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapUint64(f func(RuneArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapUintptr(f func(RuneArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapByte(f func(RuneArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapRune(f func(RuneArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapFloat32(f func(RuneArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapFloat64(f func(RuneArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapComplex64(f func(RuneArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapComplex128(f func(RuneArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayArrayOptionOptionOption) FlatMapAny(f func(RuneArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapBool(f func(Float32ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapString(f func(Float32ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapInt(f func(Float32ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapInt8(f func(Float32ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapInt16(f func(Float32ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapInt32(f func(Float32ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapInt64(f func(Float32ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapUint(f func(Float32ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapUint8(f func(Float32ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapUint16(f func(Float32ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapUint32(f func(Float32ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapUint64(f func(Float32ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Float32ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapByte(f func(Float32ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapRune(f func(Float32ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Float32ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Float32ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Float32ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Float32ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayArrayOptionOptionOption) FlatMapAny(f func(Float32ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapBool(f func(Float64ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapString(f func(Float64ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapInt(f func(Float64ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapInt8(f func(Float64ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapInt16(f func(Float64ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapInt32(f func(Float64ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapInt64(f func(Float64ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapUint(f func(Float64ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapUint8(f func(Float64ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapUint16(f func(Float64ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapUint32(f func(Float64ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapUint64(f func(Float64ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Float64ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapByte(f func(Float64ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapRune(f func(Float64ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Float64ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Float64ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Float64ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Float64ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayArrayOptionOptionOption) FlatMapAny(f func(Float64ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapBool(f func(Complex64ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapString(f func(Complex64ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapInt(f func(Complex64ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapInt8(f func(Complex64ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapInt16(f func(Complex64ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapInt32(f func(Complex64ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapInt64(f func(Complex64ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapUint(f func(Complex64ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapUint8(f func(Complex64ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapUint16(f func(Complex64ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapUint32(f func(Complex64ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapUint64(f func(Complex64ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Complex64ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapByte(f func(Complex64ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapRune(f func(Complex64ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Complex64ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Complex64ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Complex64ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Complex64ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayArrayOptionOptionOption) FlatMapAny(f func(Complex64ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapBool(f func(Complex128ArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapString(f func(Complex128ArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapInt(f func(Complex128ArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapInt8(f func(Complex128ArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapInt16(f func(Complex128ArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapInt32(f func(Complex128ArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapInt64(f func(Complex128ArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapUint(f func(Complex128ArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapUint8(f func(Complex128ArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapUint16(f func(Complex128ArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapUint32(f func(Complex128ArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapUint64(f func(Complex128ArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapUintptr(f func(Complex128ArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapByte(f func(Complex128ArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapRune(f func(Complex128ArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapFloat32(f func(Complex128ArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapFloat64(f func(Complex128ArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapComplex64(f func(Complex128ArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapComplex128(f func(Complex128ArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayArrayOptionOptionOption) FlatMapAny(f func(Complex128ArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapBool(f func(AnyArrayArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapString(f func(AnyArrayArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapInt(f func(AnyArrayArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapInt8(f func(AnyArrayArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapInt16(f func(AnyArrayArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapInt32(f func(AnyArrayArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapInt64(f func(AnyArrayArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapUint(f func(AnyArrayArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapUint8(f func(AnyArrayArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapUint16(f func(AnyArrayArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapUint32(f func(AnyArrayArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapUint64(f func(AnyArrayArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapUintptr(f func(AnyArrayArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapByte(f func(AnyArrayArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapRune(f func(AnyArrayArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapFloat32(f func(AnyArrayArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapFloat64(f func(AnyArrayArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapComplex64(f func(AnyArrayArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapComplex128(f func(AnyArrayArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayArrayOptionOptionOption) FlatMapAny(f func(AnyArrayArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapBool(f func(BoolOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapString(f func(BoolOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapInt(f func(BoolOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapInt8(f func(BoolOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapInt16(f func(BoolOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapInt32(f func(BoolOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapInt64(f func(BoolOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapUint(f func(BoolOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapUint8(f func(BoolOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapUint16(f func(BoolOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapUint32(f func(BoolOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapUint64(f func(BoolOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapUintptr(f func(BoolOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapByte(f func(BoolOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapRune(f func(BoolOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapFloat32(f func(BoolOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapFloat64(f func(BoolOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapComplex64(f func(BoolOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapComplex128(f func(BoolOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolOptionArrayOptionOptionOption) FlatMapAny(f func(BoolOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapBool(f func(StringOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapString(f func(StringOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapInt(f func(StringOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapInt8(f func(StringOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapInt16(f func(StringOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapInt32(f func(StringOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapInt64(f func(StringOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapUint(f func(StringOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapUint8(f func(StringOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapUint16(f func(StringOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapUint32(f func(StringOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapUint64(f func(StringOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapUintptr(f func(StringOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapByte(f func(StringOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapRune(f func(StringOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapFloat32(f func(StringOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapFloat64(f func(StringOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapComplex64(f func(StringOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapComplex128(f func(StringOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringOptionArrayOptionOptionOption) FlatMapAny(f func(StringOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapBool(f func(IntOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapString(f func(IntOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapInt(f func(IntOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapInt8(f func(IntOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapInt16(f func(IntOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapInt32(f func(IntOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapInt64(f func(IntOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapUint(f func(IntOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapUint8(f func(IntOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapUint16(f func(IntOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapUint32(f func(IntOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapUint64(f func(IntOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapUintptr(f func(IntOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapByte(f func(IntOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapRune(f func(IntOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapFloat32(f func(IntOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapFloat64(f func(IntOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapComplex64(f func(IntOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapComplex128(f func(IntOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntOptionArrayOptionOptionOption) FlatMapAny(f func(IntOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapBool(f func(Int8OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapString(f func(Int8OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapInt(f func(Int8OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapInt8(f func(Int8OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapInt16(f func(Int8OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapInt32(f func(Int8OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapInt64(f func(Int8OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapUint(f func(Int8OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapUint8(f func(Int8OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapUint16(f func(Int8OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapUint32(f func(Int8OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapUint64(f func(Int8OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapUintptr(f func(Int8OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapByte(f func(Int8OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapRune(f func(Int8OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapFloat32(f func(Int8OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapFloat64(f func(Int8OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapComplex64(f func(Int8OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapComplex128(f func(Int8OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8OptionArrayOptionOptionOption) FlatMapAny(f func(Int8OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapBool(f func(Int16OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapString(f func(Int16OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapInt(f func(Int16OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapInt8(f func(Int16OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapInt16(f func(Int16OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapInt32(f func(Int16OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapInt64(f func(Int16OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapUint(f func(Int16OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapUint8(f func(Int16OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapUint16(f func(Int16OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapUint32(f func(Int16OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapUint64(f func(Int16OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapUintptr(f func(Int16OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapByte(f func(Int16OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapRune(f func(Int16OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapFloat32(f func(Int16OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapFloat64(f func(Int16OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapComplex64(f func(Int16OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapComplex128(f func(Int16OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16OptionArrayOptionOptionOption) FlatMapAny(f func(Int16OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapBool(f func(Int32OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapString(f func(Int32OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapInt(f func(Int32OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapInt8(f func(Int32OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapInt16(f func(Int32OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapInt32(f func(Int32OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapInt64(f func(Int32OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapUint(f func(Int32OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapUint8(f func(Int32OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapUint16(f func(Int32OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapUint32(f func(Int32OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapUint64(f func(Int32OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapUintptr(f func(Int32OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapByte(f func(Int32OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapRune(f func(Int32OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapFloat32(f func(Int32OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapFloat64(f func(Int32OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapComplex64(f func(Int32OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapComplex128(f func(Int32OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32OptionArrayOptionOptionOption) FlatMapAny(f func(Int32OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapBool(f func(Int64OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapString(f func(Int64OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapInt(f func(Int64OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapInt8(f func(Int64OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapInt16(f func(Int64OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapInt32(f func(Int64OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapInt64(f func(Int64OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapUint(f func(Int64OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapUint8(f func(Int64OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapUint16(f func(Int64OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapUint32(f func(Int64OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapUint64(f func(Int64OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapUintptr(f func(Int64OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapByte(f func(Int64OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapRune(f func(Int64OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapFloat32(f func(Int64OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapFloat64(f func(Int64OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapComplex64(f func(Int64OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapComplex128(f func(Int64OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64OptionArrayOptionOptionOption) FlatMapAny(f func(Int64OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapBool(f func(UintOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapString(f func(UintOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapInt(f func(UintOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapInt8(f func(UintOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapInt16(f func(UintOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapInt32(f func(UintOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapInt64(f func(UintOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapUint(f func(UintOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapUint8(f func(UintOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapUint16(f func(UintOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapUint32(f func(UintOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapUint64(f func(UintOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapUintptr(f func(UintOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapByte(f func(UintOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapRune(f func(UintOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapFloat32(f func(UintOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapFloat64(f func(UintOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapComplex64(f func(UintOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapComplex128(f func(UintOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintOptionArrayOptionOptionOption) FlatMapAny(f func(UintOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapBool(f func(Uint8OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapString(f func(Uint8OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapInt(f func(Uint8OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapInt8(f func(Uint8OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapInt16(f func(Uint8OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapInt32(f func(Uint8OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapInt64(f func(Uint8OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapUint(f func(Uint8OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapUint8(f func(Uint8OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapUint16(f func(Uint8OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapUint32(f func(Uint8OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapUint64(f func(Uint8OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapUintptr(f func(Uint8OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapByte(f func(Uint8OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapRune(f func(Uint8OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapFloat32(f func(Uint8OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapFloat64(f func(Uint8OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapComplex64(f func(Uint8OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapComplex128(f func(Uint8OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8OptionArrayOptionOptionOption) FlatMapAny(f func(Uint8OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapBool(f func(Uint16OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapString(f func(Uint16OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapInt(f func(Uint16OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapInt8(f func(Uint16OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapInt16(f func(Uint16OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapInt32(f func(Uint16OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapInt64(f func(Uint16OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapUint(f func(Uint16OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapUint8(f func(Uint16OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapUint16(f func(Uint16OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapUint32(f func(Uint16OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapUint64(f func(Uint16OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapUintptr(f func(Uint16OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapByte(f func(Uint16OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapRune(f func(Uint16OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapFloat32(f func(Uint16OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapFloat64(f func(Uint16OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapComplex64(f func(Uint16OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapComplex128(f func(Uint16OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16OptionArrayOptionOptionOption) FlatMapAny(f func(Uint16OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapBool(f func(Uint32OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapString(f func(Uint32OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapInt(f func(Uint32OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapInt8(f func(Uint32OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapInt16(f func(Uint32OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapInt32(f func(Uint32OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapInt64(f func(Uint32OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapUint(f func(Uint32OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapUint8(f func(Uint32OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapUint16(f func(Uint32OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapUint32(f func(Uint32OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapUint64(f func(Uint32OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapUintptr(f func(Uint32OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapByte(f func(Uint32OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapRune(f func(Uint32OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapFloat32(f func(Uint32OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapFloat64(f func(Uint32OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapComplex64(f func(Uint32OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapComplex128(f func(Uint32OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32OptionArrayOptionOptionOption) FlatMapAny(f func(Uint32OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapBool(f func(Uint64OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapString(f func(Uint64OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapInt(f func(Uint64OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapInt8(f func(Uint64OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapInt16(f func(Uint64OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapInt32(f func(Uint64OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapInt64(f func(Uint64OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapUint(f func(Uint64OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapUint8(f func(Uint64OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapUint16(f func(Uint64OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapUint32(f func(Uint64OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapUint64(f func(Uint64OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapUintptr(f func(Uint64OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapByte(f func(Uint64OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapRune(f func(Uint64OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapFloat32(f func(Uint64OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapFloat64(f func(Uint64OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapComplex64(f func(Uint64OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapComplex128(f func(Uint64OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64OptionArrayOptionOptionOption) FlatMapAny(f func(Uint64OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapBool(f func(UintptrOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapString(f func(UintptrOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapInt(f func(UintptrOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapInt8(f func(UintptrOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapInt16(f func(UintptrOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapInt32(f func(UintptrOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapInt64(f func(UintptrOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapUint(f func(UintptrOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapUint8(f func(UintptrOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapUint16(f func(UintptrOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapUint32(f func(UintptrOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapUint64(f func(UintptrOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapUintptr(f func(UintptrOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapByte(f func(UintptrOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapRune(f func(UintptrOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapFloat32(f func(UintptrOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapFloat64(f func(UintptrOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapComplex64(f func(UintptrOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapComplex128(f func(UintptrOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrOptionArrayOptionOptionOption) FlatMapAny(f func(UintptrOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapBool(f func(ByteOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapString(f func(ByteOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapInt(f func(ByteOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapInt8(f func(ByteOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapInt16(f func(ByteOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapInt32(f func(ByteOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapInt64(f func(ByteOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapUint(f func(ByteOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapUint8(f func(ByteOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapUint16(f func(ByteOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapUint32(f func(ByteOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapUint64(f func(ByteOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapUintptr(f func(ByteOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapByte(f func(ByteOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapRune(f func(ByteOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapFloat32(f func(ByteOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapFloat64(f func(ByteOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapComplex64(f func(ByteOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapComplex128(f func(ByteOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteOptionArrayOptionOptionOption) FlatMapAny(f func(ByteOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapBool(f func(RuneOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapString(f func(RuneOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapInt(f func(RuneOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapInt8(f func(RuneOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapInt16(f func(RuneOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapInt32(f func(RuneOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapInt64(f func(RuneOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapUint(f func(RuneOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapUint8(f func(RuneOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapUint16(f func(RuneOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapUint32(f func(RuneOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapUint64(f func(RuneOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapUintptr(f func(RuneOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapByte(f func(RuneOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapRune(f func(RuneOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapFloat32(f func(RuneOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapFloat64(f func(RuneOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapComplex64(f func(RuneOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapComplex128(f func(RuneOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneOptionArrayOptionOptionOption) FlatMapAny(f func(RuneOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapBool(f func(Float32OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapString(f func(Float32OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapInt(f func(Float32OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapInt8(f func(Float32OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapInt16(f func(Float32OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapInt32(f func(Float32OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapInt64(f func(Float32OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapUint(f func(Float32OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapUint8(f func(Float32OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapUint16(f func(Float32OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapUint32(f func(Float32OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapUint64(f func(Float32OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapUintptr(f func(Float32OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapByte(f func(Float32OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapRune(f func(Float32OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapFloat32(f func(Float32OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapFloat64(f func(Float32OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapComplex64(f func(Float32OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapComplex128(f func(Float32OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32OptionArrayOptionOptionOption) FlatMapAny(f func(Float32OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapBool(f func(Float64OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapString(f func(Float64OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapInt(f func(Float64OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapInt8(f func(Float64OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapInt16(f func(Float64OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapInt32(f func(Float64OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapInt64(f func(Float64OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapUint(f func(Float64OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapUint8(f func(Float64OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapUint16(f func(Float64OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapUint32(f func(Float64OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapUint64(f func(Float64OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapUintptr(f func(Float64OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapByte(f func(Float64OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapRune(f func(Float64OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapFloat32(f func(Float64OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapFloat64(f func(Float64OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapComplex64(f func(Float64OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapComplex128(f func(Float64OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64OptionArrayOptionOptionOption) FlatMapAny(f func(Float64OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapBool(f func(Complex64OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapString(f func(Complex64OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapInt(f func(Complex64OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapInt8(f func(Complex64OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapInt16(f func(Complex64OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapInt32(f func(Complex64OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapInt64(f func(Complex64OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapUint(f func(Complex64OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapUint8(f func(Complex64OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapUint16(f func(Complex64OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapUint32(f func(Complex64OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapUint64(f func(Complex64OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapUintptr(f func(Complex64OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapByte(f func(Complex64OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapRune(f func(Complex64OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapFloat32(f func(Complex64OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapFloat64(f func(Complex64OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapComplex64(f func(Complex64OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapComplex128(f func(Complex64OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64OptionArrayOptionOptionOption) FlatMapAny(f func(Complex64OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapBool(f func(Complex128OptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapString(f func(Complex128OptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapInt(f func(Complex128OptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapInt8(f func(Complex128OptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapInt16(f func(Complex128OptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapInt32(f func(Complex128OptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapInt64(f func(Complex128OptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapUint(f func(Complex128OptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapUint8(f func(Complex128OptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapUint16(f func(Complex128OptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapUint32(f func(Complex128OptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapUint64(f func(Complex128OptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapUintptr(f func(Complex128OptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapByte(f func(Complex128OptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapRune(f func(Complex128OptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapFloat32(f func(Complex128OptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapFloat64(f func(Complex128OptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapComplex64(f func(Complex128OptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapComplex128(f func(Complex128OptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128OptionArrayOptionOptionOption) FlatMapAny(f func(Complex128OptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapBool(f func(AnyOptionArrayOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapString(f func(AnyOptionArrayOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapInt(f func(AnyOptionArrayOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapInt8(f func(AnyOptionArrayOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapInt16(f func(AnyOptionArrayOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapInt32(f func(AnyOptionArrayOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapInt64(f func(AnyOptionArrayOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapUint(f func(AnyOptionArrayOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapUint8(f func(AnyOptionArrayOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapUint16(f func(AnyOptionArrayOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapUint32(f func(AnyOptionArrayOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapUint64(f func(AnyOptionArrayOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapUintptr(f func(AnyOptionArrayOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapByte(f func(AnyOptionArrayOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapRune(f func(AnyOptionArrayOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapFloat32(f func(AnyOptionArrayOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapFloat64(f func(AnyOptionArrayOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapComplex64(f func(AnyOptionArrayOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapComplex128(f func(AnyOptionArrayOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyOptionArrayOptionOptionOption) FlatMapAny(f func(AnyOptionArrayOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m BoolListOptionOptionOption) FlatMapBool(f func(BoolListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m BoolListOptionOptionOption) FlatMapString(f func(BoolListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m BoolListOptionOptionOption) FlatMapInt(f func(BoolListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m BoolListOptionOptionOption) FlatMapInt8(f func(BoolListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m BoolListOptionOptionOption) FlatMapInt16(f func(BoolListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m BoolListOptionOptionOption) FlatMapInt32(f func(BoolListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m BoolListOptionOptionOption) FlatMapInt64(f func(BoolListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m BoolListOptionOptionOption) FlatMapUint(f func(BoolListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m BoolListOptionOptionOption) FlatMapUint8(f func(BoolListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m BoolListOptionOptionOption) FlatMapUint16(f func(BoolListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m BoolListOptionOptionOption) FlatMapUint32(f func(BoolListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m BoolListOptionOptionOption) FlatMapUint64(f func(BoolListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m BoolListOptionOptionOption) FlatMapUintptr(f func(BoolListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m BoolListOptionOptionOption) FlatMapByte(f func(BoolListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m BoolListOptionOptionOption) FlatMapRune(f func(BoolListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m BoolListOptionOptionOption) FlatMapFloat32(f func(BoolListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m BoolListOptionOptionOption) FlatMapFloat64(f func(BoolListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m BoolListOptionOptionOption) FlatMapComplex64(f func(BoolListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m BoolListOptionOptionOption) FlatMapComplex128(f func(BoolListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m BoolListOptionOptionOption) FlatMapAny(f func(BoolListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m StringListOptionOptionOption) FlatMapBool(f func(StringListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m StringListOptionOptionOption) FlatMapString(f func(StringListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m StringListOptionOptionOption) FlatMapInt(f func(StringListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m StringListOptionOptionOption) FlatMapInt8(f func(StringListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m StringListOptionOptionOption) FlatMapInt16(f func(StringListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m StringListOptionOptionOption) FlatMapInt32(f func(StringListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m StringListOptionOptionOption) FlatMapInt64(f func(StringListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m StringListOptionOptionOption) FlatMapUint(f func(StringListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m StringListOptionOptionOption) FlatMapUint8(f func(StringListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m StringListOptionOptionOption) FlatMapUint16(f func(StringListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m StringListOptionOptionOption) FlatMapUint32(f func(StringListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m StringListOptionOptionOption) FlatMapUint64(f func(StringListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m StringListOptionOptionOption) FlatMapUintptr(f func(StringListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m StringListOptionOptionOption) FlatMapByte(f func(StringListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m StringListOptionOptionOption) FlatMapRune(f func(StringListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m StringListOptionOptionOption) FlatMapFloat32(f func(StringListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m StringListOptionOptionOption) FlatMapFloat64(f func(StringListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m StringListOptionOptionOption) FlatMapComplex64(f func(StringListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m StringListOptionOptionOption) FlatMapComplex128(f func(StringListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m StringListOptionOptionOption) FlatMapAny(f func(StringListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m IntListOptionOptionOption) FlatMapBool(f func(IntListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m IntListOptionOptionOption) FlatMapString(f func(IntListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m IntListOptionOptionOption) FlatMapInt(f func(IntListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m IntListOptionOptionOption) FlatMapInt8(f func(IntListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m IntListOptionOptionOption) FlatMapInt16(f func(IntListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m IntListOptionOptionOption) FlatMapInt32(f func(IntListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m IntListOptionOptionOption) FlatMapInt64(f func(IntListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m IntListOptionOptionOption) FlatMapUint(f func(IntListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m IntListOptionOptionOption) FlatMapUint8(f func(IntListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m IntListOptionOptionOption) FlatMapUint16(f func(IntListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m IntListOptionOptionOption) FlatMapUint32(f func(IntListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m IntListOptionOptionOption) FlatMapUint64(f func(IntListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m IntListOptionOptionOption) FlatMapUintptr(f func(IntListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m IntListOptionOptionOption) FlatMapByte(f func(IntListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m IntListOptionOptionOption) FlatMapRune(f func(IntListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m IntListOptionOptionOption) FlatMapFloat32(f func(IntListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m IntListOptionOptionOption) FlatMapFloat64(f func(IntListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m IntListOptionOptionOption) FlatMapComplex64(f func(IntListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m IntListOptionOptionOption) FlatMapComplex128(f func(IntListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m IntListOptionOptionOption) FlatMapAny(f func(IntListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int8ListOptionOptionOption) FlatMapBool(f func(Int8ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int8ListOptionOptionOption) FlatMapString(f func(Int8ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int8ListOptionOptionOption) FlatMapInt(f func(Int8ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int8ListOptionOptionOption) FlatMapInt8(f func(Int8ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int8ListOptionOptionOption) FlatMapInt16(f func(Int8ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int8ListOptionOptionOption) FlatMapInt32(f func(Int8ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int8ListOptionOptionOption) FlatMapInt64(f func(Int8ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int8ListOptionOptionOption) FlatMapUint(f func(Int8ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int8ListOptionOptionOption) FlatMapUint8(f func(Int8ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int8ListOptionOptionOption) FlatMapUint16(f func(Int8ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int8ListOptionOptionOption) FlatMapUint32(f func(Int8ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int8ListOptionOptionOption) FlatMapUint64(f func(Int8ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int8ListOptionOptionOption) FlatMapUintptr(f func(Int8ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int8ListOptionOptionOption) FlatMapByte(f func(Int8ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int8ListOptionOptionOption) FlatMapRune(f func(Int8ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int8ListOptionOptionOption) FlatMapFloat32(f func(Int8ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int8ListOptionOptionOption) FlatMapFloat64(f func(Int8ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int8ListOptionOptionOption) FlatMapComplex64(f func(Int8ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int8ListOptionOptionOption) FlatMapComplex128(f func(Int8ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int8ListOptionOptionOption) FlatMapAny(f func(Int8ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int16ListOptionOptionOption) FlatMapBool(f func(Int16ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int16ListOptionOptionOption) FlatMapString(f func(Int16ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int16ListOptionOptionOption) FlatMapInt(f func(Int16ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int16ListOptionOptionOption) FlatMapInt8(f func(Int16ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int16ListOptionOptionOption) FlatMapInt16(f func(Int16ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int16ListOptionOptionOption) FlatMapInt32(f func(Int16ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int16ListOptionOptionOption) FlatMapInt64(f func(Int16ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int16ListOptionOptionOption) FlatMapUint(f func(Int16ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int16ListOptionOptionOption) FlatMapUint8(f func(Int16ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int16ListOptionOptionOption) FlatMapUint16(f func(Int16ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int16ListOptionOptionOption) FlatMapUint32(f func(Int16ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int16ListOptionOptionOption) FlatMapUint64(f func(Int16ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int16ListOptionOptionOption) FlatMapUintptr(f func(Int16ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int16ListOptionOptionOption) FlatMapByte(f func(Int16ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int16ListOptionOptionOption) FlatMapRune(f func(Int16ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int16ListOptionOptionOption) FlatMapFloat32(f func(Int16ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int16ListOptionOptionOption) FlatMapFloat64(f func(Int16ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int16ListOptionOptionOption) FlatMapComplex64(f func(Int16ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int16ListOptionOptionOption) FlatMapComplex128(f func(Int16ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int16ListOptionOptionOption) FlatMapAny(f func(Int16ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int32ListOptionOptionOption) FlatMapBool(f func(Int32ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int32ListOptionOptionOption) FlatMapString(f func(Int32ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int32ListOptionOptionOption) FlatMapInt(f func(Int32ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int32ListOptionOptionOption) FlatMapInt8(f func(Int32ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int32ListOptionOptionOption) FlatMapInt16(f func(Int32ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int32ListOptionOptionOption) FlatMapInt32(f func(Int32ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int32ListOptionOptionOption) FlatMapInt64(f func(Int32ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int32ListOptionOptionOption) FlatMapUint(f func(Int32ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int32ListOptionOptionOption) FlatMapUint8(f func(Int32ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int32ListOptionOptionOption) FlatMapUint16(f func(Int32ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int32ListOptionOptionOption) FlatMapUint32(f func(Int32ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int32ListOptionOptionOption) FlatMapUint64(f func(Int32ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int32ListOptionOptionOption) FlatMapUintptr(f func(Int32ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int32ListOptionOptionOption) FlatMapByte(f func(Int32ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int32ListOptionOptionOption) FlatMapRune(f func(Int32ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int32ListOptionOptionOption) FlatMapFloat32(f func(Int32ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int32ListOptionOptionOption) FlatMapFloat64(f func(Int32ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int32ListOptionOptionOption) FlatMapComplex64(f func(Int32ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int32ListOptionOptionOption) FlatMapComplex128(f func(Int32ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int32ListOptionOptionOption) FlatMapAny(f func(Int32ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Int64ListOptionOptionOption) FlatMapBool(f func(Int64ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Int64ListOptionOptionOption) FlatMapString(f func(Int64ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Int64ListOptionOptionOption) FlatMapInt(f func(Int64ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Int64ListOptionOptionOption) FlatMapInt8(f func(Int64ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Int64ListOptionOptionOption) FlatMapInt16(f func(Int64ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Int64ListOptionOptionOption) FlatMapInt32(f func(Int64ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Int64ListOptionOptionOption) FlatMapInt64(f func(Int64ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Int64ListOptionOptionOption) FlatMapUint(f func(Int64ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Int64ListOptionOptionOption) FlatMapUint8(f func(Int64ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Int64ListOptionOptionOption) FlatMapUint16(f func(Int64ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Int64ListOptionOptionOption) FlatMapUint32(f func(Int64ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Int64ListOptionOptionOption) FlatMapUint64(f func(Int64ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Int64ListOptionOptionOption) FlatMapUintptr(f func(Int64ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Int64ListOptionOptionOption) FlatMapByte(f func(Int64ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Int64ListOptionOptionOption) FlatMapRune(f func(Int64ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Int64ListOptionOptionOption) FlatMapFloat32(f func(Int64ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Int64ListOptionOptionOption) FlatMapFloat64(f func(Int64ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Int64ListOptionOptionOption) FlatMapComplex64(f func(Int64ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Int64ListOptionOptionOption) FlatMapComplex128(f func(Int64ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Int64ListOptionOptionOption) FlatMapAny(f func(Int64ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintListOptionOptionOption) FlatMapBool(f func(UintListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintListOptionOptionOption) FlatMapString(f func(UintListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintListOptionOptionOption) FlatMapInt(f func(UintListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintListOptionOptionOption) FlatMapInt8(f func(UintListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintListOptionOptionOption) FlatMapInt16(f func(UintListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintListOptionOptionOption) FlatMapInt32(f func(UintListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintListOptionOptionOption) FlatMapInt64(f func(UintListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintListOptionOptionOption) FlatMapUint(f func(UintListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintListOptionOptionOption) FlatMapUint8(f func(UintListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintListOptionOptionOption) FlatMapUint16(f func(UintListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintListOptionOptionOption) FlatMapUint32(f func(UintListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintListOptionOptionOption) FlatMapUint64(f func(UintListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintListOptionOptionOption) FlatMapUintptr(f func(UintListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintListOptionOptionOption) FlatMapByte(f func(UintListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintListOptionOptionOption) FlatMapRune(f func(UintListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintListOptionOptionOption) FlatMapFloat32(f func(UintListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintListOptionOptionOption) FlatMapFloat64(f func(UintListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintListOptionOptionOption) FlatMapComplex64(f func(UintListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintListOptionOptionOption) FlatMapComplex128(f func(UintListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintListOptionOptionOption) FlatMapAny(f func(UintListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint8ListOptionOptionOption) FlatMapBool(f func(Uint8ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint8ListOptionOptionOption) FlatMapString(f func(Uint8ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint8ListOptionOptionOption) FlatMapInt(f func(Uint8ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint8ListOptionOptionOption) FlatMapInt8(f func(Uint8ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint8ListOptionOptionOption) FlatMapInt16(f func(Uint8ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint8ListOptionOptionOption) FlatMapInt32(f func(Uint8ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint8ListOptionOptionOption) FlatMapInt64(f func(Uint8ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint8ListOptionOptionOption) FlatMapUint(f func(Uint8ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint8ListOptionOptionOption) FlatMapUint8(f func(Uint8ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint8ListOptionOptionOption) FlatMapUint16(f func(Uint8ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint8ListOptionOptionOption) FlatMapUint32(f func(Uint8ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint8ListOptionOptionOption) FlatMapUint64(f func(Uint8ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint8ListOptionOptionOption) FlatMapUintptr(f func(Uint8ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint8ListOptionOptionOption) FlatMapByte(f func(Uint8ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint8ListOptionOptionOption) FlatMapRune(f func(Uint8ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint8ListOptionOptionOption) FlatMapFloat32(f func(Uint8ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint8ListOptionOptionOption) FlatMapFloat64(f func(Uint8ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint8ListOptionOptionOption) FlatMapComplex64(f func(Uint8ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint8ListOptionOptionOption) FlatMapComplex128(f func(Uint8ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint8ListOptionOptionOption) FlatMapAny(f func(Uint8ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint16ListOptionOptionOption) FlatMapBool(f func(Uint16ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint16ListOptionOptionOption) FlatMapString(f func(Uint16ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint16ListOptionOptionOption) FlatMapInt(f func(Uint16ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint16ListOptionOptionOption) FlatMapInt8(f func(Uint16ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint16ListOptionOptionOption) FlatMapInt16(f func(Uint16ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint16ListOptionOptionOption) FlatMapInt32(f func(Uint16ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint16ListOptionOptionOption) FlatMapInt64(f func(Uint16ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint16ListOptionOptionOption) FlatMapUint(f func(Uint16ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint16ListOptionOptionOption) FlatMapUint8(f func(Uint16ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint16ListOptionOptionOption) FlatMapUint16(f func(Uint16ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint16ListOptionOptionOption) FlatMapUint32(f func(Uint16ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint16ListOptionOptionOption) FlatMapUint64(f func(Uint16ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint16ListOptionOptionOption) FlatMapUintptr(f func(Uint16ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint16ListOptionOptionOption) FlatMapByte(f func(Uint16ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint16ListOptionOptionOption) FlatMapRune(f func(Uint16ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint16ListOptionOptionOption) FlatMapFloat32(f func(Uint16ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint16ListOptionOptionOption) FlatMapFloat64(f func(Uint16ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint16ListOptionOptionOption) FlatMapComplex64(f func(Uint16ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint16ListOptionOptionOption) FlatMapComplex128(f func(Uint16ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint16ListOptionOptionOption) FlatMapAny(f func(Uint16ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint32ListOptionOptionOption) FlatMapBool(f func(Uint32ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint32ListOptionOptionOption) FlatMapString(f func(Uint32ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint32ListOptionOptionOption) FlatMapInt(f func(Uint32ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint32ListOptionOptionOption) FlatMapInt8(f func(Uint32ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint32ListOptionOptionOption) FlatMapInt16(f func(Uint32ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint32ListOptionOptionOption) FlatMapInt32(f func(Uint32ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint32ListOptionOptionOption) FlatMapInt64(f func(Uint32ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint32ListOptionOptionOption) FlatMapUint(f func(Uint32ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint32ListOptionOptionOption) FlatMapUint8(f func(Uint32ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint32ListOptionOptionOption) FlatMapUint16(f func(Uint32ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint32ListOptionOptionOption) FlatMapUint32(f func(Uint32ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint32ListOptionOptionOption) FlatMapUint64(f func(Uint32ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint32ListOptionOptionOption) FlatMapUintptr(f func(Uint32ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint32ListOptionOptionOption) FlatMapByte(f func(Uint32ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint32ListOptionOptionOption) FlatMapRune(f func(Uint32ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint32ListOptionOptionOption) FlatMapFloat32(f func(Uint32ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint32ListOptionOptionOption) FlatMapFloat64(f func(Uint32ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint32ListOptionOptionOption) FlatMapComplex64(f func(Uint32ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint32ListOptionOptionOption) FlatMapComplex128(f func(Uint32ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint32ListOptionOptionOption) FlatMapAny(f func(Uint32ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Uint64ListOptionOptionOption) FlatMapBool(f func(Uint64ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Uint64ListOptionOptionOption) FlatMapString(f func(Uint64ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Uint64ListOptionOptionOption) FlatMapInt(f func(Uint64ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Uint64ListOptionOptionOption) FlatMapInt8(f func(Uint64ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Uint64ListOptionOptionOption) FlatMapInt16(f func(Uint64ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Uint64ListOptionOptionOption) FlatMapInt32(f func(Uint64ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Uint64ListOptionOptionOption) FlatMapInt64(f func(Uint64ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Uint64ListOptionOptionOption) FlatMapUint(f func(Uint64ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Uint64ListOptionOptionOption) FlatMapUint8(f func(Uint64ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Uint64ListOptionOptionOption) FlatMapUint16(f func(Uint64ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Uint64ListOptionOptionOption) FlatMapUint32(f func(Uint64ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Uint64ListOptionOptionOption) FlatMapUint64(f func(Uint64ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Uint64ListOptionOptionOption) FlatMapUintptr(f func(Uint64ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Uint64ListOptionOptionOption) FlatMapByte(f func(Uint64ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Uint64ListOptionOptionOption) FlatMapRune(f func(Uint64ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Uint64ListOptionOptionOption) FlatMapFloat32(f func(Uint64ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Uint64ListOptionOptionOption) FlatMapFloat64(f func(Uint64ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Uint64ListOptionOptionOption) FlatMapComplex64(f func(Uint64ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Uint64ListOptionOptionOption) FlatMapComplex128(f func(Uint64ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Uint64ListOptionOptionOption) FlatMapAny(f func(Uint64ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m UintptrListOptionOptionOption) FlatMapBool(f func(UintptrListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m UintptrListOptionOptionOption) FlatMapString(f func(UintptrListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m UintptrListOptionOptionOption) FlatMapInt(f func(UintptrListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m UintptrListOptionOptionOption) FlatMapInt8(f func(UintptrListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m UintptrListOptionOptionOption) FlatMapInt16(f func(UintptrListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m UintptrListOptionOptionOption) FlatMapInt32(f func(UintptrListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m UintptrListOptionOptionOption) FlatMapInt64(f func(UintptrListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m UintptrListOptionOptionOption) FlatMapUint(f func(UintptrListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m UintptrListOptionOptionOption) FlatMapUint8(f func(UintptrListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m UintptrListOptionOptionOption) FlatMapUint16(f func(UintptrListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m UintptrListOptionOptionOption) FlatMapUint32(f func(UintptrListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m UintptrListOptionOptionOption) FlatMapUint64(f func(UintptrListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m UintptrListOptionOptionOption) FlatMapUintptr(f func(UintptrListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m UintptrListOptionOptionOption) FlatMapByte(f func(UintptrListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m UintptrListOptionOptionOption) FlatMapRune(f func(UintptrListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m UintptrListOptionOptionOption) FlatMapFloat32(f func(UintptrListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m UintptrListOptionOptionOption) FlatMapFloat64(f func(UintptrListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m UintptrListOptionOptionOption) FlatMapComplex64(f func(UintptrListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m UintptrListOptionOptionOption) FlatMapComplex128(f func(UintptrListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m UintptrListOptionOptionOption) FlatMapAny(f func(UintptrListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m ByteListOptionOptionOption) FlatMapBool(f func(ByteListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m ByteListOptionOptionOption) FlatMapString(f func(ByteListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m ByteListOptionOptionOption) FlatMapInt(f func(ByteListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m ByteListOptionOptionOption) FlatMapInt8(f func(ByteListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m ByteListOptionOptionOption) FlatMapInt16(f func(ByteListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m ByteListOptionOptionOption) FlatMapInt32(f func(ByteListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m ByteListOptionOptionOption) FlatMapInt64(f func(ByteListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m ByteListOptionOptionOption) FlatMapUint(f func(ByteListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m ByteListOptionOptionOption) FlatMapUint8(f func(ByteListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m ByteListOptionOptionOption) FlatMapUint16(f func(ByteListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m ByteListOptionOptionOption) FlatMapUint32(f func(ByteListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m ByteListOptionOptionOption) FlatMapUint64(f func(ByteListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m ByteListOptionOptionOption) FlatMapUintptr(f func(ByteListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m ByteListOptionOptionOption) FlatMapByte(f func(ByteListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m ByteListOptionOptionOption) FlatMapRune(f func(ByteListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m ByteListOptionOptionOption) FlatMapFloat32(f func(ByteListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m ByteListOptionOptionOption) FlatMapFloat64(f func(ByteListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m ByteListOptionOptionOption) FlatMapComplex64(f func(ByteListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m ByteListOptionOptionOption) FlatMapComplex128(f func(ByteListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m ByteListOptionOptionOption) FlatMapAny(f func(ByteListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m RuneListOptionOptionOption) FlatMapBool(f func(RuneListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m RuneListOptionOptionOption) FlatMapString(f func(RuneListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m RuneListOptionOptionOption) FlatMapInt(f func(RuneListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m RuneListOptionOptionOption) FlatMapInt8(f func(RuneListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m RuneListOptionOptionOption) FlatMapInt16(f func(RuneListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m RuneListOptionOptionOption) FlatMapInt32(f func(RuneListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m RuneListOptionOptionOption) FlatMapInt64(f func(RuneListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m RuneListOptionOptionOption) FlatMapUint(f func(RuneListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m RuneListOptionOptionOption) FlatMapUint8(f func(RuneListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m RuneListOptionOptionOption) FlatMapUint16(f func(RuneListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m RuneListOptionOptionOption) FlatMapUint32(f func(RuneListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m RuneListOptionOptionOption) FlatMapUint64(f func(RuneListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m RuneListOptionOptionOption) FlatMapUintptr(f func(RuneListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m RuneListOptionOptionOption) FlatMapByte(f func(RuneListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m RuneListOptionOptionOption) FlatMapRune(f func(RuneListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m RuneListOptionOptionOption) FlatMapFloat32(f func(RuneListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m RuneListOptionOptionOption) FlatMapFloat64(f func(RuneListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m RuneListOptionOptionOption) FlatMapComplex64(f func(RuneListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m RuneListOptionOptionOption) FlatMapComplex128(f func(RuneListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m RuneListOptionOptionOption) FlatMapAny(f func(RuneListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float32ListOptionOptionOption) FlatMapBool(f func(Float32ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float32ListOptionOptionOption) FlatMapString(f func(Float32ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float32ListOptionOptionOption) FlatMapInt(f func(Float32ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float32ListOptionOptionOption) FlatMapInt8(f func(Float32ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float32ListOptionOptionOption) FlatMapInt16(f func(Float32ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float32ListOptionOptionOption) FlatMapInt32(f func(Float32ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float32ListOptionOptionOption) FlatMapInt64(f func(Float32ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float32ListOptionOptionOption) FlatMapUint(f func(Float32ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float32ListOptionOptionOption) FlatMapUint8(f func(Float32ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float32ListOptionOptionOption) FlatMapUint16(f func(Float32ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float32ListOptionOptionOption) FlatMapUint32(f func(Float32ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float32ListOptionOptionOption) FlatMapUint64(f func(Float32ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float32ListOptionOptionOption) FlatMapUintptr(f func(Float32ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float32ListOptionOptionOption) FlatMapByte(f func(Float32ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float32ListOptionOptionOption) FlatMapRune(f func(Float32ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float32ListOptionOptionOption) FlatMapFloat32(f func(Float32ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float32ListOptionOptionOption) FlatMapFloat64(f func(Float32ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float32ListOptionOptionOption) FlatMapComplex64(f func(Float32ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float32ListOptionOptionOption) FlatMapComplex128(f func(Float32ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float32ListOptionOptionOption) FlatMapAny(f func(Float32ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Float64ListOptionOptionOption) FlatMapBool(f func(Float64ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Float64ListOptionOptionOption) FlatMapString(f func(Float64ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Float64ListOptionOptionOption) FlatMapInt(f func(Float64ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Float64ListOptionOptionOption) FlatMapInt8(f func(Float64ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Float64ListOptionOptionOption) FlatMapInt16(f func(Float64ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Float64ListOptionOptionOption) FlatMapInt32(f func(Float64ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Float64ListOptionOptionOption) FlatMapInt64(f func(Float64ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Float64ListOptionOptionOption) FlatMapUint(f func(Float64ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Float64ListOptionOptionOption) FlatMapUint8(f func(Float64ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Float64ListOptionOptionOption) FlatMapUint16(f func(Float64ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Float64ListOptionOptionOption) FlatMapUint32(f func(Float64ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Float64ListOptionOptionOption) FlatMapUint64(f func(Float64ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Float64ListOptionOptionOption) FlatMapUintptr(f func(Float64ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Float64ListOptionOptionOption) FlatMapByte(f func(Float64ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Float64ListOptionOptionOption) FlatMapRune(f func(Float64ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Float64ListOptionOptionOption) FlatMapFloat32(f func(Float64ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Float64ListOptionOptionOption) FlatMapFloat64(f func(Float64ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Float64ListOptionOptionOption) FlatMapComplex64(f func(Float64ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Float64ListOptionOptionOption) FlatMapComplex128(f func(Float64ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Float64ListOptionOptionOption) FlatMapAny(f func(Float64ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex64ListOptionOptionOption) FlatMapBool(f func(Complex64ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex64ListOptionOptionOption) FlatMapString(f func(Complex64ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex64ListOptionOptionOption) FlatMapInt(f func(Complex64ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex64ListOptionOptionOption) FlatMapInt8(f func(Complex64ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex64ListOptionOptionOption) FlatMapInt16(f func(Complex64ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex64ListOptionOptionOption) FlatMapInt32(f func(Complex64ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex64ListOptionOptionOption) FlatMapInt64(f func(Complex64ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex64ListOptionOptionOption) FlatMapUint(f func(Complex64ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex64ListOptionOptionOption) FlatMapUint8(f func(Complex64ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex64ListOptionOptionOption) FlatMapUint16(f func(Complex64ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex64ListOptionOptionOption) FlatMapUint32(f func(Complex64ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex64ListOptionOptionOption) FlatMapUint64(f func(Complex64ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex64ListOptionOptionOption) FlatMapUintptr(f func(Complex64ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex64ListOptionOptionOption) FlatMapByte(f func(Complex64ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex64ListOptionOptionOption) FlatMapRune(f func(Complex64ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex64ListOptionOptionOption) FlatMapFloat32(f func(Complex64ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex64ListOptionOptionOption) FlatMapFloat64(f func(Complex64ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex64ListOptionOptionOption) FlatMapComplex64(f func(Complex64ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex64ListOptionOptionOption) FlatMapComplex128(f func(Complex64ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex64ListOptionOptionOption) FlatMapAny(f func(Complex64ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m Complex128ListOptionOptionOption) FlatMapBool(f func(Complex128ListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m Complex128ListOptionOptionOption) FlatMapString(f func(Complex128ListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m Complex128ListOptionOptionOption) FlatMapInt(f func(Complex128ListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m Complex128ListOptionOptionOption) FlatMapInt8(f func(Complex128ListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m Complex128ListOptionOptionOption) FlatMapInt16(f func(Complex128ListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m Complex128ListOptionOptionOption) FlatMapInt32(f func(Complex128ListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m Complex128ListOptionOptionOption) FlatMapInt64(f func(Complex128ListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m Complex128ListOptionOptionOption) FlatMapUint(f func(Complex128ListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m Complex128ListOptionOptionOption) FlatMapUint8(f func(Complex128ListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m Complex128ListOptionOptionOption) FlatMapUint16(f func(Complex128ListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m Complex128ListOptionOptionOption) FlatMapUint32(f func(Complex128ListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m Complex128ListOptionOptionOption) FlatMapUint64(f func(Complex128ListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m Complex128ListOptionOptionOption) FlatMapUintptr(f func(Complex128ListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m Complex128ListOptionOptionOption) FlatMapByte(f func(Complex128ListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m Complex128ListOptionOptionOption) FlatMapRune(f func(Complex128ListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m Complex128ListOptionOptionOption) FlatMapFloat32(f func(Complex128ListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m Complex128ListOptionOptionOption) FlatMapFloat64(f func(Complex128ListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m Complex128ListOptionOptionOption) FlatMapComplex64(f func(Complex128ListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m Complex128ListOptionOptionOption) FlatMapComplex128(f func(Complex128ListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m Complex128ListOptionOptionOption) FlatMapAny(f func(Complex128ListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
func (m AnyListOptionOptionOption) FlatMapBool(f func(AnyListOptionOption) BoolOption) BoolOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneBool
	}
}
func (m AnyListOptionOptionOption) FlatMapString(f func(AnyListOptionOption) StringOption) StringOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneString
	}
}
func (m AnyListOptionOptionOption) FlatMapInt(f func(AnyListOptionOption) IntOption) IntOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt
	}
}
func (m AnyListOptionOptionOption) FlatMapInt8(f func(AnyListOptionOption) Int8Option) Int8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt8
	}
}
func (m AnyListOptionOptionOption) FlatMapInt16(f func(AnyListOptionOption) Int16Option) Int16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt16
	}
}
func (m AnyListOptionOptionOption) FlatMapInt32(f func(AnyListOptionOption) Int32Option) Int32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt32
	}
}
func (m AnyListOptionOptionOption) FlatMapInt64(f func(AnyListOptionOption) Int64Option) Int64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneInt64
	}
}
func (m AnyListOptionOptionOption) FlatMapUint(f func(AnyListOptionOption) UintOption) UintOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint
	}
}
func (m AnyListOptionOptionOption) FlatMapUint8(f func(AnyListOptionOption) Uint8Option) Uint8Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint8
	}
}
func (m AnyListOptionOptionOption) FlatMapUint16(f func(AnyListOptionOption) Uint16Option) Uint16Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint16
	}
}
func (m AnyListOptionOptionOption) FlatMapUint32(f func(AnyListOptionOption) Uint32Option) Uint32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint32
	}
}
func (m AnyListOptionOptionOption) FlatMapUint64(f func(AnyListOptionOption) Uint64Option) Uint64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUint64
	}
}
func (m AnyListOptionOptionOption) FlatMapUintptr(f func(AnyListOptionOption) UintptrOption) UintptrOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneUintptr
	}
}
func (m AnyListOptionOptionOption) FlatMapByte(f func(AnyListOptionOption) ByteOption) ByteOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneByte
	}
}
func (m AnyListOptionOptionOption) FlatMapRune(f func(AnyListOptionOption) RuneOption) RuneOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneRune
	}
}
func (m AnyListOptionOptionOption) FlatMapFloat32(f func(AnyListOptionOption) Float32Option) Float32Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat32
	}
}
func (m AnyListOptionOptionOption) FlatMapFloat64(f func(AnyListOptionOption) Float64Option) Float64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneFloat64
	}
}
func (m AnyListOptionOptionOption) FlatMapComplex64(f func(AnyListOptionOption) Complex64Option) Complex64Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex64
	}
}
func (m AnyListOptionOptionOption) FlatMapComplex128(f func(AnyListOptionOption) Complex128Option) Complex128Option {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneComplex128
	}
}
func (m AnyListOptionOptionOption) FlatMapAny(f func(AnyListOptionOption) AnyOption) AnyOption {
	if m.IsDefined() {
		return f(*m.value)
	} else {
		return NoneAny
	}
}
