// bootstrap_option_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (m BoolOption) MapBool(f BoolToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m BoolOption) MapString(f BoolToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m BoolOption) MapInt(f BoolToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m BoolOption) MapInt8(f BoolToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m BoolOption) MapInt16(f BoolToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m BoolOption) MapInt32(f BoolToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m BoolOption) MapInt64(f BoolToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m BoolOption) MapUint(f BoolToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m BoolOption) MapUint8(f BoolToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m BoolOption) MapUint16(f BoolToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m BoolOption) MapUint32(f BoolToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m BoolOption) MapUint64(f BoolToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m BoolOption) MapUintptr(f BoolToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m BoolOption) MapByte(f BoolToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m BoolOption) MapRune(f BoolToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m BoolOption) MapFloat32(f BoolToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m BoolOption) MapFloat64(f BoolToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m BoolOption) MapComplex64(f BoolToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m BoolOption) MapComplex128(f BoolToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m BoolOption) MapAny(f BoolToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m BoolOption) MapBoolOption(f BoolToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m BoolOption) MapStringOption(f BoolToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m BoolOption) MapIntOption(f BoolToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m BoolOption) MapInt8Option(f BoolToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m BoolOption) MapInt16Option(f BoolToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m BoolOption) MapInt32Option(f BoolToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m BoolOption) MapInt64Option(f BoolToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m BoolOption) MapUintOption(f BoolToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m BoolOption) MapUint8Option(f BoolToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m BoolOption) MapUint16Option(f BoolToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m BoolOption) MapUint32Option(f BoolToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m BoolOption) MapUint64Option(f BoolToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m BoolOption) MapUintptrOption(f BoolToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m BoolOption) MapByteOption(f BoolToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m BoolOption) MapRuneOption(f BoolToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m BoolOption) MapFloat32Option(f BoolToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m BoolOption) MapFloat64Option(f BoolToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m BoolOption) MapComplex64Option(f BoolToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m BoolOption) MapComplex128Option(f BoolToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m BoolOption) MapAnyOption(f BoolToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m BoolOption) MapBoolArray(f BoolToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m BoolOption) MapStringArray(f BoolToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m BoolOption) MapIntArray(f BoolToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m BoolOption) MapInt8Array(f BoolToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m BoolOption) MapInt16Array(f BoolToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m BoolOption) MapInt32Array(f BoolToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m BoolOption) MapInt64Array(f BoolToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m BoolOption) MapUintArray(f BoolToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m BoolOption) MapUint8Array(f BoolToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m BoolOption) MapUint16Array(f BoolToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m BoolOption) MapUint32Array(f BoolToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m BoolOption) MapUint64Array(f BoolToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m BoolOption) MapUintptrArray(f BoolToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m BoolOption) MapByteArray(f BoolToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m BoolOption) MapRuneArray(f BoolToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m BoolOption) MapFloat32Array(f BoolToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m BoolOption) MapFloat64Array(f BoolToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m BoolOption) MapComplex64Array(f BoolToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m BoolOption) MapComplex128Array(f BoolToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m BoolOption) MapAnyArray(f BoolToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m BoolOption) MapBoolList(f BoolToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m BoolOption) MapStringList(f BoolToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m BoolOption) MapIntList(f BoolToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m BoolOption) MapInt8List(f BoolToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m BoolOption) MapInt16List(f BoolToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m BoolOption) MapInt32List(f BoolToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m BoolOption) MapInt64List(f BoolToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m BoolOption) MapUintList(f BoolToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m BoolOption) MapUint8List(f BoolToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m BoolOption) MapUint16List(f BoolToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m BoolOption) MapUint32List(f BoolToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m BoolOption) MapUint64List(f BoolToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m BoolOption) MapUintptrList(f BoolToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m BoolOption) MapByteList(f BoolToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m BoolOption) MapRuneList(f BoolToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m BoolOption) MapFloat32List(f BoolToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m BoolOption) MapFloat64List(f BoolToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m BoolOption) MapComplex64List(f BoolToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m BoolOption) MapComplex128List(f BoolToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m BoolOption) MapAnyList(f BoolToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m StringOption) MapBool(f StringToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m StringOption) MapString(f StringToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m StringOption) MapInt(f StringToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m StringOption) MapInt8(f StringToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m StringOption) MapInt16(f StringToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m StringOption) MapInt32(f StringToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m StringOption) MapInt64(f StringToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m StringOption) MapUint(f StringToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m StringOption) MapUint8(f StringToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m StringOption) MapUint16(f StringToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m StringOption) MapUint32(f StringToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m StringOption) MapUint64(f StringToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m StringOption) MapUintptr(f StringToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m StringOption) MapByte(f StringToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m StringOption) MapRune(f StringToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m StringOption) MapFloat32(f StringToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m StringOption) MapFloat64(f StringToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m StringOption) MapComplex64(f StringToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m StringOption) MapComplex128(f StringToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m StringOption) MapAny(f StringToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m StringOption) MapBoolOption(f StringToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m StringOption) MapStringOption(f StringToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m StringOption) MapIntOption(f StringToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m StringOption) MapInt8Option(f StringToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m StringOption) MapInt16Option(f StringToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m StringOption) MapInt32Option(f StringToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m StringOption) MapInt64Option(f StringToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m StringOption) MapUintOption(f StringToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m StringOption) MapUint8Option(f StringToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m StringOption) MapUint16Option(f StringToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m StringOption) MapUint32Option(f StringToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m StringOption) MapUint64Option(f StringToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m StringOption) MapUintptrOption(f StringToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m StringOption) MapByteOption(f StringToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m StringOption) MapRuneOption(f StringToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m StringOption) MapFloat32Option(f StringToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m StringOption) MapFloat64Option(f StringToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m StringOption) MapComplex64Option(f StringToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m StringOption) MapComplex128Option(f StringToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m StringOption) MapAnyOption(f StringToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m StringOption) MapBoolArray(f StringToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m StringOption) MapStringArray(f StringToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m StringOption) MapIntArray(f StringToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m StringOption) MapInt8Array(f StringToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m StringOption) MapInt16Array(f StringToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m StringOption) MapInt32Array(f StringToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m StringOption) MapInt64Array(f StringToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m StringOption) MapUintArray(f StringToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m StringOption) MapUint8Array(f StringToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m StringOption) MapUint16Array(f StringToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m StringOption) MapUint32Array(f StringToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m StringOption) MapUint64Array(f StringToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m StringOption) MapUintptrArray(f StringToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m StringOption) MapByteArray(f StringToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m StringOption) MapRuneArray(f StringToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m StringOption) MapFloat32Array(f StringToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m StringOption) MapFloat64Array(f StringToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m StringOption) MapComplex64Array(f StringToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m StringOption) MapComplex128Array(f StringToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m StringOption) MapAnyArray(f StringToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m StringOption) MapBoolList(f StringToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m StringOption) MapStringList(f StringToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m StringOption) MapIntList(f StringToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m StringOption) MapInt8List(f StringToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m StringOption) MapInt16List(f StringToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m StringOption) MapInt32List(f StringToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m StringOption) MapInt64List(f StringToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m StringOption) MapUintList(f StringToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m StringOption) MapUint8List(f StringToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m StringOption) MapUint16List(f StringToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m StringOption) MapUint32List(f StringToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m StringOption) MapUint64List(f StringToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m StringOption) MapUintptrList(f StringToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m StringOption) MapByteList(f StringToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m StringOption) MapRuneList(f StringToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m StringOption) MapFloat32List(f StringToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m StringOption) MapFloat64List(f StringToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m StringOption) MapComplex64List(f StringToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m StringOption) MapComplex128List(f StringToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m StringOption) MapAnyList(f StringToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m IntOption) MapBool(f IntToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m IntOption) MapString(f IntToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m IntOption) MapInt(f IntToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m IntOption) MapInt8(f IntToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m IntOption) MapInt16(f IntToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m IntOption) MapInt32(f IntToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m IntOption) MapInt64(f IntToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m IntOption) MapUint(f IntToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m IntOption) MapUint8(f IntToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m IntOption) MapUint16(f IntToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m IntOption) MapUint32(f IntToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m IntOption) MapUint64(f IntToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m IntOption) MapUintptr(f IntToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m IntOption) MapByte(f IntToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m IntOption) MapRune(f IntToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m IntOption) MapFloat32(f IntToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m IntOption) MapFloat64(f IntToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m IntOption) MapComplex64(f IntToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m IntOption) MapComplex128(f IntToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m IntOption) MapAny(f IntToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m IntOption) MapBoolOption(f IntToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m IntOption) MapStringOption(f IntToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m IntOption) MapIntOption(f IntToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m IntOption) MapInt8Option(f IntToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m IntOption) MapInt16Option(f IntToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m IntOption) MapInt32Option(f IntToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m IntOption) MapInt64Option(f IntToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m IntOption) MapUintOption(f IntToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m IntOption) MapUint8Option(f IntToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m IntOption) MapUint16Option(f IntToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m IntOption) MapUint32Option(f IntToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m IntOption) MapUint64Option(f IntToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m IntOption) MapUintptrOption(f IntToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m IntOption) MapByteOption(f IntToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m IntOption) MapRuneOption(f IntToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m IntOption) MapFloat32Option(f IntToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m IntOption) MapFloat64Option(f IntToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m IntOption) MapComplex64Option(f IntToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m IntOption) MapComplex128Option(f IntToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m IntOption) MapAnyOption(f IntToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m IntOption) MapBoolArray(f IntToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m IntOption) MapStringArray(f IntToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m IntOption) MapIntArray(f IntToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m IntOption) MapInt8Array(f IntToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m IntOption) MapInt16Array(f IntToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m IntOption) MapInt32Array(f IntToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m IntOption) MapInt64Array(f IntToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m IntOption) MapUintArray(f IntToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m IntOption) MapUint8Array(f IntToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m IntOption) MapUint16Array(f IntToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m IntOption) MapUint32Array(f IntToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m IntOption) MapUint64Array(f IntToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m IntOption) MapUintptrArray(f IntToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m IntOption) MapByteArray(f IntToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m IntOption) MapRuneArray(f IntToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m IntOption) MapFloat32Array(f IntToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m IntOption) MapFloat64Array(f IntToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m IntOption) MapComplex64Array(f IntToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m IntOption) MapComplex128Array(f IntToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m IntOption) MapAnyArray(f IntToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m IntOption) MapBoolList(f IntToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m IntOption) MapStringList(f IntToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m IntOption) MapIntList(f IntToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m IntOption) MapInt8List(f IntToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m IntOption) MapInt16List(f IntToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m IntOption) MapInt32List(f IntToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m IntOption) MapInt64List(f IntToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m IntOption) MapUintList(f IntToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m IntOption) MapUint8List(f IntToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m IntOption) MapUint16List(f IntToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m IntOption) MapUint32List(f IntToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m IntOption) MapUint64List(f IntToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m IntOption) MapUintptrList(f IntToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m IntOption) MapByteList(f IntToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m IntOption) MapRuneList(f IntToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m IntOption) MapFloat32List(f IntToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m IntOption) MapFloat64List(f IntToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m IntOption) MapComplex64List(f IntToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m IntOption) MapComplex128List(f IntToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m IntOption) MapAnyList(f IntToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int8Option) MapBool(f Int8ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int8Option) MapString(f Int8ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int8Option) MapInt(f Int8ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int8Option) MapInt8(f Int8ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int8Option) MapInt16(f Int8ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int8Option) MapInt32(f Int8ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int8Option) MapInt64(f Int8ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int8Option) MapUint(f Int8ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int8Option) MapUint8(f Int8ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int8Option) MapUint16(f Int8ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int8Option) MapUint32(f Int8ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int8Option) MapUint64(f Int8ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int8Option) MapUintptr(f Int8ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int8Option) MapByte(f Int8ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int8Option) MapRune(f Int8ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int8Option) MapFloat32(f Int8ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int8Option) MapFloat64(f Int8ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int8Option) MapComplex64(f Int8ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int8Option) MapComplex128(f Int8ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int8Option) MapAny(f Int8ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int8Option) MapBoolOption(f Int8ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int8Option) MapStringOption(f Int8ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int8Option) MapIntOption(f Int8ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int8Option) MapInt8Option(f Int8ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int8Option) MapInt16Option(f Int8ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int8Option) MapInt32Option(f Int8ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int8Option) MapInt64Option(f Int8ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int8Option) MapUintOption(f Int8ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int8Option) MapUint8Option(f Int8ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int8Option) MapUint16Option(f Int8ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int8Option) MapUint32Option(f Int8ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int8Option) MapUint64Option(f Int8ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int8Option) MapUintptrOption(f Int8ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int8Option) MapByteOption(f Int8ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int8Option) MapRuneOption(f Int8ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int8Option) MapFloat32Option(f Int8ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int8Option) MapFloat64Option(f Int8ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int8Option) MapComplex64Option(f Int8ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int8Option) MapComplex128Option(f Int8ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int8Option) MapAnyOption(f Int8ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int8Option) MapBoolArray(f Int8ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int8Option) MapStringArray(f Int8ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int8Option) MapIntArray(f Int8ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int8Option) MapInt8Array(f Int8ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int8Option) MapInt16Array(f Int8ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int8Option) MapInt32Array(f Int8ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int8Option) MapInt64Array(f Int8ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int8Option) MapUintArray(f Int8ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int8Option) MapUint8Array(f Int8ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int8Option) MapUint16Array(f Int8ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int8Option) MapUint32Array(f Int8ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int8Option) MapUint64Array(f Int8ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int8Option) MapUintptrArray(f Int8ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int8Option) MapByteArray(f Int8ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int8Option) MapRuneArray(f Int8ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int8Option) MapFloat32Array(f Int8ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int8Option) MapFloat64Array(f Int8ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int8Option) MapComplex64Array(f Int8ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int8Option) MapComplex128Array(f Int8ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int8Option) MapAnyArray(f Int8ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int8Option) MapBoolList(f Int8ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int8Option) MapStringList(f Int8ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int8Option) MapIntList(f Int8ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int8Option) MapInt8List(f Int8ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int8Option) MapInt16List(f Int8ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int8Option) MapInt32List(f Int8ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int8Option) MapInt64List(f Int8ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int8Option) MapUintList(f Int8ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int8Option) MapUint8List(f Int8ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int8Option) MapUint16List(f Int8ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int8Option) MapUint32List(f Int8ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int8Option) MapUint64List(f Int8ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int8Option) MapUintptrList(f Int8ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int8Option) MapByteList(f Int8ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int8Option) MapRuneList(f Int8ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int8Option) MapFloat32List(f Int8ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int8Option) MapFloat64List(f Int8ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int8Option) MapComplex64List(f Int8ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int8Option) MapComplex128List(f Int8ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int8Option) MapAnyList(f Int8ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int16Option) MapBool(f Int16ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int16Option) MapString(f Int16ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int16Option) MapInt(f Int16ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int16Option) MapInt8(f Int16ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int16Option) MapInt16(f Int16ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int16Option) MapInt32(f Int16ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int16Option) MapInt64(f Int16ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int16Option) MapUint(f Int16ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int16Option) MapUint8(f Int16ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int16Option) MapUint16(f Int16ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int16Option) MapUint32(f Int16ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int16Option) MapUint64(f Int16ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int16Option) MapUintptr(f Int16ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int16Option) MapByte(f Int16ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int16Option) MapRune(f Int16ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int16Option) MapFloat32(f Int16ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int16Option) MapFloat64(f Int16ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int16Option) MapComplex64(f Int16ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int16Option) MapComplex128(f Int16ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int16Option) MapAny(f Int16ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int16Option) MapBoolOption(f Int16ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int16Option) MapStringOption(f Int16ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int16Option) MapIntOption(f Int16ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int16Option) MapInt8Option(f Int16ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int16Option) MapInt16Option(f Int16ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int16Option) MapInt32Option(f Int16ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int16Option) MapInt64Option(f Int16ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int16Option) MapUintOption(f Int16ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int16Option) MapUint8Option(f Int16ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int16Option) MapUint16Option(f Int16ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int16Option) MapUint32Option(f Int16ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int16Option) MapUint64Option(f Int16ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int16Option) MapUintptrOption(f Int16ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int16Option) MapByteOption(f Int16ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int16Option) MapRuneOption(f Int16ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int16Option) MapFloat32Option(f Int16ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int16Option) MapFloat64Option(f Int16ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int16Option) MapComplex64Option(f Int16ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int16Option) MapComplex128Option(f Int16ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int16Option) MapAnyOption(f Int16ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int16Option) MapBoolArray(f Int16ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int16Option) MapStringArray(f Int16ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int16Option) MapIntArray(f Int16ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int16Option) MapInt8Array(f Int16ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int16Option) MapInt16Array(f Int16ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int16Option) MapInt32Array(f Int16ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int16Option) MapInt64Array(f Int16ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int16Option) MapUintArray(f Int16ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int16Option) MapUint8Array(f Int16ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int16Option) MapUint16Array(f Int16ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int16Option) MapUint32Array(f Int16ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int16Option) MapUint64Array(f Int16ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int16Option) MapUintptrArray(f Int16ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int16Option) MapByteArray(f Int16ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int16Option) MapRuneArray(f Int16ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int16Option) MapFloat32Array(f Int16ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int16Option) MapFloat64Array(f Int16ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int16Option) MapComplex64Array(f Int16ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int16Option) MapComplex128Array(f Int16ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int16Option) MapAnyArray(f Int16ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int16Option) MapBoolList(f Int16ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int16Option) MapStringList(f Int16ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int16Option) MapIntList(f Int16ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int16Option) MapInt8List(f Int16ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int16Option) MapInt16List(f Int16ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int16Option) MapInt32List(f Int16ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int16Option) MapInt64List(f Int16ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int16Option) MapUintList(f Int16ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int16Option) MapUint8List(f Int16ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int16Option) MapUint16List(f Int16ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int16Option) MapUint32List(f Int16ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int16Option) MapUint64List(f Int16ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int16Option) MapUintptrList(f Int16ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int16Option) MapByteList(f Int16ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int16Option) MapRuneList(f Int16ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int16Option) MapFloat32List(f Int16ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int16Option) MapFloat64List(f Int16ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int16Option) MapComplex64List(f Int16ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int16Option) MapComplex128List(f Int16ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int16Option) MapAnyList(f Int16ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int32Option) MapBool(f Int32ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int32Option) MapString(f Int32ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int32Option) MapInt(f Int32ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int32Option) MapInt8(f Int32ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int32Option) MapInt16(f Int32ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int32Option) MapInt32(f Int32ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int32Option) MapInt64(f Int32ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int32Option) MapUint(f Int32ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int32Option) MapUint8(f Int32ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int32Option) MapUint16(f Int32ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int32Option) MapUint32(f Int32ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int32Option) MapUint64(f Int32ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int32Option) MapUintptr(f Int32ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int32Option) MapByte(f Int32ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int32Option) MapRune(f Int32ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int32Option) MapFloat32(f Int32ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int32Option) MapFloat64(f Int32ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int32Option) MapComplex64(f Int32ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int32Option) MapComplex128(f Int32ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int32Option) MapAny(f Int32ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int32Option) MapBoolOption(f Int32ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int32Option) MapStringOption(f Int32ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int32Option) MapIntOption(f Int32ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int32Option) MapInt8Option(f Int32ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int32Option) MapInt16Option(f Int32ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int32Option) MapInt32Option(f Int32ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int32Option) MapInt64Option(f Int32ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int32Option) MapUintOption(f Int32ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int32Option) MapUint8Option(f Int32ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int32Option) MapUint16Option(f Int32ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int32Option) MapUint32Option(f Int32ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int32Option) MapUint64Option(f Int32ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int32Option) MapUintptrOption(f Int32ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int32Option) MapByteOption(f Int32ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int32Option) MapRuneOption(f Int32ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int32Option) MapFloat32Option(f Int32ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int32Option) MapFloat64Option(f Int32ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int32Option) MapComplex64Option(f Int32ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int32Option) MapComplex128Option(f Int32ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int32Option) MapAnyOption(f Int32ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int32Option) MapBoolArray(f Int32ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int32Option) MapStringArray(f Int32ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int32Option) MapIntArray(f Int32ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int32Option) MapInt8Array(f Int32ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int32Option) MapInt16Array(f Int32ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int32Option) MapInt32Array(f Int32ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int32Option) MapInt64Array(f Int32ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int32Option) MapUintArray(f Int32ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int32Option) MapUint8Array(f Int32ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int32Option) MapUint16Array(f Int32ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int32Option) MapUint32Array(f Int32ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int32Option) MapUint64Array(f Int32ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int32Option) MapUintptrArray(f Int32ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int32Option) MapByteArray(f Int32ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int32Option) MapRuneArray(f Int32ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int32Option) MapFloat32Array(f Int32ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int32Option) MapFloat64Array(f Int32ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int32Option) MapComplex64Array(f Int32ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int32Option) MapComplex128Array(f Int32ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int32Option) MapAnyArray(f Int32ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int32Option) MapBoolList(f Int32ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int32Option) MapStringList(f Int32ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int32Option) MapIntList(f Int32ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int32Option) MapInt8List(f Int32ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int32Option) MapInt16List(f Int32ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int32Option) MapInt32List(f Int32ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int32Option) MapInt64List(f Int32ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int32Option) MapUintList(f Int32ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int32Option) MapUint8List(f Int32ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int32Option) MapUint16List(f Int32ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int32Option) MapUint32List(f Int32ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int32Option) MapUint64List(f Int32ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int32Option) MapUintptrList(f Int32ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int32Option) MapByteList(f Int32ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int32Option) MapRuneList(f Int32ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int32Option) MapFloat32List(f Int32ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int32Option) MapFloat64List(f Int32ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int32Option) MapComplex64List(f Int32ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int32Option) MapComplex128List(f Int32ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int32Option) MapAnyList(f Int32ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int64Option) MapBool(f Int64ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int64Option) MapString(f Int64ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int64Option) MapInt(f Int64ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int64Option) MapInt8(f Int64ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int64Option) MapInt16(f Int64ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int64Option) MapInt32(f Int64ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int64Option) MapInt64(f Int64ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int64Option) MapUint(f Int64ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int64Option) MapUint8(f Int64ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int64Option) MapUint16(f Int64ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int64Option) MapUint32(f Int64ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int64Option) MapUint64(f Int64ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int64Option) MapUintptr(f Int64ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int64Option) MapByte(f Int64ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int64Option) MapRune(f Int64ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int64Option) MapFloat32(f Int64ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int64Option) MapFloat64(f Int64ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int64Option) MapComplex64(f Int64ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int64Option) MapComplex128(f Int64ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int64Option) MapAny(f Int64ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int64Option) MapBoolOption(f Int64ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int64Option) MapStringOption(f Int64ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int64Option) MapIntOption(f Int64ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int64Option) MapInt8Option(f Int64ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int64Option) MapInt16Option(f Int64ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int64Option) MapInt32Option(f Int64ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int64Option) MapInt64Option(f Int64ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int64Option) MapUintOption(f Int64ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int64Option) MapUint8Option(f Int64ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int64Option) MapUint16Option(f Int64ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int64Option) MapUint32Option(f Int64ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int64Option) MapUint64Option(f Int64ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int64Option) MapUintptrOption(f Int64ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int64Option) MapByteOption(f Int64ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int64Option) MapRuneOption(f Int64ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int64Option) MapFloat32Option(f Int64ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int64Option) MapFloat64Option(f Int64ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int64Option) MapComplex64Option(f Int64ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int64Option) MapComplex128Option(f Int64ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int64Option) MapAnyOption(f Int64ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int64Option) MapBoolArray(f Int64ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int64Option) MapStringArray(f Int64ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int64Option) MapIntArray(f Int64ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int64Option) MapInt8Array(f Int64ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int64Option) MapInt16Array(f Int64ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int64Option) MapInt32Array(f Int64ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int64Option) MapInt64Array(f Int64ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int64Option) MapUintArray(f Int64ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int64Option) MapUint8Array(f Int64ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int64Option) MapUint16Array(f Int64ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int64Option) MapUint32Array(f Int64ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int64Option) MapUint64Array(f Int64ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int64Option) MapUintptrArray(f Int64ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int64Option) MapByteArray(f Int64ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int64Option) MapRuneArray(f Int64ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int64Option) MapFloat32Array(f Int64ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int64Option) MapFloat64Array(f Int64ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int64Option) MapComplex64Array(f Int64ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int64Option) MapComplex128Array(f Int64ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int64Option) MapAnyArray(f Int64ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int64Option) MapBoolList(f Int64ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int64Option) MapStringList(f Int64ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int64Option) MapIntList(f Int64ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int64Option) MapInt8List(f Int64ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int64Option) MapInt16List(f Int64ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int64Option) MapInt32List(f Int64ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int64Option) MapInt64List(f Int64ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int64Option) MapUintList(f Int64ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int64Option) MapUint8List(f Int64ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int64Option) MapUint16List(f Int64ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int64Option) MapUint32List(f Int64ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int64Option) MapUint64List(f Int64ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int64Option) MapUintptrList(f Int64ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int64Option) MapByteList(f Int64ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int64Option) MapRuneList(f Int64ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int64Option) MapFloat32List(f Int64ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int64Option) MapFloat64List(f Int64ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int64Option) MapComplex64List(f Int64ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int64Option) MapComplex128List(f Int64ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int64Option) MapAnyList(f Int64ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintOption) MapBool(f UintToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintOption) MapString(f UintToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintOption) MapInt(f UintToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintOption) MapInt8(f UintToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintOption) MapInt16(f UintToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintOption) MapInt32(f UintToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintOption) MapInt64(f UintToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintOption) MapUint(f UintToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintOption) MapUint8(f UintToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintOption) MapUint16(f UintToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintOption) MapUint32(f UintToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintOption) MapUint64(f UintToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintOption) MapUintptr(f UintToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintOption) MapByte(f UintToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintOption) MapRune(f UintToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintOption) MapFloat32(f UintToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintOption) MapFloat64(f UintToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintOption) MapComplex64(f UintToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintOption) MapComplex128(f UintToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintOption) MapAny(f UintToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintOption) MapBoolOption(f UintToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintOption) MapStringOption(f UintToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintOption) MapIntOption(f UintToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintOption) MapInt8Option(f UintToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintOption) MapInt16Option(f UintToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintOption) MapInt32Option(f UintToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintOption) MapInt64Option(f UintToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintOption) MapUintOption(f UintToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintOption) MapUint8Option(f UintToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintOption) MapUint16Option(f UintToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintOption) MapUint32Option(f UintToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintOption) MapUint64Option(f UintToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintOption) MapUintptrOption(f UintToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintOption) MapByteOption(f UintToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintOption) MapRuneOption(f UintToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintOption) MapFloat32Option(f UintToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintOption) MapFloat64Option(f UintToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintOption) MapComplex64Option(f UintToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintOption) MapComplex128Option(f UintToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintOption) MapAnyOption(f UintToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintOption) MapBoolArray(f UintToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintOption) MapStringArray(f UintToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintOption) MapIntArray(f UintToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintOption) MapInt8Array(f UintToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintOption) MapInt16Array(f UintToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintOption) MapInt32Array(f UintToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintOption) MapInt64Array(f UintToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintOption) MapUintArray(f UintToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintOption) MapUint8Array(f UintToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintOption) MapUint16Array(f UintToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintOption) MapUint32Array(f UintToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintOption) MapUint64Array(f UintToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintOption) MapUintptrArray(f UintToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintOption) MapByteArray(f UintToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintOption) MapRuneArray(f UintToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintOption) MapFloat32Array(f UintToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintOption) MapFloat64Array(f UintToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintOption) MapComplex64Array(f UintToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintOption) MapComplex128Array(f UintToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintOption) MapAnyArray(f UintToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintOption) MapBoolList(f UintToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintOption) MapStringList(f UintToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintOption) MapIntList(f UintToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintOption) MapInt8List(f UintToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintOption) MapInt16List(f UintToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintOption) MapInt32List(f UintToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintOption) MapInt64List(f UintToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintOption) MapUintList(f UintToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintOption) MapUint8List(f UintToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintOption) MapUint16List(f UintToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintOption) MapUint32List(f UintToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintOption) MapUint64List(f UintToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintOption) MapUintptrList(f UintToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintOption) MapByteList(f UintToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintOption) MapRuneList(f UintToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintOption) MapFloat32List(f UintToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintOption) MapFloat64List(f UintToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintOption) MapComplex64List(f UintToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintOption) MapComplex128List(f UintToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintOption) MapAnyList(f UintToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint8Option) MapBool(f Uint8ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint8Option) MapString(f Uint8ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint8Option) MapInt(f Uint8ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint8Option) MapInt8(f Uint8ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint8Option) MapInt16(f Uint8ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint8Option) MapInt32(f Uint8ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint8Option) MapInt64(f Uint8ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint8Option) MapUint(f Uint8ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint8Option) MapUint8(f Uint8ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint8Option) MapUint16(f Uint8ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint8Option) MapUint32(f Uint8ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint8Option) MapUint64(f Uint8ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint8Option) MapUintptr(f Uint8ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint8Option) MapByte(f Uint8ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint8Option) MapRune(f Uint8ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint8Option) MapFloat32(f Uint8ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint8Option) MapFloat64(f Uint8ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint8Option) MapComplex64(f Uint8ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint8Option) MapComplex128(f Uint8ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint8Option) MapAny(f Uint8ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint8Option) MapBoolOption(f Uint8ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint8Option) MapStringOption(f Uint8ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint8Option) MapIntOption(f Uint8ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint8Option) MapInt8Option(f Uint8ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint8Option) MapInt16Option(f Uint8ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint8Option) MapInt32Option(f Uint8ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint8Option) MapInt64Option(f Uint8ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint8Option) MapUintOption(f Uint8ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint8Option) MapUint8Option(f Uint8ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint8Option) MapUint16Option(f Uint8ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint8Option) MapUint32Option(f Uint8ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint8Option) MapUint64Option(f Uint8ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint8Option) MapUintptrOption(f Uint8ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint8Option) MapByteOption(f Uint8ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint8Option) MapRuneOption(f Uint8ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint8Option) MapFloat32Option(f Uint8ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint8Option) MapFloat64Option(f Uint8ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint8Option) MapComplex64Option(f Uint8ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint8Option) MapComplex128Option(f Uint8ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint8Option) MapAnyOption(f Uint8ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint8Option) MapBoolArray(f Uint8ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint8Option) MapStringArray(f Uint8ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint8Option) MapIntArray(f Uint8ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint8Option) MapInt8Array(f Uint8ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint8Option) MapInt16Array(f Uint8ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint8Option) MapInt32Array(f Uint8ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint8Option) MapInt64Array(f Uint8ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint8Option) MapUintArray(f Uint8ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint8Option) MapUint8Array(f Uint8ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint8Option) MapUint16Array(f Uint8ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint8Option) MapUint32Array(f Uint8ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint8Option) MapUint64Array(f Uint8ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint8Option) MapUintptrArray(f Uint8ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint8Option) MapByteArray(f Uint8ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint8Option) MapRuneArray(f Uint8ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint8Option) MapFloat32Array(f Uint8ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint8Option) MapFloat64Array(f Uint8ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint8Option) MapComplex64Array(f Uint8ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint8Option) MapComplex128Array(f Uint8ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint8Option) MapAnyArray(f Uint8ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint8Option) MapBoolList(f Uint8ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint8Option) MapStringList(f Uint8ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint8Option) MapIntList(f Uint8ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint8Option) MapInt8List(f Uint8ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint8Option) MapInt16List(f Uint8ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint8Option) MapInt32List(f Uint8ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint8Option) MapInt64List(f Uint8ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint8Option) MapUintList(f Uint8ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint8Option) MapUint8List(f Uint8ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint8Option) MapUint16List(f Uint8ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint8Option) MapUint32List(f Uint8ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint8Option) MapUint64List(f Uint8ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint8Option) MapUintptrList(f Uint8ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint8Option) MapByteList(f Uint8ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint8Option) MapRuneList(f Uint8ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint8Option) MapFloat32List(f Uint8ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint8Option) MapFloat64List(f Uint8ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint8Option) MapComplex64List(f Uint8ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint8Option) MapComplex128List(f Uint8ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint8Option) MapAnyList(f Uint8ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint16Option) MapBool(f Uint16ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint16Option) MapString(f Uint16ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint16Option) MapInt(f Uint16ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint16Option) MapInt8(f Uint16ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint16Option) MapInt16(f Uint16ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint16Option) MapInt32(f Uint16ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint16Option) MapInt64(f Uint16ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint16Option) MapUint(f Uint16ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint16Option) MapUint8(f Uint16ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint16Option) MapUint16(f Uint16ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint16Option) MapUint32(f Uint16ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint16Option) MapUint64(f Uint16ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint16Option) MapUintptr(f Uint16ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint16Option) MapByte(f Uint16ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint16Option) MapRune(f Uint16ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint16Option) MapFloat32(f Uint16ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint16Option) MapFloat64(f Uint16ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint16Option) MapComplex64(f Uint16ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint16Option) MapComplex128(f Uint16ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint16Option) MapAny(f Uint16ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint16Option) MapBoolOption(f Uint16ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint16Option) MapStringOption(f Uint16ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint16Option) MapIntOption(f Uint16ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint16Option) MapInt8Option(f Uint16ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint16Option) MapInt16Option(f Uint16ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint16Option) MapInt32Option(f Uint16ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint16Option) MapInt64Option(f Uint16ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint16Option) MapUintOption(f Uint16ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint16Option) MapUint8Option(f Uint16ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint16Option) MapUint16Option(f Uint16ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint16Option) MapUint32Option(f Uint16ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint16Option) MapUint64Option(f Uint16ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint16Option) MapUintptrOption(f Uint16ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint16Option) MapByteOption(f Uint16ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint16Option) MapRuneOption(f Uint16ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint16Option) MapFloat32Option(f Uint16ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint16Option) MapFloat64Option(f Uint16ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint16Option) MapComplex64Option(f Uint16ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint16Option) MapComplex128Option(f Uint16ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint16Option) MapAnyOption(f Uint16ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint16Option) MapBoolArray(f Uint16ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint16Option) MapStringArray(f Uint16ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint16Option) MapIntArray(f Uint16ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint16Option) MapInt8Array(f Uint16ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint16Option) MapInt16Array(f Uint16ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint16Option) MapInt32Array(f Uint16ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint16Option) MapInt64Array(f Uint16ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint16Option) MapUintArray(f Uint16ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint16Option) MapUint8Array(f Uint16ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint16Option) MapUint16Array(f Uint16ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint16Option) MapUint32Array(f Uint16ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint16Option) MapUint64Array(f Uint16ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint16Option) MapUintptrArray(f Uint16ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint16Option) MapByteArray(f Uint16ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint16Option) MapRuneArray(f Uint16ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint16Option) MapFloat32Array(f Uint16ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint16Option) MapFloat64Array(f Uint16ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint16Option) MapComplex64Array(f Uint16ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint16Option) MapComplex128Array(f Uint16ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint16Option) MapAnyArray(f Uint16ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint16Option) MapBoolList(f Uint16ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint16Option) MapStringList(f Uint16ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint16Option) MapIntList(f Uint16ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint16Option) MapInt8List(f Uint16ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint16Option) MapInt16List(f Uint16ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint16Option) MapInt32List(f Uint16ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint16Option) MapInt64List(f Uint16ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint16Option) MapUintList(f Uint16ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint16Option) MapUint8List(f Uint16ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint16Option) MapUint16List(f Uint16ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint16Option) MapUint32List(f Uint16ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint16Option) MapUint64List(f Uint16ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint16Option) MapUintptrList(f Uint16ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint16Option) MapByteList(f Uint16ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint16Option) MapRuneList(f Uint16ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint16Option) MapFloat32List(f Uint16ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint16Option) MapFloat64List(f Uint16ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint16Option) MapComplex64List(f Uint16ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint16Option) MapComplex128List(f Uint16ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint16Option) MapAnyList(f Uint16ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint32Option) MapBool(f Uint32ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint32Option) MapString(f Uint32ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint32Option) MapInt(f Uint32ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint32Option) MapInt8(f Uint32ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint32Option) MapInt16(f Uint32ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint32Option) MapInt32(f Uint32ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint32Option) MapInt64(f Uint32ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint32Option) MapUint(f Uint32ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint32Option) MapUint8(f Uint32ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint32Option) MapUint16(f Uint32ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint32Option) MapUint32(f Uint32ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint32Option) MapUint64(f Uint32ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint32Option) MapUintptr(f Uint32ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint32Option) MapByte(f Uint32ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint32Option) MapRune(f Uint32ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint32Option) MapFloat32(f Uint32ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint32Option) MapFloat64(f Uint32ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint32Option) MapComplex64(f Uint32ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint32Option) MapComplex128(f Uint32ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint32Option) MapAny(f Uint32ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint32Option) MapBoolOption(f Uint32ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint32Option) MapStringOption(f Uint32ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint32Option) MapIntOption(f Uint32ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint32Option) MapInt8Option(f Uint32ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint32Option) MapInt16Option(f Uint32ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint32Option) MapInt32Option(f Uint32ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint32Option) MapInt64Option(f Uint32ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint32Option) MapUintOption(f Uint32ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint32Option) MapUint8Option(f Uint32ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint32Option) MapUint16Option(f Uint32ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint32Option) MapUint32Option(f Uint32ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint32Option) MapUint64Option(f Uint32ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint32Option) MapUintptrOption(f Uint32ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint32Option) MapByteOption(f Uint32ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint32Option) MapRuneOption(f Uint32ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint32Option) MapFloat32Option(f Uint32ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint32Option) MapFloat64Option(f Uint32ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint32Option) MapComplex64Option(f Uint32ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint32Option) MapComplex128Option(f Uint32ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint32Option) MapAnyOption(f Uint32ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint32Option) MapBoolArray(f Uint32ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint32Option) MapStringArray(f Uint32ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint32Option) MapIntArray(f Uint32ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint32Option) MapInt8Array(f Uint32ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint32Option) MapInt16Array(f Uint32ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint32Option) MapInt32Array(f Uint32ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint32Option) MapInt64Array(f Uint32ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint32Option) MapUintArray(f Uint32ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint32Option) MapUint8Array(f Uint32ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint32Option) MapUint16Array(f Uint32ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint32Option) MapUint32Array(f Uint32ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint32Option) MapUint64Array(f Uint32ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint32Option) MapUintptrArray(f Uint32ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint32Option) MapByteArray(f Uint32ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint32Option) MapRuneArray(f Uint32ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint32Option) MapFloat32Array(f Uint32ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint32Option) MapFloat64Array(f Uint32ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint32Option) MapComplex64Array(f Uint32ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint32Option) MapComplex128Array(f Uint32ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint32Option) MapAnyArray(f Uint32ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint32Option) MapBoolList(f Uint32ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint32Option) MapStringList(f Uint32ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint32Option) MapIntList(f Uint32ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint32Option) MapInt8List(f Uint32ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint32Option) MapInt16List(f Uint32ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint32Option) MapInt32List(f Uint32ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint32Option) MapInt64List(f Uint32ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint32Option) MapUintList(f Uint32ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint32Option) MapUint8List(f Uint32ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint32Option) MapUint16List(f Uint32ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint32Option) MapUint32List(f Uint32ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint32Option) MapUint64List(f Uint32ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint32Option) MapUintptrList(f Uint32ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint32Option) MapByteList(f Uint32ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint32Option) MapRuneList(f Uint32ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint32Option) MapFloat32List(f Uint32ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint32Option) MapFloat64List(f Uint32ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint32Option) MapComplex64List(f Uint32ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint32Option) MapComplex128List(f Uint32ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint32Option) MapAnyList(f Uint32ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint64Option) MapBool(f Uint64ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint64Option) MapString(f Uint64ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint64Option) MapInt(f Uint64ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint64Option) MapInt8(f Uint64ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint64Option) MapInt16(f Uint64ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint64Option) MapInt32(f Uint64ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint64Option) MapInt64(f Uint64ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint64Option) MapUint(f Uint64ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint64Option) MapUint8(f Uint64ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint64Option) MapUint16(f Uint64ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint64Option) MapUint32(f Uint64ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint64Option) MapUint64(f Uint64ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint64Option) MapUintptr(f Uint64ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint64Option) MapByte(f Uint64ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint64Option) MapRune(f Uint64ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint64Option) MapFloat32(f Uint64ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint64Option) MapFloat64(f Uint64ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint64Option) MapComplex64(f Uint64ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint64Option) MapComplex128(f Uint64ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint64Option) MapAny(f Uint64ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint64Option) MapBoolOption(f Uint64ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint64Option) MapStringOption(f Uint64ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint64Option) MapIntOption(f Uint64ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint64Option) MapInt8Option(f Uint64ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint64Option) MapInt16Option(f Uint64ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint64Option) MapInt32Option(f Uint64ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint64Option) MapInt64Option(f Uint64ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint64Option) MapUintOption(f Uint64ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint64Option) MapUint8Option(f Uint64ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint64Option) MapUint16Option(f Uint64ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint64Option) MapUint32Option(f Uint64ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint64Option) MapUint64Option(f Uint64ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint64Option) MapUintptrOption(f Uint64ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint64Option) MapByteOption(f Uint64ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint64Option) MapRuneOption(f Uint64ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint64Option) MapFloat32Option(f Uint64ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint64Option) MapFloat64Option(f Uint64ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint64Option) MapComplex64Option(f Uint64ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint64Option) MapComplex128Option(f Uint64ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint64Option) MapAnyOption(f Uint64ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint64Option) MapBoolArray(f Uint64ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint64Option) MapStringArray(f Uint64ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint64Option) MapIntArray(f Uint64ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint64Option) MapInt8Array(f Uint64ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint64Option) MapInt16Array(f Uint64ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint64Option) MapInt32Array(f Uint64ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint64Option) MapInt64Array(f Uint64ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint64Option) MapUintArray(f Uint64ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint64Option) MapUint8Array(f Uint64ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint64Option) MapUint16Array(f Uint64ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint64Option) MapUint32Array(f Uint64ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint64Option) MapUint64Array(f Uint64ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint64Option) MapUintptrArray(f Uint64ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint64Option) MapByteArray(f Uint64ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint64Option) MapRuneArray(f Uint64ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint64Option) MapFloat32Array(f Uint64ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint64Option) MapFloat64Array(f Uint64ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint64Option) MapComplex64Array(f Uint64ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint64Option) MapComplex128Array(f Uint64ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint64Option) MapAnyArray(f Uint64ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint64Option) MapBoolList(f Uint64ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint64Option) MapStringList(f Uint64ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint64Option) MapIntList(f Uint64ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint64Option) MapInt8List(f Uint64ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint64Option) MapInt16List(f Uint64ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint64Option) MapInt32List(f Uint64ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint64Option) MapInt64List(f Uint64ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint64Option) MapUintList(f Uint64ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint64Option) MapUint8List(f Uint64ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint64Option) MapUint16List(f Uint64ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint64Option) MapUint32List(f Uint64ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint64Option) MapUint64List(f Uint64ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint64Option) MapUintptrList(f Uint64ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint64Option) MapByteList(f Uint64ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint64Option) MapRuneList(f Uint64ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint64Option) MapFloat32List(f Uint64ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint64Option) MapFloat64List(f Uint64ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint64Option) MapComplex64List(f Uint64ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint64Option) MapComplex128List(f Uint64ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint64Option) MapAnyList(f Uint64ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintptrOption) MapBool(f UintptrToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintptrOption) MapString(f UintptrToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintptrOption) MapInt(f UintptrToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintptrOption) MapInt8(f UintptrToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintptrOption) MapInt16(f UintptrToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintptrOption) MapInt32(f UintptrToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintptrOption) MapInt64(f UintptrToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintptrOption) MapUint(f UintptrToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintptrOption) MapUint8(f UintptrToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintptrOption) MapUint16(f UintptrToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintptrOption) MapUint32(f UintptrToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintptrOption) MapUint64(f UintptrToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintptrOption) MapUintptr(f UintptrToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintptrOption) MapByte(f UintptrToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintptrOption) MapRune(f UintptrToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintptrOption) MapFloat32(f UintptrToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintptrOption) MapFloat64(f UintptrToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintptrOption) MapComplex64(f UintptrToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintptrOption) MapComplex128(f UintptrToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintptrOption) MapAny(f UintptrToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintptrOption) MapBoolOption(f UintptrToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintptrOption) MapStringOption(f UintptrToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintptrOption) MapIntOption(f UintptrToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintptrOption) MapInt8Option(f UintptrToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintptrOption) MapInt16Option(f UintptrToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintptrOption) MapInt32Option(f UintptrToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintptrOption) MapInt64Option(f UintptrToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintptrOption) MapUintOption(f UintptrToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintptrOption) MapUint8Option(f UintptrToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintptrOption) MapUint16Option(f UintptrToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintptrOption) MapUint32Option(f UintptrToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintptrOption) MapUint64Option(f UintptrToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintptrOption) MapUintptrOption(f UintptrToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintptrOption) MapByteOption(f UintptrToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintptrOption) MapRuneOption(f UintptrToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintptrOption) MapFloat32Option(f UintptrToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintptrOption) MapFloat64Option(f UintptrToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintptrOption) MapComplex64Option(f UintptrToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintptrOption) MapComplex128Option(f UintptrToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintptrOption) MapAnyOption(f UintptrToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintptrOption) MapBoolArray(f UintptrToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintptrOption) MapStringArray(f UintptrToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintptrOption) MapIntArray(f UintptrToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintptrOption) MapInt8Array(f UintptrToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintptrOption) MapInt16Array(f UintptrToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintptrOption) MapInt32Array(f UintptrToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintptrOption) MapInt64Array(f UintptrToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintptrOption) MapUintArray(f UintptrToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintptrOption) MapUint8Array(f UintptrToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintptrOption) MapUint16Array(f UintptrToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintptrOption) MapUint32Array(f UintptrToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintptrOption) MapUint64Array(f UintptrToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintptrOption) MapUintptrArray(f UintptrToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintptrOption) MapByteArray(f UintptrToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintptrOption) MapRuneArray(f UintptrToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintptrOption) MapFloat32Array(f UintptrToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintptrOption) MapFloat64Array(f UintptrToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintptrOption) MapComplex64Array(f UintptrToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintptrOption) MapComplex128Array(f UintptrToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintptrOption) MapAnyArray(f UintptrToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintptrOption) MapBoolList(f UintptrToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintptrOption) MapStringList(f UintptrToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintptrOption) MapIntList(f UintptrToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintptrOption) MapInt8List(f UintptrToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintptrOption) MapInt16List(f UintptrToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintptrOption) MapInt32List(f UintptrToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintptrOption) MapInt64List(f UintptrToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintptrOption) MapUintList(f UintptrToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintptrOption) MapUint8List(f UintptrToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintptrOption) MapUint16List(f UintptrToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintptrOption) MapUint32List(f UintptrToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintptrOption) MapUint64List(f UintptrToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintptrOption) MapUintptrList(f UintptrToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintptrOption) MapByteList(f UintptrToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintptrOption) MapRuneList(f UintptrToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintptrOption) MapFloat32List(f UintptrToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintptrOption) MapFloat64List(f UintptrToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintptrOption) MapComplex64List(f UintptrToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintptrOption) MapComplex128List(f UintptrToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintptrOption) MapAnyList(f UintptrToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m ByteOption) MapBool(f ByteToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m ByteOption) MapString(f ByteToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m ByteOption) MapInt(f ByteToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m ByteOption) MapInt8(f ByteToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m ByteOption) MapInt16(f ByteToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m ByteOption) MapInt32(f ByteToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m ByteOption) MapInt64(f ByteToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m ByteOption) MapUint(f ByteToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m ByteOption) MapUint8(f ByteToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m ByteOption) MapUint16(f ByteToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m ByteOption) MapUint32(f ByteToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m ByteOption) MapUint64(f ByteToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m ByteOption) MapUintptr(f ByteToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m ByteOption) MapByte(f ByteToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m ByteOption) MapRune(f ByteToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m ByteOption) MapFloat32(f ByteToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m ByteOption) MapFloat64(f ByteToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m ByteOption) MapComplex64(f ByteToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m ByteOption) MapComplex128(f ByteToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m ByteOption) MapAny(f ByteToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m ByteOption) MapBoolOption(f ByteToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m ByteOption) MapStringOption(f ByteToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m ByteOption) MapIntOption(f ByteToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m ByteOption) MapInt8Option(f ByteToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m ByteOption) MapInt16Option(f ByteToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m ByteOption) MapInt32Option(f ByteToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m ByteOption) MapInt64Option(f ByteToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m ByteOption) MapUintOption(f ByteToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m ByteOption) MapUint8Option(f ByteToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m ByteOption) MapUint16Option(f ByteToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m ByteOption) MapUint32Option(f ByteToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m ByteOption) MapUint64Option(f ByteToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m ByteOption) MapUintptrOption(f ByteToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m ByteOption) MapByteOption(f ByteToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m ByteOption) MapRuneOption(f ByteToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m ByteOption) MapFloat32Option(f ByteToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m ByteOption) MapFloat64Option(f ByteToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m ByteOption) MapComplex64Option(f ByteToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m ByteOption) MapComplex128Option(f ByteToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m ByteOption) MapAnyOption(f ByteToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m ByteOption) MapBoolArray(f ByteToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m ByteOption) MapStringArray(f ByteToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m ByteOption) MapIntArray(f ByteToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m ByteOption) MapInt8Array(f ByteToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m ByteOption) MapInt16Array(f ByteToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m ByteOption) MapInt32Array(f ByteToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m ByteOption) MapInt64Array(f ByteToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m ByteOption) MapUintArray(f ByteToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m ByteOption) MapUint8Array(f ByteToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m ByteOption) MapUint16Array(f ByteToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m ByteOption) MapUint32Array(f ByteToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m ByteOption) MapUint64Array(f ByteToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m ByteOption) MapUintptrArray(f ByteToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m ByteOption) MapByteArray(f ByteToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m ByteOption) MapRuneArray(f ByteToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m ByteOption) MapFloat32Array(f ByteToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m ByteOption) MapFloat64Array(f ByteToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m ByteOption) MapComplex64Array(f ByteToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m ByteOption) MapComplex128Array(f ByteToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m ByteOption) MapAnyArray(f ByteToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m ByteOption) MapBoolList(f ByteToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m ByteOption) MapStringList(f ByteToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m ByteOption) MapIntList(f ByteToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m ByteOption) MapInt8List(f ByteToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m ByteOption) MapInt16List(f ByteToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m ByteOption) MapInt32List(f ByteToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m ByteOption) MapInt64List(f ByteToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m ByteOption) MapUintList(f ByteToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m ByteOption) MapUint8List(f ByteToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m ByteOption) MapUint16List(f ByteToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m ByteOption) MapUint32List(f ByteToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m ByteOption) MapUint64List(f ByteToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m ByteOption) MapUintptrList(f ByteToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m ByteOption) MapByteList(f ByteToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m ByteOption) MapRuneList(f ByteToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m ByteOption) MapFloat32List(f ByteToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m ByteOption) MapFloat64List(f ByteToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m ByteOption) MapComplex64List(f ByteToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m ByteOption) MapComplex128List(f ByteToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m ByteOption) MapAnyList(f ByteToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m RuneOption) MapBool(f RuneToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m RuneOption) MapString(f RuneToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m RuneOption) MapInt(f RuneToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m RuneOption) MapInt8(f RuneToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m RuneOption) MapInt16(f RuneToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m RuneOption) MapInt32(f RuneToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m RuneOption) MapInt64(f RuneToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m RuneOption) MapUint(f RuneToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m RuneOption) MapUint8(f RuneToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m RuneOption) MapUint16(f RuneToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m RuneOption) MapUint32(f RuneToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m RuneOption) MapUint64(f RuneToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m RuneOption) MapUintptr(f RuneToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m RuneOption) MapByte(f RuneToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m RuneOption) MapRune(f RuneToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m RuneOption) MapFloat32(f RuneToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m RuneOption) MapFloat64(f RuneToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m RuneOption) MapComplex64(f RuneToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m RuneOption) MapComplex128(f RuneToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m RuneOption) MapAny(f RuneToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m RuneOption) MapBoolOption(f RuneToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m RuneOption) MapStringOption(f RuneToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m RuneOption) MapIntOption(f RuneToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m RuneOption) MapInt8Option(f RuneToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m RuneOption) MapInt16Option(f RuneToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m RuneOption) MapInt32Option(f RuneToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m RuneOption) MapInt64Option(f RuneToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m RuneOption) MapUintOption(f RuneToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m RuneOption) MapUint8Option(f RuneToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m RuneOption) MapUint16Option(f RuneToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m RuneOption) MapUint32Option(f RuneToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m RuneOption) MapUint64Option(f RuneToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m RuneOption) MapUintptrOption(f RuneToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m RuneOption) MapByteOption(f RuneToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m RuneOption) MapRuneOption(f RuneToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m RuneOption) MapFloat32Option(f RuneToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m RuneOption) MapFloat64Option(f RuneToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m RuneOption) MapComplex64Option(f RuneToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m RuneOption) MapComplex128Option(f RuneToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m RuneOption) MapAnyOption(f RuneToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m RuneOption) MapBoolArray(f RuneToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m RuneOption) MapStringArray(f RuneToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m RuneOption) MapIntArray(f RuneToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m RuneOption) MapInt8Array(f RuneToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m RuneOption) MapInt16Array(f RuneToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m RuneOption) MapInt32Array(f RuneToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m RuneOption) MapInt64Array(f RuneToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m RuneOption) MapUintArray(f RuneToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m RuneOption) MapUint8Array(f RuneToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m RuneOption) MapUint16Array(f RuneToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m RuneOption) MapUint32Array(f RuneToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m RuneOption) MapUint64Array(f RuneToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m RuneOption) MapUintptrArray(f RuneToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m RuneOption) MapByteArray(f RuneToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m RuneOption) MapRuneArray(f RuneToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m RuneOption) MapFloat32Array(f RuneToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m RuneOption) MapFloat64Array(f RuneToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m RuneOption) MapComplex64Array(f RuneToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m RuneOption) MapComplex128Array(f RuneToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m RuneOption) MapAnyArray(f RuneToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m RuneOption) MapBoolList(f RuneToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m RuneOption) MapStringList(f RuneToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m RuneOption) MapIntList(f RuneToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m RuneOption) MapInt8List(f RuneToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m RuneOption) MapInt16List(f RuneToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m RuneOption) MapInt32List(f RuneToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m RuneOption) MapInt64List(f RuneToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m RuneOption) MapUintList(f RuneToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m RuneOption) MapUint8List(f RuneToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m RuneOption) MapUint16List(f RuneToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m RuneOption) MapUint32List(f RuneToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m RuneOption) MapUint64List(f RuneToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m RuneOption) MapUintptrList(f RuneToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m RuneOption) MapByteList(f RuneToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m RuneOption) MapRuneList(f RuneToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m RuneOption) MapFloat32List(f RuneToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m RuneOption) MapFloat64List(f RuneToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m RuneOption) MapComplex64List(f RuneToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m RuneOption) MapComplex128List(f RuneToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m RuneOption) MapAnyList(f RuneToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float32Option) MapBool(f Float32ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float32Option) MapString(f Float32ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float32Option) MapInt(f Float32ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float32Option) MapInt8(f Float32ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float32Option) MapInt16(f Float32ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float32Option) MapInt32(f Float32ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float32Option) MapInt64(f Float32ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float32Option) MapUint(f Float32ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float32Option) MapUint8(f Float32ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float32Option) MapUint16(f Float32ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float32Option) MapUint32(f Float32ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float32Option) MapUint64(f Float32ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float32Option) MapUintptr(f Float32ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float32Option) MapByte(f Float32ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float32Option) MapRune(f Float32ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float32Option) MapFloat32(f Float32ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float32Option) MapFloat64(f Float32ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float32Option) MapComplex64(f Float32ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float32Option) MapComplex128(f Float32ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float32Option) MapAny(f Float32ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float32Option) MapBoolOption(f Float32ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float32Option) MapStringOption(f Float32ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float32Option) MapIntOption(f Float32ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float32Option) MapInt8Option(f Float32ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float32Option) MapInt16Option(f Float32ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float32Option) MapInt32Option(f Float32ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float32Option) MapInt64Option(f Float32ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float32Option) MapUintOption(f Float32ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float32Option) MapUint8Option(f Float32ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float32Option) MapUint16Option(f Float32ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float32Option) MapUint32Option(f Float32ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float32Option) MapUint64Option(f Float32ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float32Option) MapUintptrOption(f Float32ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float32Option) MapByteOption(f Float32ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float32Option) MapRuneOption(f Float32ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float32Option) MapFloat32Option(f Float32ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float32Option) MapFloat64Option(f Float32ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float32Option) MapComplex64Option(f Float32ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float32Option) MapComplex128Option(f Float32ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float32Option) MapAnyOption(f Float32ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float32Option) MapBoolArray(f Float32ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float32Option) MapStringArray(f Float32ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float32Option) MapIntArray(f Float32ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float32Option) MapInt8Array(f Float32ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float32Option) MapInt16Array(f Float32ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float32Option) MapInt32Array(f Float32ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float32Option) MapInt64Array(f Float32ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float32Option) MapUintArray(f Float32ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float32Option) MapUint8Array(f Float32ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float32Option) MapUint16Array(f Float32ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float32Option) MapUint32Array(f Float32ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float32Option) MapUint64Array(f Float32ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float32Option) MapUintptrArray(f Float32ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float32Option) MapByteArray(f Float32ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float32Option) MapRuneArray(f Float32ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float32Option) MapFloat32Array(f Float32ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float32Option) MapFloat64Array(f Float32ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float32Option) MapComplex64Array(f Float32ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float32Option) MapComplex128Array(f Float32ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float32Option) MapAnyArray(f Float32ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float32Option) MapBoolList(f Float32ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float32Option) MapStringList(f Float32ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float32Option) MapIntList(f Float32ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float32Option) MapInt8List(f Float32ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float32Option) MapInt16List(f Float32ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float32Option) MapInt32List(f Float32ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float32Option) MapInt64List(f Float32ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float32Option) MapUintList(f Float32ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float32Option) MapUint8List(f Float32ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float32Option) MapUint16List(f Float32ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float32Option) MapUint32List(f Float32ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float32Option) MapUint64List(f Float32ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float32Option) MapUintptrList(f Float32ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float32Option) MapByteList(f Float32ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float32Option) MapRuneList(f Float32ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float32Option) MapFloat32List(f Float32ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float32Option) MapFloat64List(f Float32ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float32Option) MapComplex64List(f Float32ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float32Option) MapComplex128List(f Float32ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float32Option) MapAnyList(f Float32ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float64Option) MapBool(f Float64ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float64Option) MapString(f Float64ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float64Option) MapInt(f Float64ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float64Option) MapInt8(f Float64ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float64Option) MapInt16(f Float64ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float64Option) MapInt32(f Float64ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float64Option) MapInt64(f Float64ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float64Option) MapUint(f Float64ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float64Option) MapUint8(f Float64ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float64Option) MapUint16(f Float64ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float64Option) MapUint32(f Float64ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float64Option) MapUint64(f Float64ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float64Option) MapUintptr(f Float64ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float64Option) MapByte(f Float64ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float64Option) MapRune(f Float64ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float64Option) MapFloat32(f Float64ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float64Option) MapFloat64(f Float64ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float64Option) MapComplex64(f Float64ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float64Option) MapComplex128(f Float64ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float64Option) MapAny(f Float64ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float64Option) MapBoolOption(f Float64ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float64Option) MapStringOption(f Float64ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float64Option) MapIntOption(f Float64ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float64Option) MapInt8Option(f Float64ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float64Option) MapInt16Option(f Float64ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float64Option) MapInt32Option(f Float64ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float64Option) MapInt64Option(f Float64ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float64Option) MapUintOption(f Float64ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float64Option) MapUint8Option(f Float64ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float64Option) MapUint16Option(f Float64ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float64Option) MapUint32Option(f Float64ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float64Option) MapUint64Option(f Float64ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float64Option) MapUintptrOption(f Float64ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float64Option) MapByteOption(f Float64ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float64Option) MapRuneOption(f Float64ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float64Option) MapFloat32Option(f Float64ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float64Option) MapFloat64Option(f Float64ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float64Option) MapComplex64Option(f Float64ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float64Option) MapComplex128Option(f Float64ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float64Option) MapAnyOption(f Float64ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float64Option) MapBoolArray(f Float64ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float64Option) MapStringArray(f Float64ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float64Option) MapIntArray(f Float64ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float64Option) MapInt8Array(f Float64ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float64Option) MapInt16Array(f Float64ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float64Option) MapInt32Array(f Float64ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float64Option) MapInt64Array(f Float64ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float64Option) MapUintArray(f Float64ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float64Option) MapUint8Array(f Float64ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float64Option) MapUint16Array(f Float64ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float64Option) MapUint32Array(f Float64ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float64Option) MapUint64Array(f Float64ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float64Option) MapUintptrArray(f Float64ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float64Option) MapByteArray(f Float64ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float64Option) MapRuneArray(f Float64ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float64Option) MapFloat32Array(f Float64ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float64Option) MapFloat64Array(f Float64ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float64Option) MapComplex64Array(f Float64ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float64Option) MapComplex128Array(f Float64ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float64Option) MapAnyArray(f Float64ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float64Option) MapBoolList(f Float64ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float64Option) MapStringList(f Float64ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float64Option) MapIntList(f Float64ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float64Option) MapInt8List(f Float64ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float64Option) MapInt16List(f Float64ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float64Option) MapInt32List(f Float64ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float64Option) MapInt64List(f Float64ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float64Option) MapUintList(f Float64ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float64Option) MapUint8List(f Float64ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float64Option) MapUint16List(f Float64ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float64Option) MapUint32List(f Float64ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float64Option) MapUint64List(f Float64ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float64Option) MapUintptrList(f Float64ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float64Option) MapByteList(f Float64ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float64Option) MapRuneList(f Float64ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float64Option) MapFloat32List(f Float64ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float64Option) MapFloat64List(f Float64ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float64Option) MapComplex64List(f Float64ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float64Option) MapComplex128List(f Float64ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float64Option) MapAnyList(f Float64ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex64Option) MapBool(f Complex64ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex64Option) MapString(f Complex64ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex64Option) MapInt(f Complex64ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex64Option) MapInt8(f Complex64ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex64Option) MapInt16(f Complex64ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex64Option) MapInt32(f Complex64ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex64Option) MapInt64(f Complex64ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex64Option) MapUint(f Complex64ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex64Option) MapUint8(f Complex64ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex64Option) MapUint16(f Complex64ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex64Option) MapUint32(f Complex64ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex64Option) MapUint64(f Complex64ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex64Option) MapUintptr(f Complex64ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex64Option) MapByte(f Complex64ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex64Option) MapRune(f Complex64ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex64Option) MapFloat32(f Complex64ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex64Option) MapFloat64(f Complex64ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex64Option) MapComplex64(f Complex64ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex64Option) MapComplex128(f Complex64ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex64Option) MapAny(f Complex64ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex64Option) MapBoolOption(f Complex64ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex64Option) MapStringOption(f Complex64ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex64Option) MapIntOption(f Complex64ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex64Option) MapInt8Option(f Complex64ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex64Option) MapInt16Option(f Complex64ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex64Option) MapInt32Option(f Complex64ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex64Option) MapInt64Option(f Complex64ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex64Option) MapUintOption(f Complex64ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex64Option) MapUint8Option(f Complex64ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex64Option) MapUint16Option(f Complex64ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex64Option) MapUint32Option(f Complex64ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex64Option) MapUint64Option(f Complex64ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex64Option) MapUintptrOption(f Complex64ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex64Option) MapByteOption(f Complex64ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex64Option) MapRuneOption(f Complex64ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex64Option) MapFloat32Option(f Complex64ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex64Option) MapFloat64Option(f Complex64ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex64Option) MapComplex64Option(f Complex64ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex64Option) MapComplex128Option(f Complex64ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex64Option) MapAnyOption(f Complex64ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex64Option) MapBoolArray(f Complex64ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex64Option) MapStringArray(f Complex64ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex64Option) MapIntArray(f Complex64ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex64Option) MapInt8Array(f Complex64ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex64Option) MapInt16Array(f Complex64ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex64Option) MapInt32Array(f Complex64ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex64Option) MapInt64Array(f Complex64ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex64Option) MapUintArray(f Complex64ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex64Option) MapUint8Array(f Complex64ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex64Option) MapUint16Array(f Complex64ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex64Option) MapUint32Array(f Complex64ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex64Option) MapUint64Array(f Complex64ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex64Option) MapUintptrArray(f Complex64ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex64Option) MapByteArray(f Complex64ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex64Option) MapRuneArray(f Complex64ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex64Option) MapFloat32Array(f Complex64ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex64Option) MapFloat64Array(f Complex64ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex64Option) MapComplex64Array(f Complex64ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex64Option) MapComplex128Array(f Complex64ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex64Option) MapAnyArray(f Complex64ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex64Option) MapBoolList(f Complex64ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex64Option) MapStringList(f Complex64ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex64Option) MapIntList(f Complex64ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex64Option) MapInt8List(f Complex64ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex64Option) MapInt16List(f Complex64ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex64Option) MapInt32List(f Complex64ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex64Option) MapInt64List(f Complex64ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex64Option) MapUintList(f Complex64ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex64Option) MapUint8List(f Complex64ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex64Option) MapUint16List(f Complex64ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex64Option) MapUint32List(f Complex64ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex64Option) MapUint64List(f Complex64ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex64Option) MapUintptrList(f Complex64ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex64Option) MapByteList(f Complex64ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex64Option) MapRuneList(f Complex64ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex64Option) MapFloat32List(f Complex64ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex64Option) MapFloat64List(f Complex64ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex64Option) MapComplex64List(f Complex64ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex64Option) MapComplex128List(f Complex64ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex64Option) MapAnyList(f Complex64ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex128Option) MapBool(f Complex128ToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex128Option) MapString(f Complex128ToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex128Option) MapInt(f Complex128ToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex128Option) MapInt8(f Complex128ToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex128Option) MapInt16(f Complex128ToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex128Option) MapInt32(f Complex128ToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex128Option) MapInt64(f Complex128ToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex128Option) MapUint(f Complex128ToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex128Option) MapUint8(f Complex128ToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex128Option) MapUint16(f Complex128ToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex128Option) MapUint32(f Complex128ToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex128Option) MapUint64(f Complex128ToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex128Option) MapUintptr(f Complex128ToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex128Option) MapByte(f Complex128ToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex128Option) MapRune(f Complex128ToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex128Option) MapFloat32(f Complex128ToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex128Option) MapFloat64(f Complex128ToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex128Option) MapComplex64(f Complex128ToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex128Option) MapComplex128(f Complex128ToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex128Option) MapAny(f Complex128ToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex128Option) MapBoolOption(f Complex128ToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex128Option) MapStringOption(f Complex128ToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex128Option) MapIntOption(f Complex128ToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex128Option) MapInt8Option(f Complex128ToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex128Option) MapInt16Option(f Complex128ToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex128Option) MapInt32Option(f Complex128ToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex128Option) MapInt64Option(f Complex128ToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex128Option) MapUintOption(f Complex128ToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex128Option) MapUint8Option(f Complex128ToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex128Option) MapUint16Option(f Complex128ToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex128Option) MapUint32Option(f Complex128ToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex128Option) MapUint64Option(f Complex128ToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex128Option) MapUintptrOption(f Complex128ToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex128Option) MapByteOption(f Complex128ToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex128Option) MapRuneOption(f Complex128ToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex128Option) MapFloat32Option(f Complex128ToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex128Option) MapFloat64Option(f Complex128ToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex128Option) MapComplex64Option(f Complex128ToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex128Option) MapComplex128Option(f Complex128ToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex128Option) MapAnyOption(f Complex128ToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex128Option) MapBoolArray(f Complex128ToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex128Option) MapStringArray(f Complex128ToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex128Option) MapIntArray(f Complex128ToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex128Option) MapInt8Array(f Complex128ToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex128Option) MapInt16Array(f Complex128ToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex128Option) MapInt32Array(f Complex128ToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex128Option) MapInt64Array(f Complex128ToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex128Option) MapUintArray(f Complex128ToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex128Option) MapUint8Array(f Complex128ToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex128Option) MapUint16Array(f Complex128ToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex128Option) MapUint32Array(f Complex128ToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex128Option) MapUint64Array(f Complex128ToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex128Option) MapUintptrArray(f Complex128ToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex128Option) MapByteArray(f Complex128ToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex128Option) MapRuneArray(f Complex128ToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex128Option) MapFloat32Array(f Complex128ToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex128Option) MapFloat64Array(f Complex128ToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex128Option) MapComplex64Array(f Complex128ToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex128Option) MapComplex128Array(f Complex128ToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex128Option) MapAnyArray(f Complex128ToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex128Option) MapBoolList(f Complex128ToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex128Option) MapStringList(f Complex128ToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex128Option) MapIntList(f Complex128ToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex128Option) MapInt8List(f Complex128ToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex128Option) MapInt16List(f Complex128ToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex128Option) MapInt32List(f Complex128ToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex128Option) MapInt64List(f Complex128ToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex128Option) MapUintList(f Complex128ToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex128Option) MapUint8List(f Complex128ToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex128Option) MapUint16List(f Complex128ToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex128Option) MapUint32List(f Complex128ToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex128Option) MapUint64List(f Complex128ToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex128Option) MapUintptrList(f Complex128ToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex128Option) MapByteList(f Complex128ToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex128Option) MapRuneList(f Complex128ToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex128Option) MapFloat32List(f Complex128ToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex128Option) MapFloat64List(f Complex128ToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex128Option) MapComplex64List(f Complex128ToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex128Option) MapComplex128List(f Complex128ToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex128Option) MapAnyList(f Complex128ToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m AnyOption) MapBool(f AnyToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m AnyOption) MapString(f AnyToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m AnyOption) MapInt(f AnyToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m AnyOption) MapInt8(f AnyToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m AnyOption) MapInt16(f AnyToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m AnyOption) MapInt32(f AnyToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m AnyOption) MapInt64(f AnyToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m AnyOption) MapUint(f AnyToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m AnyOption) MapUint8(f AnyToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m AnyOption) MapUint16(f AnyToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m AnyOption) MapUint32(f AnyToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m AnyOption) MapUint64(f AnyToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m AnyOption) MapUintptr(f AnyToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m AnyOption) MapByte(f AnyToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m AnyOption) MapRune(f AnyToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m AnyOption) MapFloat32(f AnyToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m AnyOption) MapFloat64(f AnyToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m AnyOption) MapComplex64(f AnyToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m AnyOption) MapComplex128(f AnyToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m AnyOption) MapAny(f AnyToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m AnyOption) MapBoolOption(f AnyToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m AnyOption) MapStringOption(f AnyToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m AnyOption) MapIntOption(f AnyToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m AnyOption) MapInt8Option(f AnyToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m AnyOption) MapInt16Option(f AnyToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m AnyOption) MapInt32Option(f AnyToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m AnyOption) MapInt64Option(f AnyToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m AnyOption) MapUintOption(f AnyToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m AnyOption) MapUint8Option(f AnyToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m AnyOption) MapUint16Option(f AnyToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m AnyOption) MapUint32Option(f AnyToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m AnyOption) MapUint64Option(f AnyToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m AnyOption) MapUintptrOption(f AnyToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m AnyOption) MapByteOption(f AnyToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m AnyOption) MapRuneOption(f AnyToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m AnyOption) MapFloat32Option(f AnyToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m AnyOption) MapFloat64Option(f AnyToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m AnyOption) MapComplex64Option(f AnyToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m AnyOption) MapComplex128Option(f AnyToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m AnyOption) MapAnyOption(f AnyToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m AnyOption) MapBoolArray(f AnyToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m AnyOption) MapStringArray(f AnyToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m AnyOption) MapIntArray(f AnyToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m AnyOption) MapInt8Array(f AnyToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m AnyOption) MapInt16Array(f AnyToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m AnyOption) MapInt32Array(f AnyToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m AnyOption) MapInt64Array(f AnyToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m AnyOption) MapUintArray(f AnyToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m AnyOption) MapUint8Array(f AnyToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m AnyOption) MapUint16Array(f AnyToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m AnyOption) MapUint32Array(f AnyToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m AnyOption) MapUint64Array(f AnyToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m AnyOption) MapUintptrArray(f AnyToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m AnyOption) MapByteArray(f AnyToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m AnyOption) MapRuneArray(f AnyToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m AnyOption) MapFloat32Array(f AnyToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m AnyOption) MapFloat64Array(f AnyToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m AnyOption) MapComplex64Array(f AnyToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m AnyOption) MapComplex128Array(f AnyToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m AnyOption) MapAnyArray(f AnyToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m AnyOption) MapBoolList(f AnyToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m AnyOption) MapStringList(f AnyToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m AnyOption) MapIntList(f AnyToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m AnyOption) MapInt8List(f AnyToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m AnyOption) MapInt16List(f AnyToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m AnyOption) MapInt32List(f AnyToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m AnyOption) MapInt64List(f AnyToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m AnyOption) MapUintList(f AnyToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m AnyOption) MapUint8List(f AnyToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m AnyOption) MapUint16List(f AnyToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m AnyOption) MapUint32List(f AnyToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m AnyOption) MapUint64List(f AnyToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m AnyOption) MapUintptrList(f AnyToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m AnyOption) MapByteList(f AnyToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m AnyOption) MapRuneList(f AnyToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m AnyOption) MapFloat32List(f AnyToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m AnyOption) MapFloat64List(f AnyToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m AnyOption) MapComplex64List(f AnyToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m AnyOption) MapComplex128List(f AnyToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m AnyOption) MapAnyList(f AnyToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m BoolArrayOption) MapBool(f BoolArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m BoolArrayOption) MapString(f BoolArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m BoolArrayOption) MapInt(f BoolArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m BoolArrayOption) MapInt8(f BoolArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m BoolArrayOption) MapInt16(f BoolArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m BoolArrayOption) MapInt32(f BoolArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m BoolArrayOption) MapInt64(f BoolArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m BoolArrayOption) MapUint(f BoolArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m BoolArrayOption) MapUint8(f BoolArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m BoolArrayOption) MapUint16(f BoolArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m BoolArrayOption) MapUint32(f BoolArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m BoolArrayOption) MapUint64(f BoolArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m BoolArrayOption) MapUintptr(f BoolArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m BoolArrayOption) MapByte(f BoolArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m BoolArrayOption) MapRune(f BoolArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m BoolArrayOption) MapFloat32(f BoolArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m BoolArrayOption) MapFloat64(f BoolArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m BoolArrayOption) MapComplex64(f BoolArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m BoolArrayOption) MapComplex128(f BoolArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m BoolArrayOption) MapAny(f BoolArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m BoolArrayOption) MapBoolOption(f BoolArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m BoolArrayOption) MapStringOption(f BoolArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m BoolArrayOption) MapIntOption(f BoolArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m BoolArrayOption) MapInt8Option(f BoolArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m BoolArrayOption) MapInt16Option(f BoolArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m BoolArrayOption) MapInt32Option(f BoolArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m BoolArrayOption) MapInt64Option(f BoolArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m BoolArrayOption) MapUintOption(f BoolArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m BoolArrayOption) MapUint8Option(f BoolArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m BoolArrayOption) MapUint16Option(f BoolArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m BoolArrayOption) MapUint32Option(f BoolArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m BoolArrayOption) MapUint64Option(f BoolArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m BoolArrayOption) MapUintptrOption(f BoolArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m BoolArrayOption) MapByteOption(f BoolArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m BoolArrayOption) MapRuneOption(f BoolArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m BoolArrayOption) MapFloat32Option(f BoolArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m BoolArrayOption) MapFloat64Option(f BoolArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m BoolArrayOption) MapComplex64Option(f BoolArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m BoolArrayOption) MapComplex128Option(f BoolArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m BoolArrayOption) MapAnyOption(f BoolArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m BoolArrayOption) MapBoolArray(f BoolArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m BoolArrayOption) MapStringArray(f BoolArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m BoolArrayOption) MapIntArray(f BoolArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m BoolArrayOption) MapInt8Array(f BoolArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m BoolArrayOption) MapInt16Array(f BoolArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m BoolArrayOption) MapInt32Array(f BoolArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m BoolArrayOption) MapInt64Array(f BoolArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m BoolArrayOption) MapUintArray(f BoolArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m BoolArrayOption) MapUint8Array(f BoolArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m BoolArrayOption) MapUint16Array(f BoolArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m BoolArrayOption) MapUint32Array(f BoolArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m BoolArrayOption) MapUint64Array(f BoolArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m BoolArrayOption) MapUintptrArray(f BoolArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m BoolArrayOption) MapByteArray(f BoolArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m BoolArrayOption) MapRuneArray(f BoolArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m BoolArrayOption) MapFloat32Array(f BoolArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m BoolArrayOption) MapFloat64Array(f BoolArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m BoolArrayOption) MapComplex64Array(f BoolArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m BoolArrayOption) MapComplex128Array(f BoolArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m BoolArrayOption) MapAnyArray(f BoolArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m BoolArrayOption) MapBoolList(f BoolArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m BoolArrayOption) MapStringList(f BoolArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m BoolArrayOption) MapIntList(f BoolArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m BoolArrayOption) MapInt8List(f BoolArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m BoolArrayOption) MapInt16List(f BoolArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m BoolArrayOption) MapInt32List(f BoolArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m BoolArrayOption) MapInt64List(f BoolArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m BoolArrayOption) MapUintList(f BoolArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m BoolArrayOption) MapUint8List(f BoolArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m BoolArrayOption) MapUint16List(f BoolArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m BoolArrayOption) MapUint32List(f BoolArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m BoolArrayOption) MapUint64List(f BoolArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m BoolArrayOption) MapUintptrList(f BoolArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m BoolArrayOption) MapByteList(f BoolArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m BoolArrayOption) MapRuneList(f BoolArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m BoolArrayOption) MapFloat32List(f BoolArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m BoolArrayOption) MapFloat64List(f BoolArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m BoolArrayOption) MapComplex64List(f BoolArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m BoolArrayOption) MapComplex128List(f BoolArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m BoolArrayOption) MapAnyList(f BoolArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m StringArrayOption) MapBool(f StringArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m StringArrayOption) MapString(f StringArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m StringArrayOption) MapInt(f StringArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m StringArrayOption) MapInt8(f StringArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m StringArrayOption) MapInt16(f StringArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m StringArrayOption) MapInt32(f StringArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m StringArrayOption) MapInt64(f StringArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m StringArrayOption) MapUint(f StringArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m StringArrayOption) MapUint8(f StringArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m StringArrayOption) MapUint16(f StringArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m StringArrayOption) MapUint32(f StringArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m StringArrayOption) MapUint64(f StringArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m StringArrayOption) MapUintptr(f StringArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m StringArrayOption) MapByte(f StringArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m StringArrayOption) MapRune(f StringArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m StringArrayOption) MapFloat32(f StringArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m StringArrayOption) MapFloat64(f StringArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m StringArrayOption) MapComplex64(f StringArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m StringArrayOption) MapComplex128(f StringArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m StringArrayOption) MapAny(f StringArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m StringArrayOption) MapBoolOption(f StringArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m StringArrayOption) MapStringOption(f StringArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m StringArrayOption) MapIntOption(f StringArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m StringArrayOption) MapInt8Option(f StringArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m StringArrayOption) MapInt16Option(f StringArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m StringArrayOption) MapInt32Option(f StringArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m StringArrayOption) MapInt64Option(f StringArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m StringArrayOption) MapUintOption(f StringArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m StringArrayOption) MapUint8Option(f StringArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m StringArrayOption) MapUint16Option(f StringArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m StringArrayOption) MapUint32Option(f StringArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m StringArrayOption) MapUint64Option(f StringArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m StringArrayOption) MapUintptrOption(f StringArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m StringArrayOption) MapByteOption(f StringArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m StringArrayOption) MapRuneOption(f StringArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m StringArrayOption) MapFloat32Option(f StringArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m StringArrayOption) MapFloat64Option(f StringArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m StringArrayOption) MapComplex64Option(f StringArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m StringArrayOption) MapComplex128Option(f StringArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m StringArrayOption) MapAnyOption(f StringArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m StringArrayOption) MapBoolArray(f StringArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m StringArrayOption) MapStringArray(f StringArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m StringArrayOption) MapIntArray(f StringArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m StringArrayOption) MapInt8Array(f StringArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m StringArrayOption) MapInt16Array(f StringArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m StringArrayOption) MapInt32Array(f StringArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m StringArrayOption) MapInt64Array(f StringArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m StringArrayOption) MapUintArray(f StringArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m StringArrayOption) MapUint8Array(f StringArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m StringArrayOption) MapUint16Array(f StringArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m StringArrayOption) MapUint32Array(f StringArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m StringArrayOption) MapUint64Array(f StringArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m StringArrayOption) MapUintptrArray(f StringArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m StringArrayOption) MapByteArray(f StringArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m StringArrayOption) MapRuneArray(f StringArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m StringArrayOption) MapFloat32Array(f StringArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m StringArrayOption) MapFloat64Array(f StringArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m StringArrayOption) MapComplex64Array(f StringArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m StringArrayOption) MapComplex128Array(f StringArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m StringArrayOption) MapAnyArray(f StringArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m StringArrayOption) MapBoolList(f StringArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m StringArrayOption) MapStringList(f StringArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m StringArrayOption) MapIntList(f StringArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m StringArrayOption) MapInt8List(f StringArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m StringArrayOption) MapInt16List(f StringArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m StringArrayOption) MapInt32List(f StringArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m StringArrayOption) MapInt64List(f StringArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m StringArrayOption) MapUintList(f StringArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m StringArrayOption) MapUint8List(f StringArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m StringArrayOption) MapUint16List(f StringArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m StringArrayOption) MapUint32List(f StringArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m StringArrayOption) MapUint64List(f StringArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m StringArrayOption) MapUintptrList(f StringArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m StringArrayOption) MapByteList(f StringArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m StringArrayOption) MapRuneList(f StringArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m StringArrayOption) MapFloat32List(f StringArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m StringArrayOption) MapFloat64List(f StringArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m StringArrayOption) MapComplex64List(f StringArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m StringArrayOption) MapComplex128List(f StringArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m StringArrayOption) MapAnyList(f StringArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m IntArrayOption) MapBool(f IntArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m IntArrayOption) MapString(f IntArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m IntArrayOption) MapInt(f IntArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m IntArrayOption) MapInt8(f IntArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m IntArrayOption) MapInt16(f IntArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m IntArrayOption) MapInt32(f IntArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m IntArrayOption) MapInt64(f IntArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m IntArrayOption) MapUint(f IntArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m IntArrayOption) MapUint8(f IntArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m IntArrayOption) MapUint16(f IntArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m IntArrayOption) MapUint32(f IntArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m IntArrayOption) MapUint64(f IntArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m IntArrayOption) MapUintptr(f IntArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m IntArrayOption) MapByte(f IntArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m IntArrayOption) MapRune(f IntArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m IntArrayOption) MapFloat32(f IntArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m IntArrayOption) MapFloat64(f IntArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m IntArrayOption) MapComplex64(f IntArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m IntArrayOption) MapComplex128(f IntArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m IntArrayOption) MapAny(f IntArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m IntArrayOption) MapBoolOption(f IntArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m IntArrayOption) MapStringOption(f IntArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m IntArrayOption) MapIntOption(f IntArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m IntArrayOption) MapInt8Option(f IntArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m IntArrayOption) MapInt16Option(f IntArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m IntArrayOption) MapInt32Option(f IntArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m IntArrayOption) MapInt64Option(f IntArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m IntArrayOption) MapUintOption(f IntArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m IntArrayOption) MapUint8Option(f IntArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m IntArrayOption) MapUint16Option(f IntArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m IntArrayOption) MapUint32Option(f IntArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m IntArrayOption) MapUint64Option(f IntArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m IntArrayOption) MapUintptrOption(f IntArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m IntArrayOption) MapByteOption(f IntArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m IntArrayOption) MapRuneOption(f IntArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m IntArrayOption) MapFloat32Option(f IntArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m IntArrayOption) MapFloat64Option(f IntArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m IntArrayOption) MapComplex64Option(f IntArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m IntArrayOption) MapComplex128Option(f IntArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m IntArrayOption) MapAnyOption(f IntArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m IntArrayOption) MapBoolArray(f IntArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m IntArrayOption) MapStringArray(f IntArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m IntArrayOption) MapIntArray(f IntArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m IntArrayOption) MapInt8Array(f IntArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m IntArrayOption) MapInt16Array(f IntArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m IntArrayOption) MapInt32Array(f IntArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m IntArrayOption) MapInt64Array(f IntArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m IntArrayOption) MapUintArray(f IntArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m IntArrayOption) MapUint8Array(f IntArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m IntArrayOption) MapUint16Array(f IntArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m IntArrayOption) MapUint32Array(f IntArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m IntArrayOption) MapUint64Array(f IntArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m IntArrayOption) MapUintptrArray(f IntArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m IntArrayOption) MapByteArray(f IntArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m IntArrayOption) MapRuneArray(f IntArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m IntArrayOption) MapFloat32Array(f IntArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m IntArrayOption) MapFloat64Array(f IntArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m IntArrayOption) MapComplex64Array(f IntArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m IntArrayOption) MapComplex128Array(f IntArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m IntArrayOption) MapAnyArray(f IntArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m IntArrayOption) MapBoolList(f IntArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m IntArrayOption) MapStringList(f IntArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m IntArrayOption) MapIntList(f IntArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m IntArrayOption) MapInt8List(f IntArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m IntArrayOption) MapInt16List(f IntArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m IntArrayOption) MapInt32List(f IntArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m IntArrayOption) MapInt64List(f IntArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m IntArrayOption) MapUintList(f IntArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m IntArrayOption) MapUint8List(f IntArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m IntArrayOption) MapUint16List(f IntArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m IntArrayOption) MapUint32List(f IntArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m IntArrayOption) MapUint64List(f IntArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m IntArrayOption) MapUintptrList(f IntArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m IntArrayOption) MapByteList(f IntArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m IntArrayOption) MapRuneList(f IntArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m IntArrayOption) MapFloat32List(f IntArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m IntArrayOption) MapFloat64List(f IntArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m IntArrayOption) MapComplex64List(f IntArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m IntArrayOption) MapComplex128List(f IntArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m IntArrayOption) MapAnyList(f IntArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int8ArrayOption) MapBool(f Int8ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int8ArrayOption) MapString(f Int8ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int8ArrayOption) MapInt(f Int8ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int8ArrayOption) MapInt8(f Int8ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int8ArrayOption) MapInt16(f Int8ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int8ArrayOption) MapInt32(f Int8ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int8ArrayOption) MapInt64(f Int8ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int8ArrayOption) MapUint(f Int8ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int8ArrayOption) MapUint8(f Int8ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int8ArrayOption) MapUint16(f Int8ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int8ArrayOption) MapUint32(f Int8ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int8ArrayOption) MapUint64(f Int8ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int8ArrayOption) MapUintptr(f Int8ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int8ArrayOption) MapByte(f Int8ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int8ArrayOption) MapRune(f Int8ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int8ArrayOption) MapFloat32(f Int8ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int8ArrayOption) MapFloat64(f Int8ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int8ArrayOption) MapComplex64(f Int8ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int8ArrayOption) MapComplex128(f Int8ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int8ArrayOption) MapAny(f Int8ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int8ArrayOption) MapBoolOption(f Int8ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int8ArrayOption) MapStringOption(f Int8ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int8ArrayOption) MapIntOption(f Int8ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int8ArrayOption) MapInt8Option(f Int8ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int8ArrayOption) MapInt16Option(f Int8ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int8ArrayOption) MapInt32Option(f Int8ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int8ArrayOption) MapInt64Option(f Int8ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int8ArrayOption) MapUintOption(f Int8ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int8ArrayOption) MapUint8Option(f Int8ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int8ArrayOption) MapUint16Option(f Int8ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int8ArrayOption) MapUint32Option(f Int8ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int8ArrayOption) MapUint64Option(f Int8ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int8ArrayOption) MapUintptrOption(f Int8ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int8ArrayOption) MapByteOption(f Int8ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int8ArrayOption) MapRuneOption(f Int8ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int8ArrayOption) MapFloat32Option(f Int8ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int8ArrayOption) MapFloat64Option(f Int8ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int8ArrayOption) MapComplex64Option(f Int8ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int8ArrayOption) MapComplex128Option(f Int8ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int8ArrayOption) MapAnyOption(f Int8ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int8ArrayOption) MapBoolArray(f Int8ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int8ArrayOption) MapStringArray(f Int8ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int8ArrayOption) MapIntArray(f Int8ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int8ArrayOption) MapInt8Array(f Int8ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int8ArrayOption) MapInt16Array(f Int8ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int8ArrayOption) MapInt32Array(f Int8ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int8ArrayOption) MapInt64Array(f Int8ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int8ArrayOption) MapUintArray(f Int8ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int8ArrayOption) MapUint8Array(f Int8ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int8ArrayOption) MapUint16Array(f Int8ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int8ArrayOption) MapUint32Array(f Int8ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int8ArrayOption) MapUint64Array(f Int8ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int8ArrayOption) MapUintptrArray(f Int8ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int8ArrayOption) MapByteArray(f Int8ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int8ArrayOption) MapRuneArray(f Int8ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int8ArrayOption) MapFloat32Array(f Int8ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int8ArrayOption) MapFloat64Array(f Int8ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int8ArrayOption) MapComplex64Array(f Int8ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int8ArrayOption) MapComplex128Array(f Int8ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int8ArrayOption) MapAnyArray(f Int8ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int8ArrayOption) MapBoolList(f Int8ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int8ArrayOption) MapStringList(f Int8ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int8ArrayOption) MapIntList(f Int8ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int8ArrayOption) MapInt8List(f Int8ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int8ArrayOption) MapInt16List(f Int8ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int8ArrayOption) MapInt32List(f Int8ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int8ArrayOption) MapInt64List(f Int8ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int8ArrayOption) MapUintList(f Int8ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int8ArrayOption) MapUint8List(f Int8ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int8ArrayOption) MapUint16List(f Int8ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int8ArrayOption) MapUint32List(f Int8ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int8ArrayOption) MapUint64List(f Int8ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int8ArrayOption) MapUintptrList(f Int8ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int8ArrayOption) MapByteList(f Int8ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int8ArrayOption) MapRuneList(f Int8ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int8ArrayOption) MapFloat32List(f Int8ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int8ArrayOption) MapFloat64List(f Int8ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int8ArrayOption) MapComplex64List(f Int8ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int8ArrayOption) MapComplex128List(f Int8ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int8ArrayOption) MapAnyList(f Int8ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int16ArrayOption) MapBool(f Int16ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int16ArrayOption) MapString(f Int16ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int16ArrayOption) MapInt(f Int16ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int16ArrayOption) MapInt8(f Int16ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int16ArrayOption) MapInt16(f Int16ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int16ArrayOption) MapInt32(f Int16ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int16ArrayOption) MapInt64(f Int16ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int16ArrayOption) MapUint(f Int16ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int16ArrayOption) MapUint8(f Int16ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int16ArrayOption) MapUint16(f Int16ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int16ArrayOption) MapUint32(f Int16ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int16ArrayOption) MapUint64(f Int16ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int16ArrayOption) MapUintptr(f Int16ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int16ArrayOption) MapByte(f Int16ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int16ArrayOption) MapRune(f Int16ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int16ArrayOption) MapFloat32(f Int16ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int16ArrayOption) MapFloat64(f Int16ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int16ArrayOption) MapComplex64(f Int16ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int16ArrayOption) MapComplex128(f Int16ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int16ArrayOption) MapAny(f Int16ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int16ArrayOption) MapBoolOption(f Int16ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int16ArrayOption) MapStringOption(f Int16ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int16ArrayOption) MapIntOption(f Int16ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int16ArrayOption) MapInt8Option(f Int16ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int16ArrayOption) MapInt16Option(f Int16ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int16ArrayOption) MapInt32Option(f Int16ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int16ArrayOption) MapInt64Option(f Int16ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int16ArrayOption) MapUintOption(f Int16ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int16ArrayOption) MapUint8Option(f Int16ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int16ArrayOption) MapUint16Option(f Int16ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int16ArrayOption) MapUint32Option(f Int16ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int16ArrayOption) MapUint64Option(f Int16ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int16ArrayOption) MapUintptrOption(f Int16ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int16ArrayOption) MapByteOption(f Int16ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int16ArrayOption) MapRuneOption(f Int16ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int16ArrayOption) MapFloat32Option(f Int16ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int16ArrayOption) MapFloat64Option(f Int16ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int16ArrayOption) MapComplex64Option(f Int16ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int16ArrayOption) MapComplex128Option(f Int16ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int16ArrayOption) MapAnyOption(f Int16ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int16ArrayOption) MapBoolArray(f Int16ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int16ArrayOption) MapStringArray(f Int16ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int16ArrayOption) MapIntArray(f Int16ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int16ArrayOption) MapInt8Array(f Int16ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int16ArrayOption) MapInt16Array(f Int16ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int16ArrayOption) MapInt32Array(f Int16ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int16ArrayOption) MapInt64Array(f Int16ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int16ArrayOption) MapUintArray(f Int16ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int16ArrayOption) MapUint8Array(f Int16ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int16ArrayOption) MapUint16Array(f Int16ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int16ArrayOption) MapUint32Array(f Int16ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int16ArrayOption) MapUint64Array(f Int16ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int16ArrayOption) MapUintptrArray(f Int16ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int16ArrayOption) MapByteArray(f Int16ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int16ArrayOption) MapRuneArray(f Int16ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int16ArrayOption) MapFloat32Array(f Int16ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int16ArrayOption) MapFloat64Array(f Int16ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int16ArrayOption) MapComplex64Array(f Int16ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int16ArrayOption) MapComplex128Array(f Int16ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int16ArrayOption) MapAnyArray(f Int16ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int16ArrayOption) MapBoolList(f Int16ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int16ArrayOption) MapStringList(f Int16ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int16ArrayOption) MapIntList(f Int16ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int16ArrayOption) MapInt8List(f Int16ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int16ArrayOption) MapInt16List(f Int16ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int16ArrayOption) MapInt32List(f Int16ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int16ArrayOption) MapInt64List(f Int16ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int16ArrayOption) MapUintList(f Int16ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int16ArrayOption) MapUint8List(f Int16ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int16ArrayOption) MapUint16List(f Int16ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int16ArrayOption) MapUint32List(f Int16ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int16ArrayOption) MapUint64List(f Int16ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int16ArrayOption) MapUintptrList(f Int16ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int16ArrayOption) MapByteList(f Int16ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int16ArrayOption) MapRuneList(f Int16ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int16ArrayOption) MapFloat32List(f Int16ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int16ArrayOption) MapFloat64List(f Int16ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int16ArrayOption) MapComplex64List(f Int16ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int16ArrayOption) MapComplex128List(f Int16ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int16ArrayOption) MapAnyList(f Int16ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int32ArrayOption) MapBool(f Int32ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int32ArrayOption) MapString(f Int32ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int32ArrayOption) MapInt(f Int32ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int32ArrayOption) MapInt8(f Int32ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int32ArrayOption) MapInt16(f Int32ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int32ArrayOption) MapInt32(f Int32ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int32ArrayOption) MapInt64(f Int32ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int32ArrayOption) MapUint(f Int32ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int32ArrayOption) MapUint8(f Int32ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int32ArrayOption) MapUint16(f Int32ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int32ArrayOption) MapUint32(f Int32ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int32ArrayOption) MapUint64(f Int32ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int32ArrayOption) MapUintptr(f Int32ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int32ArrayOption) MapByte(f Int32ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int32ArrayOption) MapRune(f Int32ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int32ArrayOption) MapFloat32(f Int32ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int32ArrayOption) MapFloat64(f Int32ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int32ArrayOption) MapComplex64(f Int32ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int32ArrayOption) MapComplex128(f Int32ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int32ArrayOption) MapAny(f Int32ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int32ArrayOption) MapBoolOption(f Int32ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int32ArrayOption) MapStringOption(f Int32ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int32ArrayOption) MapIntOption(f Int32ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int32ArrayOption) MapInt8Option(f Int32ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int32ArrayOption) MapInt16Option(f Int32ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int32ArrayOption) MapInt32Option(f Int32ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int32ArrayOption) MapInt64Option(f Int32ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int32ArrayOption) MapUintOption(f Int32ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int32ArrayOption) MapUint8Option(f Int32ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int32ArrayOption) MapUint16Option(f Int32ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int32ArrayOption) MapUint32Option(f Int32ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int32ArrayOption) MapUint64Option(f Int32ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int32ArrayOption) MapUintptrOption(f Int32ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int32ArrayOption) MapByteOption(f Int32ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int32ArrayOption) MapRuneOption(f Int32ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int32ArrayOption) MapFloat32Option(f Int32ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int32ArrayOption) MapFloat64Option(f Int32ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int32ArrayOption) MapComplex64Option(f Int32ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int32ArrayOption) MapComplex128Option(f Int32ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int32ArrayOption) MapAnyOption(f Int32ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int32ArrayOption) MapBoolArray(f Int32ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int32ArrayOption) MapStringArray(f Int32ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int32ArrayOption) MapIntArray(f Int32ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int32ArrayOption) MapInt8Array(f Int32ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int32ArrayOption) MapInt16Array(f Int32ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int32ArrayOption) MapInt32Array(f Int32ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int32ArrayOption) MapInt64Array(f Int32ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int32ArrayOption) MapUintArray(f Int32ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int32ArrayOption) MapUint8Array(f Int32ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int32ArrayOption) MapUint16Array(f Int32ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int32ArrayOption) MapUint32Array(f Int32ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int32ArrayOption) MapUint64Array(f Int32ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int32ArrayOption) MapUintptrArray(f Int32ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int32ArrayOption) MapByteArray(f Int32ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int32ArrayOption) MapRuneArray(f Int32ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int32ArrayOption) MapFloat32Array(f Int32ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int32ArrayOption) MapFloat64Array(f Int32ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int32ArrayOption) MapComplex64Array(f Int32ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int32ArrayOption) MapComplex128Array(f Int32ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int32ArrayOption) MapAnyArray(f Int32ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int32ArrayOption) MapBoolList(f Int32ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int32ArrayOption) MapStringList(f Int32ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int32ArrayOption) MapIntList(f Int32ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int32ArrayOption) MapInt8List(f Int32ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int32ArrayOption) MapInt16List(f Int32ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int32ArrayOption) MapInt32List(f Int32ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int32ArrayOption) MapInt64List(f Int32ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int32ArrayOption) MapUintList(f Int32ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int32ArrayOption) MapUint8List(f Int32ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int32ArrayOption) MapUint16List(f Int32ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int32ArrayOption) MapUint32List(f Int32ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int32ArrayOption) MapUint64List(f Int32ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int32ArrayOption) MapUintptrList(f Int32ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int32ArrayOption) MapByteList(f Int32ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int32ArrayOption) MapRuneList(f Int32ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int32ArrayOption) MapFloat32List(f Int32ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int32ArrayOption) MapFloat64List(f Int32ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int32ArrayOption) MapComplex64List(f Int32ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int32ArrayOption) MapComplex128List(f Int32ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int32ArrayOption) MapAnyList(f Int32ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int64ArrayOption) MapBool(f Int64ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int64ArrayOption) MapString(f Int64ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int64ArrayOption) MapInt(f Int64ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int64ArrayOption) MapInt8(f Int64ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int64ArrayOption) MapInt16(f Int64ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int64ArrayOption) MapInt32(f Int64ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int64ArrayOption) MapInt64(f Int64ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int64ArrayOption) MapUint(f Int64ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int64ArrayOption) MapUint8(f Int64ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int64ArrayOption) MapUint16(f Int64ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int64ArrayOption) MapUint32(f Int64ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int64ArrayOption) MapUint64(f Int64ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int64ArrayOption) MapUintptr(f Int64ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int64ArrayOption) MapByte(f Int64ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int64ArrayOption) MapRune(f Int64ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int64ArrayOption) MapFloat32(f Int64ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int64ArrayOption) MapFloat64(f Int64ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int64ArrayOption) MapComplex64(f Int64ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int64ArrayOption) MapComplex128(f Int64ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int64ArrayOption) MapAny(f Int64ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int64ArrayOption) MapBoolOption(f Int64ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int64ArrayOption) MapStringOption(f Int64ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int64ArrayOption) MapIntOption(f Int64ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int64ArrayOption) MapInt8Option(f Int64ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int64ArrayOption) MapInt16Option(f Int64ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int64ArrayOption) MapInt32Option(f Int64ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int64ArrayOption) MapInt64Option(f Int64ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int64ArrayOption) MapUintOption(f Int64ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int64ArrayOption) MapUint8Option(f Int64ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int64ArrayOption) MapUint16Option(f Int64ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int64ArrayOption) MapUint32Option(f Int64ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int64ArrayOption) MapUint64Option(f Int64ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int64ArrayOption) MapUintptrOption(f Int64ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int64ArrayOption) MapByteOption(f Int64ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int64ArrayOption) MapRuneOption(f Int64ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int64ArrayOption) MapFloat32Option(f Int64ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int64ArrayOption) MapFloat64Option(f Int64ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int64ArrayOption) MapComplex64Option(f Int64ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int64ArrayOption) MapComplex128Option(f Int64ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int64ArrayOption) MapAnyOption(f Int64ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int64ArrayOption) MapBoolArray(f Int64ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int64ArrayOption) MapStringArray(f Int64ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int64ArrayOption) MapIntArray(f Int64ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int64ArrayOption) MapInt8Array(f Int64ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int64ArrayOption) MapInt16Array(f Int64ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int64ArrayOption) MapInt32Array(f Int64ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int64ArrayOption) MapInt64Array(f Int64ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int64ArrayOption) MapUintArray(f Int64ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int64ArrayOption) MapUint8Array(f Int64ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int64ArrayOption) MapUint16Array(f Int64ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int64ArrayOption) MapUint32Array(f Int64ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int64ArrayOption) MapUint64Array(f Int64ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int64ArrayOption) MapUintptrArray(f Int64ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int64ArrayOption) MapByteArray(f Int64ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int64ArrayOption) MapRuneArray(f Int64ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int64ArrayOption) MapFloat32Array(f Int64ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int64ArrayOption) MapFloat64Array(f Int64ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int64ArrayOption) MapComplex64Array(f Int64ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int64ArrayOption) MapComplex128Array(f Int64ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int64ArrayOption) MapAnyArray(f Int64ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int64ArrayOption) MapBoolList(f Int64ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int64ArrayOption) MapStringList(f Int64ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int64ArrayOption) MapIntList(f Int64ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int64ArrayOption) MapInt8List(f Int64ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int64ArrayOption) MapInt16List(f Int64ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int64ArrayOption) MapInt32List(f Int64ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int64ArrayOption) MapInt64List(f Int64ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int64ArrayOption) MapUintList(f Int64ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int64ArrayOption) MapUint8List(f Int64ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int64ArrayOption) MapUint16List(f Int64ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int64ArrayOption) MapUint32List(f Int64ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int64ArrayOption) MapUint64List(f Int64ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int64ArrayOption) MapUintptrList(f Int64ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int64ArrayOption) MapByteList(f Int64ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int64ArrayOption) MapRuneList(f Int64ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int64ArrayOption) MapFloat32List(f Int64ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int64ArrayOption) MapFloat64List(f Int64ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int64ArrayOption) MapComplex64List(f Int64ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int64ArrayOption) MapComplex128List(f Int64ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int64ArrayOption) MapAnyList(f Int64ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintArrayOption) MapBool(f UintArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintArrayOption) MapString(f UintArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintArrayOption) MapInt(f UintArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintArrayOption) MapInt8(f UintArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintArrayOption) MapInt16(f UintArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintArrayOption) MapInt32(f UintArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintArrayOption) MapInt64(f UintArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintArrayOption) MapUint(f UintArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintArrayOption) MapUint8(f UintArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintArrayOption) MapUint16(f UintArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintArrayOption) MapUint32(f UintArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintArrayOption) MapUint64(f UintArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintArrayOption) MapUintptr(f UintArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintArrayOption) MapByte(f UintArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintArrayOption) MapRune(f UintArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintArrayOption) MapFloat32(f UintArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintArrayOption) MapFloat64(f UintArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintArrayOption) MapComplex64(f UintArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintArrayOption) MapComplex128(f UintArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintArrayOption) MapAny(f UintArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintArrayOption) MapBoolOption(f UintArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintArrayOption) MapStringOption(f UintArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintArrayOption) MapIntOption(f UintArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintArrayOption) MapInt8Option(f UintArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintArrayOption) MapInt16Option(f UintArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintArrayOption) MapInt32Option(f UintArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintArrayOption) MapInt64Option(f UintArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintArrayOption) MapUintOption(f UintArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintArrayOption) MapUint8Option(f UintArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintArrayOption) MapUint16Option(f UintArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintArrayOption) MapUint32Option(f UintArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintArrayOption) MapUint64Option(f UintArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintArrayOption) MapUintptrOption(f UintArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintArrayOption) MapByteOption(f UintArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintArrayOption) MapRuneOption(f UintArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintArrayOption) MapFloat32Option(f UintArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintArrayOption) MapFloat64Option(f UintArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintArrayOption) MapComplex64Option(f UintArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintArrayOption) MapComplex128Option(f UintArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintArrayOption) MapAnyOption(f UintArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintArrayOption) MapBoolArray(f UintArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintArrayOption) MapStringArray(f UintArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintArrayOption) MapIntArray(f UintArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintArrayOption) MapInt8Array(f UintArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintArrayOption) MapInt16Array(f UintArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintArrayOption) MapInt32Array(f UintArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintArrayOption) MapInt64Array(f UintArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintArrayOption) MapUintArray(f UintArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintArrayOption) MapUint8Array(f UintArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintArrayOption) MapUint16Array(f UintArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintArrayOption) MapUint32Array(f UintArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintArrayOption) MapUint64Array(f UintArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintArrayOption) MapUintptrArray(f UintArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintArrayOption) MapByteArray(f UintArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintArrayOption) MapRuneArray(f UintArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintArrayOption) MapFloat32Array(f UintArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintArrayOption) MapFloat64Array(f UintArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintArrayOption) MapComplex64Array(f UintArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintArrayOption) MapComplex128Array(f UintArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintArrayOption) MapAnyArray(f UintArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintArrayOption) MapBoolList(f UintArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintArrayOption) MapStringList(f UintArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintArrayOption) MapIntList(f UintArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintArrayOption) MapInt8List(f UintArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintArrayOption) MapInt16List(f UintArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintArrayOption) MapInt32List(f UintArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintArrayOption) MapInt64List(f UintArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintArrayOption) MapUintList(f UintArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintArrayOption) MapUint8List(f UintArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintArrayOption) MapUint16List(f UintArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintArrayOption) MapUint32List(f UintArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintArrayOption) MapUint64List(f UintArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintArrayOption) MapUintptrList(f UintArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintArrayOption) MapByteList(f UintArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintArrayOption) MapRuneList(f UintArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintArrayOption) MapFloat32List(f UintArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintArrayOption) MapFloat64List(f UintArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintArrayOption) MapComplex64List(f UintArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintArrayOption) MapComplex128List(f UintArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintArrayOption) MapAnyList(f UintArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint8ArrayOption) MapBool(f Uint8ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint8ArrayOption) MapString(f Uint8ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint8ArrayOption) MapInt(f Uint8ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint8ArrayOption) MapInt8(f Uint8ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint8ArrayOption) MapInt16(f Uint8ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint8ArrayOption) MapInt32(f Uint8ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint8ArrayOption) MapInt64(f Uint8ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint8ArrayOption) MapUint(f Uint8ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint8ArrayOption) MapUint8(f Uint8ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint8ArrayOption) MapUint16(f Uint8ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint8ArrayOption) MapUint32(f Uint8ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint8ArrayOption) MapUint64(f Uint8ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint8ArrayOption) MapUintptr(f Uint8ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint8ArrayOption) MapByte(f Uint8ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint8ArrayOption) MapRune(f Uint8ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint8ArrayOption) MapFloat32(f Uint8ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint8ArrayOption) MapFloat64(f Uint8ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint8ArrayOption) MapComplex64(f Uint8ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint8ArrayOption) MapComplex128(f Uint8ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint8ArrayOption) MapAny(f Uint8ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint8ArrayOption) MapBoolOption(f Uint8ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint8ArrayOption) MapStringOption(f Uint8ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint8ArrayOption) MapIntOption(f Uint8ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint8ArrayOption) MapInt8Option(f Uint8ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint8ArrayOption) MapInt16Option(f Uint8ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint8ArrayOption) MapInt32Option(f Uint8ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint8ArrayOption) MapInt64Option(f Uint8ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint8ArrayOption) MapUintOption(f Uint8ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint8ArrayOption) MapUint8Option(f Uint8ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint8ArrayOption) MapUint16Option(f Uint8ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint8ArrayOption) MapUint32Option(f Uint8ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint8ArrayOption) MapUint64Option(f Uint8ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint8ArrayOption) MapUintptrOption(f Uint8ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint8ArrayOption) MapByteOption(f Uint8ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint8ArrayOption) MapRuneOption(f Uint8ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint8ArrayOption) MapFloat32Option(f Uint8ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint8ArrayOption) MapFloat64Option(f Uint8ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint8ArrayOption) MapComplex64Option(f Uint8ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint8ArrayOption) MapComplex128Option(f Uint8ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint8ArrayOption) MapAnyOption(f Uint8ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint8ArrayOption) MapBoolArray(f Uint8ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint8ArrayOption) MapStringArray(f Uint8ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint8ArrayOption) MapIntArray(f Uint8ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint8ArrayOption) MapInt8Array(f Uint8ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint8ArrayOption) MapInt16Array(f Uint8ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint8ArrayOption) MapInt32Array(f Uint8ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint8ArrayOption) MapInt64Array(f Uint8ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint8ArrayOption) MapUintArray(f Uint8ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint8ArrayOption) MapUint8Array(f Uint8ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint8ArrayOption) MapUint16Array(f Uint8ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint8ArrayOption) MapUint32Array(f Uint8ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint8ArrayOption) MapUint64Array(f Uint8ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint8ArrayOption) MapUintptrArray(f Uint8ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint8ArrayOption) MapByteArray(f Uint8ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint8ArrayOption) MapRuneArray(f Uint8ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint8ArrayOption) MapFloat32Array(f Uint8ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint8ArrayOption) MapFloat64Array(f Uint8ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint8ArrayOption) MapComplex64Array(f Uint8ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint8ArrayOption) MapComplex128Array(f Uint8ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint8ArrayOption) MapAnyArray(f Uint8ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint8ArrayOption) MapBoolList(f Uint8ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint8ArrayOption) MapStringList(f Uint8ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint8ArrayOption) MapIntList(f Uint8ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint8ArrayOption) MapInt8List(f Uint8ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint8ArrayOption) MapInt16List(f Uint8ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint8ArrayOption) MapInt32List(f Uint8ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint8ArrayOption) MapInt64List(f Uint8ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint8ArrayOption) MapUintList(f Uint8ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint8ArrayOption) MapUint8List(f Uint8ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint8ArrayOption) MapUint16List(f Uint8ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint8ArrayOption) MapUint32List(f Uint8ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint8ArrayOption) MapUint64List(f Uint8ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint8ArrayOption) MapUintptrList(f Uint8ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint8ArrayOption) MapByteList(f Uint8ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint8ArrayOption) MapRuneList(f Uint8ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint8ArrayOption) MapFloat32List(f Uint8ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint8ArrayOption) MapFloat64List(f Uint8ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint8ArrayOption) MapComplex64List(f Uint8ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint8ArrayOption) MapComplex128List(f Uint8ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint8ArrayOption) MapAnyList(f Uint8ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint16ArrayOption) MapBool(f Uint16ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint16ArrayOption) MapString(f Uint16ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint16ArrayOption) MapInt(f Uint16ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint16ArrayOption) MapInt8(f Uint16ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint16ArrayOption) MapInt16(f Uint16ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint16ArrayOption) MapInt32(f Uint16ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint16ArrayOption) MapInt64(f Uint16ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint16ArrayOption) MapUint(f Uint16ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint16ArrayOption) MapUint8(f Uint16ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint16ArrayOption) MapUint16(f Uint16ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint16ArrayOption) MapUint32(f Uint16ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint16ArrayOption) MapUint64(f Uint16ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint16ArrayOption) MapUintptr(f Uint16ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint16ArrayOption) MapByte(f Uint16ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint16ArrayOption) MapRune(f Uint16ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint16ArrayOption) MapFloat32(f Uint16ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint16ArrayOption) MapFloat64(f Uint16ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint16ArrayOption) MapComplex64(f Uint16ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint16ArrayOption) MapComplex128(f Uint16ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint16ArrayOption) MapAny(f Uint16ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint16ArrayOption) MapBoolOption(f Uint16ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint16ArrayOption) MapStringOption(f Uint16ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint16ArrayOption) MapIntOption(f Uint16ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint16ArrayOption) MapInt8Option(f Uint16ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint16ArrayOption) MapInt16Option(f Uint16ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint16ArrayOption) MapInt32Option(f Uint16ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint16ArrayOption) MapInt64Option(f Uint16ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint16ArrayOption) MapUintOption(f Uint16ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint16ArrayOption) MapUint8Option(f Uint16ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint16ArrayOption) MapUint16Option(f Uint16ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint16ArrayOption) MapUint32Option(f Uint16ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint16ArrayOption) MapUint64Option(f Uint16ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint16ArrayOption) MapUintptrOption(f Uint16ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint16ArrayOption) MapByteOption(f Uint16ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint16ArrayOption) MapRuneOption(f Uint16ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint16ArrayOption) MapFloat32Option(f Uint16ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint16ArrayOption) MapFloat64Option(f Uint16ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint16ArrayOption) MapComplex64Option(f Uint16ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint16ArrayOption) MapComplex128Option(f Uint16ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint16ArrayOption) MapAnyOption(f Uint16ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint16ArrayOption) MapBoolArray(f Uint16ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint16ArrayOption) MapStringArray(f Uint16ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint16ArrayOption) MapIntArray(f Uint16ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint16ArrayOption) MapInt8Array(f Uint16ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint16ArrayOption) MapInt16Array(f Uint16ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint16ArrayOption) MapInt32Array(f Uint16ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint16ArrayOption) MapInt64Array(f Uint16ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint16ArrayOption) MapUintArray(f Uint16ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint16ArrayOption) MapUint8Array(f Uint16ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint16ArrayOption) MapUint16Array(f Uint16ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint16ArrayOption) MapUint32Array(f Uint16ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint16ArrayOption) MapUint64Array(f Uint16ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint16ArrayOption) MapUintptrArray(f Uint16ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint16ArrayOption) MapByteArray(f Uint16ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint16ArrayOption) MapRuneArray(f Uint16ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint16ArrayOption) MapFloat32Array(f Uint16ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint16ArrayOption) MapFloat64Array(f Uint16ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint16ArrayOption) MapComplex64Array(f Uint16ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint16ArrayOption) MapComplex128Array(f Uint16ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint16ArrayOption) MapAnyArray(f Uint16ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint16ArrayOption) MapBoolList(f Uint16ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint16ArrayOption) MapStringList(f Uint16ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint16ArrayOption) MapIntList(f Uint16ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint16ArrayOption) MapInt8List(f Uint16ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint16ArrayOption) MapInt16List(f Uint16ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint16ArrayOption) MapInt32List(f Uint16ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint16ArrayOption) MapInt64List(f Uint16ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint16ArrayOption) MapUintList(f Uint16ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint16ArrayOption) MapUint8List(f Uint16ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint16ArrayOption) MapUint16List(f Uint16ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint16ArrayOption) MapUint32List(f Uint16ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint16ArrayOption) MapUint64List(f Uint16ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint16ArrayOption) MapUintptrList(f Uint16ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint16ArrayOption) MapByteList(f Uint16ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint16ArrayOption) MapRuneList(f Uint16ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint16ArrayOption) MapFloat32List(f Uint16ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint16ArrayOption) MapFloat64List(f Uint16ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint16ArrayOption) MapComplex64List(f Uint16ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint16ArrayOption) MapComplex128List(f Uint16ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint16ArrayOption) MapAnyList(f Uint16ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint32ArrayOption) MapBool(f Uint32ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint32ArrayOption) MapString(f Uint32ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint32ArrayOption) MapInt(f Uint32ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint32ArrayOption) MapInt8(f Uint32ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint32ArrayOption) MapInt16(f Uint32ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint32ArrayOption) MapInt32(f Uint32ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint32ArrayOption) MapInt64(f Uint32ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint32ArrayOption) MapUint(f Uint32ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint32ArrayOption) MapUint8(f Uint32ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint32ArrayOption) MapUint16(f Uint32ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint32ArrayOption) MapUint32(f Uint32ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint32ArrayOption) MapUint64(f Uint32ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint32ArrayOption) MapUintptr(f Uint32ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint32ArrayOption) MapByte(f Uint32ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint32ArrayOption) MapRune(f Uint32ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint32ArrayOption) MapFloat32(f Uint32ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint32ArrayOption) MapFloat64(f Uint32ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint32ArrayOption) MapComplex64(f Uint32ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint32ArrayOption) MapComplex128(f Uint32ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint32ArrayOption) MapAny(f Uint32ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint32ArrayOption) MapBoolOption(f Uint32ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint32ArrayOption) MapStringOption(f Uint32ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint32ArrayOption) MapIntOption(f Uint32ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint32ArrayOption) MapInt8Option(f Uint32ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint32ArrayOption) MapInt16Option(f Uint32ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint32ArrayOption) MapInt32Option(f Uint32ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint32ArrayOption) MapInt64Option(f Uint32ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint32ArrayOption) MapUintOption(f Uint32ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint32ArrayOption) MapUint8Option(f Uint32ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint32ArrayOption) MapUint16Option(f Uint32ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint32ArrayOption) MapUint32Option(f Uint32ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint32ArrayOption) MapUint64Option(f Uint32ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint32ArrayOption) MapUintptrOption(f Uint32ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint32ArrayOption) MapByteOption(f Uint32ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint32ArrayOption) MapRuneOption(f Uint32ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint32ArrayOption) MapFloat32Option(f Uint32ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint32ArrayOption) MapFloat64Option(f Uint32ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint32ArrayOption) MapComplex64Option(f Uint32ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint32ArrayOption) MapComplex128Option(f Uint32ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint32ArrayOption) MapAnyOption(f Uint32ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint32ArrayOption) MapBoolArray(f Uint32ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint32ArrayOption) MapStringArray(f Uint32ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint32ArrayOption) MapIntArray(f Uint32ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint32ArrayOption) MapInt8Array(f Uint32ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint32ArrayOption) MapInt16Array(f Uint32ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint32ArrayOption) MapInt32Array(f Uint32ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint32ArrayOption) MapInt64Array(f Uint32ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint32ArrayOption) MapUintArray(f Uint32ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint32ArrayOption) MapUint8Array(f Uint32ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint32ArrayOption) MapUint16Array(f Uint32ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint32ArrayOption) MapUint32Array(f Uint32ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint32ArrayOption) MapUint64Array(f Uint32ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint32ArrayOption) MapUintptrArray(f Uint32ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint32ArrayOption) MapByteArray(f Uint32ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint32ArrayOption) MapRuneArray(f Uint32ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint32ArrayOption) MapFloat32Array(f Uint32ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint32ArrayOption) MapFloat64Array(f Uint32ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint32ArrayOption) MapComplex64Array(f Uint32ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint32ArrayOption) MapComplex128Array(f Uint32ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint32ArrayOption) MapAnyArray(f Uint32ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint32ArrayOption) MapBoolList(f Uint32ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint32ArrayOption) MapStringList(f Uint32ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint32ArrayOption) MapIntList(f Uint32ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint32ArrayOption) MapInt8List(f Uint32ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint32ArrayOption) MapInt16List(f Uint32ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint32ArrayOption) MapInt32List(f Uint32ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint32ArrayOption) MapInt64List(f Uint32ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint32ArrayOption) MapUintList(f Uint32ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint32ArrayOption) MapUint8List(f Uint32ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint32ArrayOption) MapUint16List(f Uint32ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint32ArrayOption) MapUint32List(f Uint32ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint32ArrayOption) MapUint64List(f Uint32ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint32ArrayOption) MapUintptrList(f Uint32ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint32ArrayOption) MapByteList(f Uint32ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint32ArrayOption) MapRuneList(f Uint32ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint32ArrayOption) MapFloat32List(f Uint32ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint32ArrayOption) MapFloat64List(f Uint32ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint32ArrayOption) MapComplex64List(f Uint32ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint32ArrayOption) MapComplex128List(f Uint32ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint32ArrayOption) MapAnyList(f Uint32ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint64ArrayOption) MapBool(f Uint64ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint64ArrayOption) MapString(f Uint64ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint64ArrayOption) MapInt(f Uint64ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint64ArrayOption) MapInt8(f Uint64ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint64ArrayOption) MapInt16(f Uint64ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint64ArrayOption) MapInt32(f Uint64ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint64ArrayOption) MapInt64(f Uint64ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint64ArrayOption) MapUint(f Uint64ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint64ArrayOption) MapUint8(f Uint64ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint64ArrayOption) MapUint16(f Uint64ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint64ArrayOption) MapUint32(f Uint64ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint64ArrayOption) MapUint64(f Uint64ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint64ArrayOption) MapUintptr(f Uint64ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint64ArrayOption) MapByte(f Uint64ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint64ArrayOption) MapRune(f Uint64ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint64ArrayOption) MapFloat32(f Uint64ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint64ArrayOption) MapFloat64(f Uint64ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint64ArrayOption) MapComplex64(f Uint64ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint64ArrayOption) MapComplex128(f Uint64ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint64ArrayOption) MapAny(f Uint64ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint64ArrayOption) MapBoolOption(f Uint64ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint64ArrayOption) MapStringOption(f Uint64ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint64ArrayOption) MapIntOption(f Uint64ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint64ArrayOption) MapInt8Option(f Uint64ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint64ArrayOption) MapInt16Option(f Uint64ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint64ArrayOption) MapInt32Option(f Uint64ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint64ArrayOption) MapInt64Option(f Uint64ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint64ArrayOption) MapUintOption(f Uint64ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint64ArrayOption) MapUint8Option(f Uint64ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint64ArrayOption) MapUint16Option(f Uint64ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint64ArrayOption) MapUint32Option(f Uint64ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint64ArrayOption) MapUint64Option(f Uint64ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint64ArrayOption) MapUintptrOption(f Uint64ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint64ArrayOption) MapByteOption(f Uint64ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint64ArrayOption) MapRuneOption(f Uint64ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint64ArrayOption) MapFloat32Option(f Uint64ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint64ArrayOption) MapFloat64Option(f Uint64ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint64ArrayOption) MapComplex64Option(f Uint64ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint64ArrayOption) MapComplex128Option(f Uint64ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint64ArrayOption) MapAnyOption(f Uint64ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint64ArrayOption) MapBoolArray(f Uint64ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint64ArrayOption) MapStringArray(f Uint64ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint64ArrayOption) MapIntArray(f Uint64ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint64ArrayOption) MapInt8Array(f Uint64ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint64ArrayOption) MapInt16Array(f Uint64ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint64ArrayOption) MapInt32Array(f Uint64ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint64ArrayOption) MapInt64Array(f Uint64ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint64ArrayOption) MapUintArray(f Uint64ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint64ArrayOption) MapUint8Array(f Uint64ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint64ArrayOption) MapUint16Array(f Uint64ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint64ArrayOption) MapUint32Array(f Uint64ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint64ArrayOption) MapUint64Array(f Uint64ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint64ArrayOption) MapUintptrArray(f Uint64ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint64ArrayOption) MapByteArray(f Uint64ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint64ArrayOption) MapRuneArray(f Uint64ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint64ArrayOption) MapFloat32Array(f Uint64ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint64ArrayOption) MapFloat64Array(f Uint64ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint64ArrayOption) MapComplex64Array(f Uint64ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint64ArrayOption) MapComplex128Array(f Uint64ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint64ArrayOption) MapAnyArray(f Uint64ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint64ArrayOption) MapBoolList(f Uint64ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint64ArrayOption) MapStringList(f Uint64ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint64ArrayOption) MapIntList(f Uint64ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint64ArrayOption) MapInt8List(f Uint64ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint64ArrayOption) MapInt16List(f Uint64ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint64ArrayOption) MapInt32List(f Uint64ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint64ArrayOption) MapInt64List(f Uint64ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint64ArrayOption) MapUintList(f Uint64ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint64ArrayOption) MapUint8List(f Uint64ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint64ArrayOption) MapUint16List(f Uint64ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint64ArrayOption) MapUint32List(f Uint64ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint64ArrayOption) MapUint64List(f Uint64ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint64ArrayOption) MapUintptrList(f Uint64ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint64ArrayOption) MapByteList(f Uint64ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint64ArrayOption) MapRuneList(f Uint64ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint64ArrayOption) MapFloat32List(f Uint64ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint64ArrayOption) MapFloat64List(f Uint64ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint64ArrayOption) MapComplex64List(f Uint64ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint64ArrayOption) MapComplex128List(f Uint64ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint64ArrayOption) MapAnyList(f Uint64ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintptrArrayOption) MapBool(f UintptrArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintptrArrayOption) MapString(f UintptrArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintptrArrayOption) MapInt(f UintptrArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintptrArrayOption) MapInt8(f UintptrArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintptrArrayOption) MapInt16(f UintptrArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintptrArrayOption) MapInt32(f UintptrArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintptrArrayOption) MapInt64(f UintptrArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintptrArrayOption) MapUint(f UintptrArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintptrArrayOption) MapUint8(f UintptrArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintptrArrayOption) MapUint16(f UintptrArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintptrArrayOption) MapUint32(f UintptrArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintptrArrayOption) MapUint64(f UintptrArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintptrArrayOption) MapUintptr(f UintptrArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintptrArrayOption) MapByte(f UintptrArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintptrArrayOption) MapRune(f UintptrArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintptrArrayOption) MapFloat32(f UintptrArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintptrArrayOption) MapFloat64(f UintptrArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintptrArrayOption) MapComplex64(f UintptrArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintptrArrayOption) MapComplex128(f UintptrArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintptrArrayOption) MapAny(f UintptrArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintptrArrayOption) MapBoolOption(f UintptrArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintptrArrayOption) MapStringOption(f UintptrArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintptrArrayOption) MapIntOption(f UintptrArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintptrArrayOption) MapInt8Option(f UintptrArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintptrArrayOption) MapInt16Option(f UintptrArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintptrArrayOption) MapInt32Option(f UintptrArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintptrArrayOption) MapInt64Option(f UintptrArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintptrArrayOption) MapUintOption(f UintptrArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintptrArrayOption) MapUint8Option(f UintptrArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintptrArrayOption) MapUint16Option(f UintptrArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintptrArrayOption) MapUint32Option(f UintptrArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintptrArrayOption) MapUint64Option(f UintptrArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintptrArrayOption) MapUintptrOption(f UintptrArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintptrArrayOption) MapByteOption(f UintptrArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintptrArrayOption) MapRuneOption(f UintptrArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintptrArrayOption) MapFloat32Option(f UintptrArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintptrArrayOption) MapFloat64Option(f UintptrArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintptrArrayOption) MapComplex64Option(f UintptrArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintptrArrayOption) MapComplex128Option(f UintptrArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintptrArrayOption) MapAnyOption(f UintptrArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintptrArrayOption) MapBoolArray(f UintptrArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintptrArrayOption) MapStringArray(f UintptrArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintptrArrayOption) MapIntArray(f UintptrArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintptrArrayOption) MapInt8Array(f UintptrArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintptrArrayOption) MapInt16Array(f UintptrArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintptrArrayOption) MapInt32Array(f UintptrArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintptrArrayOption) MapInt64Array(f UintptrArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintptrArrayOption) MapUintArray(f UintptrArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintptrArrayOption) MapUint8Array(f UintptrArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintptrArrayOption) MapUint16Array(f UintptrArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintptrArrayOption) MapUint32Array(f UintptrArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintptrArrayOption) MapUint64Array(f UintptrArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintptrArrayOption) MapUintptrArray(f UintptrArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintptrArrayOption) MapByteArray(f UintptrArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintptrArrayOption) MapRuneArray(f UintptrArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintptrArrayOption) MapFloat32Array(f UintptrArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintptrArrayOption) MapFloat64Array(f UintptrArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintptrArrayOption) MapComplex64Array(f UintptrArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintptrArrayOption) MapComplex128Array(f UintptrArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintptrArrayOption) MapAnyArray(f UintptrArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintptrArrayOption) MapBoolList(f UintptrArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintptrArrayOption) MapStringList(f UintptrArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintptrArrayOption) MapIntList(f UintptrArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintptrArrayOption) MapInt8List(f UintptrArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintptrArrayOption) MapInt16List(f UintptrArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintptrArrayOption) MapInt32List(f UintptrArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintptrArrayOption) MapInt64List(f UintptrArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintptrArrayOption) MapUintList(f UintptrArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintptrArrayOption) MapUint8List(f UintptrArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintptrArrayOption) MapUint16List(f UintptrArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintptrArrayOption) MapUint32List(f UintptrArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintptrArrayOption) MapUint64List(f UintptrArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintptrArrayOption) MapUintptrList(f UintptrArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintptrArrayOption) MapByteList(f UintptrArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintptrArrayOption) MapRuneList(f UintptrArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintptrArrayOption) MapFloat32List(f UintptrArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintptrArrayOption) MapFloat64List(f UintptrArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintptrArrayOption) MapComplex64List(f UintptrArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintptrArrayOption) MapComplex128List(f UintptrArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintptrArrayOption) MapAnyList(f UintptrArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m ByteArrayOption) MapBool(f ByteArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m ByteArrayOption) MapString(f ByteArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m ByteArrayOption) MapInt(f ByteArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m ByteArrayOption) MapInt8(f ByteArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m ByteArrayOption) MapInt16(f ByteArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m ByteArrayOption) MapInt32(f ByteArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m ByteArrayOption) MapInt64(f ByteArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m ByteArrayOption) MapUint(f ByteArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m ByteArrayOption) MapUint8(f ByteArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m ByteArrayOption) MapUint16(f ByteArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m ByteArrayOption) MapUint32(f ByteArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m ByteArrayOption) MapUint64(f ByteArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m ByteArrayOption) MapUintptr(f ByteArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m ByteArrayOption) MapByte(f ByteArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m ByteArrayOption) MapRune(f ByteArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m ByteArrayOption) MapFloat32(f ByteArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m ByteArrayOption) MapFloat64(f ByteArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m ByteArrayOption) MapComplex64(f ByteArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m ByteArrayOption) MapComplex128(f ByteArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m ByteArrayOption) MapAny(f ByteArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m ByteArrayOption) MapBoolOption(f ByteArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m ByteArrayOption) MapStringOption(f ByteArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m ByteArrayOption) MapIntOption(f ByteArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m ByteArrayOption) MapInt8Option(f ByteArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m ByteArrayOption) MapInt16Option(f ByteArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m ByteArrayOption) MapInt32Option(f ByteArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m ByteArrayOption) MapInt64Option(f ByteArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m ByteArrayOption) MapUintOption(f ByteArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m ByteArrayOption) MapUint8Option(f ByteArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m ByteArrayOption) MapUint16Option(f ByteArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m ByteArrayOption) MapUint32Option(f ByteArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m ByteArrayOption) MapUint64Option(f ByteArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m ByteArrayOption) MapUintptrOption(f ByteArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m ByteArrayOption) MapByteOption(f ByteArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m ByteArrayOption) MapRuneOption(f ByteArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m ByteArrayOption) MapFloat32Option(f ByteArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m ByteArrayOption) MapFloat64Option(f ByteArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m ByteArrayOption) MapComplex64Option(f ByteArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m ByteArrayOption) MapComplex128Option(f ByteArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m ByteArrayOption) MapAnyOption(f ByteArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m ByteArrayOption) MapBoolArray(f ByteArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m ByteArrayOption) MapStringArray(f ByteArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m ByteArrayOption) MapIntArray(f ByteArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m ByteArrayOption) MapInt8Array(f ByteArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m ByteArrayOption) MapInt16Array(f ByteArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m ByteArrayOption) MapInt32Array(f ByteArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m ByteArrayOption) MapInt64Array(f ByteArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m ByteArrayOption) MapUintArray(f ByteArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m ByteArrayOption) MapUint8Array(f ByteArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m ByteArrayOption) MapUint16Array(f ByteArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m ByteArrayOption) MapUint32Array(f ByteArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m ByteArrayOption) MapUint64Array(f ByteArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m ByteArrayOption) MapUintptrArray(f ByteArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m ByteArrayOption) MapByteArray(f ByteArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m ByteArrayOption) MapRuneArray(f ByteArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m ByteArrayOption) MapFloat32Array(f ByteArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m ByteArrayOption) MapFloat64Array(f ByteArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m ByteArrayOption) MapComplex64Array(f ByteArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m ByteArrayOption) MapComplex128Array(f ByteArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m ByteArrayOption) MapAnyArray(f ByteArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m ByteArrayOption) MapBoolList(f ByteArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m ByteArrayOption) MapStringList(f ByteArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m ByteArrayOption) MapIntList(f ByteArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m ByteArrayOption) MapInt8List(f ByteArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m ByteArrayOption) MapInt16List(f ByteArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m ByteArrayOption) MapInt32List(f ByteArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m ByteArrayOption) MapInt64List(f ByteArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m ByteArrayOption) MapUintList(f ByteArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m ByteArrayOption) MapUint8List(f ByteArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m ByteArrayOption) MapUint16List(f ByteArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m ByteArrayOption) MapUint32List(f ByteArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m ByteArrayOption) MapUint64List(f ByteArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m ByteArrayOption) MapUintptrList(f ByteArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m ByteArrayOption) MapByteList(f ByteArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m ByteArrayOption) MapRuneList(f ByteArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m ByteArrayOption) MapFloat32List(f ByteArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m ByteArrayOption) MapFloat64List(f ByteArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m ByteArrayOption) MapComplex64List(f ByteArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m ByteArrayOption) MapComplex128List(f ByteArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m ByteArrayOption) MapAnyList(f ByteArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m RuneArrayOption) MapBool(f RuneArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m RuneArrayOption) MapString(f RuneArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m RuneArrayOption) MapInt(f RuneArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m RuneArrayOption) MapInt8(f RuneArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m RuneArrayOption) MapInt16(f RuneArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m RuneArrayOption) MapInt32(f RuneArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m RuneArrayOption) MapInt64(f RuneArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m RuneArrayOption) MapUint(f RuneArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m RuneArrayOption) MapUint8(f RuneArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m RuneArrayOption) MapUint16(f RuneArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m RuneArrayOption) MapUint32(f RuneArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m RuneArrayOption) MapUint64(f RuneArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m RuneArrayOption) MapUintptr(f RuneArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m RuneArrayOption) MapByte(f RuneArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m RuneArrayOption) MapRune(f RuneArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m RuneArrayOption) MapFloat32(f RuneArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m RuneArrayOption) MapFloat64(f RuneArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m RuneArrayOption) MapComplex64(f RuneArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m RuneArrayOption) MapComplex128(f RuneArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m RuneArrayOption) MapAny(f RuneArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m RuneArrayOption) MapBoolOption(f RuneArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m RuneArrayOption) MapStringOption(f RuneArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m RuneArrayOption) MapIntOption(f RuneArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m RuneArrayOption) MapInt8Option(f RuneArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m RuneArrayOption) MapInt16Option(f RuneArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m RuneArrayOption) MapInt32Option(f RuneArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m RuneArrayOption) MapInt64Option(f RuneArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m RuneArrayOption) MapUintOption(f RuneArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m RuneArrayOption) MapUint8Option(f RuneArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m RuneArrayOption) MapUint16Option(f RuneArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m RuneArrayOption) MapUint32Option(f RuneArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m RuneArrayOption) MapUint64Option(f RuneArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m RuneArrayOption) MapUintptrOption(f RuneArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m RuneArrayOption) MapByteOption(f RuneArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m RuneArrayOption) MapRuneOption(f RuneArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m RuneArrayOption) MapFloat32Option(f RuneArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m RuneArrayOption) MapFloat64Option(f RuneArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m RuneArrayOption) MapComplex64Option(f RuneArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m RuneArrayOption) MapComplex128Option(f RuneArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m RuneArrayOption) MapAnyOption(f RuneArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m RuneArrayOption) MapBoolArray(f RuneArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m RuneArrayOption) MapStringArray(f RuneArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m RuneArrayOption) MapIntArray(f RuneArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m RuneArrayOption) MapInt8Array(f RuneArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m RuneArrayOption) MapInt16Array(f RuneArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m RuneArrayOption) MapInt32Array(f RuneArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m RuneArrayOption) MapInt64Array(f RuneArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m RuneArrayOption) MapUintArray(f RuneArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m RuneArrayOption) MapUint8Array(f RuneArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m RuneArrayOption) MapUint16Array(f RuneArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m RuneArrayOption) MapUint32Array(f RuneArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m RuneArrayOption) MapUint64Array(f RuneArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m RuneArrayOption) MapUintptrArray(f RuneArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m RuneArrayOption) MapByteArray(f RuneArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m RuneArrayOption) MapRuneArray(f RuneArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m RuneArrayOption) MapFloat32Array(f RuneArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m RuneArrayOption) MapFloat64Array(f RuneArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m RuneArrayOption) MapComplex64Array(f RuneArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m RuneArrayOption) MapComplex128Array(f RuneArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m RuneArrayOption) MapAnyArray(f RuneArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m RuneArrayOption) MapBoolList(f RuneArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m RuneArrayOption) MapStringList(f RuneArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m RuneArrayOption) MapIntList(f RuneArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m RuneArrayOption) MapInt8List(f RuneArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m RuneArrayOption) MapInt16List(f RuneArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m RuneArrayOption) MapInt32List(f RuneArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m RuneArrayOption) MapInt64List(f RuneArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m RuneArrayOption) MapUintList(f RuneArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m RuneArrayOption) MapUint8List(f RuneArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m RuneArrayOption) MapUint16List(f RuneArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m RuneArrayOption) MapUint32List(f RuneArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m RuneArrayOption) MapUint64List(f RuneArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m RuneArrayOption) MapUintptrList(f RuneArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m RuneArrayOption) MapByteList(f RuneArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m RuneArrayOption) MapRuneList(f RuneArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m RuneArrayOption) MapFloat32List(f RuneArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m RuneArrayOption) MapFloat64List(f RuneArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m RuneArrayOption) MapComplex64List(f RuneArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m RuneArrayOption) MapComplex128List(f RuneArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m RuneArrayOption) MapAnyList(f RuneArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float32ArrayOption) MapBool(f Float32ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float32ArrayOption) MapString(f Float32ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float32ArrayOption) MapInt(f Float32ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float32ArrayOption) MapInt8(f Float32ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float32ArrayOption) MapInt16(f Float32ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float32ArrayOption) MapInt32(f Float32ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float32ArrayOption) MapInt64(f Float32ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float32ArrayOption) MapUint(f Float32ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float32ArrayOption) MapUint8(f Float32ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float32ArrayOption) MapUint16(f Float32ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float32ArrayOption) MapUint32(f Float32ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float32ArrayOption) MapUint64(f Float32ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float32ArrayOption) MapUintptr(f Float32ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float32ArrayOption) MapByte(f Float32ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float32ArrayOption) MapRune(f Float32ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float32ArrayOption) MapFloat32(f Float32ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float32ArrayOption) MapFloat64(f Float32ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float32ArrayOption) MapComplex64(f Float32ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float32ArrayOption) MapComplex128(f Float32ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float32ArrayOption) MapAny(f Float32ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float32ArrayOption) MapBoolOption(f Float32ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float32ArrayOption) MapStringOption(f Float32ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float32ArrayOption) MapIntOption(f Float32ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float32ArrayOption) MapInt8Option(f Float32ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float32ArrayOption) MapInt16Option(f Float32ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float32ArrayOption) MapInt32Option(f Float32ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float32ArrayOption) MapInt64Option(f Float32ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float32ArrayOption) MapUintOption(f Float32ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float32ArrayOption) MapUint8Option(f Float32ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float32ArrayOption) MapUint16Option(f Float32ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float32ArrayOption) MapUint32Option(f Float32ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float32ArrayOption) MapUint64Option(f Float32ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float32ArrayOption) MapUintptrOption(f Float32ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float32ArrayOption) MapByteOption(f Float32ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float32ArrayOption) MapRuneOption(f Float32ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float32ArrayOption) MapFloat32Option(f Float32ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float32ArrayOption) MapFloat64Option(f Float32ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float32ArrayOption) MapComplex64Option(f Float32ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float32ArrayOption) MapComplex128Option(f Float32ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float32ArrayOption) MapAnyOption(f Float32ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float32ArrayOption) MapBoolArray(f Float32ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float32ArrayOption) MapStringArray(f Float32ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float32ArrayOption) MapIntArray(f Float32ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float32ArrayOption) MapInt8Array(f Float32ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float32ArrayOption) MapInt16Array(f Float32ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float32ArrayOption) MapInt32Array(f Float32ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float32ArrayOption) MapInt64Array(f Float32ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float32ArrayOption) MapUintArray(f Float32ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float32ArrayOption) MapUint8Array(f Float32ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float32ArrayOption) MapUint16Array(f Float32ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float32ArrayOption) MapUint32Array(f Float32ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float32ArrayOption) MapUint64Array(f Float32ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float32ArrayOption) MapUintptrArray(f Float32ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float32ArrayOption) MapByteArray(f Float32ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float32ArrayOption) MapRuneArray(f Float32ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float32ArrayOption) MapFloat32Array(f Float32ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float32ArrayOption) MapFloat64Array(f Float32ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float32ArrayOption) MapComplex64Array(f Float32ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float32ArrayOption) MapComplex128Array(f Float32ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float32ArrayOption) MapAnyArray(f Float32ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float32ArrayOption) MapBoolList(f Float32ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float32ArrayOption) MapStringList(f Float32ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float32ArrayOption) MapIntList(f Float32ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float32ArrayOption) MapInt8List(f Float32ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float32ArrayOption) MapInt16List(f Float32ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float32ArrayOption) MapInt32List(f Float32ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float32ArrayOption) MapInt64List(f Float32ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float32ArrayOption) MapUintList(f Float32ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float32ArrayOption) MapUint8List(f Float32ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float32ArrayOption) MapUint16List(f Float32ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float32ArrayOption) MapUint32List(f Float32ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float32ArrayOption) MapUint64List(f Float32ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float32ArrayOption) MapUintptrList(f Float32ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float32ArrayOption) MapByteList(f Float32ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float32ArrayOption) MapRuneList(f Float32ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float32ArrayOption) MapFloat32List(f Float32ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float32ArrayOption) MapFloat64List(f Float32ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float32ArrayOption) MapComplex64List(f Float32ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float32ArrayOption) MapComplex128List(f Float32ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float32ArrayOption) MapAnyList(f Float32ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float64ArrayOption) MapBool(f Float64ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float64ArrayOption) MapString(f Float64ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float64ArrayOption) MapInt(f Float64ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float64ArrayOption) MapInt8(f Float64ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float64ArrayOption) MapInt16(f Float64ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float64ArrayOption) MapInt32(f Float64ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float64ArrayOption) MapInt64(f Float64ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float64ArrayOption) MapUint(f Float64ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float64ArrayOption) MapUint8(f Float64ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float64ArrayOption) MapUint16(f Float64ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float64ArrayOption) MapUint32(f Float64ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float64ArrayOption) MapUint64(f Float64ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float64ArrayOption) MapUintptr(f Float64ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float64ArrayOption) MapByte(f Float64ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float64ArrayOption) MapRune(f Float64ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float64ArrayOption) MapFloat32(f Float64ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float64ArrayOption) MapFloat64(f Float64ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float64ArrayOption) MapComplex64(f Float64ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float64ArrayOption) MapComplex128(f Float64ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float64ArrayOption) MapAny(f Float64ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float64ArrayOption) MapBoolOption(f Float64ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float64ArrayOption) MapStringOption(f Float64ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float64ArrayOption) MapIntOption(f Float64ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float64ArrayOption) MapInt8Option(f Float64ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float64ArrayOption) MapInt16Option(f Float64ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float64ArrayOption) MapInt32Option(f Float64ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float64ArrayOption) MapInt64Option(f Float64ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float64ArrayOption) MapUintOption(f Float64ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float64ArrayOption) MapUint8Option(f Float64ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float64ArrayOption) MapUint16Option(f Float64ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float64ArrayOption) MapUint32Option(f Float64ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float64ArrayOption) MapUint64Option(f Float64ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float64ArrayOption) MapUintptrOption(f Float64ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float64ArrayOption) MapByteOption(f Float64ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float64ArrayOption) MapRuneOption(f Float64ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float64ArrayOption) MapFloat32Option(f Float64ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float64ArrayOption) MapFloat64Option(f Float64ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float64ArrayOption) MapComplex64Option(f Float64ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float64ArrayOption) MapComplex128Option(f Float64ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float64ArrayOption) MapAnyOption(f Float64ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float64ArrayOption) MapBoolArray(f Float64ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float64ArrayOption) MapStringArray(f Float64ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float64ArrayOption) MapIntArray(f Float64ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float64ArrayOption) MapInt8Array(f Float64ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float64ArrayOption) MapInt16Array(f Float64ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float64ArrayOption) MapInt32Array(f Float64ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float64ArrayOption) MapInt64Array(f Float64ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float64ArrayOption) MapUintArray(f Float64ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float64ArrayOption) MapUint8Array(f Float64ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float64ArrayOption) MapUint16Array(f Float64ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float64ArrayOption) MapUint32Array(f Float64ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float64ArrayOption) MapUint64Array(f Float64ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float64ArrayOption) MapUintptrArray(f Float64ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float64ArrayOption) MapByteArray(f Float64ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float64ArrayOption) MapRuneArray(f Float64ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float64ArrayOption) MapFloat32Array(f Float64ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float64ArrayOption) MapFloat64Array(f Float64ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float64ArrayOption) MapComplex64Array(f Float64ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float64ArrayOption) MapComplex128Array(f Float64ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float64ArrayOption) MapAnyArray(f Float64ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float64ArrayOption) MapBoolList(f Float64ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float64ArrayOption) MapStringList(f Float64ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float64ArrayOption) MapIntList(f Float64ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float64ArrayOption) MapInt8List(f Float64ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float64ArrayOption) MapInt16List(f Float64ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float64ArrayOption) MapInt32List(f Float64ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float64ArrayOption) MapInt64List(f Float64ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float64ArrayOption) MapUintList(f Float64ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float64ArrayOption) MapUint8List(f Float64ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float64ArrayOption) MapUint16List(f Float64ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float64ArrayOption) MapUint32List(f Float64ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float64ArrayOption) MapUint64List(f Float64ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float64ArrayOption) MapUintptrList(f Float64ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float64ArrayOption) MapByteList(f Float64ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float64ArrayOption) MapRuneList(f Float64ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float64ArrayOption) MapFloat32List(f Float64ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float64ArrayOption) MapFloat64List(f Float64ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float64ArrayOption) MapComplex64List(f Float64ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float64ArrayOption) MapComplex128List(f Float64ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float64ArrayOption) MapAnyList(f Float64ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex64ArrayOption) MapBool(f Complex64ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex64ArrayOption) MapString(f Complex64ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex64ArrayOption) MapInt(f Complex64ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex64ArrayOption) MapInt8(f Complex64ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex64ArrayOption) MapInt16(f Complex64ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex64ArrayOption) MapInt32(f Complex64ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex64ArrayOption) MapInt64(f Complex64ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex64ArrayOption) MapUint(f Complex64ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex64ArrayOption) MapUint8(f Complex64ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex64ArrayOption) MapUint16(f Complex64ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex64ArrayOption) MapUint32(f Complex64ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex64ArrayOption) MapUint64(f Complex64ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex64ArrayOption) MapUintptr(f Complex64ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex64ArrayOption) MapByte(f Complex64ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex64ArrayOption) MapRune(f Complex64ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex64ArrayOption) MapFloat32(f Complex64ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex64ArrayOption) MapFloat64(f Complex64ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex64ArrayOption) MapComplex64(f Complex64ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex64ArrayOption) MapComplex128(f Complex64ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex64ArrayOption) MapAny(f Complex64ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex64ArrayOption) MapBoolOption(f Complex64ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex64ArrayOption) MapStringOption(f Complex64ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex64ArrayOption) MapIntOption(f Complex64ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex64ArrayOption) MapInt8Option(f Complex64ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex64ArrayOption) MapInt16Option(f Complex64ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex64ArrayOption) MapInt32Option(f Complex64ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex64ArrayOption) MapInt64Option(f Complex64ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex64ArrayOption) MapUintOption(f Complex64ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex64ArrayOption) MapUint8Option(f Complex64ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex64ArrayOption) MapUint16Option(f Complex64ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex64ArrayOption) MapUint32Option(f Complex64ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex64ArrayOption) MapUint64Option(f Complex64ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex64ArrayOption) MapUintptrOption(f Complex64ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex64ArrayOption) MapByteOption(f Complex64ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex64ArrayOption) MapRuneOption(f Complex64ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex64ArrayOption) MapFloat32Option(f Complex64ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex64ArrayOption) MapFloat64Option(f Complex64ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex64ArrayOption) MapComplex64Option(f Complex64ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex64ArrayOption) MapComplex128Option(f Complex64ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex64ArrayOption) MapAnyOption(f Complex64ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex64ArrayOption) MapBoolArray(f Complex64ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex64ArrayOption) MapStringArray(f Complex64ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex64ArrayOption) MapIntArray(f Complex64ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex64ArrayOption) MapInt8Array(f Complex64ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex64ArrayOption) MapInt16Array(f Complex64ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex64ArrayOption) MapInt32Array(f Complex64ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex64ArrayOption) MapInt64Array(f Complex64ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex64ArrayOption) MapUintArray(f Complex64ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex64ArrayOption) MapUint8Array(f Complex64ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex64ArrayOption) MapUint16Array(f Complex64ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex64ArrayOption) MapUint32Array(f Complex64ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex64ArrayOption) MapUint64Array(f Complex64ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex64ArrayOption) MapUintptrArray(f Complex64ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex64ArrayOption) MapByteArray(f Complex64ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex64ArrayOption) MapRuneArray(f Complex64ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex64ArrayOption) MapFloat32Array(f Complex64ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex64ArrayOption) MapFloat64Array(f Complex64ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex64ArrayOption) MapComplex64Array(f Complex64ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex64ArrayOption) MapComplex128Array(f Complex64ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex64ArrayOption) MapAnyArray(f Complex64ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex64ArrayOption) MapBoolList(f Complex64ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex64ArrayOption) MapStringList(f Complex64ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex64ArrayOption) MapIntList(f Complex64ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex64ArrayOption) MapInt8List(f Complex64ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex64ArrayOption) MapInt16List(f Complex64ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex64ArrayOption) MapInt32List(f Complex64ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex64ArrayOption) MapInt64List(f Complex64ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex64ArrayOption) MapUintList(f Complex64ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex64ArrayOption) MapUint8List(f Complex64ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex64ArrayOption) MapUint16List(f Complex64ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex64ArrayOption) MapUint32List(f Complex64ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex64ArrayOption) MapUint64List(f Complex64ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex64ArrayOption) MapUintptrList(f Complex64ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex64ArrayOption) MapByteList(f Complex64ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex64ArrayOption) MapRuneList(f Complex64ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex64ArrayOption) MapFloat32List(f Complex64ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex64ArrayOption) MapFloat64List(f Complex64ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex64ArrayOption) MapComplex64List(f Complex64ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex64ArrayOption) MapComplex128List(f Complex64ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex64ArrayOption) MapAnyList(f Complex64ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex128ArrayOption) MapBool(f Complex128ArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex128ArrayOption) MapString(f Complex128ArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex128ArrayOption) MapInt(f Complex128ArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex128ArrayOption) MapInt8(f Complex128ArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex128ArrayOption) MapInt16(f Complex128ArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex128ArrayOption) MapInt32(f Complex128ArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex128ArrayOption) MapInt64(f Complex128ArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex128ArrayOption) MapUint(f Complex128ArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex128ArrayOption) MapUint8(f Complex128ArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex128ArrayOption) MapUint16(f Complex128ArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex128ArrayOption) MapUint32(f Complex128ArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex128ArrayOption) MapUint64(f Complex128ArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex128ArrayOption) MapUintptr(f Complex128ArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex128ArrayOption) MapByte(f Complex128ArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex128ArrayOption) MapRune(f Complex128ArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex128ArrayOption) MapFloat32(f Complex128ArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex128ArrayOption) MapFloat64(f Complex128ArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex128ArrayOption) MapComplex64(f Complex128ArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex128ArrayOption) MapComplex128(f Complex128ArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex128ArrayOption) MapAny(f Complex128ArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex128ArrayOption) MapBoolOption(f Complex128ArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex128ArrayOption) MapStringOption(f Complex128ArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex128ArrayOption) MapIntOption(f Complex128ArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex128ArrayOption) MapInt8Option(f Complex128ArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex128ArrayOption) MapInt16Option(f Complex128ArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex128ArrayOption) MapInt32Option(f Complex128ArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex128ArrayOption) MapInt64Option(f Complex128ArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex128ArrayOption) MapUintOption(f Complex128ArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex128ArrayOption) MapUint8Option(f Complex128ArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex128ArrayOption) MapUint16Option(f Complex128ArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex128ArrayOption) MapUint32Option(f Complex128ArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex128ArrayOption) MapUint64Option(f Complex128ArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex128ArrayOption) MapUintptrOption(f Complex128ArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex128ArrayOption) MapByteOption(f Complex128ArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex128ArrayOption) MapRuneOption(f Complex128ArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex128ArrayOption) MapFloat32Option(f Complex128ArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex128ArrayOption) MapFloat64Option(f Complex128ArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex128ArrayOption) MapComplex64Option(f Complex128ArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex128ArrayOption) MapComplex128Option(f Complex128ArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex128ArrayOption) MapAnyOption(f Complex128ArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex128ArrayOption) MapBoolArray(f Complex128ArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex128ArrayOption) MapStringArray(f Complex128ArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex128ArrayOption) MapIntArray(f Complex128ArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex128ArrayOption) MapInt8Array(f Complex128ArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex128ArrayOption) MapInt16Array(f Complex128ArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex128ArrayOption) MapInt32Array(f Complex128ArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex128ArrayOption) MapInt64Array(f Complex128ArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex128ArrayOption) MapUintArray(f Complex128ArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex128ArrayOption) MapUint8Array(f Complex128ArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex128ArrayOption) MapUint16Array(f Complex128ArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex128ArrayOption) MapUint32Array(f Complex128ArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex128ArrayOption) MapUint64Array(f Complex128ArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex128ArrayOption) MapUintptrArray(f Complex128ArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex128ArrayOption) MapByteArray(f Complex128ArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex128ArrayOption) MapRuneArray(f Complex128ArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex128ArrayOption) MapFloat32Array(f Complex128ArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex128ArrayOption) MapFloat64Array(f Complex128ArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex128ArrayOption) MapComplex64Array(f Complex128ArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex128ArrayOption) MapComplex128Array(f Complex128ArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex128ArrayOption) MapAnyArray(f Complex128ArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex128ArrayOption) MapBoolList(f Complex128ArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex128ArrayOption) MapStringList(f Complex128ArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex128ArrayOption) MapIntList(f Complex128ArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex128ArrayOption) MapInt8List(f Complex128ArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex128ArrayOption) MapInt16List(f Complex128ArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex128ArrayOption) MapInt32List(f Complex128ArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex128ArrayOption) MapInt64List(f Complex128ArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex128ArrayOption) MapUintList(f Complex128ArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex128ArrayOption) MapUint8List(f Complex128ArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex128ArrayOption) MapUint16List(f Complex128ArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex128ArrayOption) MapUint32List(f Complex128ArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex128ArrayOption) MapUint64List(f Complex128ArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex128ArrayOption) MapUintptrList(f Complex128ArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex128ArrayOption) MapByteList(f Complex128ArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex128ArrayOption) MapRuneList(f Complex128ArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex128ArrayOption) MapFloat32List(f Complex128ArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex128ArrayOption) MapFloat64List(f Complex128ArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex128ArrayOption) MapComplex64List(f Complex128ArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex128ArrayOption) MapComplex128List(f Complex128ArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex128ArrayOption) MapAnyList(f Complex128ArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m AnyArrayOption) MapBool(f AnyArrayToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m AnyArrayOption) MapString(f AnyArrayToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m AnyArrayOption) MapInt(f AnyArrayToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m AnyArrayOption) MapInt8(f AnyArrayToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m AnyArrayOption) MapInt16(f AnyArrayToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m AnyArrayOption) MapInt32(f AnyArrayToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m AnyArrayOption) MapInt64(f AnyArrayToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m AnyArrayOption) MapUint(f AnyArrayToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m AnyArrayOption) MapUint8(f AnyArrayToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m AnyArrayOption) MapUint16(f AnyArrayToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m AnyArrayOption) MapUint32(f AnyArrayToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m AnyArrayOption) MapUint64(f AnyArrayToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m AnyArrayOption) MapUintptr(f AnyArrayToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m AnyArrayOption) MapByte(f AnyArrayToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m AnyArrayOption) MapRune(f AnyArrayToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m AnyArrayOption) MapFloat32(f AnyArrayToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m AnyArrayOption) MapFloat64(f AnyArrayToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m AnyArrayOption) MapComplex64(f AnyArrayToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m AnyArrayOption) MapComplex128(f AnyArrayToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m AnyArrayOption) MapAny(f AnyArrayToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m AnyArrayOption) MapBoolOption(f AnyArrayToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m AnyArrayOption) MapStringOption(f AnyArrayToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m AnyArrayOption) MapIntOption(f AnyArrayToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m AnyArrayOption) MapInt8Option(f AnyArrayToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m AnyArrayOption) MapInt16Option(f AnyArrayToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m AnyArrayOption) MapInt32Option(f AnyArrayToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m AnyArrayOption) MapInt64Option(f AnyArrayToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m AnyArrayOption) MapUintOption(f AnyArrayToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m AnyArrayOption) MapUint8Option(f AnyArrayToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m AnyArrayOption) MapUint16Option(f AnyArrayToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m AnyArrayOption) MapUint32Option(f AnyArrayToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m AnyArrayOption) MapUint64Option(f AnyArrayToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m AnyArrayOption) MapUintptrOption(f AnyArrayToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m AnyArrayOption) MapByteOption(f AnyArrayToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m AnyArrayOption) MapRuneOption(f AnyArrayToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m AnyArrayOption) MapFloat32Option(f AnyArrayToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m AnyArrayOption) MapFloat64Option(f AnyArrayToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m AnyArrayOption) MapComplex64Option(f AnyArrayToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m AnyArrayOption) MapComplex128Option(f AnyArrayToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m AnyArrayOption) MapAnyOption(f AnyArrayToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m AnyArrayOption) MapBoolArray(f AnyArrayToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m AnyArrayOption) MapStringArray(f AnyArrayToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m AnyArrayOption) MapIntArray(f AnyArrayToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m AnyArrayOption) MapInt8Array(f AnyArrayToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m AnyArrayOption) MapInt16Array(f AnyArrayToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m AnyArrayOption) MapInt32Array(f AnyArrayToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m AnyArrayOption) MapInt64Array(f AnyArrayToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m AnyArrayOption) MapUintArray(f AnyArrayToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m AnyArrayOption) MapUint8Array(f AnyArrayToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m AnyArrayOption) MapUint16Array(f AnyArrayToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m AnyArrayOption) MapUint32Array(f AnyArrayToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m AnyArrayOption) MapUint64Array(f AnyArrayToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m AnyArrayOption) MapUintptrArray(f AnyArrayToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m AnyArrayOption) MapByteArray(f AnyArrayToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m AnyArrayOption) MapRuneArray(f AnyArrayToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m AnyArrayOption) MapFloat32Array(f AnyArrayToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m AnyArrayOption) MapFloat64Array(f AnyArrayToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m AnyArrayOption) MapComplex64Array(f AnyArrayToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m AnyArrayOption) MapComplex128Array(f AnyArrayToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m AnyArrayOption) MapAnyArray(f AnyArrayToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m AnyArrayOption) MapBoolList(f AnyArrayToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m AnyArrayOption) MapStringList(f AnyArrayToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m AnyArrayOption) MapIntList(f AnyArrayToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m AnyArrayOption) MapInt8List(f AnyArrayToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m AnyArrayOption) MapInt16List(f AnyArrayToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m AnyArrayOption) MapInt32List(f AnyArrayToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m AnyArrayOption) MapInt64List(f AnyArrayToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m AnyArrayOption) MapUintList(f AnyArrayToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m AnyArrayOption) MapUint8List(f AnyArrayToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m AnyArrayOption) MapUint16List(f AnyArrayToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m AnyArrayOption) MapUint32List(f AnyArrayToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m AnyArrayOption) MapUint64List(f AnyArrayToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m AnyArrayOption) MapUintptrList(f AnyArrayToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m AnyArrayOption) MapByteList(f AnyArrayToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m AnyArrayOption) MapRuneList(f AnyArrayToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m AnyArrayOption) MapFloat32List(f AnyArrayToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m AnyArrayOption) MapFloat64List(f AnyArrayToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m AnyArrayOption) MapComplex64List(f AnyArrayToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m AnyArrayOption) MapComplex128List(f AnyArrayToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m AnyArrayOption) MapAnyList(f AnyArrayToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m BoolListOption) MapBool(f BoolListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m BoolListOption) MapString(f BoolListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m BoolListOption) MapInt(f BoolListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m BoolListOption) MapInt8(f BoolListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m BoolListOption) MapInt16(f BoolListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m BoolListOption) MapInt32(f BoolListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m BoolListOption) MapInt64(f BoolListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m BoolListOption) MapUint(f BoolListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m BoolListOption) MapUint8(f BoolListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m BoolListOption) MapUint16(f BoolListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m BoolListOption) MapUint32(f BoolListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m BoolListOption) MapUint64(f BoolListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m BoolListOption) MapUintptr(f BoolListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m BoolListOption) MapByte(f BoolListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m BoolListOption) MapRune(f BoolListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m BoolListOption) MapFloat32(f BoolListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m BoolListOption) MapFloat64(f BoolListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m BoolListOption) MapComplex64(f BoolListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m BoolListOption) MapComplex128(f BoolListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m BoolListOption) MapAny(f BoolListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m BoolListOption) MapBoolOption(f BoolListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m BoolListOption) MapStringOption(f BoolListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m BoolListOption) MapIntOption(f BoolListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m BoolListOption) MapInt8Option(f BoolListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m BoolListOption) MapInt16Option(f BoolListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m BoolListOption) MapInt32Option(f BoolListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m BoolListOption) MapInt64Option(f BoolListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m BoolListOption) MapUintOption(f BoolListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m BoolListOption) MapUint8Option(f BoolListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m BoolListOption) MapUint16Option(f BoolListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m BoolListOption) MapUint32Option(f BoolListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m BoolListOption) MapUint64Option(f BoolListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m BoolListOption) MapUintptrOption(f BoolListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m BoolListOption) MapByteOption(f BoolListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m BoolListOption) MapRuneOption(f BoolListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m BoolListOption) MapFloat32Option(f BoolListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m BoolListOption) MapFloat64Option(f BoolListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m BoolListOption) MapComplex64Option(f BoolListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m BoolListOption) MapComplex128Option(f BoolListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m BoolListOption) MapAnyOption(f BoolListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m BoolListOption) MapBoolArray(f BoolListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m BoolListOption) MapStringArray(f BoolListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m BoolListOption) MapIntArray(f BoolListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m BoolListOption) MapInt8Array(f BoolListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m BoolListOption) MapInt16Array(f BoolListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m BoolListOption) MapInt32Array(f BoolListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m BoolListOption) MapInt64Array(f BoolListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m BoolListOption) MapUintArray(f BoolListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m BoolListOption) MapUint8Array(f BoolListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m BoolListOption) MapUint16Array(f BoolListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m BoolListOption) MapUint32Array(f BoolListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m BoolListOption) MapUint64Array(f BoolListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m BoolListOption) MapUintptrArray(f BoolListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m BoolListOption) MapByteArray(f BoolListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m BoolListOption) MapRuneArray(f BoolListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m BoolListOption) MapFloat32Array(f BoolListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m BoolListOption) MapFloat64Array(f BoolListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m BoolListOption) MapComplex64Array(f BoolListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m BoolListOption) MapComplex128Array(f BoolListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m BoolListOption) MapAnyArray(f BoolListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m BoolListOption) MapBoolList(f BoolListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m BoolListOption) MapStringList(f BoolListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m BoolListOption) MapIntList(f BoolListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m BoolListOption) MapInt8List(f BoolListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m BoolListOption) MapInt16List(f BoolListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m BoolListOption) MapInt32List(f BoolListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m BoolListOption) MapInt64List(f BoolListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m BoolListOption) MapUintList(f BoolListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m BoolListOption) MapUint8List(f BoolListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m BoolListOption) MapUint16List(f BoolListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m BoolListOption) MapUint32List(f BoolListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m BoolListOption) MapUint64List(f BoolListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m BoolListOption) MapUintptrList(f BoolListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m BoolListOption) MapByteList(f BoolListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m BoolListOption) MapRuneList(f BoolListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m BoolListOption) MapFloat32List(f BoolListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m BoolListOption) MapFloat64List(f BoolListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m BoolListOption) MapComplex64List(f BoolListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m BoolListOption) MapComplex128List(f BoolListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m BoolListOption) MapAnyList(f BoolListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m StringListOption) MapBool(f StringListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m StringListOption) MapString(f StringListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m StringListOption) MapInt(f StringListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m StringListOption) MapInt8(f StringListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m StringListOption) MapInt16(f StringListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m StringListOption) MapInt32(f StringListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m StringListOption) MapInt64(f StringListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m StringListOption) MapUint(f StringListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m StringListOption) MapUint8(f StringListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m StringListOption) MapUint16(f StringListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m StringListOption) MapUint32(f StringListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m StringListOption) MapUint64(f StringListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m StringListOption) MapUintptr(f StringListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m StringListOption) MapByte(f StringListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m StringListOption) MapRune(f StringListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m StringListOption) MapFloat32(f StringListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m StringListOption) MapFloat64(f StringListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m StringListOption) MapComplex64(f StringListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m StringListOption) MapComplex128(f StringListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m StringListOption) MapAny(f StringListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m StringListOption) MapBoolOption(f StringListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m StringListOption) MapStringOption(f StringListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m StringListOption) MapIntOption(f StringListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m StringListOption) MapInt8Option(f StringListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m StringListOption) MapInt16Option(f StringListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m StringListOption) MapInt32Option(f StringListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m StringListOption) MapInt64Option(f StringListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m StringListOption) MapUintOption(f StringListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m StringListOption) MapUint8Option(f StringListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m StringListOption) MapUint16Option(f StringListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m StringListOption) MapUint32Option(f StringListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m StringListOption) MapUint64Option(f StringListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m StringListOption) MapUintptrOption(f StringListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m StringListOption) MapByteOption(f StringListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m StringListOption) MapRuneOption(f StringListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m StringListOption) MapFloat32Option(f StringListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m StringListOption) MapFloat64Option(f StringListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m StringListOption) MapComplex64Option(f StringListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m StringListOption) MapComplex128Option(f StringListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m StringListOption) MapAnyOption(f StringListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m StringListOption) MapBoolArray(f StringListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m StringListOption) MapStringArray(f StringListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m StringListOption) MapIntArray(f StringListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m StringListOption) MapInt8Array(f StringListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m StringListOption) MapInt16Array(f StringListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m StringListOption) MapInt32Array(f StringListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m StringListOption) MapInt64Array(f StringListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m StringListOption) MapUintArray(f StringListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m StringListOption) MapUint8Array(f StringListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m StringListOption) MapUint16Array(f StringListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m StringListOption) MapUint32Array(f StringListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m StringListOption) MapUint64Array(f StringListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m StringListOption) MapUintptrArray(f StringListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m StringListOption) MapByteArray(f StringListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m StringListOption) MapRuneArray(f StringListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m StringListOption) MapFloat32Array(f StringListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m StringListOption) MapFloat64Array(f StringListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m StringListOption) MapComplex64Array(f StringListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m StringListOption) MapComplex128Array(f StringListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m StringListOption) MapAnyArray(f StringListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m StringListOption) MapBoolList(f StringListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m StringListOption) MapStringList(f StringListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m StringListOption) MapIntList(f StringListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m StringListOption) MapInt8List(f StringListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m StringListOption) MapInt16List(f StringListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m StringListOption) MapInt32List(f StringListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m StringListOption) MapInt64List(f StringListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m StringListOption) MapUintList(f StringListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m StringListOption) MapUint8List(f StringListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m StringListOption) MapUint16List(f StringListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m StringListOption) MapUint32List(f StringListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m StringListOption) MapUint64List(f StringListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m StringListOption) MapUintptrList(f StringListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m StringListOption) MapByteList(f StringListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m StringListOption) MapRuneList(f StringListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m StringListOption) MapFloat32List(f StringListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m StringListOption) MapFloat64List(f StringListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m StringListOption) MapComplex64List(f StringListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m StringListOption) MapComplex128List(f StringListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m StringListOption) MapAnyList(f StringListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m IntListOption) MapBool(f IntListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m IntListOption) MapString(f IntListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m IntListOption) MapInt(f IntListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m IntListOption) MapInt8(f IntListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m IntListOption) MapInt16(f IntListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m IntListOption) MapInt32(f IntListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m IntListOption) MapInt64(f IntListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m IntListOption) MapUint(f IntListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m IntListOption) MapUint8(f IntListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m IntListOption) MapUint16(f IntListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m IntListOption) MapUint32(f IntListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m IntListOption) MapUint64(f IntListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m IntListOption) MapUintptr(f IntListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m IntListOption) MapByte(f IntListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m IntListOption) MapRune(f IntListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m IntListOption) MapFloat32(f IntListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m IntListOption) MapFloat64(f IntListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m IntListOption) MapComplex64(f IntListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m IntListOption) MapComplex128(f IntListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m IntListOption) MapAny(f IntListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m IntListOption) MapBoolOption(f IntListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m IntListOption) MapStringOption(f IntListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m IntListOption) MapIntOption(f IntListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m IntListOption) MapInt8Option(f IntListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m IntListOption) MapInt16Option(f IntListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m IntListOption) MapInt32Option(f IntListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m IntListOption) MapInt64Option(f IntListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m IntListOption) MapUintOption(f IntListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m IntListOption) MapUint8Option(f IntListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m IntListOption) MapUint16Option(f IntListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m IntListOption) MapUint32Option(f IntListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m IntListOption) MapUint64Option(f IntListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m IntListOption) MapUintptrOption(f IntListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m IntListOption) MapByteOption(f IntListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m IntListOption) MapRuneOption(f IntListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m IntListOption) MapFloat32Option(f IntListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m IntListOption) MapFloat64Option(f IntListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m IntListOption) MapComplex64Option(f IntListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m IntListOption) MapComplex128Option(f IntListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m IntListOption) MapAnyOption(f IntListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m IntListOption) MapBoolArray(f IntListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m IntListOption) MapStringArray(f IntListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m IntListOption) MapIntArray(f IntListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m IntListOption) MapInt8Array(f IntListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m IntListOption) MapInt16Array(f IntListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m IntListOption) MapInt32Array(f IntListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m IntListOption) MapInt64Array(f IntListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m IntListOption) MapUintArray(f IntListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m IntListOption) MapUint8Array(f IntListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m IntListOption) MapUint16Array(f IntListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m IntListOption) MapUint32Array(f IntListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m IntListOption) MapUint64Array(f IntListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m IntListOption) MapUintptrArray(f IntListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m IntListOption) MapByteArray(f IntListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m IntListOption) MapRuneArray(f IntListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m IntListOption) MapFloat32Array(f IntListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m IntListOption) MapFloat64Array(f IntListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m IntListOption) MapComplex64Array(f IntListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m IntListOption) MapComplex128Array(f IntListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m IntListOption) MapAnyArray(f IntListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m IntListOption) MapBoolList(f IntListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m IntListOption) MapStringList(f IntListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m IntListOption) MapIntList(f IntListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m IntListOption) MapInt8List(f IntListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m IntListOption) MapInt16List(f IntListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m IntListOption) MapInt32List(f IntListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m IntListOption) MapInt64List(f IntListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m IntListOption) MapUintList(f IntListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m IntListOption) MapUint8List(f IntListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m IntListOption) MapUint16List(f IntListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m IntListOption) MapUint32List(f IntListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m IntListOption) MapUint64List(f IntListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m IntListOption) MapUintptrList(f IntListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m IntListOption) MapByteList(f IntListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m IntListOption) MapRuneList(f IntListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m IntListOption) MapFloat32List(f IntListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m IntListOption) MapFloat64List(f IntListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m IntListOption) MapComplex64List(f IntListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m IntListOption) MapComplex128List(f IntListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m IntListOption) MapAnyList(f IntListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int8ListOption) MapBool(f Int8ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int8ListOption) MapString(f Int8ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int8ListOption) MapInt(f Int8ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int8ListOption) MapInt8(f Int8ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int8ListOption) MapInt16(f Int8ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int8ListOption) MapInt32(f Int8ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int8ListOption) MapInt64(f Int8ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int8ListOption) MapUint(f Int8ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int8ListOption) MapUint8(f Int8ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int8ListOption) MapUint16(f Int8ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int8ListOption) MapUint32(f Int8ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int8ListOption) MapUint64(f Int8ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int8ListOption) MapUintptr(f Int8ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int8ListOption) MapByte(f Int8ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int8ListOption) MapRune(f Int8ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int8ListOption) MapFloat32(f Int8ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int8ListOption) MapFloat64(f Int8ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int8ListOption) MapComplex64(f Int8ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int8ListOption) MapComplex128(f Int8ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int8ListOption) MapAny(f Int8ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int8ListOption) MapBoolOption(f Int8ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int8ListOption) MapStringOption(f Int8ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int8ListOption) MapIntOption(f Int8ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int8ListOption) MapInt8Option(f Int8ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int8ListOption) MapInt16Option(f Int8ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int8ListOption) MapInt32Option(f Int8ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int8ListOption) MapInt64Option(f Int8ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int8ListOption) MapUintOption(f Int8ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int8ListOption) MapUint8Option(f Int8ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int8ListOption) MapUint16Option(f Int8ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int8ListOption) MapUint32Option(f Int8ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int8ListOption) MapUint64Option(f Int8ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int8ListOption) MapUintptrOption(f Int8ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int8ListOption) MapByteOption(f Int8ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int8ListOption) MapRuneOption(f Int8ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int8ListOption) MapFloat32Option(f Int8ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int8ListOption) MapFloat64Option(f Int8ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int8ListOption) MapComplex64Option(f Int8ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int8ListOption) MapComplex128Option(f Int8ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int8ListOption) MapAnyOption(f Int8ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int8ListOption) MapBoolArray(f Int8ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int8ListOption) MapStringArray(f Int8ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int8ListOption) MapIntArray(f Int8ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int8ListOption) MapInt8Array(f Int8ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int8ListOption) MapInt16Array(f Int8ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int8ListOption) MapInt32Array(f Int8ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int8ListOption) MapInt64Array(f Int8ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int8ListOption) MapUintArray(f Int8ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int8ListOption) MapUint8Array(f Int8ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int8ListOption) MapUint16Array(f Int8ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int8ListOption) MapUint32Array(f Int8ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int8ListOption) MapUint64Array(f Int8ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int8ListOption) MapUintptrArray(f Int8ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int8ListOption) MapByteArray(f Int8ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int8ListOption) MapRuneArray(f Int8ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int8ListOption) MapFloat32Array(f Int8ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int8ListOption) MapFloat64Array(f Int8ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int8ListOption) MapComplex64Array(f Int8ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int8ListOption) MapComplex128Array(f Int8ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int8ListOption) MapAnyArray(f Int8ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int8ListOption) MapBoolList(f Int8ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int8ListOption) MapStringList(f Int8ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int8ListOption) MapIntList(f Int8ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int8ListOption) MapInt8List(f Int8ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int8ListOption) MapInt16List(f Int8ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int8ListOption) MapInt32List(f Int8ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int8ListOption) MapInt64List(f Int8ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int8ListOption) MapUintList(f Int8ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int8ListOption) MapUint8List(f Int8ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int8ListOption) MapUint16List(f Int8ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int8ListOption) MapUint32List(f Int8ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int8ListOption) MapUint64List(f Int8ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int8ListOption) MapUintptrList(f Int8ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int8ListOption) MapByteList(f Int8ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int8ListOption) MapRuneList(f Int8ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int8ListOption) MapFloat32List(f Int8ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int8ListOption) MapFloat64List(f Int8ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int8ListOption) MapComplex64List(f Int8ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int8ListOption) MapComplex128List(f Int8ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int8ListOption) MapAnyList(f Int8ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int16ListOption) MapBool(f Int16ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int16ListOption) MapString(f Int16ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int16ListOption) MapInt(f Int16ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int16ListOption) MapInt8(f Int16ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int16ListOption) MapInt16(f Int16ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int16ListOption) MapInt32(f Int16ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int16ListOption) MapInt64(f Int16ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int16ListOption) MapUint(f Int16ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int16ListOption) MapUint8(f Int16ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int16ListOption) MapUint16(f Int16ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int16ListOption) MapUint32(f Int16ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int16ListOption) MapUint64(f Int16ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int16ListOption) MapUintptr(f Int16ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int16ListOption) MapByte(f Int16ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int16ListOption) MapRune(f Int16ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int16ListOption) MapFloat32(f Int16ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int16ListOption) MapFloat64(f Int16ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int16ListOption) MapComplex64(f Int16ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int16ListOption) MapComplex128(f Int16ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int16ListOption) MapAny(f Int16ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int16ListOption) MapBoolOption(f Int16ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int16ListOption) MapStringOption(f Int16ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int16ListOption) MapIntOption(f Int16ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int16ListOption) MapInt8Option(f Int16ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int16ListOption) MapInt16Option(f Int16ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int16ListOption) MapInt32Option(f Int16ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int16ListOption) MapInt64Option(f Int16ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int16ListOption) MapUintOption(f Int16ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int16ListOption) MapUint8Option(f Int16ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int16ListOption) MapUint16Option(f Int16ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int16ListOption) MapUint32Option(f Int16ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int16ListOption) MapUint64Option(f Int16ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int16ListOption) MapUintptrOption(f Int16ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int16ListOption) MapByteOption(f Int16ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int16ListOption) MapRuneOption(f Int16ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int16ListOption) MapFloat32Option(f Int16ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int16ListOption) MapFloat64Option(f Int16ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int16ListOption) MapComplex64Option(f Int16ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int16ListOption) MapComplex128Option(f Int16ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int16ListOption) MapAnyOption(f Int16ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int16ListOption) MapBoolArray(f Int16ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int16ListOption) MapStringArray(f Int16ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int16ListOption) MapIntArray(f Int16ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int16ListOption) MapInt8Array(f Int16ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int16ListOption) MapInt16Array(f Int16ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int16ListOption) MapInt32Array(f Int16ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int16ListOption) MapInt64Array(f Int16ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int16ListOption) MapUintArray(f Int16ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int16ListOption) MapUint8Array(f Int16ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int16ListOption) MapUint16Array(f Int16ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int16ListOption) MapUint32Array(f Int16ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int16ListOption) MapUint64Array(f Int16ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int16ListOption) MapUintptrArray(f Int16ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int16ListOption) MapByteArray(f Int16ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int16ListOption) MapRuneArray(f Int16ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int16ListOption) MapFloat32Array(f Int16ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int16ListOption) MapFloat64Array(f Int16ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int16ListOption) MapComplex64Array(f Int16ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int16ListOption) MapComplex128Array(f Int16ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int16ListOption) MapAnyArray(f Int16ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int16ListOption) MapBoolList(f Int16ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int16ListOption) MapStringList(f Int16ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int16ListOption) MapIntList(f Int16ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int16ListOption) MapInt8List(f Int16ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int16ListOption) MapInt16List(f Int16ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int16ListOption) MapInt32List(f Int16ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int16ListOption) MapInt64List(f Int16ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int16ListOption) MapUintList(f Int16ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int16ListOption) MapUint8List(f Int16ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int16ListOption) MapUint16List(f Int16ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int16ListOption) MapUint32List(f Int16ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int16ListOption) MapUint64List(f Int16ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int16ListOption) MapUintptrList(f Int16ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int16ListOption) MapByteList(f Int16ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int16ListOption) MapRuneList(f Int16ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int16ListOption) MapFloat32List(f Int16ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int16ListOption) MapFloat64List(f Int16ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int16ListOption) MapComplex64List(f Int16ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int16ListOption) MapComplex128List(f Int16ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int16ListOption) MapAnyList(f Int16ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int32ListOption) MapBool(f Int32ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int32ListOption) MapString(f Int32ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int32ListOption) MapInt(f Int32ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int32ListOption) MapInt8(f Int32ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int32ListOption) MapInt16(f Int32ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int32ListOption) MapInt32(f Int32ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int32ListOption) MapInt64(f Int32ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int32ListOption) MapUint(f Int32ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int32ListOption) MapUint8(f Int32ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int32ListOption) MapUint16(f Int32ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int32ListOption) MapUint32(f Int32ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int32ListOption) MapUint64(f Int32ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int32ListOption) MapUintptr(f Int32ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int32ListOption) MapByte(f Int32ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int32ListOption) MapRune(f Int32ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int32ListOption) MapFloat32(f Int32ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int32ListOption) MapFloat64(f Int32ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int32ListOption) MapComplex64(f Int32ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int32ListOption) MapComplex128(f Int32ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int32ListOption) MapAny(f Int32ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int32ListOption) MapBoolOption(f Int32ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int32ListOption) MapStringOption(f Int32ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int32ListOption) MapIntOption(f Int32ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int32ListOption) MapInt8Option(f Int32ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int32ListOption) MapInt16Option(f Int32ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int32ListOption) MapInt32Option(f Int32ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int32ListOption) MapInt64Option(f Int32ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int32ListOption) MapUintOption(f Int32ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int32ListOption) MapUint8Option(f Int32ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int32ListOption) MapUint16Option(f Int32ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int32ListOption) MapUint32Option(f Int32ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int32ListOption) MapUint64Option(f Int32ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int32ListOption) MapUintptrOption(f Int32ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int32ListOption) MapByteOption(f Int32ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int32ListOption) MapRuneOption(f Int32ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int32ListOption) MapFloat32Option(f Int32ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int32ListOption) MapFloat64Option(f Int32ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int32ListOption) MapComplex64Option(f Int32ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int32ListOption) MapComplex128Option(f Int32ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int32ListOption) MapAnyOption(f Int32ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int32ListOption) MapBoolArray(f Int32ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int32ListOption) MapStringArray(f Int32ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int32ListOption) MapIntArray(f Int32ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int32ListOption) MapInt8Array(f Int32ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int32ListOption) MapInt16Array(f Int32ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int32ListOption) MapInt32Array(f Int32ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int32ListOption) MapInt64Array(f Int32ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int32ListOption) MapUintArray(f Int32ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int32ListOption) MapUint8Array(f Int32ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int32ListOption) MapUint16Array(f Int32ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int32ListOption) MapUint32Array(f Int32ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int32ListOption) MapUint64Array(f Int32ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int32ListOption) MapUintptrArray(f Int32ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int32ListOption) MapByteArray(f Int32ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int32ListOption) MapRuneArray(f Int32ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int32ListOption) MapFloat32Array(f Int32ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int32ListOption) MapFloat64Array(f Int32ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int32ListOption) MapComplex64Array(f Int32ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int32ListOption) MapComplex128Array(f Int32ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int32ListOption) MapAnyArray(f Int32ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int32ListOption) MapBoolList(f Int32ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int32ListOption) MapStringList(f Int32ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int32ListOption) MapIntList(f Int32ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int32ListOption) MapInt8List(f Int32ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int32ListOption) MapInt16List(f Int32ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int32ListOption) MapInt32List(f Int32ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int32ListOption) MapInt64List(f Int32ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int32ListOption) MapUintList(f Int32ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int32ListOption) MapUint8List(f Int32ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int32ListOption) MapUint16List(f Int32ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int32ListOption) MapUint32List(f Int32ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int32ListOption) MapUint64List(f Int32ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int32ListOption) MapUintptrList(f Int32ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int32ListOption) MapByteList(f Int32ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int32ListOption) MapRuneList(f Int32ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int32ListOption) MapFloat32List(f Int32ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int32ListOption) MapFloat64List(f Int32ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int32ListOption) MapComplex64List(f Int32ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int32ListOption) MapComplex128List(f Int32ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int32ListOption) MapAnyList(f Int32ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int64ListOption) MapBool(f Int64ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int64ListOption) MapString(f Int64ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int64ListOption) MapInt(f Int64ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int64ListOption) MapInt8(f Int64ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int64ListOption) MapInt16(f Int64ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int64ListOption) MapInt32(f Int64ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int64ListOption) MapInt64(f Int64ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int64ListOption) MapUint(f Int64ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int64ListOption) MapUint8(f Int64ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int64ListOption) MapUint16(f Int64ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int64ListOption) MapUint32(f Int64ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int64ListOption) MapUint64(f Int64ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int64ListOption) MapUintptr(f Int64ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int64ListOption) MapByte(f Int64ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int64ListOption) MapRune(f Int64ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int64ListOption) MapFloat32(f Int64ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int64ListOption) MapFloat64(f Int64ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int64ListOption) MapComplex64(f Int64ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int64ListOption) MapComplex128(f Int64ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int64ListOption) MapAny(f Int64ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int64ListOption) MapBoolOption(f Int64ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int64ListOption) MapStringOption(f Int64ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int64ListOption) MapIntOption(f Int64ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int64ListOption) MapInt8Option(f Int64ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int64ListOption) MapInt16Option(f Int64ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int64ListOption) MapInt32Option(f Int64ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int64ListOption) MapInt64Option(f Int64ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int64ListOption) MapUintOption(f Int64ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int64ListOption) MapUint8Option(f Int64ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int64ListOption) MapUint16Option(f Int64ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int64ListOption) MapUint32Option(f Int64ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int64ListOption) MapUint64Option(f Int64ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int64ListOption) MapUintptrOption(f Int64ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int64ListOption) MapByteOption(f Int64ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int64ListOption) MapRuneOption(f Int64ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int64ListOption) MapFloat32Option(f Int64ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int64ListOption) MapFloat64Option(f Int64ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int64ListOption) MapComplex64Option(f Int64ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int64ListOption) MapComplex128Option(f Int64ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int64ListOption) MapAnyOption(f Int64ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int64ListOption) MapBoolArray(f Int64ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int64ListOption) MapStringArray(f Int64ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int64ListOption) MapIntArray(f Int64ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int64ListOption) MapInt8Array(f Int64ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int64ListOption) MapInt16Array(f Int64ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int64ListOption) MapInt32Array(f Int64ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int64ListOption) MapInt64Array(f Int64ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int64ListOption) MapUintArray(f Int64ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int64ListOption) MapUint8Array(f Int64ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int64ListOption) MapUint16Array(f Int64ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int64ListOption) MapUint32Array(f Int64ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int64ListOption) MapUint64Array(f Int64ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int64ListOption) MapUintptrArray(f Int64ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int64ListOption) MapByteArray(f Int64ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int64ListOption) MapRuneArray(f Int64ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int64ListOption) MapFloat32Array(f Int64ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int64ListOption) MapFloat64Array(f Int64ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int64ListOption) MapComplex64Array(f Int64ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int64ListOption) MapComplex128Array(f Int64ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int64ListOption) MapAnyArray(f Int64ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int64ListOption) MapBoolList(f Int64ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int64ListOption) MapStringList(f Int64ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int64ListOption) MapIntList(f Int64ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int64ListOption) MapInt8List(f Int64ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int64ListOption) MapInt16List(f Int64ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int64ListOption) MapInt32List(f Int64ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int64ListOption) MapInt64List(f Int64ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int64ListOption) MapUintList(f Int64ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int64ListOption) MapUint8List(f Int64ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int64ListOption) MapUint16List(f Int64ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int64ListOption) MapUint32List(f Int64ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int64ListOption) MapUint64List(f Int64ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int64ListOption) MapUintptrList(f Int64ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int64ListOption) MapByteList(f Int64ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int64ListOption) MapRuneList(f Int64ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int64ListOption) MapFloat32List(f Int64ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int64ListOption) MapFloat64List(f Int64ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int64ListOption) MapComplex64List(f Int64ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int64ListOption) MapComplex128List(f Int64ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int64ListOption) MapAnyList(f Int64ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintListOption) MapBool(f UintListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintListOption) MapString(f UintListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintListOption) MapInt(f UintListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintListOption) MapInt8(f UintListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintListOption) MapInt16(f UintListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintListOption) MapInt32(f UintListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintListOption) MapInt64(f UintListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintListOption) MapUint(f UintListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintListOption) MapUint8(f UintListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintListOption) MapUint16(f UintListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintListOption) MapUint32(f UintListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintListOption) MapUint64(f UintListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintListOption) MapUintptr(f UintListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintListOption) MapByte(f UintListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintListOption) MapRune(f UintListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintListOption) MapFloat32(f UintListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintListOption) MapFloat64(f UintListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintListOption) MapComplex64(f UintListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintListOption) MapComplex128(f UintListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintListOption) MapAny(f UintListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintListOption) MapBoolOption(f UintListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintListOption) MapStringOption(f UintListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintListOption) MapIntOption(f UintListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintListOption) MapInt8Option(f UintListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintListOption) MapInt16Option(f UintListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintListOption) MapInt32Option(f UintListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintListOption) MapInt64Option(f UintListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintListOption) MapUintOption(f UintListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintListOption) MapUint8Option(f UintListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintListOption) MapUint16Option(f UintListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintListOption) MapUint32Option(f UintListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintListOption) MapUint64Option(f UintListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintListOption) MapUintptrOption(f UintListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintListOption) MapByteOption(f UintListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintListOption) MapRuneOption(f UintListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintListOption) MapFloat32Option(f UintListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintListOption) MapFloat64Option(f UintListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintListOption) MapComplex64Option(f UintListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintListOption) MapComplex128Option(f UintListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintListOption) MapAnyOption(f UintListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintListOption) MapBoolArray(f UintListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintListOption) MapStringArray(f UintListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintListOption) MapIntArray(f UintListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintListOption) MapInt8Array(f UintListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintListOption) MapInt16Array(f UintListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintListOption) MapInt32Array(f UintListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintListOption) MapInt64Array(f UintListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintListOption) MapUintArray(f UintListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintListOption) MapUint8Array(f UintListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintListOption) MapUint16Array(f UintListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintListOption) MapUint32Array(f UintListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintListOption) MapUint64Array(f UintListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintListOption) MapUintptrArray(f UintListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintListOption) MapByteArray(f UintListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintListOption) MapRuneArray(f UintListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintListOption) MapFloat32Array(f UintListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintListOption) MapFloat64Array(f UintListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintListOption) MapComplex64Array(f UintListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintListOption) MapComplex128Array(f UintListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintListOption) MapAnyArray(f UintListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintListOption) MapBoolList(f UintListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintListOption) MapStringList(f UintListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintListOption) MapIntList(f UintListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintListOption) MapInt8List(f UintListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintListOption) MapInt16List(f UintListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintListOption) MapInt32List(f UintListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintListOption) MapInt64List(f UintListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintListOption) MapUintList(f UintListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintListOption) MapUint8List(f UintListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintListOption) MapUint16List(f UintListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintListOption) MapUint32List(f UintListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintListOption) MapUint64List(f UintListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintListOption) MapUintptrList(f UintListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintListOption) MapByteList(f UintListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintListOption) MapRuneList(f UintListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintListOption) MapFloat32List(f UintListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintListOption) MapFloat64List(f UintListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintListOption) MapComplex64List(f UintListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintListOption) MapComplex128List(f UintListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintListOption) MapAnyList(f UintListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint8ListOption) MapBool(f Uint8ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint8ListOption) MapString(f Uint8ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint8ListOption) MapInt(f Uint8ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint8ListOption) MapInt8(f Uint8ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint8ListOption) MapInt16(f Uint8ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint8ListOption) MapInt32(f Uint8ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint8ListOption) MapInt64(f Uint8ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint8ListOption) MapUint(f Uint8ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint8ListOption) MapUint8(f Uint8ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint8ListOption) MapUint16(f Uint8ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint8ListOption) MapUint32(f Uint8ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint8ListOption) MapUint64(f Uint8ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint8ListOption) MapUintptr(f Uint8ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint8ListOption) MapByte(f Uint8ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint8ListOption) MapRune(f Uint8ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint8ListOption) MapFloat32(f Uint8ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint8ListOption) MapFloat64(f Uint8ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint8ListOption) MapComplex64(f Uint8ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint8ListOption) MapComplex128(f Uint8ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint8ListOption) MapAny(f Uint8ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint8ListOption) MapBoolOption(f Uint8ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint8ListOption) MapStringOption(f Uint8ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint8ListOption) MapIntOption(f Uint8ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint8ListOption) MapInt8Option(f Uint8ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint8ListOption) MapInt16Option(f Uint8ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint8ListOption) MapInt32Option(f Uint8ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint8ListOption) MapInt64Option(f Uint8ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint8ListOption) MapUintOption(f Uint8ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint8ListOption) MapUint8Option(f Uint8ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint8ListOption) MapUint16Option(f Uint8ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint8ListOption) MapUint32Option(f Uint8ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint8ListOption) MapUint64Option(f Uint8ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint8ListOption) MapUintptrOption(f Uint8ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint8ListOption) MapByteOption(f Uint8ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint8ListOption) MapRuneOption(f Uint8ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint8ListOption) MapFloat32Option(f Uint8ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint8ListOption) MapFloat64Option(f Uint8ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint8ListOption) MapComplex64Option(f Uint8ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint8ListOption) MapComplex128Option(f Uint8ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint8ListOption) MapAnyOption(f Uint8ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint8ListOption) MapBoolArray(f Uint8ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint8ListOption) MapStringArray(f Uint8ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint8ListOption) MapIntArray(f Uint8ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint8ListOption) MapInt8Array(f Uint8ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint8ListOption) MapInt16Array(f Uint8ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint8ListOption) MapInt32Array(f Uint8ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint8ListOption) MapInt64Array(f Uint8ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint8ListOption) MapUintArray(f Uint8ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint8ListOption) MapUint8Array(f Uint8ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint8ListOption) MapUint16Array(f Uint8ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint8ListOption) MapUint32Array(f Uint8ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint8ListOption) MapUint64Array(f Uint8ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint8ListOption) MapUintptrArray(f Uint8ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint8ListOption) MapByteArray(f Uint8ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint8ListOption) MapRuneArray(f Uint8ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint8ListOption) MapFloat32Array(f Uint8ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint8ListOption) MapFloat64Array(f Uint8ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint8ListOption) MapComplex64Array(f Uint8ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint8ListOption) MapComplex128Array(f Uint8ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint8ListOption) MapAnyArray(f Uint8ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint8ListOption) MapBoolList(f Uint8ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint8ListOption) MapStringList(f Uint8ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint8ListOption) MapIntList(f Uint8ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint8ListOption) MapInt8List(f Uint8ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint8ListOption) MapInt16List(f Uint8ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint8ListOption) MapInt32List(f Uint8ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint8ListOption) MapInt64List(f Uint8ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint8ListOption) MapUintList(f Uint8ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint8ListOption) MapUint8List(f Uint8ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint8ListOption) MapUint16List(f Uint8ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint8ListOption) MapUint32List(f Uint8ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint8ListOption) MapUint64List(f Uint8ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint8ListOption) MapUintptrList(f Uint8ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint8ListOption) MapByteList(f Uint8ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint8ListOption) MapRuneList(f Uint8ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint8ListOption) MapFloat32List(f Uint8ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint8ListOption) MapFloat64List(f Uint8ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint8ListOption) MapComplex64List(f Uint8ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint8ListOption) MapComplex128List(f Uint8ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint8ListOption) MapAnyList(f Uint8ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint16ListOption) MapBool(f Uint16ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint16ListOption) MapString(f Uint16ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint16ListOption) MapInt(f Uint16ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint16ListOption) MapInt8(f Uint16ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint16ListOption) MapInt16(f Uint16ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint16ListOption) MapInt32(f Uint16ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint16ListOption) MapInt64(f Uint16ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint16ListOption) MapUint(f Uint16ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint16ListOption) MapUint8(f Uint16ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint16ListOption) MapUint16(f Uint16ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint16ListOption) MapUint32(f Uint16ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint16ListOption) MapUint64(f Uint16ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint16ListOption) MapUintptr(f Uint16ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint16ListOption) MapByte(f Uint16ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint16ListOption) MapRune(f Uint16ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint16ListOption) MapFloat32(f Uint16ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint16ListOption) MapFloat64(f Uint16ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint16ListOption) MapComplex64(f Uint16ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint16ListOption) MapComplex128(f Uint16ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint16ListOption) MapAny(f Uint16ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint16ListOption) MapBoolOption(f Uint16ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint16ListOption) MapStringOption(f Uint16ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint16ListOption) MapIntOption(f Uint16ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint16ListOption) MapInt8Option(f Uint16ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint16ListOption) MapInt16Option(f Uint16ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint16ListOption) MapInt32Option(f Uint16ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint16ListOption) MapInt64Option(f Uint16ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint16ListOption) MapUintOption(f Uint16ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint16ListOption) MapUint8Option(f Uint16ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint16ListOption) MapUint16Option(f Uint16ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint16ListOption) MapUint32Option(f Uint16ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint16ListOption) MapUint64Option(f Uint16ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint16ListOption) MapUintptrOption(f Uint16ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint16ListOption) MapByteOption(f Uint16ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint16ListOption) MapRuneOption(f Uint16ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint16ListOption) MapFloat32Option(f Uint16ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint16ListOption) MapFloat64Option(f Uint16ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint16ListOption) MapComplex64Option(f Uint16ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint16ListOption) MapComplex128Option(f Uint16ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint16ListOption) MapAnyOption(f Uint16ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint16ListOption) MapBoolArray(f Uint16ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint16ListOption) MapStringArray(f Uint16ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint16ListOption) MapIntArray(f Uint16ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint16ListOption) MapInt8Array(f Uint16ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint16ListOption) MapInt16Array(f Uint16ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint16ListOption) MapInt32Array(f Uint16ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint16ListOption) MapInt64Array(f Uint16ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint16ListOption) MapUintArray(f Uint16ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint16ListOption) MapUint8Array(f Uint16ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint16ListOption) MapUint16Array(f Uint16ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint16ListOption) MapUint32Array(f Uint16ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint16ListOption) MapUint64Array(f Uint16ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint16ListOption) MapUintptrArray(f Uint16ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint16ListOption) MapByteArray(f Uint16ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint16ListOption) MapRuneArray(f Uint16ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint16ListOption) MapFloat32Array(f Uint16ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint16ListOption) MapFloat64Array(f Uint16ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint16ListOption) MapComplex64Array(f Uint16ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint16ListOption) MapComplex128Array(f Uint16ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint16ListOption) MapAnyArray(f Uint16ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint16ListOption) MapBoolList(f Uint16ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint16ListOption) MapStringList(f Uint16ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint16ListOption) MapIntList(f Uint16ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint16ListOption) MapInt8List(f Uint16ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint16ListOption) MapInt16List(f Uint16ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint16ListOption) MapInt32List(f Uint16ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint16ListOption) MapInt64List(f Uint16ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint16ListOption) MapUintList(f Uint16ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint16ListOption) MapUint8List(f Uint16ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint16ListOption) MapUint16List(f Uint16ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint16ListOption) MapUint32List(f Uint16ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint16ListOption) MapUint64List(f Uint16ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint16ListOption) MapUintptrList(f Uint16ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint16ListOption) MapByteList(f Uint16ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint16ListOption) MapRuneList(f Uint16ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint16ListOption) MapFloat32List(f Uint16ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint16ListOption) MapFloat64List(f Uint16ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint16ListOption) MapComplex64List(f Uint16ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint16ListOption) MapComplex128List(f Uint16ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint16ListOption) MapAnyList(f Uint16ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint32ListOption) MapBool(f Uint32ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint32ListOption) MapString(f Uint32ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint32ListOption) MapInt(f Uint32ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint32ListOption) MapInt8(f Uint32ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint32ListOption) MapInt16(f Uint32ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint32ListOption) MapInt32(f Uint32ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint32ListOption) MapInt64(f Uint32ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint32ListOption) MapUint(f Uint32ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint32ListOption) MapUint8(f Uint32ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint32ListOption) MapUint16(f Uint32ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint32ListOption) MapUint32(f Uint32ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint32ListOption) MapUint64(f Uint32ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint32ListOption) MapUintptr(f Uint32ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint32ListOption) MapByte(f Uint32ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint32ListOption) MapRune(f Uint32ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint32ListOption) MapFloat32(f Uint32ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint32ListOption) MapFloat64(f Uint32ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint32ListOption) MapComplex64(f Uint32ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint32ListOption) MapComplex128(f Uint32ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint32ListOption) MapAny(f Uint32ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint32ListOption) MapBoolOption(f Uint32ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint32ListOption) MapStringOption(f Uint32ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint32ListOption) MapIntOption(f Uint32ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint32ListOption) MapInt8Option(f Uint32ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint32ListOption) MapInt16Option(f Uint32ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint32ListOption) MapInt32Option(f Uint32ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint32ListOption) MapInt64Option(f Uint32ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint32ListOption) MapUintOption(f Uint32ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint32ListOption) MapUint8Option(f Uint32ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint32ListOption) MapUint16Option(f Uint32ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint32ListOption) MapUint32Option(f Uint32ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint32ListOption) MapUint64Option(f Uint32ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint32ListOption) MapUintptrOption(f Uint32ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint32ListOption) MapByteOption(f Uint32ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint32ListOption) MapRuneOption(f Uint32ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint32ListOption) MapFloat32Option(f Uint32ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint32ListOption) MapFloat64Option(f Uint32ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint32ListOption) MapComplex64Option(f Uint32ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint32ListOption) MapComplex128Option(f Uint32ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint32ListOption) MapAnyOption(f Uint32ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint32ListOption) MapBoolArray(f Uint32ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint32ListOption) MapStringArray(f Uint32ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint32ListOption) MapIntArray(f Uint32ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint32ListOption) MapInt8Array(f Uint32ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint32ListOption) MapInt16Array(f Uint32ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint32ListOption) MapInt32Array(f Uint32ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint32ListOption) MapInt64Array(f Uint32ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint32ListOption) MapUintArray(f Uint32ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint32ListOption) MapUint8Array(f Uint32ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint32ListOption) MapUint16Array(f Uint32ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint32ListOption) MapUint32Array(f Uint32ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint32ListOption) MapUint64Array(f Uint32ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint32ListOption) MapUintptrArray(f Uint32ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint32ListOption) MapByteArray(f Uint32ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint32ListOption) MapRuneArray(f Uint32ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint32ListOption) MapFloat32Array(f Uint32ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint32ListOption) MapFloat64Array(f Uint32ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint32ListOption) MapComplex64Array(f Uint32ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint32ListOption) MapComplex128Array(f Uint32ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint32ListOption) MapAnyArray(f Uint32ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint32ListOption) MapBoolList(f Uint32ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint32ListOption) MapStringList(f Uint32ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint32ListOption) MapIntList(f Uint32ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint32ListOption) MapInt8List(f Uint32ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint32ListOption) MapInt16List(f Uint32ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint32ListOption) MapInt32List(f Uint32ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint32ListOption) MapInt64List(f Uint32ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint32ListOption) MapUintList(f Uint32ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint32ListOption) MapUint8List(f Uint32ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint32ListOption) MapUint16List(f Uint32ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint32ListOption) MapUint32List(f Uint32ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint32ListOption) MapUint64List(f Uint32ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint32ListOption) MapUintptrList(f Uint32ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint32ListOption) MapByteList(f Uint32ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint32ListOption) MapRuneList(f Uint32ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint32ListOption) MapFloat32List(f Uint32ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint32ListOption) MapFloat64List(f Uint32ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint32ListOption) MapComplex64List(f Uint32ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint32ListOption) MapComplex128List(f Uint32ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint32ListOption) MapAnyList(f Uint32ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint64ListOption) MapBool(f Uint64ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint64ListOption) MapString(f Uint64ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint64ListOption) MapInt(f Uint64ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint64ListOption) MapInt8(f Uint64ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint64ListOption) MapInt16(f Uint64ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint64ListOption) MapInt32(f Uint64ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint64ListOption) MapInt64(f Uint64ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint64ListOption) MapUint(f Uint64ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint64ListOption) MapUint8(f Uint64ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint64ListOption) MapUint16(f Uint64ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint64ListOption) MapUint32(f Uint64ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint64ListOption) MapUint64(f Uint64ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint64ListOption) MapUintptr(f Uint64ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint64ListOption) MapByte(f Uint64ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint64ListOption) MapRune(f Uint64ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint64ListOption) MapFloat32(f Uint64ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint64ListOption) MapFloat64(f Uint64ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint64ListOption) MapComplex64(f Uint64ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint64ListOption) MapComplex128(f Uint64ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint64ListOption) MapAny(f Uint64ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint64ListOption) MapBoolOption(f Uint64ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint64ListOption) MapStringOption(f Uint64ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint64ListOption) MapIntOption(f Uint64ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint64ListOption) MapInt8Option(f Uint64ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint64ListOption) MapInt16Option(f Uint64ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint64ListOption) MapInt32Option(f Uint64ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint64ListOption) MapInt64Option(f Uint64ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint64ListOption) MapUintOption(f Uint64ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint64ListOption) MapUint8Option(f Uint64ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint64ListOption) MapUint16Option(f Uint64ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint64ListOption) MapUint32Option(f Uint64ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint64ListOption) MapUint64Option(f Uint64ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint64ListOption) MapUintptrOption(f Uint64ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint64ListOption) MapByteOption(f Uint64ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint64ListOption) MapRuneOption(f Uint64ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint64ListOption) MapFloat32Option(f Uint64ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint64ListOption) MapFloat64Option(f Uint64ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint64ListOption) MapComplex64Option(f Uint64ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint64ListOption) MapComplex128Option(f Uint64ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint64ListOption) MapAnyOption(f Uint64ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint64ListOption) MapBoolArray(f Uint64ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint64ListOption) MapStringArray(f Uint64ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint64ListOption) MapIntArray(f Uint64ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint64ListOption) MapInt8Array(f Uint64ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint64ListOption) MapInt16Array(f Uint64ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint64ListOption) MapInt32Array(f Uint64ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint64ListOption) MapInt64Array(f Uint64ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint64ListOption) MapUintArray(f Uint64ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint64ListOption) MapUint8Array(f Uint64ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint64ListOption) MapUint16Array(f Uint64ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint64ListOption) MapUint32Array(f Uint64ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint64ListOption) MapUint64Array(f Uint64ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint64ListOption) MapUintptrArray(f Uint64ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint64ListOption) MapByteArray(f Uint64ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint64ListOption) MapRuneArray(f Uint64ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint64ListOption) MapFloat32Array(f Uint64ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint64ListOption) MapFloat64Array(f Uint64ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint64ListOption) MapComplex64Array(f Uint64ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint64ListOption) MapComplex128Array(f Uint64ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint64ListOption) MapAnyArray(f Uint64ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint64ListOption) MapBoolList(f Uint64ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint64ListOption) MapStringList(f Uint64ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint64ListOption) MapIntList(f Uint64ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint64ListOption) MapInt8List(f Uint64ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint64ListOption) MapInt16List(f Uint64ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint64ListOption) MapInt32List(f Uint64ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint64ListOption) MapInt64List(f Uint64ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint64ListOption) MapUintList(f Uint64ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint64ListOption) MapUint8List(f Uint64ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint64ListOption) MapUint16List(f Uint64ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint64ListOption) MapUint32List(f Uint64ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint64ListOption) MapUint64List(f Uint64ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint64ListOption) MapUintptrList(f Uint64ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint64ListOption) MapByteList(f Uint64ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint64ListOption) MapRuneList(f Uint64ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint64ListOption) MapFloat32List(f Uint64ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint64ListOption) MapFloat64List(f Uint64ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint64ListOption) MapComplex64List(f Uint64ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint64ListOption) MapComplex128List(f Uint64ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint64ListOption) MapAnyList(f Uint64ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintptrListOption) MapBool(f UintptrListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintptrListOption) MapString(f UintptrListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintptrListOption) MapInt(f UintptrListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintptrListOption) MapInt8(f UintptrListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintptrListOption) MapInt16(f UintptrListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintptrListOption) MapInt32(f UintptrListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintptrListOption) MapInt64(f UintptrListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintptrListOption) MapUint(f UintptrListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintptrListOption) MapUint8(f UintptrListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintptrListOption) MapUint16(f UintptrListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintptrListOption) MapUint32(f UintptrListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintptrListOption) MapUint64(f UintptrListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintptrListOption) MapUintptr(f UintptrListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintptrListOption) MapByte(f UintptrListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintptrListOption) MapRune(f UintptrListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintptrListOption) MapFloat32(f UintptrListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintptrListOption) MapFloat64(f UintptrListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintptrListOption) MapComplex64(f UintptrListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintptrListOption) MapComplex128(f UintptrListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintptrListOption) MapAny(f UintptrListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintptrListOption) MapBoolOption(f UintptrListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintptrListOption) MapStringOption(f UintptrListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintptrListOption) MapIntOption(f UintptrListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintptrListOption) MapInt8Option(f UintptrListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintptrListOption) MapInt16Option(f UintptrListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintptrListOption) MapInt32Option(f UintptrListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintptrListOption) MapInt64Option(f UintptrListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintptrListOption) MapUintOption(f UintptrListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintptrListOption) MapUint8Option(f UintptrListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintptrListOption) MapUint16Option(f UintptrListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintptrListOption) MapUint32Option(f UintptrListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintptrListOption) MapUint64Option(f UintptrListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintptrListOption) MapUintptrOption(f UintptrListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintptrListOption) MapByteOption(f UintptrListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintptrListOption) MapRuneOption(f UintptrListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintptrListOption) MapFloat32Option(f UintptrListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintptrListOption) MapFloat64Option(f UintptrListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintptrListOption) MapComplex64Option(f UintptrListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintptrListOption) MapComplex128Option(f UintptrListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintptrListOption) MapAnyOption(f UintptrListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintptrListOption) MapBoolArray(f UintptrListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintptrListOption) MapStringArray(f UintptrListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintptrListOption) MapIntArray(f UintptrListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintptrListOption) MapInt8Array(f UintptrListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintptrListOption) MapInt16Array(f UintptrListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintptrListOption) MapInt32Array(f UintptrListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintptrListOption) MapInt64Array(f UintptrListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintptrListOption) MapUintArray(f UintptrListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintptrListOption) MapUint8Array(f UintptrListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintptrListOption) MapUint16Array(f UintptrListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintptrListOption) MapUint32Array(f UintptrListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintptrListOption) MapUint64Array(f UintptrListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintptrListOption) MapUintptrArray(f UintptrListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintptrListOption) MapByteArray(f UintptrListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintptrListOption) MapRuneArray(f UintptrListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintptrListOption) MapFloat32Array(f UintptrListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintptrListOption) MapFloat64Array(f UintptrListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintptrListOption) MapComplex64Array(f UintptrListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintptrListOption) MapComplex128Array(f UintptrListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintptrListOption) MapAnyArray(f UintptrListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintptrListOption) MapBoolList(f UintptrListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintptrListOption) MapStringList(f UintptrListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintptrListOption) MapIntList(f UintptrListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintptrListOption) MapInt8List(f UintptrListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintptrListOption) MapInt16List(f UintptrListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintptrListOption) MapInt32List(f UintptrListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintptrListOption) MapInt64List(f UintptrListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintptrListOption) MapUintList(f UintptrListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintptrListOption) MapUint8List(f UintptrListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintptrListOption) MapUint16List(f UintptrListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintptrListOption) MapUint32List(f UintptrListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintptrListOption) MapUint64List(f UintptrListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintptrListOption) MapUintptrList(f UintptrListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintptrListOption) MapByteList(f UintptrListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintptrListOption) MapRuneList(f UintptrListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintptrListOption) MapFloat32List(f UintptrListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintptrListOption) MapFloat64List(f UintptrListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintptrListOption) MapComplex64List(f UintptrListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintptrListOption) MapComplex128List(f UintptrListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintptrListOption) MapAnyList(f UintptrListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m ByteListOption) MapBool(f ByteListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m ByteListOption) MapString(f ByteListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m ByteListOption) MapInt(f ByteListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m ByteListOption) MapInt8(f ByteListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m ByteListOption) MapInt16(f ByteListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m ByteListOption) MapInt32(f ByteListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m ByteListOption) MapInt64(f ByteListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m ByteListOption) MapUint(f ByteListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m ByteListOption) MapUint8(f ByteListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m ByteListOption) MapUint16(f ByteListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m ByteListOption) MapUint32(f ByteListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m ByteListOption) MapUint64(f ByteListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m ByteListOption) MapUintptr(f ByteListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m ByteListOption) MapByte(f ByteListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m ByteListOption) MapRune(f ByteListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m ByteListOption) MapFloat32(f ByteListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m ByteListOption) MapFloat64(f ByteListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m ByteListOption) MapComplex64(f ByteListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m ByteListOption) MapComplex128(f ByteListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m ByteListOption) MapAny(f ByteListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m ByteListOption) MapBoolOption(f ByteListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m ByteListOption) MapStringOption(f ByteListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m ByteListOption) MapIntOption(f ByteListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m ByteListOption) MapInt8Option(f ByteListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m ByteListOption) MapInt16Option(f ByteListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m ByteListOption) MapInt32Option(f ByteListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m ByteListOption) MapInt64Option(f ByteListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m ByteListOption) MapUintOption(f ByteListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m ByteListOption) MapUint8Option(f ByteListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m ByteListOption) MapUint16Option(f ByteListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m ByteListOption) MapUint32Option(f ByteListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m ByteListOption) MapUint64Option(f ByteListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m ByteListOption) MapUintptrOption(f ByteListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m ByteListOption) MapByteOption(f ByteListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m ByteListOption) MapRuneOption(f ByteListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m ByteListOption) MapFloat32Option(f ByteListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m ByteListOption) MapFloat64Option(f ByteListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m ByteListOption) MapComplex64Option(f ByteListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m ByteListOption) MapComplex128Option(f ByteListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m ByteListOption) MapAnyOption(f ByteListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m ByteListOption) MapBoolArray(f ByteListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m ByteListOption) MapStringArray(f ByteListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m ByteListOption) MapIntArray(f ByteListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m ByteListOption) MapInt8Array(f ByteListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m ByteListOption) MapInt16Array(f ByteListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m ByteListOption) MapInt32Array(f ByteListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m ByteListOption) MapInt64Array(f ByteListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m ByteListOption) MapUintArray(f ByteListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m ByteListOption) MapUint8Array(f ByteListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m ByteListOption) MapUint16Array(f ByteListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m ByteListOption) MapUint32Array(f ByteListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m ByteListOption) MapUint64Array(f ByteListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m ByteListOption) MapUintptrArray(f ByteListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m ByteListOption) MapByteArray(f ByteListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m ByteListOption) MapRuneArray(f ByteListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m ByteListOption) MapFloat32Array(f ByteListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m ByteListOption) MapFloat64Array(f ByteListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m ByteListOption) MapComplex64Array(f ByteListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m ByteListOption) MapComplex128Array(f ByteListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m ByteListOption) MapAnyArray(f ByteListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m ByteListOption) MapBoolList(f ByteListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m ByteListOption) MapStringList(f ByteListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m ByteListOption) MapIntList(f ByteListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m ByteListOption) MapInt8List(f ByteListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m ByteListOption) MapInt16List(f ByteListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m ByteListOption) MapInt32List(f ByteListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m ByteListOption) MapInt64List(f ByteListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m ByteListOption) MapUintList(f ByteListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m ByteListOption) MapUint8List(f ByteListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m ByteListOption) MapUint16List(f ByteListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m ByteListOption) MapUint32List(f ByteListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m ByteListOption) MapUint64List(f ByteListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m ByteListOption) MapUintptrList(f ByteListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m ByteListOption) MapByteList(f ByteListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m ByteListOption) MapRuneList(f ByteListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m ByteListOption) MapFloat32List(f ByteListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m ByteListOption) MapFloat64List(f ByteListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m ByteListOption) MapComplex64List(f ByteListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m ByteListOption) MapComplex128List(f ByteListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m ByteListOption) MapAnyList(f ByteListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m RuneListOption) MapBool(f RuneListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m RuneListOption) MapString(f RuneListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m RuneListOption) MapInt(f RuneListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m RuneListOption) MapInt8(f RuneListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m RuneListOption) MapInt16(f RuneListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m RuneListOption) MapInt32(f RuneListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m RuneListOption) MapInt64(f RuneListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m RuneListOption) MapUint(f RuneListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m RuneListOption) MapUint8(f RuneListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m RuneListOption) MapUint16(f RuneListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m RuneListOption) MapUint32(f RuneListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m RuneListOption) MapUint64(f RuneListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m RuneListOption) MapUintptr(f RuneListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m RuneListOption) MapByte(f RuneListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m RuneListOption) MapRune(f RuneListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m RuneListOption) MapFloat32(f RuneListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m RuneListOption) MapFloat64(f RuneListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m RuneListOption) MapComplex64(f RuneListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m RuneListOption) MapComplex128(f RuneListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m RuneListOption) MapAny(f RuneListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m RuneListOption) MapBoolOption(f RuneListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m RuneListOption) MapStringOption(f RuneListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m RuneListOption) MapIntOption(f RuneListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m RuneListOption) MapInt8Option(f RuneListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m RuneListOption) MapInt16Option(f RuneListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m RuneListOption) MapInt32Option(f RuneListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m RuneListOption) MapInt64Option(f RuneListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m RuneListOption) MapUintOption(f RuneListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m RuneListOption) MapUint8Option(f RuneListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m RuneListOption) MapUint16Option(f RuneListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m RuneListOption) MapUint32Option(f RuneListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m RuneListOption) MapUint64Option(f RuneListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m RuneListOption) MapUintptrOption(f RuneListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m RuneListOption) MapByteOption(f RuneListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m RuneListOption) MapRuneOption(f RuneListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m RuneListOption) MapFloat32Option(f RuneListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m RuneListOption) MapFloat64Option(f RuneListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m RuneListOption) MapComplex64Option(f RuneListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m RuneListOption) MapComplex128Option(f RuneListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m RuneListOption) MapAnyOption(f RuneListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m RuneListOption) MapBoolArray(f RuneListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m RuneListOption) MapStringArray(f RuneListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m RuneListOption) MapIntArray(f RuneListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m RuneListOption) MapInt8Array(f RuneListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m RuneListOption) MapInt16Array(f RuneListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m RuneListOption) MapInt32Array(f RuneListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m RuneListOption) MapInt64Array(f RuneListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m RuneListOption) MapUintArray(f RuneListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m RuneListOption) MapUint8Array(f RuneListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m RuneListOption) MapUint16Array(f RuneListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m RuneListOption) MapUint32Array(f RuneListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m RuneListOption) MapUint64Array(f RuneListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m RuneListOption) MapUintptrArray(f RuneListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m RuneListOption) MapByteArray(f RuneListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m RuneListOption) MapRuneArray(f RuneListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m RuneListOption) MapFloat32Array(f RuneListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m RuneListOption) MapFloat64Array(f RuneListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m RuneListOption) MapComplex64Array(f RuneListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m RuneListOption) MapComplex128Array(f RuneListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m RuneListOption) MapAnyArray(f RuneListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m RuneListOption) MapBoolList(f RuneListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m RuneListOption) MapStringList(f RuneListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m RuneListOption) MapIntList(f RuneListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m RuneListOption) MapInt8List(f RuneListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m RuneListOption) MapInt16List(f RuneListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m RuneListOption) MapInt32List(f RuneListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m RuneListOption) MapInt64List(f RuneListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m RuneListOption) MapUintList(f RuneListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m RuneListOption) MapUint8List(f RuneListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m RuneListOption) MapUint16List(f RuneListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m RuneListOption) MapUint32List(f RuneListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m RuneListOption) MapUint64List(f RuneListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m RuneListOption) MapUintptrList(f RuneListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m RuneListOption) MapByteList(f RuneListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m RuneListOption) MapRuneList(f RuneListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m RuneListOption) MapFloat32List(f RuneListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m RuneListOption) MapFloat64List(f RuneListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m RuneListOption) MapComplex64List(f RuneListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m RuneListOption) MapComplex128List(f RuneListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m RuneListOption) MapAnyList(f RuneListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float32ListOption) MapBool(f Float32ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float32ListOption) MapString(f Float32ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float32ListOption) MapInt(f Float32ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float32ListOption) MapInt8(f Float32ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float32ListOption) MapInt16(f Float32ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float32ListOption) MapInt32(f Float32ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float32ListOption) MapInt64(f Float32ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float32ListOption) MapUint(f Float32ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float32ListOption) MapUint8(f Float32ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float32ListOption) MapUint16(f Float32ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float32ListOption) MapUint32(f Float32ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float32ListOption) MapUint64(f Float32ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float32ListOption) MapUintptr(f Float32ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float32ListOption) MapByte(f Float32ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float32ListOption) MapRune(f Float32ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float32ListOption) MapFloat32(f Float32ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float32ListOption) MapFloat64(f Float32ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float32ListOption) MapComplex64(f Float32ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float32ListOption) MapComplex128(f Float32ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float32ListOption) MapAny(f Float32ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float32ListOption) MapBoolOption(f Float32ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float32ListOption) MapStringOption(f Float32ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float32ListOption) MapIntOption(f Float32ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float32ListOption) MapInt8Option(f Float32ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float32ListOption) MapInt16Option(f Float32ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float32ListOption) MapInt32Option(f Float32ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float32ListOption) MapInt64Option(f Float32ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float32ListOption) MapUintOption(f Float32ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float32ListOption) MapUint8Option(f Float32ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float32ListOption) MapUint16Option(f Float32ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float32ListOption) MapUint32Option(f Float32ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float32ListOption) MapUint64Option(f Float32ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float32ListOption) MapUintptrOption(f Float32ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float32ListOption) MapByteOption(f Float32ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float32ListOption) MapRuneOption(f Float32ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float32ListOption) MapFloat32Option(f Float32ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float32ListOption) MapFloat64Option(f Float32ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float32ListOption) MapComplex64Option(f Float32ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float32ListOption) MapComplex128Option(f Float32ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float32ListOption) MapAnyOption(f Float32ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float32ListOption) MapBoolArray(f Float32ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float32ListOption) MapStringArray(f Float32ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float32ListOption) MapIntArray(f Float32ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float32ListOption) MapInt8Array(f Float32ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float32ListOption) MapInt16Array(f Float32ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float32ListOption) MapInt32Array(f Float32ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float32ListOption) MapInt64Array(f Float32ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float32ListOption) MapUintArray(f Float32ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float32ListOption) MapUint8Array(f Float32ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float32ListOption) MapUint16Array(f Float32ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float32ListOption) MapUint32Array(f Float32ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float32ListOption) MapUint64Array(f Float32ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float32ListOption) MapUintptrArray(f Float32ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float32ListOption) MapByteArray(f Float32ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float32ListOption) MapRuneArray(f Float32ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float32ListOption) MapFloat32Array(f Float32ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float32ListOption) MapFloat64Array(f Float32ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float32ListOption) MapComplex64Array(f Float32ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float32ListOption) MapComplex128Array(f Float32ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float32ListOption) MapAnyArray(f Float32ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float32ListOption) MapBoolList(f Float32ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float32ListOption) MapStringList(f Float32ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float32ListOption) MapIntList(f Float32ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float32ListOption) MapInt8List(f Float32ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float32ListOption) MapInt16List(f Float32ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float32ListOption) MapInt32List(f Float32ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float32ListOption) MapInt64List(f Float32ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float32ListOption) MapUintList(f Float32ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float32ListOption) MapUint8List(f Float32ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float32ListOption) MapUint16List(f Float32ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float32ListOption) MapUint32List(f Float32ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float32ListOption) MapUint64List(f Float32ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float32ListOption) MapUintptrList(f Float32ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float32ListOption) MapByteList(f Float32ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float32ListOption) MapRuneList(f Float32ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float32ListOption) MapFloat32List(f Float32ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float32ListOption) MapFloat64List(f Float32ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float32ListOption) MapComplex64List(f Float32ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float32ListOption) MapComplex128List(f Float32ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float32ListOption) MapAnyList(f Float32ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float64ListOption) MapBool(f Float64ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float64ListOption) MapString(f Float64ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float64ListOption) MapInt(f Float64ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float64ListOption) MapInt8(f Float64ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float64ListOption) MapInt16(f Float64ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float64ListOption) MapInt32(f Float64ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float64ListOption) MapInt64(f Float64ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float64ListOption) MapUint(f Float64ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float64ListOption) MapUint8(f Float64ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float64ListOption) MapUint16(f Float64ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float64ListOption) MapUint32(f Float64ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float64ListOption) MapUint64(f Float64ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float64ListOption) MapUintptr(f Float64ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float64ListOption) MapByte(f Float64ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float64ListOption) MapRune(f Float64ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float64ListOption) MapFloat32(f Float64ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float64ListOption) MapFloat64(f Float64ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float64ListOption) MapComplex64(f Float64ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float64ListOption) MapComplex128(f Float64ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float64ListOption) MapAny(f Float64ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float64ListOption) MapBoolOption(f Float64ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float64ListOption) MapStringOption(f Float64ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float64ListOption) MapIntOption(f Float64ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float64ListOption) MapInt8Option(f Float64ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float64ListOption) MapInt16Option(f Float64ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float64ListOption) MapInt32Option(f Float64ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float64ListOption) MapInt64Option(f Float64ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float64ListOption) MapUintOption(f Float64ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float64ListOption) MapUint8Option(f Float64ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float64ListOption) MapUint16Option(f Float64ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float64ListOption) MapUint32Option(f Float64ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float64ListOption) MapUint64Option(f Float64ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float64ListOption) MapUintptrOption(f Float64ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float64ListOption) MapByteOption(f Float64ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float64ListOption) MapRuneOption(f Float64ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float64ListOption) MapFloat32Option(f Float64ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float64ListOption) MapFloat64Option(f Float64ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float64ListOption) MapComplex64Option(f Float64ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float64ListOption) MapComplex128Option(f Float64ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float64ListOption) MapAnyOption(f Float64ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float64ListOption) MapBoolArray(f Float64ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float64ListOption) MapStringArray(f Float64ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float64ListOption) MapIntArray(f Float64ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float64ListOption) MapInt8Array(f Float64ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float64ListOption) MapInt16Array(f Float64ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float64ListOption) MapInt32Array(f Float64ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float64ListOption) MapInt64Array(f Float64ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float64ListOption) MapUintArray(f Float64ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float64ListOption) MapUint8Array(f Float64ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float64ListOption) MapUint16Array(f Float64ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float64ListOption) MapUint32Array(f Float64ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float64ListOption) MapUint64Array(f Float64ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float64ListOption) MapUintptrArray(f Float64ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float64ListOption) MapByteArray(f Float64ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float64ListOption) MapRuneArray(f Float64ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float64ListOption) MapFloat32Array(f Float64ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float64ListOption) MapFloat64Array(f Float64ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float64ListOption) MapComplex64Array(f Float64ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float64ListOption) MapComplex128Array(f Float64ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float64ListOption) MapAnyArray(f Float64ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float64ListOption) MapBoolList(f Float64ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float64ListOption) MapStringList(f Float64ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float64ListOption) MapIntList(f Float64ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float64ListOption) MapInt8List(f Float64ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float64ListOption) MapInt16List(f Float64ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float64ListOption) MapInt32List(f Float64ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float64ListOption) MapInt64List(f Float64ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float64ListOption) MapUintList(f Float64ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float64ListOption) MapUint8List(f Float64ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float64ListOption) MapUint16List(f Float64ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float64ListOption) MapUint32List(f Float64ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float64ListOption) MapUint64List(f Float64ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float64ListOption) MapUintptrList(f Float64ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float64ListOption) MapByteList(f Float64ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float64ListOption) MapRuneList(f Float64ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float64ListOption) MapFloat32List(f Float64ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float64ListOption) MapFloat64List(f Float64ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float64ListOption) MapComplex64List(f Float64ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float64ListOption) MapComplex128List(f Float64ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float64ListOption) MapAnyList(f Float64ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex64ListOption) MapBool(f Complex64ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex64ListOption) MapString(f Complex64ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex64ListOption) MapInt(f Complex64ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex64ListOption) MapInt8(f Complex64ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex64ListOption) MapInt16(f Complex64ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex64ListOption) MapInt32(f Complex64ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex64ListOption) MapInt64(f Complex64ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex64ListOption) MapUint(f Complex64ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex64ListOption) MapUint8(f Complex64ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex64ListOption) MapUint16(f Complex64ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex64ListOption) MapUint32(f Complex64ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex64ListOption) MapUint64(f Complex64ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex64ListOption) MapUintptr(f Complex64ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex64ListOption) MapByte(f Complex64ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex64ListOption) MapRune(f Complex64ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex64ListOption) MapFloat32(f Complex64ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex64ListOption) MapFloat64(f Complex64ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex64ListOption) MapComplex64(f Complex64ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex64ListOption) MapComplex128(f Complex64ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex64ListOption) MapAny(f Complex64ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex64ListOption) MapBoolOption(f Complex64ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex64ListOption) MapStringOption(f Complex64ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex64ListOption) MapIntOption(f Complex64ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex64ListOption) MapInt8Option(f Complex64ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex64ListOption) MapInt16Option(f Complex64ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex64ListOption) MapInt32Option(f Complex64ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex64ListOption) MapInt64Option(f Complex64ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex64ListOption) MapUintOption(f Complex64ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex64ListOption) MapUint8Option(f Complex64ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex64ListOption) MapUint16Option(f Complex64ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex64ListOption) MapUint32Option(f Complex64ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex64ListOption) MapUint64Option(f Complex64ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex64ListOption) MapUintptrOption(f Complex64ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex64ListOption) MapByteOption(f Complex64ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex64ListOption) MapRuneOption(f Complex64ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex64ListOption) MapFloat32Option(f Complex64ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex64ListOption) MapFloat64Option(f Complex64ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex64ListOption) MapComplex64Option(f Complex64ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex64ListOption) MapComplex128Option(f Complex64ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex64ListOption) MapAnyOption(f Complex64ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex64ListOption) MapBoolArray(f Complex64ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex64ListOption) MapStringArray(f Complex64ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex64ListOption) MapIntArray(f Complex64ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex64ListOption) MapInt8Array(f Complex64ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex64ListOption) MapInt16Array(f Complex64ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex64ListOption) MapInt32Array(f Complex64ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex64ListOption) MapInt64Array(f Complex64ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex64ListOption) MapUintArray(f Complex64ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex64ListOption) MapUint8Array(f Complex64ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex64ListOption) MapUint16Array(f Complex64ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex64ListOption) MapUint32Array(f Complex64ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex64ListOption) MapUint64Array(f Complex64ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex64ListOption) MapUintptrArray(f Complex64ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex64ListOption) MapByteArray(f Complex64ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex64ListOption) MapRuneArray(f Complex64ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex64ListOption) MapFloat32Array(f Complex64ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex64ListOption) MapFloat64Array(f Complex64ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex64ListOption) MapComplex64Array(f Complex64ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex64ListOption) MapComplex128Array(f Complex64ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex64ListOption) MapAnyArray(f Complex64ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex64ListOption) MapBoolList(f Complex64ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex64ListOption) MapStringList(f Complex64ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex64ListOption) MapIntList(f Complex64ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex64ListOption) MapInt8List(f Complex64ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex64ListOption) MapInt16List(f Complex64ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex64ListOption) MapInt32List(f Complex64ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex64ListOption) MapInt64List(f Complex64ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex64ListOption) MapUintList(f Complex64ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex64ListOption) MapUint8List(f Complex64ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex64ListOption) MapUint16List(f Complex64ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex64ListOption) MapUint32List(f Complex64ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex64ListOption) MapUint64List(f Complex64ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex64ListOption) MapUintptrList(f Complex64ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex64ListOption) MapByteList(f Complex64ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex64ListOption) MapRuneList(f Complex64ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex64ListOption) MapFloat32List(f Complex64ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex64ListOption) MapFloat64List(f Complex64ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex64ListOption) MapComplex64List(f Complex64ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex64ListOption) MapComplex128List(f Complex64ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex64ListOption) MapAnyList(f Complex64ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex128ListOption) MapBool(f Complex128ListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex128ListOption) MapString(f Complex128ListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex128ListOption) MapInt(f Complex128ListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex128ListOption) MapInt8(f Complex128ListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex128ListOption) MapInt16(f Complex128ListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex128ListOption) MapInt32(f Complex128ListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex128ListOption) MapInt64(f Complex128ListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex128ListOption) MapUint(f Complex128ListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex128ListOption) MapUint8(f Complex128ListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex128ListOption) MapUint16(f Complex128ListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex128ListOption) MapUint32(f Complex128ListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex128ListOption) MapUint64(f Complex128ListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex128ListOption) MapUintptr(f Complex128ListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex128ListOption) MapByte(f Complex128ListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex128ListOption) MapRune(f Complex128ListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex128ListOption) MapFloat32(f Complex128ListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex128ListOption) MapFloat64(f Complex128ListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex128ListOption) MapComplex64(f Complex128ListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex128ListOption) MapComplex128(f Complex128ListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex128ListOption) MapAny(f Complex128ListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex128ListOption) MapBoolOption(f Complex128ListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex128ListOption) MapStringOption(f Complex128ListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex128ListOption) MapIntOption(f Complex128ListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex128ListOption) MapInt8Option(f Complex128ListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex128ListOption) MapInt16Option(f Complex128ListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex128ListOption) MapInt32Option(f Complex128ListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex128ListOption) MapInt64Option(f Complex128ListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex128ListOption) MapUintOption(f Complex128ListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex128ListOption) MapUint8Option(f Complex128ListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex128ListOption) MapUint16Option(f Complex128ListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex128ListOption) MapUint32Option(f Complex128ListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex128ListOption) MapUint64Option(f Complex128ListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex128ListOption) MapUintptrOption(f Complex128ListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex128ListOption) MapByteOption(f Complex128ListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex128ListOption) MapRuneOption(f Complex128ListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex128ListOption) MapFloat32Option(f Complex128ListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex128ListOption) MapFloat64Option(f Complex128ListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex128ListOption) MapComplex64Option(f Complex128ListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex128ListOption) MapComplex128Option(f Complex128ListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex128ListOption) MapAnyOption(f Complex128ListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex128ListOption) MapBoolArray(f Complex128ListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex128ListOption) MapStringArray(f Complex128ListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex128ListOption) MapIntArray(f Complex128ListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex128ListOption) MapInt8Array(f Complex128ListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex128ListOption) MapInt16Array(f Complex128ListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex128ListOption) MapInt32Array(f Complex128ListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex128ListOption) MapInt64Array(f Complex128ListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex128ListOption) MapUintArray(f Complex128ListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex128ListOption) MapUint8Array(f Complex128ListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex128ListOption) MapUint16Array(f Complex128ListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex128ListOption) MapUint32Array(f Complex128ListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex128ListOption) MapUint64Array(f Complex128ListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex128ListOption) MapUintptrArray(f Complex128ListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex128ListOption) MapByteArray(f Complex128ListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex128ListOption) MapRuneArray(f Complex128ListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex128ListOption) MapFloat32Array(f Complex128ListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex128ListOption) MapFloat64Array(f Complex128ListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex128ListOption) MapComplex64Array(f Complex128ListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex128ListOption) MapComplex128Array(f Complex128ListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex128ListOption) MapAnyArray(f Complex128ListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex128ListOption) MapBoolList(f Complex128ListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex128ListOption) MapStringList(f Complex128ListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex128ListOption) MapIntList(f Complex128ListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex128ListOption) MapInt8List(f Complex128ListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex128ListOption) MapInt16List(f Complex128ListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex128ListOption) MapInt32List(f Complex128ListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex128ListOption) MapInt64List(f Complex128ListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex128ListOption) MapUintList(f Complex128ListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex128ListOption) MapUint8List(f Complex128ListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex128ListOption) MapUint16List(f Complex128ListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex128ListOption) MapUint32List(f Complex128ListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex128ListOption) MapUint64List(f Complex128ListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex128ListOption) MapUintptrList(f Complex128ListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex128ListOption) MapByteList(f Complex128ListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex128ListOption) MapRuneList(f Complex128ListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex128ListOption) MapFloat32List(f Complex128ListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex128ListOption) MapFloat64List(f Complex128ListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex128ListOption) MapComplex64List(f Complex128ListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex128ListOption) MapComplex128List(f Complex128ListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex128ListOption) MapAnyList(f Complex128ListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m AnyListOption) MapBool(f AnyListToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m AnyListOption) MapString(f AnyListToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m AnyListOption) MapInt(f AnyListToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m AnyListOption) MapInt8(f AnyListToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m AnyListOption) MapInt16(f AnyListToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m AnyListOption) MapInt32(f AnyListToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m AnyListOption) MapInt64(f AnyListToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m AnyListOption) MapUint(f AnyListToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m AnyListOption) MapUint8(f AnyListToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m AnyListOption) MapUint16(f AnyListToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m AnyListOption) MapUint32(f AnyListToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m AnyListOption) MapUint64(f AnyListToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m AnyListOption) MapUintptr(f AnyListToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m AnyListOption) MapByte(f AnyListToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m AnyListOption) MapRune(f AnyListToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m AnyListOption) MapFloat32(f AnyListToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m AnyListOption) MapFloat64(f AnyListToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m AnyListOption) MapComplex64(f AnyListToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m AnyListOption) MapComplex128(f AnyListToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m AnyListOption) MapAny(f AnyListToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m AnyListOption) MapBoolOption(f AnyListToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m AnyListOption) MapStringOption(f AnyListToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m AnyListOption) MapIntOption(f AnyListToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m AnyListOption) MapInt8Option(f AnyListToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m AnyListOption) MapInt16Option(f AnyListToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m AnyListOption) MapInt32Option(f AnyListToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m AnyListOption) MapInt64Option(f AnyListToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m AnyListOption) MapUintOption(f AnyListToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m AnyListOption) MapUint8Option(f AnyListToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m AnyListOption) MapUint16Option(f AnyListToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m AnyListOption) MapUint32Option(f AnyListToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m AnyListOption) MapUint64Option(f AnyListToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m AnyListOption) MapUintptrOption(f AnyListToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m AnyListOption) MapByteOption(f AnyListToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m AnyListOption) MapRuneOption(f AnyListToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m AnyListOption) MapFloat32Option(f AnyListToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m AnyListOption) MapFloat64Option(f AnyListToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m AnyListOption) MapComplex64Option(f AnyListToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m AnyListOption) MapComplex128Option(f AnyListToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m AnyListOption) MapAnyOption(f AnyListToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m AnyListOption) MapBoolArray(f AnyListToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m AnyListOption) MapStringArray(f AnyListToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m AnyListOption) MapIntArray(f AnyListToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m AnyListOption) MapInt8Array(f AnyListToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m AnyListOption) MapInt16Array(f AnyListToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m AnyListOption) MapInt32Array(f AnyListToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m AnyListOption) MapInt64Array(f AnyListToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m AnyListOption) MapUintArray(f AnyListToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m AnyListOption) MapUint8Array(f AnyListToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m AnyListOption) MapUint16Array(f AnyListToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m AnyListOption) MapUint32Array(f AnyListToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m AnyListOption) MapUint64Array(f AnyListToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m AnyListOption) MapUintptrArray(f AnyListToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m AnyListOption) MapByteArray(f AnyListToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m AnyListOption) MapRuneArray(f AnyListToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m AnyListOption) MapFloat32Array(f AnyListToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m AnyListOption) MapFloat64Array(f AnyListToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m AnyListOption) MapComplex64Array(f AnyListToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m AnyListOption) MapComplex128Array(f AnyListToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m AnyListOption) MapAnyArray(f AnyListToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m AnyListOption) MapBoolList(f AnyListToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m AnyListOption) MapStringList(f AnyListToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m AnyListOption) MapIntList(f AnyListToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m AnyListOption) MapInt8List(f AnyListToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m AnyListOption) MapInt16List(f AnyListToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m AnyListOption) MapInt32List(f AnyListToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m AnyListOption) MapInt64List(f AnyListToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m AnyListOption) MapUintList(f AnyListToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m AnyListOption) MapUint8List(f AnyListToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m AnyListOption) MapUint16List(f AnyListToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m AnyListOption) MapUint32List(f AnyListToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m AnyListOption) MapUint64List(f AnyListToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m AnyListOption) MapUintptrList(f AnyListToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m AnyListOption) MapByteList(f AnyListToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m AnyListOption) MapRuneList(f AnyListToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m AnyListOption) MapFloat32List(f AnyListToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m AnyListOption) MapFloat64List(f AnyListToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m AnyListOption) MapComplex64List(f AnyListToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m AnyListOption) MapComplex128List(f AnyListToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m AnyListOption) MapAnyList(f AnyListToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m BoolOptionOption) MapBool(f BoolOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m BoolOptionOption) MapString(f BoolOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m BoolOptionOption) MapInt(f BoolOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m BoolOptionOption) MapInt8(f BoolOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m BoolOptionOption) MapInt16(f BoolOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m BoolOptionOption) MapInt32(f BoolOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m BoolOptionOption) MapInt64(f BoolOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m BoolOptionOption) MapUint(f BoolOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m BoolOptionOption) MapUint8(f BoolOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m BoolOptionOption) MapUint16(f BoolOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m BoolOptionOption) MapUint32(f BoolOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m BoolOptionOption) MapUint64(f BoolOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m BoolOptionOption) MapUintptr(f BoolOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m BoolOptionOption) MapByte(f BoolOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m BoolOptionOption) MapRune(f BoolOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m BoolOptionOption) MapFloat32(f BoolOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m BoolOptionOption) MapFloat64(f BoolOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m BoolOptionOption) MapComplex64(f BoolOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m BoolOptionOption) MapComplex128(f BoolOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m BoolOptionOption) MapAny(f BoolOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m BoolOptionOption) MapBoolOption(f BoolOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m BoolOptionOption) MapStringOption(f BoolOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m BoolOptionOption) MapIntOption(f BoolOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m BoolOptionOption) MapInt8Option(f BoolOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m BoolOptionOption) MapInt16Option(f BoolOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m BoolOptionOption) MapInt32Option(f BoolOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m BoolOptionOption) MapInt64Option(f BoolOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m BoolOptionOption) MapUintOption(f BoolOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m BoolOptionOption) MapUint8Option(f BoolOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m BoolOptionOption) MapUint16Option(f BoolOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m BoolOptionOption) MapUint32Option(f BoolOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m BoolOptionOption) MapUint64Option(f BoolOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m BoolOptionOption) MapUintptrOption(f BoolOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m BoolOptionOption) MapByteOption(f BoolOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m BoolOptionOption) MapRuneOption(f BoolOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m BoolOptionOption) MapFloat32Option(f BoolOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m BoolOptionOption) MapFloat64Option(f BoolOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m BoolOptionOption) MapComplex64Option(f BoolOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m BoolOptionOption) MapComplex128Option(f BoolOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m BoolOptionOption) MapAnyOption(f BoolOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m BoolOptionOption) MapBoolArray(f BoolOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m BoolOptionOption) MapStringArray(f BoolOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m BoolOptionOption) MapIntArray(f BoolOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m BoolOptionOption) MapInt8Array(f BoolOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m BoolOptionOption) MapInt16Array(f BoolOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m BoolOptionOption) MapInt32Array(f BoolOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m BoolOptionOption) MapInt64Array(f BoolOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m BoolOptionOption) MapUintArray(f BoolOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m BoolOptionOption) MapUint8Array(f BoolOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m BoolOptionOption) MapUint16Array(f BoolOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m BoolOptionOption) MapUint32Array(f BoolOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m BoolOptionOption) MapUint64Array(f BoolOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m BoolOptionOption) MapUintptrArray(f BoolOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m BoolOptionOption) MapByteArray(f BoolOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m BoolOptionOption) MapRuneArray(f BoolOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m BoolOptionOption) MapFloat32Array(f BoolOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m BoolOptionOption) MapFloat64Array(f BoolOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m BoolOptionOption) MapComplex64Array(f BoolOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m BoolOptionOption) MapComplex128Array(f BoolOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m BoolOptionOption) MapAnyArray(f BoolOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m BoolOptionOption) MapBoolList(f BoolOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m BoolOptionOption) MapStringList(f BoolOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m BoolOptionOption) MapIntList(f BoolOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m BoolOptionOption) MapInt8List(f BoolOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m BoolOptionOption) MapInt16List(f BoolOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m BoolOptionOption) MapInt32List(f BoolOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m BoolOptionOption) MapInt64List(f BoolOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m BoolOptionOption) MapUintList(f BoolOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m BoolOptionOption) MapUint8List(f BoolOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m BoolOptionOption) MapUint16List(f BoolOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m BoolOptionOption) MapUint32List(f BoolOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m BoolOptionOption) MapUint64List(f BoolOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m BoolOptionOption) MapUintptrList(f BoolOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m BoolOptionOption) MapByteList(f BoolOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m BoolOptionOption) MapRuneList(f BoolOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m BoolOptionOption) MapFloat32List(f BoolOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m BoolOptionOption) MapFloat64List(f BoolOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m BoolOptionOption) MapComplex64List(f BoolOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m BoolOptionOption) MapComplex128List(f BoolOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m BoolOptionOption) MapAnyList(f BoolOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m StringOptionOption) MapBool(f StringOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m StringOptionOption) MapString(f StringOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m StringOptionOption) MapInt(f StringOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m StringOptionOption) MapInt8(f StringOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m StringOptionOption) MapInt16(f StringOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m StringOptionOption) MapInt32(f StringOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m StringOptionOption) MapInt64(f StringOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m StringOptionOption) MapUint(f StringOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m StringOptionOption) MapUint8(f StringOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m StringOptionOption) MapUint16(f StringOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m StringOptionOption) MapUint32(f StringOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m StringOptionOption) MapUint64(f StringOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m StringOptionOption) MapUintptr(f StringOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m StringOptionOption) MapByte(f StringOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m StringOptionOption) MapRune(f StringOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m StringOptionOption) MapFloat32(f StringOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m StringOptionOption) MapFloat64(f StringOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m StringOptionOption) MapComplex64(f StringOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m StringOptionOption) MapComplex128(f StringOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m StringOptionOption) MapAny(f StringOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m StringOptionOption) MapBoolOption(f StringOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m StringOptionOption) MapStringOption(f StringOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m StringOptionOption) MapIntOption(f StringOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m StringOptionOption) MapInt8Option(f StringOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m StringOptionOption) MapInt16Option(f StringOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m StringOptionOption) MapInt32Option(f StringOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m StringOptionOption) MapInt64Option(f StringOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m StringOptionOption) MapUintOption(f StringOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m StringOptionOption) MapUint8Option(f StringOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m StringOptionOption) MapUint16Option(f StringOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m StringOptionOption) MapUint32Option(f StringOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m StringOptionOption) MapUint64Option(f StringOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m StringOptionOption) MapUintptrOption(f StringOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m StringOptionOption) MapByteOption(f StringOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m StringOptionOption) MapRuneOption(f StringOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m StringOptionOption) MapFloat32Option(f StringOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m StringOptionOption) MapFloat64Option(f StringOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m StringOptionOption) MapComplex64Option(f StringOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m StringOptionOption) MapComplex128Option(f StringOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m StringOptionOption) MapAnyOption(f StringOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m StringOptionOption) MapBoolArray(f StringOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m StringOptionOption) MapStringArray(f StringOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m StringOptionOption) MapIntArray(f StringOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m StringOptionOption) MapInt8Array(f StringOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m StringOptionOption) MapInt16Array(f StringOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m StringOptionOption) MapInt32Array(f StringOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m StringOptionOption) MapInt64Array(f StringOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m StringOptionOption) MapUintArray(f StringOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m StringOptionOption) MapUint8Array(f StringOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m StringOptionOption) MapUint16Array(f StringOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m StringOptionOption) MapUint32Array(f StringOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m StringOptionOption) MapUint64Array(f StringOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m StringOptionOption) MapUintptrArray(f StringOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m StringOptionOption) MapByteArray(f StringOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m StringOptionOption) MapRuneArray(f StringOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m StringOptionOption) MapFloat32Array(f StringOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m StringOptionOption) MapFloat64Array(f StringOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m StringOptionOption) MapComplex64Array(f StringOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m StringOptionOption) MapComplex128Array(f StringOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m StringOptionOption) MapAnyArray(f StringOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m StringOptionOption) MapBoolList(f StringOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m StringOptionOption) MapStringList(f StringOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m StringOptionOption) MapIntList(f StringOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m StringOptionOption) MapInt8List(f StringOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m StringOptionOption) MapInt16List(f StringOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m StringOptionOption) MapInt32List(f StringOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m StringOptionOption) MapInt64List(f StringOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m StringOptionOption) MapUintList(f StringOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m StringOptionOption) MapUint8List(f StringOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m StringOptionOption) MapUint16List(f StringOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m StringOptionOption) MapUint32List(f StringOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m StringOptionOption) MapUint64List(f StringOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m StringOptionOption) MapUintptrList(f StringOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m StringOptionOption) MapByteList(f StringOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m StringOptionOption) MapRuneList(f StringOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m StringOptionOption) MapFloat32List(f StringOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m StringOptionOption) MapFloat64List(f StringOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m StringOptionOption) MapComplex64List(f StringOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m StringOptionOption) MapComplex128List(f StringOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m StringOptionOption) MapAnyList(f StringOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m IntOptionOption) MapBool(f IntOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m IntOptionOption) MapString(f IntOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m IntOptionOption) MapInt(f IntOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m IntOptionOption) MapInt8(f IntOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m IntOptionOption) MapInt16(f IntOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m IntOptionOption) MapInt32(f IntOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m IntOptionOption) MapInt64(f IntOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m IntOptionOption) MapUint(f IntOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m IntOptionOption) MapUint8(f IntOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m IntOptionOption) MapUint16(f IntOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m IntOptionOption) MapUint32(f IntOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m IntOptionOption) MapUint64(f IntOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m IntOptionOption) MapUintptr(f IntOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m IntOptionOption) MapByte(f IntOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m IntOptionOption) MapRune(f IntOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m IntOptionOption) MapFloat32(f IntOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m IntOptionOption) MapFloat64(f IntOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m IntOptionOption) MapComplex64(f IntOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m IntOptionOption) MapComplex128(f IntOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m IntOptionOption) MapAny(f IntOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m IntOptionOption) MapBoolOption(f IntOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m IntOptionOption) MapStringOption(f IntOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m IntOptionOption) MapIntOption(f IntOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m IntOptionOption) MapInt8Option(f IntOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m IntOptionOption) MapInt16Option(f IntOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m IntOptionOption) MapInt32Option(f IntOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m IntOptionOption) MapInt64Option(f IntOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m IntOptionOption) MapUintOption(f IntOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m IntOptionOption) MapUint8Option(f IntOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m IntOptionOption) MapUint16Option(f IntOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m IntOptionOption) MapUint32Option(f IntOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m IntOptionOption) MapUint64Option(f IntOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m IntOptionOption) MapUintptrOption(f IntOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m IntOptionOption) MapByteOption(f IntOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m IntOptionOption) MapRuneOption(f IntOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m IntOptionOption) MapFloat32Option(f IntOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m IntOptionOption) MapFloat64Option(f IntOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m IntOptionOption) MapComplex64Option(f IntOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m IntOptionOption) MapComplex128Option(f IntOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m IntOptionOption) MapAnyOption(f IntOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m IntOptionOption) MapBoolArray(f IntOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m IntOptionOption) MapStringArray(f IntOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m IntOptionOption) MapIntArray(f IntOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m IntOptionOption) MapInt8Array(f IntOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m IntOptionOption) MapInt16Array(f IntOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m IntOptionOption) MapInt32Array(f IntOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m IntOptionOption) MapInt64Array(f IntOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m IntOptionOption) MapUintArray(f IntOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m IntOptionOption) MapUint8Array(f IntOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m IntOptionOption) MapUint16Array(f IntOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m IntOptionOption) MapUint32Array(f IntOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m IntOptionOption) MapUint64Array(f IntOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m IntOptionOption) MapUintptrArray(f IntOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m IntOptionOption) MapByteArray(f IntOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m IntOptionOption) MapRuneArray(f IntOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m IntOptionOption) MapFloat32Array(f IntOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m IntOptionOption) MapFloat64Array(f IntOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m IntOptionOption) MapComplex64Array(f IntOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m IntOptionOption) MapComplex128Array(f IntOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m IntOptionOption) MapAnyArray(f IntOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m IntOptionOption) MapBoolList(f IntOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m IntOptionOption) MapStringList(f IntOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m IntOptionOption) MapIntList(f IntOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m IntOptionOption) MapInt8List(f IntOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m IntOptionOption) MapInt16List(f IntOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m IntOptionOption) MapInt32List(f IntOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m IntOptionOption) MapInt64List(f IntOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m IntOptionOption) MapUintList(f IntOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m IntOptionOption) MapUint8List(f IntOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m IntOptionOption) MapUint16List(f IntOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m IntOptionOption) MapUint32List(f IntOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m IntOptionOption) MapUint64List(f IntOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m IntOptionOption) MapUintptrList(f IntOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m IntOptionOption) MapByteList(f IntOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m IntOptionOption) MapRuneList(f IntOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m IntOptionOption) MapFloat32List(f IntOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m IntOptionOption) MapFloat64List(f IntOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m IntOptionOption) MapComplex64List(f IntOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m IntOptionOption) MapComplex128List(f IntOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m IntOptionOption) MapAnyList(f IntOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int8OptionOption) MapBool(f Int8OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int8OptionOption) MapString(f Int8OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int8OptionOption) MapInt(f Int8OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int8OptionOption) MapInt8(f Int8OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int8OptionOption) MapInt16(f Int8OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int8OptionOption) MapInt32(f Int8OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int8OptionOption) MapInt64(f Int8OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int8OptionOption) MapUint(f Int8OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int8OptionOption) MapUint8(f Int8OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int8OptionOption) MapUint16(f Int8OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int8OptionOption) MapUint32(f Int8OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int8OptionOption) MapUint64(f Int8OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int8OptionOption) MapUintptr(f Int8OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int8OptionOption) MapByte(f Int8OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int8OptionOption) MapRune(f Int8OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int8OptionOption) MapFloat32(f Int8OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int8OptionOption) MapFloat64(f Int8OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int8OptionOption) MapComplex64(f Int8OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int8OptionOption) MapComplex128(f Int8OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int8OptionOption) MapAny(f Int8OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int8OptionOption) MapBoolOption(f Int8OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int8OptionOption) MapStringOption(f Int8OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int8OptionOption) MapIntOption(f Int8OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int8OptionOption) MapInt8Option(f Int8OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int8OptionOption) MapInt16Option(f Int8OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int8OptionOption) MapInt32Option(f Int8OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int8OptionOption) MapInt64Option(f Int8OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int8OptionOption) MapUintOption(f Int8OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int8OptionOption) MapUint8Option(f Int8OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int8OptionOption) MapUint16Option(f Int8OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int8OptionOption) MapUint32Option(f Int8OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int8OptionOption) MapUint64Option(f Int8OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int8OptionOption) MapUintptrOption(f Int8OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int8OptionOption) MapByteOption(f Int8OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int8OptionOption) MapRuneOption(f Int8OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int8OptionOption) MapFloat32Option(f Int8OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int8OptionOption) MapFloat64Option(f Int8OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int8OptionOption) MapComplex64Option(f Int8OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int8OptionOption) MapComplex128Option(f Int8OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int8OptionOption) MapAnyOption(f Int8OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int8OptionOption) MapBoolArray(f Int8OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int8OptionOption) MapStringArray(f Int8OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int8OptionOption) MapIntArray(f Int8OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int8OptionOption) MapInt8Array(f Int8OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int8OptionOption) MapInt16Array(f Int8OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int8OptionOption) MapInt32Array(f Int8OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int8OptionOption) MapInt64Array(f Int8OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int8OptionOption) MapUintArray(f Int8OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int8OptionOption) MapUint8Array(f Int8OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int8OptionOption) MapUint16Array(f Int8OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int8OptionOption) MapUint32Array(f Int8OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int8OptionOption) MapUint64Array(f Int8OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int8OptionOption) MapUintptrArray(f Int8OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int8OptionOption) MapByteArray(f Int8OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int8OptionOption) MapRuneArray(f Int8OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int8OptionOption) MapFloat32Array(f Int8OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int8OptionOption) MapFloat64Array(f Int8OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int8OptionOption) MapComplex64Array(f Int8OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int8OptionOption) MapComplex128Array(f Int8OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int8OptionOption) MapAnyArray(f Int8OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int8OptionOption) MapBoolList(f Int8OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int8OptionOption) MapStringList(f Int8OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int8OptionOption) MapIntList(f Int8OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int8OptionOption) MapInt8List(f Int8OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int8OptionOption) MapInt16List(f Int8OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int8OptionOption) MapInt32List(f Int8OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int8OptionOption) MapInt64List(f Int8OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int8OptionOption) MapUintList(f Int8OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int8OptionOption) MapUint8List(f Int8OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int8OptionOption) MapUint16List(f Int8OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int8OptionOption) MapUint32List(f Int8OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int8OptionOption) MapUint64List(f Int8OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int8OptionOption) MapUintptrList(f Int8OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int8OptionOption) MapByteList(f Int8OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int8OptionOption) MapRuneList(f Int8OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int8OptionOption) MapFloat32List(f Int8OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int8OptionOption) MapFloat64List(f Int8OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int8OptionOption) MapComplex64List(f Int8OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int8OptionOption) MapComplex128List(f Int8OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int8OptionOption) MapAnyList(f Int8OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int16OptionOption) MapBool(f Int16OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int16OptionOption) MapString(f Int16OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int16OptionOption) MapInt(f Int16OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int16OptionOption) MapInt8(f Int16OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int16OptionOption) MapInt16(f Int16OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int16OptionOption) MapInt32(f Int16OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int16OptionOption) MapInt64(f Int16OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int16OptionOption) MapUint(f Int16OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int16OptionOption) MapUint8(f Int16OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int16OptionOption) MapUint16(f Int16OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int16OptionOption) MapUint32(f Int16OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int16OptionOption) MapUint64(f Int16OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int16OptionOption) MapUintptr(f Int16OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int16OptionOption) MapByte(f Int16OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int16OptionOption) MapRune(f Int16OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int16OptionOption) MapFloat32(f Int16OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int16OptionOption) MapFloat64(f Int16OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int16OptionOption) MapComplex64(f Int16OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int16OptionOption) MapComplex128(f Int16OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int16OptionOption) MapAny(f Int16OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int16OptionOption) MapBoolOption(f Int16OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int16OptionOption) MapStringOption(f Int16OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int16OptionOption) MapIntOption(f Int16OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int16OptionOption) MapInt8Option(f Int16OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int16OptionOption) MapInt16Option(f Int16OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int16OptionOption) MapInt32Option(f Int16OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int16OptionOption) MapInt64Option(f Int16OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int16OptionOption) MapUintOption(f Int16OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int16OptionOption) MapUint8Option(f Int16OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int16OptionOption) MapUint16Option(f Int16OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int16OptionOption) MapUint32Option(f Int16OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int16OptionOption) MapUint64Option(f Int16OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int16OptionOption) MapUintptrOption(f Int16OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int16OptionOption) MapByteOption(f Int16OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int16OptionOption) MapRuneOption(f Int16OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int16OptionOption) MapFloat32Option(f Int16OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int16OptionOption) MapFloat64Option(f Int16OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int16OptionOption) MapComplex64Option(f Int16OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int16OptionOption) MapComplex128Option(f Int16OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int16OptionOption) MapAnyOption(f Int16OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int16OptionOption) MapBoolArray(f Int16OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int16OptionOption) MapStringArray(f Int16OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int16OptionOption) MapIntArray(f Int16OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int16OptionOption) MapInt8Array(f Int16OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int16OptionOption) MapInt16Array(f Int16OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int16OptionOption) MapInt32Array(f Int16OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int16OptionOption) MapInt64Array(f Int16OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int16OptionOption) MapUintArray(f Int16OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int16OptionOption) MapUint8Array(f Int16OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int16OptionOption) MapUint16Array(f Int16OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int16OptionOption) MapUint32Array(f Int16OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int16OptionOption) MapUint64Array(f Int16OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int16OptionOption) MapUintptrArray(f Int16OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int16OptionOption) MapByteArray(f Int16OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int16OptionOption) MapRuneArray(f Int16OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int16OptionOption) MapFloat32Array(f Int16OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int16OptionOption) MapFloat64Array(f Int16OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int16OptionOption) MapComplex64Array(f Int16OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int16OptionOption) MapComplex128Array(f Int16OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int16OptionOption) MapAnyArray(f Int16OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int16OptionOption) MapBoolList(f Int16OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int16OptionOption) MapStringList(f Int16OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int16OptionOption) MapIntList(f Int16OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int16OptionOption) MapInt8List(f Int16OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int16OptionOption) MapInt16List(f Int16OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int16OptionOption) MapInt32List(f Int16OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int16OptionOption) MapInt64List(f Int16OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int16OptionOption) MapUintList(f Int16OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int16OptionOption) MapUint8List(f Int16OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int16OptionOption) MapUint16List(f Int16OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int16OptionOption) MapUint32List(f Int16OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int16OptionOption) MapUint64List(f Int16OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int16OptionOption) MapUintptrList(f Int16OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int16OptionOption) MapByteList(f Int16OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int16OptionOption) MapRuneList(f Int16OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int16OptionOption) MapFloat32List(f Int16OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int16OptionOption) MapFloat64List(f Int16OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int16OptionOption) MapComplex64List(f Int16OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int16OptionOption) MapComplex128List(f Int16OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int16OptionOption) MapAnyList(f Int16OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int32OptionOption) MapBool(f Int32OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int32OptionOption) MapString(f Int32OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int32OptionOption) MapInt(f Int32OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int32OptionOption) MapInt8(f Int32OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int32OptionOption) MapInt16(f Int32OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int32OptionOption) MapInt32(f Int32OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int32OptionOption) MapInt64(f Int32OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int32OptionOption) MapUint(f Int32OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int32OptionOption) MapUint8(f Int32OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int32OptionOption) MapUint16(f Int32OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int32OptionOption) MapUint32(f Int32OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int32OptionOption) MapUint64(f Int32OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int32OptionOption) MapUintptr(f Int32OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int32OptionOption) MapByte(f Int32OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int32OptionOption) MapRune(f Int32OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int32OptionOption) MapFloat32(f Int32OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int32OptionOption) MapFloat64(f Int32OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int32OptionOption) MapComplex64(f Int32OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int32OptionOption) MapComplex128(f Int32OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int32OptionOption) MapAny(f Int32OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int32OptionOption) MapBoolOption(f Int32OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int32OptionOption) MapStringOption(f Int32OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int32OptionOption) MapIntOption(f Int32OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int32OptionOption) MapInt8Option(f Int32OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int32OptionOption) MapInt16Option(f Int32OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int32OptionOption) MapInt32Option(f Int32OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int32OptionOption) MapInt64Option(f Int32OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int32OptionOption) MapUintOption(f Int32OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int32OptionOption) MapUint8Option(f Int32OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int32OptionOption) MapUint16Option(f Int32OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int32OptionOption) MapUint32Option(f Int32OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int32OptionOption) MapUint64Option(f Int32OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int32OptionOption) MapUintptrOption(f Int32OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int32OptionOption) MapByteOption(f Int32OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int32OptionOption) MapRuneOption(f Int32OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int32OptionOption) MapFloat32Option(f Int32OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int32OptionOption) MapFloat64Option(f Int32OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int32OptionOption) MapComplex64Option(f Int32OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int32OptionOption) MapComplex128Option(f Int32OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int32OptionOption) MapAnyOption(f Int32OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int32OptionOption) MapBoolArray(f Int32OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int32OptionOption) MapStringArray(f Int32OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int32OptionOption) MapIntArray(f Int32OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int32OptionOption) MapInt8Array(f Int32OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int32OptionOption) MapInt16Array(f Int32OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int32OptionOption) MapInt32Array(f Int32OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int32OptionOption) MapInt64Array(f Int32OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int32OptionOption) MapUintArray(f Int32OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int32OptionOption) MapUint8Array(f Int32OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int32OptionOption) MapUint16Array(f Int32OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int32OptionOption) MapUint32Array(f Int32OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int32OptionOption) MapUint64Array(f Int32OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int32OptionOption) MapUintptrArray(f Int32OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int32OptionOption) MapByteArray(f Int32OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int32OptionOption) MapRuneArray(f Int32OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int32OptionOption) MapFloat32Array(f Int32OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int32OptionOption) MapFloat64Array(f Int32OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int32OptionOption) MapComplex64Array(f Int32OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int32OptionOption) MapComplex128Array(f Int32OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int32OptionOption) MapAnyArray(f Int32OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int32OptionOption) MapBoolList(f Int32OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int32OptionOption) MapStringList(f Int32OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int32OptionOption) MapIntList(f Int32OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int32OptionOption) MapInt8List(f Int32OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int32OptionOption) MapInt16List(f Int32OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int32OptionOption) MapInt32List(f Int32OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int32OptionOption) MapInt64List(f Int32OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int32OptionOption) MapUintList(f Int32OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int32OptionOption) MapUint8List(f Int32OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int32OptionOption) MapUint16List(f Int32OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int32OptionOption) MapUint32List(f Int32OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int32OptionOption) MapUint64List(f Int32OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int32OptionOption) MapUintptrList(f Int32OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int32OptionOption) MapByteList(f Int32OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int32OptionOption) MapRuneList(f Int32OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int32OptionOption) MapFloat32List(f Int32OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int32OptionOption) MapFloat64List(f Int32OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int32OptionOption) MapComplex64List(f Int32OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int32OptionOption) MapComplex128List(f Int32OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int32OptionOption) MapAnyList(f Int32OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Int64OptionOption) MapBool(f Int64OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Int64OptionOption) MapString(f Int64OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Int64OptionOption) MapInt(f Int64OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Int64OptionOption) MapInt8(f Int64OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Int64OptionOption) MapInt16(f Int64OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Int64OptionOption) MapInt32(f Int64OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Int64OptionOption) MapInt64(f Int64OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Int64OptionOption) MapUint(f Int64OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Int64OptionOption) MapUint8(f Int64OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Int64OptionOption) MapUint16(f Int64OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Int64OptionOption) MapUint32(f Int64OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Int64OptionOption) MapUint64(f Int64OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Int64OptionOption) MapUintptr(f Int64OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Int64OptionOption) MapByte(f Int64OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Int64OptionOption) MapRune(f Int64OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Int64OptionOption) MapFloat32(f Int64OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Int64OptionOption) MapFloat64(f Int64OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Int64OptionOption) MapComplex64(f Int64OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Int64OptionOption) MapComplex128(f Int64OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Int64OptionOption) MapAny(f Int64OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Int64OptionOption) MapBoolOption(f Int64OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Int64OptionOption) MapStringOption(f Int64OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Int64OptionOption) MapIntOption(f Int64OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Int64OptionOption) MapInt8Option(f Int64OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Int64OptionOption) MapInt16Option(f Int64OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Int64OptionOption) MapInt32Option(f Int64OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Int64OptionOption) MapInt64Option(f Int64OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Int64OptionOption) MapUintOption(f Int64OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Int64OptionOption) MapUint8Option(f Int64OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Int64OptionOption) MapUint16Option(f Int64OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Int64OptionOption) MapUint32Option(f Int64OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Int64OptionOption) MapUint64Option(f Int64OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Int64OptionOption) MapUintptrOption(f Int64OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Int64OptionOption) MapByteOption(f Int64OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Int64OptionOption) MapRuneOption(f Int64OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Int64OptionOption) MapFloat32Option(f Int64OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Int64OptionOption) MapFloat64Option(f Int64OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Int64OptionOption) MapComplex64Option(f Int64OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Int64OptionOption) MapComplex128Option(f Int64OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Int64OptionOption) MapAnyOption(f Int64OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Int64OptionOption) MapBoolArray(f Int64OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Int64OptionOption) MapStringArray(f Int64OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Int64OptionOption) MapIntArray(f Int64OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Int64OptionOption) MapInt8Array(f Int64OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Int64OptionOption) MapInt16Array(f Int64OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Int64OptionOption) MapInt32Array(f Int64OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Int64OptionOption) MapInt64Array(f Int64OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Int64OptionOption) MapUintArray(f Int64OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Int64OptionOption) MapUint8Array(f Int64OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Int64OptionOption) MapUint16Array(f Int64OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Int64OptionOption) MapUint32Array(f Int64OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Int64OptionOption) MapUint64Array(f Int64OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Int64OptionOption) MapUintptrArray(f Int64OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Int64OptionOption) MapByteArray(f Int64OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Int64OptionOption) MapRuneArray(f Int64OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Int64OptionOption) MapFloat32Array(f Int64OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Int64OptionOption) MapFloat64Array(f Int64OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Int64OptionOption) MapComplex64Array(f Int64OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Int64OptionOption) MapComplex128Array(f Int64OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Int64OptionOption) MapAnyArray(f Int64OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Int64OptionOption) MapBoolList(f Int64OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Int64OptionOption) MapStringList(f Int64OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Int64OptionOption) MapIntList(f Int64OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Int64OptionOption) MapInt8List(f Int64OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Int64OptionOption) MapInt16List(f Int64OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Int64OptionOption) MapInt32List(f Int64OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Int64OptionOption) MapInt64List(f Int64OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Int64OptionOption) MapUintList(f Int64OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Int64OptionOption) MapUint8List(f Int64OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Int64OptionOption) MapUint16List(f Int64OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Int64OptionOption) MapUint32List(f Int64OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Int64OptionOption) MapUint64List(f Int64OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Int64OptionOption) MapUintptrList(f Int64OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Int64OptionOption) MapByteList(f Int64OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Int64OptionOption) MapRuneList(f Int64OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Int64OptionOption) MapFloat32List(f Int64OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Int64OptionOption) MapFloat64List(f Int64OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Int64OptionOption) MapComplex64List(f Int64OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Int64OptionOption) MapComplex128List(f Int64OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Int64OptionOption) MapAnyList(f Int64OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintOptionOption) MapBool(f UintOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintOptionOption) MapString(f UintOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintOptionOption) MapInt(f UintOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintOptionOption) MapInt8(f UintOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintOptionOption) MapInt16(f UintOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintOptionOption) MapInt32(f UintOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintOptionOption) MapInt64(f UintOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintOptionOption) MapUint(f UintOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintOptionOption) MapUint8(f UintOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintOptionOption) MapUint16(f UintOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintOptionOption) MapUint32(f UintOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintOptionOption) MapUint64(f UintOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintOptionOption) MapUintptr(f UintOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintOptionOption) MapByte(f UintOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintOptionOption) MapRune(f UintOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintOptionOption) MapFloat32(f UintOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintOptionOption) MapFloat64(f UintOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintOptionOption) MapComplex64(f UintOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintOptionOption) MapComplex128(f UintOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintOptionOption) MapAny(f UintOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintOptionOption) MapBoolOption(f UintOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintOptionOption) MapStringOption(f UintOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintOptionOption) MapIntOption(f UintOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintOptionOption) MapInt8Option(f UintOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintOptionOption) MapInt16Option(f UintOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintOptionOption) MapInt32Option(f UintOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintOptionOption) MapInt64Option(f UintOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintOptionOption) MapUintOption(f UintOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintOptionOption) MapUint8Option(f UintOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintOptionOption) MapUint16Option(f UintOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintOptionOption) MapUint32Option(f UintOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintOptionOption) MapUint64Option(f UintOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintOptionOption) MapUintptrOption(f UintOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintOptionOption) MapByteOption(f UintOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintOptionOption) MapRuneOption(f UintOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintOptionOption) MapFloat32Option(f UintOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintOptionOption) MapFloat64Option(f UintOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintOptionOption) MapComplex64Option(f UintOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintOptionOption) MapComplex128Option(f UintOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintOptionOption) MapAnyOption(f UintOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintOptionOption) MapBoolArray(f UintOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintOptionOption) MapStringArray(f UintOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintOptionOption) MapIntArray(f UintOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintOptionOption) MapInt8Array(f UintOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintOptionOption) MapInt16Array(f UintOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintOptionOption) MapInt32Array(f UintOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintOptionOption) MapInt64Array(f UintOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintOptionOption) MapUintArray(f UintOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintOptionOption) MapUint8Array(f UintOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintOptionOption) MapUint16Array(f UintOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintOptionOption) MapUint32Array(f UintOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintOptionOption) MapUint64Array(f UintOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintOptionOption) MapUintptrArray(f UintOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintOptionOption) MapByteArray(f UintOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintOptionOption) MapRuneArray(f UintOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintOptionOption) MapFloat32Array(f UintOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintOptionOption) MapFloat64Array(f UintOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintOptionOption) MapComplex64Array(f UintOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintOptionOption) MapComplex128Array(f UintOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintOptionOption) MapAnyArray(f UintOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintOptionOption) MapBoolList(f UintOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintOptionOption) MapStringList(f UintOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintOptionOption) MapIntList(f UintOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintOptionOption) MapInt8List(f UintOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintOptionOption) MapInt16List(f UintOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintOptionOption) MapInt32List(f UintOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintOptionOption) MapInt64List(f UintOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintOptionOption) MapUintList(f UintOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintOptionOption) MapUint8List(f UintOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintOptionOption) MapUint16List(f UintOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintOptionOption) MapUint32List(f UintOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintOptionOption) MapUint64List(f UintOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintOptionOption) MapUintptrList(f UintOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintOptionOption) MapByteList(f UintOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintOptionOption) MapRuneList(f UintOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintOptionOption) MapFloat32List(f UintOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintOptionOption) MapFloat64List(f UintOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintOptionOption) MapComplex64List(f UintOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintOptionOption) MapComplex128List(f UintOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintOptionOption) MapAnyList(f UintOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint8OptionOption) MapBool(f Uint8OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint8OptionOption) MapString(f Uint8OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint8OptionOption) MapInt(f Uint8OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint8OptionOption) MapInt8(f Uint8OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint8OptionOption) MapInt16(f Uint8OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint8OptionOption) MapInt32(f Uint8OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint8OptionOption) MapInt64(f Uint8OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint8OptionOption) MapUint(f Uint8OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint8OptionOption) MapUint8(f Uint8OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint8OptionOption) MapUint16(f Uint8OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint8OptionOption) MapUint32(f Uint8OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint8OptionOption) MapUint64(f Uint8OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint8OptionOption) MapUintptr(f Uint8OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint8OptionOption) MapByte(f Uint8OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint8OptionOption) MapRune(f Uint8OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint8OptionOption) MapFloat32(f Uint8OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint8OptionOption) MapFloat64(f Uint8OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint8OptionOption) MapComplex64(f Uint8OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint8OptionOption) MapComplex128(f Uint8OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint8OptionOption) MapAny(f Uint8OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint8OptionOption) MapBoolOption(f Uint8OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint8OptionOption) MapStringOption(f Uint8OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint8OptionOption) MapIntOption(f Uint8OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint8OptionOption) MapInt8Option(f Uint8OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint8OptionOption) MapInt16Option(f Uint8OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint8OptionOption) MapInt32Option(f Uint8OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint8OptionOption) MapInt64Option(f Uint8OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint8OptionOption) MapUintOption(f Uint8OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint8OptionOption) MapUint8Option(f Uint8OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint8OptionOption) MapUint16Option(f Uint8OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint8OptionOption) MapUint32Option(f Uint8OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint8OptionOption) MapUint64Option(f Uint8OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint8OptionOption) MapUintptrOption(f Uint8OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint8OptionOption) MapByteOption(f Uint8OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint8OptionOption) MapRuneOption(f Uint8OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint8OptionOption) MapFloat32Option(f Uint8OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint8OptionOption) MapFloat64Option(f Uint8OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint8OptionOption) MapComplex64Option(f Uint8OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint8OptionOption) MapComplex128Option(f Uint8OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint8OptionOption) MapAnyOption(f Uint8OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint8OptionOption) MapBoolArray(f Uint8OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint8OptionOption) MapStringArray(f Uint8OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint8OptionOption) MapIntArray(f Uint8OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint8OptionOption) MapInt8Array(f Uint8OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint8OptionOption) MapInt16Array(f Uint8OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint8OptionOption) MapInt32Array(f Uint8OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint8OptionOption) MapInt64Array(f Uint8OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint8OptionOption) MapUintArray(f Uint8OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint8OptionOption) MapUint8Array(f Uint8OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint8OptionOption) MapUint16Array(f Uint8OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint8OptionOption) MapUint32Array(f Uint8OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint8OptionOption) MapUint64Array(f Uint8OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint8OptionOption) MapUintptrArray(f Uint8OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint8OptionOption) MapByteArray(f Uint8OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint8OptionOption) MapRuneArray(f Uint8OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint8OptionOption) MapFloat32Array(f Uint8OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint8OptionOption) MapFloat64Array(f Uint8OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint8OptionOption) MapComplex64Array(f Uint8OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint8OptionOption) MapComplex128Array(f Uint8OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint8OptionOption) MapAnyArray(f Uint8OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint8OptionOption) MapBoolList(f Uint8OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint8OptionOption) MapStringList(f Uint8OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint8OptionOption) MapIntList(f Uint8OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint8OptionOption) MapInt8List(f Uint8OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint8OptionOption) MapInt16List(f Uint8OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint8OptionOption) MapInt32List(f Uint8OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint8OptionOption) MapInt64List(f Uint8OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint8OptionOption) MapUintList(f Uint8OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint8OptionOption) MapUint8List(f Uint8OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint8OptionOption) MapUint16List(f Uint8OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint8OptionOption) MapUint32List(f Uint8OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint8OptionOption) MapUint64List(f Uint8OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint8OptionOption) MapUintptrList(f Uint8OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint8OptionOption) MapByteList(f Uint8OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint8OptionOption) MapRuneList(f Uint8OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint8OptionOption) MapFloat32List(f Uint8OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint8OptionOption) MapFloat64List(f Uint8OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint8OptionOption) MapComplex64List(f Uint8OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint8OptionOption) MapComplex128List(f Uint8OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint8OptionOption) MapAnyList(f Uint8OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint16OptionOption) MapBool(f Uint16OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint16OptionOption) MapString(f Uint16OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint16OptionOption) MapInt(f Uint16OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint16OptionOption) MapInt8(f Uint16OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint16OptionOption) MapInt16(f Uint16OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint16OptionOption) MapInt32(f Uint16OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint16OptionOption) MapInt64(f Uint16OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint16OptionOption) MapUint(f Uint16OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint16OptionOption) MapUint8(f Uint16OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint16OptionOption) MapUint16(f Uint16OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint16OptionOption) MapUint32(f Uint16OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint16OptionOption) MapUint64(f Uint16OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint16OptionOption) MapUintptr(f Uint16OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint16OptionOption) MapByte(f Uint16OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint16OptionOption) MapRune(f Uint16OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint16OptionOption) MapFloat32(f Uint16OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint16OptionOption) MapFloat64(f Uint16OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint16OptionOption) MapComplex64(f Uint16OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint16OptionOption) MapComplex128(f Uint16OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint16OptionOption) MapAny(f Uint16OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint16OptionOption) MapBoolOption(f Uint16OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint16OptionOption) MapStringOption(f Uint16OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint16OptionOption) MapIntOption(f Uint16OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint16OptionOption) MapInt8Option(f Uint16OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint16OptionOption) MapInt16Option(f Uint16OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint16OptionOption) MapInt32Option(f Uint16OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint16OptionOption) MapInt64Option(f Uint16OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint16OptionOption) MapUintOption(f Uint16OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint16OptionOption) MapUint8Option(f Uint16OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint16OptionOption) MapUint16Option(f Uint16OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint16OptionOption) MapUint32Option(f Uint16OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint16OptionOption) MapUint64Option(f Uint16OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint16OptionOption) MapUintptrOption(f Uint16OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint16OptionOption) MapByteOption(f Uint16OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint16OptionOption) MapRuneOption(f Uint16OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint16OptionOption) MapFloat32Option(f Uint16OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint16OptionOption) MapFloat64Option(f Uint16OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint16OptionOption) MapComplex64Option(f Uint16OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint16OptionOption) MapComplex128Option(f Uint16OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint16OptionOption) MapAnyOption(f Uint16OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint16OptionOption) MapBoolArray(f Uint16OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint16OptionOption) MapStringArray(f Uint16OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint16OptionOption) MapIntArray(f Uint16OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint16OptionOption) MapInt8Array(f Uint16OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint16OptionOption) MapInt16Array(f Uint16OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint16OptionOption) MapInt32Array(f Uint16OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint16OptionOption) MapInt64Array(f Uint16OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint16OptionOption) MapUintArray(f Uint16OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint16OptionOption) MapUint8Array(f Uint16OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint16OptionOption) MapUint16Array(f Uint16OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint16OptionOption) MapUint32Array(f Uint16OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint16OptionOption) MapUint64Array(f Uint16OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint16OptionOption) MapUintptrArray(f Uint16OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint16OptionOption) MapByteArray(f Uint16OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint16OptionOption) MapRuneArray(f Uint16OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint16OptionOption) MapFloat32Array(f Uint16OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint16OptionOption) MapFloat64Array(f Uint16OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint16OptionOption) MapComplex64Array(f Uint16OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint16OptionOption) MapComplex128Array(f Uint16OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint16OptionOption) MapAnyArray(f Uint16OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint16OptionOption) MapBoolList(f Uint16OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint16OptionOption) MapStringList(f Uint16OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint16OptionOption) MapIntList(f Uint16OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint16OptionOption) MapInt8List(f Uint16OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint16OptionOption) MapInt16List(f Uint16OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint16OptionOption) MapInt32List(f Uint16OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint16OptionOption) MapInt64List(f Uint16OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint16OptionOption) MapUintList(f Uint16OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint16OptionOption) MapUint8List(f Uint16OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint16OptionOption) MapUint16List(f Uint16OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint16OptionOption) MapUint32List(f Uint16OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint16OptionOption) MapUint64List(f Uint16OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint16OptionOption) MapUintptrList(f Uint16OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint16OptionOption) MapByteList(f Uint16OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint16OptionOption) MapRuneList(f Uint16OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint16OptionOption) MapFloat32List(f Uint16OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint16OptionOption) MapFloat64List(f Uint16OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint16OptionOption) MapComplex64List(f Uint16OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint16OptionOption) MapComplex128List(f Uint16OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint16OptionOption) MapAnyList(f Uint16OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint32OptionOption) MapBool(f Uint32OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint32OptionOption) MapString(f Uint32OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint32OptionOption) MapInt(f Uint32OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint32OptionOption) MapInt8(f Uint32OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint32OptionOption) MapInt16(f Uint32OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint32OptionOption) MapInt32(f Uint32OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint32OptionOption) MapInt64(f Uint32OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint32OptionOption) MapUint(f Uint32OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint32OptionOption) MapUint8(f Uint32OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint32OptionOption) MapUint16(f Uint32OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint32OptionOption) MapUint32(f Uint32OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint32OptionOption) MapUint64(f Uint32OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint32OptionOption) MapUintptr(f Uint32OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint32OptionOption) MapByte(f Uint32OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint32OptionOption) MapRune(f Uint32OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint32OptionOption) MapFloat32(f Uint32OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint32OptionOption) MapFloat64(f Uint32OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint32OptionOption) MapComplex64(f Uint32OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint32OptionOption) MapComplex128(f Uint32OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint32OptionOption) MapAny(f Uint32OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint32OptionOption) MapBoolOption(f Uint32OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint32OptionOption) MapStringOption(f Uint32OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint32OptionOption) MapIntOption(f Uint32OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint32OptionOption) MapInt8Option(f Uint32OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint32OptionOption) MapInt16Option(f Uint32OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint32OptionOption) MapInt32Option(f Uint32OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint32OptionOption) MapInt64Option(f Uint32OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint32OptionOption) MapUintOption(f Uint32OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint32OptionOption) MapUint8Option(f Uint32OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint32OptionOption) MapUint16Option(f Uint32OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint32OptionOption) MapUint32Option(f Uint32OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint32OptionOption) MapUint64Option(f Uint32OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint32OptionOption) MapUintptrOption(f Uint32OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint32OptionOption) MapByteOption(f Uint32OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint32OptionOption) MapRuneOption(f Uint32OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint32OptionOption) MapFloat32Option(f Uint32OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint32OptionOption) MapFloat64Option(f Uint32OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint32OptionOption) MapComplex64Option(f Uint32OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint32OptionOption) MapComplex128Option(f Uint32OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint32OptionOption) MapAnyOption(f Uint32OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint32OptionOption) MapBoolArray(f Uint32OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint32OptionOption) MapStringArray(f Uint32OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint32OptionOption) MapIntArray(f Uint32OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint32OptionOption) MapInt8Array(f Uint32OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint32OptionOption) MapInt16Array(f Uint32OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint32OptionOption) MapInt32Array(f Uint32OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint32OptionOption) MapInt64Array(f Uint32OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint32OptionOption) MapUintArray(f Uint32OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint32OptionOption) MapUint8Array(f Uint32OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint32OptionOption) MapUint16Array(f Uint32OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint32OptionOption) MapUint32Array(f Uint32OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint32OptionOption) MapUint64Array(f Uint32OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint32OptionOption) MapUintptrArray(f Uint32OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint32OptionOption) MapByteArray(f Uint32OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint32OptionOption) MapRuneArray(f Uint32OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint32OptionOption) MapFloat32Array(f Uint32OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint32OptionOption) MapFloat64Array(f Uint32OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint32OptionOption) MapComplex64Array(f Uint32OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint32OptionOption) MapComplex128Array(f Uint32OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint32OptionOption) MapAnyArray(f Uint32OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint32OptionOption) MapBoolList(f Uint32OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint32OptionOption) MapStringList(f Uint32OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint32OptionOption) MapIntList(f Uint32OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint32OptionOption) MapInt8List(f Uint32OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint32OptionOption) MapInt16List(f Uint32OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint32OptionOption) MapInt32List(f Uint32OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint32OptionOption) MapInt64List(f Uint32OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint32OptionOption) MapUintList(f Uint32OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint32OptionOption) MapUint8List(f Uint32OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint32OptionOption) MapUint16List(f Uint32OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint32OptionOption) MapUint32List(f Uint32OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint32OptionOption) MapUint64List(f Uint32OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint32OptionOption) MapUintptrList(f Uint32OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint32OptionOption) MapByteList(f Uint32OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint32OptionOption) MapRuneList(f Uint32OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint32OptionOption) MapFloat32List(f Uint32OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint32OptionOption) MapFloat64List(f Uint32OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint32OptionOption) MapComplex64List(f Uint32OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint32OptionOption) MapComplex128List(f Uint32OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint32OptionOption) MapAnyList(f Uint32OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Uint64OptionOption) MapBool(f Uint64OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Uint64OptionOption) MapString(f Uint64OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Uint64OptionOption) MapInt(f Uint64OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Uint64OptionOption) MapInt8(f Uint64OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Uint64OptionOption) MapInt16(f Uint64OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Uint64OptionOption) MapInt32(f Uint64OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Uint64OptionOption) MapInt64(f Uint64OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Uint64OptionOption) MapUint(f Uint64OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Uint64OptionOption) MapUint8(f Uint64OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Uint64OptionOption) MapUint16(f Uint64OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Uint64OptionOption) MapUint32(f Uint64OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Uint64OptionOption) MapUint64(f Uint64OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Uint64OptionOption) MapUintptr(f Uint64OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Uint64OptionOption) MapByte(f Uint64OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Uint64OptionOption) MapRune(f Uint64OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Uint64OptionOption) MapFloat32(f Uint64OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Uint64OptionOption) MapFloat64(f Uint64OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Uint64OptionOption) MapComplex64(f Uint64OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Uint64OptionOption) MapComplex128(f Uint64OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Uint64OptionOption) MapAny(f Uint64OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Uint64OptionOption) MapBoolOption(f Uint64OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Uint64OptionOption) MapStringOption(f Uint64OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Uint64OptionOption) MapIntOption(f Uint64OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Uint64OptionOption) MapInt8Option(f Uint64OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Uint64OptionOption) MapInt16Option(f Uint64OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Uint64OptionOption) MapInt32Option(f Uint64OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Uint64OptionOption) MapInt64Option(f Uint64OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Uint64OptionOption) MapUintOption(f Uint64OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Uint64OptionOption) MapUint8Option(f Uint64OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Uint64OptionOption) MapUint16Option(f Uint64OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Uint64OptionOption) MapUint32Option(f Uint64OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Uint64OptionOption) MapUint64Option(f Uint64OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Uint64OptionOption) MapUintptrOption(f Uint64OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Uint64OptionOption) MapByteOption(f Uint64OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Uint64OptionOption) MapRuneOption(f Uint64OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Uint64OptionOption) MapFloat32Option(f Uint64OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Uint64OptionOption) MapFloat64Option(f Uint64OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Uint64OptionOption) MapComplex64Option(f Uint64OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Uint64OptionOption) MapComplex128Option(f Uint64OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Uint64OptionOption) MapAnyOption(f Uint64OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Uint64OptionOption) MapBoolArray(f Uint64OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Uint64OptionOption) MapStringArray(f Uint64OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Uint64OptionOption) MapIntArray(f Uint64OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Uint64OptionOption) MapInt8Array(f Uint64OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Uint64OptionOption) MapInt16Array(f Uint64OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Uint64OptionOption) MapInt32Array(f Uint64OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Uint64OptionOption) MapInt64Array(f Uint64OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Uint64OptionOption) MapUintArray(f Uint64OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Uint64OptionOption) MapUint8Array(f Uint64OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Uint64OptionOption) MapUint16Array(f Uint64OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Uint64OptionOption) MapUint32Array(f Uint64OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Uint64OptionOption) MapUint64Array(f Uint64OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Uint64OptionOption) MapUintptrArray(f Uint64OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Uint64OptionOption) MapByteArray(f Uint64OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Uint64OptionOption) MapRuneArray(f Uint64OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Uint64OptionOption) MapFloat32Array(f Uint64OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Uint64OptionOption) MapFloat64Array(f Uint64OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Uint64OptionOption) MapComplex64Array(f Uint64OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Uint64OptionOption) MapComplex128Array(f Uint64OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Uint64OptionOption) MapAnyArray(f Uint64OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Uint64OptionOption) MapBoolList(f Uint64OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Uint64OptionOption) MapStringList(f Uint64OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Uint64OptionOption) MapIntList(f Uint64OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Uint64OptionOption) MapInt8List(f Uint64OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Uint64OptionOption) MapInt16List(f Uint64OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Uint64OptionOption) MapInt32List(f Uint64OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Uint64OptionOption) MapInt64List(f Uint64OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Uint64OptionOption) MapUintList(f Uint64OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Uint64OptionOption) MapUint8List(f Uint64OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Uint64OptionOption) MapUint16List(f Uint64OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Uint64OptionOption) MapUint32List(f Uint64OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Uint64OptionOption) MapUint64List(f Uint64OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Uint64OptionOption) MapUintptrList(f Uint64OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Uint64OptionOption) MapByteList(f Uint64OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Uint64OptionOption) MapRuneList(f Uint64OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Uint64OptionOption) MapFloat32List(f Uint64OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Uint64OptionOption) MapFloat64List(f Uint64OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Uint64OptionOption) MapComplex64List(f Uint64OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Uint64OptionOption) MapComplex128List(f Uint64OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Uint64OptionOption) MapAnyList(f Uint64OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m UintptrOptionOption) MapBool(f UintptrOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m UintptrOptionOption) MapString(f UintptrOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m UintptrOptionOption) MapInt(f UintptrOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m UintptrOptionOption) MapInt8(f UintptrOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m UintptrOptionOption) MapInt16(f UintptrOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m UintptrOptionOption) MapInt32(f UintptrOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m UintptrOptionOption) MapInt64(f UintptrOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m UintptrOptionOption) MapUint(f UintptrOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m UintptrOptionOption) MapUint8(f UintptrOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m UintptrOptionOption) MapUint16(f UintptrOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m UintptrOptionOption) MapUint32(f UintptrOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m UintptrOptionOption) MapUint64(f UintptrOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m UintptrOptionOption) MapUintptr(f UintptrOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m UintptrOptionOption) MapByte(f UintptrOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m UintptrOptionOption) MapRune(f UintptrOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m UintptrOptionOption) MapFloat32(f UintptrOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m UintptrOptionOption) MapFloat64(f UintptrOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m UintptrOptionOption) MapComplex64(f UintptrOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m UintptrOptionOption) MapComplex128(f UintptrOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m UintptrOptionOption) MapAny(f UintptrOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m UintptrOptionOption) MapBoolOption(f UintptrOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m UintptrOptionOption) MapStringOption(f UintptrOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m UintptrOptionOption) MapIntOption(f UintptrOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m UintptrOptionOption) MapInt8Option(f UintptrOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m UintptrOptionOption) MapInt16Option(f UintptrOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m UintptrOptionOption) MapInt32Option(f UintptrOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m UintptrOptionOption) MapInt64Option(f UintptrOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m UintptrOptionOption) MapUintOption(f UintptrOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m UintptrOptionOption) MapUint8Option(f UintptrOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m UintptrOptionOption) MapUint16Option(f UintptrOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m UintptrOptionOption) MapUint32Option(f UintptrOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m UintptrOptionOption) MapUint64Option(f UintptrOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m UintptrOptionOption) MapUintptrOption(f UintptrOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m UintptrOptionOption) MapByteOption(f UintptrOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m UintptrOptionOption) MapRuneOption(f UintptrOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m UintptrOptionOption) MapFloat32Option(f UintptrOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m UintptrOptionOption) MapFloat64Option(f UintptrOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m UintptrOptionOption) MapComplex64Option(f UintptrOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m UintptrOptionOption) MapComplex128Option(f UintptrOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m UintptrOptionOption) MapAnyOption(f UintptrOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m UintptrOptionOption) MapBoolArray(f UintptrOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m UintptrOptionOption) MapStringArray(f UintptrOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m UintptrOptionOption) MapIntArray(f UintptrOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m UintptrOptionOption) MapInt8Array(f UintptrOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m UintptrOptionOption) MapInt16Array(f UintptrOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m UintptrOptionOption) MapInt32Array(f UintptrOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m UintptrOptionOption) MapInt64Array(f UintptrOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m UintptrOptionOption) MapUintArray(f UintptrOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m UintptrOptionOption) MapUint8Array(f UintptrOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m UintptrOptionOption) MapUint16Array(f UintptrOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m UintptrOptionOption) MapUint32Array(f UintptrOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m UintptrOptionOption) MapUint64Array(f UintptrOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m UintptrOptionOption) MapUintptrArray(f UintptrOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m UintptrOptionOption) MapByteArray(f UintptrOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m UintptrOptionOption) MapRuneArray(f UintptrOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m UintptrOptionOption) MapFloat32Array(f UintptrOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m UintptrOptionOption) MapFloat64Array(f UintptrOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m UintptrOptionOption) MapComplex64Array(f UintptrOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m UintptrOptionOption) MapComplex128Array(f UintptrOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m UintptrOptionOption) MapAnyArray(f UintptrOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m UintptrOptionOption) MapBoolList(f UintptrOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m UintptrOptionOption) MapStringList(f UintptrOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m UintptrOptionOption) MapIntList(f UintptrOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m UintptrOptionOption) MapInt8List(f UintptrOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m UintptrOptionOption) MapInt16List(f UintptrOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m UintptrOptionOption) MapInt32List(f UintptrOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m UintptrOptionOption) MapInt64List(f UintptrOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m UintptrOptionOption) MapUintList(f UintptrOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m UintptrOptionOption) MapUint8List(f UintptrOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m UintptrOptionOption) MapUint16List(f UintptrOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m UintptrOptionOption) MapUint32List(f UintptrOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m UintptrOptionOption) MapUint64List(f UintptrOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m UintptrOptionOption) MapUintptrList(f UintptrOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m UintptrOptionOption) MapByteList(f UintptrOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m UintptrOptionOption) MapRuneList(f UintptrOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m UintptrOptionOption) MapFloat32List(f UintptrOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m UintptrOptionOption) MapFloat64List(f UintptrOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m UintptrOptionOption) MapComplex64List(f UintptrOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m UintptrOptionOption) MapComplex128List(f UintptrOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m UintptrOptionOption) MapAnyList(f UintptrOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m ByteOptionOption) MapBool(f ByteOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m ByteOptionOption) MapString(f ByteOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m ByteOptionOption) MapInt(f ByteOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m ByteOptionOption) MapInt8(f ByteOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m ByteOptionOption) MapInt16(f ByteOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m ByteOptionOption) MapInt32(f ByteOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m ByteOptionOption) MapInt64(f ByteOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m ByteOptionOption) MapUint(f ByteOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m ByteOptionOption) MapUint8(f ByteOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m ByteOptionOption) MapUint16(f ByteOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m ByteOptionOption) MapUint32(f ByteOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m ByteOptionOption) MapUint64(f ByteOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m ByteOptionOption) MapUintptr(f ByteOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m ByteOptionOption) MapByte(f ByteOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m ByteOptionOption) MapRune(f ByteOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m ByteOptionOption) MapFloat32(f ByteOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m ByteOptionOption) MapFloat64(f ByteOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m ByteOptionOption) MapComplex64(f ByteOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m ByteOptionOption) MapComplex128(f ByteOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m ByteOptionOption) MapAny(f ByteOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m ByteOptionOption) MapBoolOption(f ByteOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m ByteOptionOption) MapStringOption(f ByteOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m ByteOptionOption) MapIntOption(f ByteOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m ByteOptionOption) MapInt8Option(f ByteOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m ByteOptionOption) MapInt16Option(f ByteOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m ByteOptionOption) MapInt32Option(f ByteOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m ByteOptionOption) MapInt64Option(f ByteOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m ByteOptionOption) MapUintOption(f ByteOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m ByteOptionOption) MapUint8Option(f ByteOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m ByteOptionOption) MapUint16Option(f ByteOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m ByteOptionOption) MapUint32Option(f ByteOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m ByteOptionOption) MapUint64Option(f ByteOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m ByteOptionOption) MapUintptrOption(f ByteOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m ByteOptionOption) MapByteOption(f ByteOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m ByteOptionOption) MapRuneOption(f ByteOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m ByteOptionOption) MapFloat32Option(f ByteOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m ByteOptionOption) MapFloat64Option(f ByteOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m ByteOptionOption) MapComplex64Option(f ByteOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m ByteOptionOption) MapComplex128Option(f ByteOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m ByteOptionOption) MapAnyOption(f ByteOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m ByteOptionOption) MapBoolArray(f ByteOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m ByteOptionOption) MapStringArray(f ByteOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m ByteOptionOption) MapIntArray(f ByteOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m ByteOptionOption) MapInt8Array(f ByteOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m ByteOptionOption) MapInt16Array(f ByteOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m ByteOptionOption) MapInt32Array(f ByteOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m ByteOptionOption) MapInt64Array(f ByteOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m ByteOptionOption) MapUintArray(f ByteOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m ByteOptionOption) MapUint8Array(f ByteOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m ByteOptionOption) MapUint16Array(f ByteOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m ByteOptionOption) MapUint32Array(f ByteOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m ByteOptionOption) MapUint64Array(f ByteOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m ByteOptionOption) MapUintptrArray(f ByteOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m ByteOptionOption) MapByteArray(f ByteOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m ByteOptionOption) MapRuneArray(f ByteOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m ByteOptionOption) MapFloat32Array(f ByteOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m ByteOptionOption) MapFloat64Array(f ByteOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m ByteOptionOption) MapComplex64Array(f ByteOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m ByteOptionOption) MapComplex128Array(f ByteOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m ByteOptionOption) MapAnyArray(f ByteOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m ByteOptionOption) MapBoolList(f ByteOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m ByteOptionOption) MapStringList(f ByteOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m ByteOptionOption) MapIntList(f ByteOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m ByteOptionOption) MapInt8List(f ByteOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m ByteOptionOption) MapInt16List(f ByteOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m ByteOptionOption) MapInt32List(f ByteOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m ByteOptionOption) MapInt64List(f ByteOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m ByteOptionOption) MapUintList(f ByteOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m ByteOptionOption) MapUint8List(f ByteOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m ByteOptionOption) MapUint16List(f ByteOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m ByteOptionOption) MapUint32List(f ByteOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m ByteOptionOption) MapUint64List(f ByteOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m ByteOptionOption) MapUintptrList(f ByteOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m ByteOptionOption) MapByteList(f ByteOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m ByteOptionOption) MapRuneList(f ByteOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m ByteOptionOption) MapFloat32List(f ByteOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m ByteOptionOption) MapFloat64List(f ByteOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m ByteOptionOption) MapComplex64List(f ByteOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m ByteOptionOption) MapComplex128List(f ByteOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m ByteOptionOption) MapAnyList(f ByteOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m RuneOptionOption) MapBool(f RuneOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m RuneOptionOption) MapString(f RuneOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m RuneOptionOption) MapInt(f RuneOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m RuneOptionOption) MapInt8(f RuneOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m RuneOptionOption) MapInt16(f RuneOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m RuneOptionOption) MapInt32(f RuneOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m RuneOptionOption) MapInt64(f RuneOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m RuneOptionOption) MapUint(f RuneOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m RuneOptionOption) MapUint8(f RuneOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m RuneOptionOption) MapUint16(f RuneOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m RuneOptionOption) MapUint32(f RuneOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m RuneOptionOption) MapUint64(f RuneOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m RuneOptionOption) MapUintptr(f RuneOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m RuneOptionOption) MapByte(f RuneOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m RuneOptionOption) MapRune(f RuneOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m RuneOptionOption) MapFloat32(f RuneOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m RuneOptionOption) MapFloat64(f RuneOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m RuneOptionOption) MapComplex64(f RuneOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m RuneOptionOption) MapComplex128(f RuneOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m RuneOptionOption) MapAny(f RuneOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m RuneOptionOption) MapBoolOption(f RuneOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m RuneOptionOption) MapStringOption(f RuneOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m RuneOptionOption) MapIntOption(f RuneOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m RuneOptionOption) MapInt8Option(f RuneOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m RuneOptionOption) MapInt16Option(f RuneOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m RuneOptionOption) MapInt32Option(f RuneOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m RuneOptionOption) MapInt64Option(f RuneOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m RuneOptionOption) MapUintOption(f RuneOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m RuneOptionOption) MapUint8Option(f RuneOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m RuneOptionOption) MapUint16Option(f RuneOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m RuneOptionOption) MapUint32Option(f RuneOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m RuneOptionOption) MapUint64Option(f RuneOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m RuneOptionOption) MapUintptrOption(f RuneOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m RuneOptionOption) MapByteOption(f RuneOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m RuneOptionOption) MapRuneOption(f RuneOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m RuneOptionOption) MapFloat32Option(f RuneOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m RuneOptionOption) MapFloat64Option(f RuneOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m RuneOptionOption) MapComplex64Option(f RuneOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m RuneOptionOption) MapComplex128Option(f RuneOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m RuneOptionOption) MapAnyOption(f RuneOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m RuneOptionOption) MapBoolArray(f RuneOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m RuneOptionOption) MapStringArray(f RuneOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m RuneOptionOption) MapIntArray(f RuneOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m RuneOptionOption) MapInt8Array(f RuneOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m RuneOptionOption) MapInt16Array(f RuneOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m RuneOptionOption) MapInt32Array(f RuneOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m RuneOptionOption) MapInt64Array(f RuneOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m RuneOptionOption) MapUintArray(f RuneOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m RuneOptionOption) MapUint8Array(f RuneOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m RuneOptionOption) MapUint16Array(f RuneOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m RuneOptionOption) MapUint32Array(f RuneOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m RuneOptionOption) MapUint64Array(f RuneOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m RuneOptionOption) MapUintptrArray(f RuneOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m RuneOptionOption) MapByteArray(f RuneOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m RuneOptionOption) MapRuneArray(f RuneOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m RuneOptionOption) MapFloat32Array(f RuneOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m RuneOptionOption) MapFloat64Array(f RuneOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m RuneOptionOption) MapComplex64Array(f RuneOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m RuneOptionOption) MapComplex128Array(f RuneOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m RuneOptionOption) MapAnyArray(f RuneOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m RuneOptionOption) MapBoolList(f RuneOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m RuneOptionOption) MapStringList(f RuneOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m RuneOptionOption) MapIntList(f RuneOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m RuneOptionOption) MapInt8List(f RuneOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m RuneOptionOption) MapInt16List(f RuneOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m RuneOptionOption) MapInt32List(f RuneOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m RuneOptionOption) MapInt64List(f RuneOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m RuneOptionOption) MapUintList(f RuneOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m RuneOptionOption) MapUint8List(f RuneOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m RuneOptionOption) MapUint16List(f RuneOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m RuneOptionOption) MapUint32List(f RuneOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m RuneOptionOption) MapUint64List(f RuneOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m RuneOptionOption) MapUintptrList(f RuneOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m RuneOptionOption) MapByteList(f RuneOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m RuneOptionOption) MapRuneList(f RuneOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m RuneOptionOption) MapFloat32List(f RuneOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m RuneOptionOption) MapFloat64List(f RuneOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m RuneOptionOption) MapComplex64List(f RuneOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m RuneOptionOption) MapComplex128List(f RuneOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m RuneOptionOption) MapAnyList(f RuneOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float32OptionOption) MapBool(f Float32OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float32OptionOption) MapString(f Float32OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float32OptionOption) MapInt(f Float32OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float32OptionOption) MapInt8(f Float32OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float32OptionOption) MapInt16(f Float32OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float32OptionOption) MapInt32(f Float32OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float32OptionOption) MapInt64(f Float32OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float32OptionOption) MapUint(f Float32OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float32OptionOption) MapUint8(f Float32OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float32OptionOption) MapUint16(f Float32OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float32OptionOption) MapUint32(f Float32OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float32OptionOption) MapUint64(f Float32OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float32OptionOption) MapUintptr(f Float32OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float32OptionOption) MapByte(f Float32OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float32OptionOption) MapRune(f Float32OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float32OptionOption) MapFloat32(f Float32OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float32OptionOption) MapFloat64(f Float32OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float32OptionOption) MapComplex64(f Float32OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float32OptionOption) MapComplex128(f Float32OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float32OptionOption) MapAny(f Float32OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float32OptionOption) MapBoolOption(f Float32OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float32OptionOption) MapStringOption(f Float32OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float32OptionOption) MapIntOption(f Float32OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float32OptionOption) MapInt8Option(f Float32OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float32OptionOption) MapInt16Option(f Float32OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float32OptionOption) MapInt32Option(f Float32OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float32OptionOption) MapInt64Option(f Float32OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float32OptionOption) MapUintOption(f Float32OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float32OptionOption) MapUint8Option(f Float32OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float32OptionOption) MapUint16Option(f Float32OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float32OptionOption) MapUint32Option(f Float32OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float32OptionOption) MapUint64Option(f Float32OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float32OptionOption) MapUintptrOption(f Float32OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float32OptionOption) MapByteOption(f Float32OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float32OptionOption) MapRuneOption(f Float32OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float32OptionOption) MapFloat32Option(f Float32OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float32OptionOption) MapFloat64Option(f Float32OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float32OptionOption) MapComplex64Option(f Float32OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float32OptionOption) MapComplex128Option(f Float32OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float32OptionOption) MapAnyOption(f Float32OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float32OptionOption) MapBoolArray(f Float32OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float32OptionOption) MapStringArray(f Float32OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float32OptionOption) MapIntArray(f Float32OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float32OptionOption) MapInt8Array(f Float32OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float32OptionOption) MapInt16Array(f Float32OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float32OptionOption) MapInt32Array(f Float32OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float32OptionOption) MapInt64Array(f Float32OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float32OptionOption) MapUintArray(f Float32OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float32OptionOption) MapUint8Array(f Float32OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float32OptionOption) MapUint16Array(f Float32OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float32OptionOption) MapUint32Array(f Float32OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float32OptionOption) MapUint64Array(f Float32OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float32OptionOption) MapUintptrArray(f Float32OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float32OptionOption) MapByteArray(f Float32OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float32OptionOption) MapRuneArray(f Float32OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float32OptionOption) MapFloat32Array(f Float32OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float32OptionOption) MapFloat64Array(f Float32OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float32OptionOption) MapComplex64Array(f Float32OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float32OptionOption) MapComplex128Array(f Float32OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float32OptionOption) MapAnyArray(f Float32OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float32OptionOption) MapBoolList(f Float32OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float32OptionOption) MapStringList(f Float32OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float32OptionOption) MapIntList(f Float32OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float32OptionOption) MapInt8List(f Float32OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float32OptionOption) MapInt16List(f Float32OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float32OptionOption) MapInt32List(f Float32OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float32OptionOption) MapInt64List(f Float32OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float32OptionOption) MapUintList(f Float32OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float32OptionOption) MapUint8List(f Float32OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float32OptionOption) MapUint16List(f Float32OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float32OptionOption) MapUint32List(f Float32OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float32OptionOption) MapUint64List(f Float32OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float32OptionOption) MapUintptrList(f Float32OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float32OptionOption) MapByteList(f Float32OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float32OptionOption) MapRuneList(f Float32OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float32OptionOption) MapFloat32List(f Float32OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float32OptionOption) MapFloat64List(f Float32OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float32OptionOption) MapComplex64List(f Float32OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float32OptionOption) MapComplex128List(f Float32OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float32OptionOption) MapAnyList(f Float32OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Float64OptionOption) MapBool(f Float64OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Float64OptionOption) MapString(f Float64OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Float64OptionOption) MapInt(f Float64OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Float64OptionOption) MapInt8(f Float64OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Float64OptionOption) MapInt16(f Float64OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Float64OptionOption) MapInt32(f Float64OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Float64OptionOption) MapInt64(f Float64OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Float64OptionOption) MapUint(f Float64OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Float64OptionOption) MapUint8(f Float64OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Float64OptionOption) MapUint16(f Float64OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Float64OptionOption) MapUint32(f Float64OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Float64OptionOption) MapUint64(f Float64OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Float64OptionOption) MapUintptr(f Float64OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Float64OptionOption) MapByte(f Float64OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Float64OptionOption) MapRune(f Float64OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Float64OptionOption) MapFloat32(f Float64OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Float64OptionOption) MapFloat64(f Float64OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Float64OptionOption) MapComplex64(f Float64OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Float64OptionOption) MapComplex128(f Float64OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Float64OptionOption) MapAny(f Float64OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Float64OptionOption) MapBoolOption(f Float64OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Float64OptionOption) MapStringOption(f Float64OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Float64OptionOption) MapIntOption(f Float64OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Float64OptionOption) MapInt8Option(f Float64OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Float64OptionOption) MapInt16Option(f Float64OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Float64OptionOption) MapInt32Option(f Float64OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Float64OptionOption) MapInt64Option(f Float64OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Float64OptionOption) MapUintOption(f Float64OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Float64OptionOption) MapUint8Option(f Float64OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Float64OptionOption) MapUint16Option(f Float64OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Float64OptionOption) MapUint32Option(f Float64OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Float64OptionOption) MapUint64Option(f Float64OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Float64OptionOption) MapUintptrOption(f Float64OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Float64OptionOption) MapByteOption(f Float64OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Float64OptionOption) MapRuneOption(f Float64OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Float64OptionOption) MapFloat32Option(f Float64OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Float64OptionOption) MapFloat64Option(f Float64OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Float64OptionOption) MapComplex64Option(f Float64OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Float64OptionOption) MapComplex128Option(f Float64OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Float64OptionOption) MapAnyOption(f Float64OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Float64OptionOption) MapBoolArray(f Float64OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Float64OptionOption) MapStringArray(f Float64OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Float64OptionOption) MapIntArray(f Float64OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Float64OptionOption) MapInt8Array(f Float64OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Float64OptionOption) MapInt16Array(f Float64OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Float64OptionOption) MapInt32Array(f Float64OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Float64OptionOption) MapInt64Array(f Float64OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Float64OptionOption) MapUintArray(f Float64OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Float64OptionOption) MapUint8Array(f Float64OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Float64OptionOption) MapUint16Array(f Float64OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Float64OptionOption) MapUint32Array(f Float64OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Float64OptionOption) MapUint64Array(f Float64OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Float64OptionOption) MapUintptrArray(f Float64OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Float64OptionOption) MapByteArray(f Float64OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Float64OptionOption) MapRuneArray(f Float64OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Float64OptionOption) MapFloat32Array(f Float64OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Float64OptionOption) MapFloat64Array(f Float64OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Float64OptionOption) MapComplex64Array(f Float64OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Float64OptionOption) MapComplex128Array(f Float64OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Float64OptionOption) MapAnyArray(f Float64OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Float64OptionOption) MapBoolList(f Float64OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Float64OptionOption) MapStringList(f Float64OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Float64OptionOption) MapIntList(f Float64OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Float64OptionOption) MapInt8List(f Float64OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Float64OptionOption) MapInt16List(f Float64OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Float64OptionOption) MapInt32List(f Float64OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Float64OptionOption) MapInt64List(f Float64OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Float64OptionOption) MapUintList(f Float64OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Float64OptionOption) MapUint8List(f Float64OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Float64OptionOption) MapUint16List(f Float64OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Float64OptionOption) MapUint32List(f Float64OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Float64OptionOption) MapUint64List(f Float64OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Float64OptionOption) MapUintptrList(f Float64OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Float64OptionOption) MapByteList(f Float64OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Float64OptionOption) MapRuneList(f Float64OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Float64OptionOption) MapFloat32List(f Float64OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Float64OptionOption) MapFloat64List(f Float64OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Float64OptionOption) MapComplex64List(f Float64OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Float64OptionOption) MapComplex128List(f Float64OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Float64OptionOption) MapAnyList(f Float64OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex64OptionOption) MapBool(f Complex64OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex64OptionOption) MapString(f Complex64OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex64OptionOption) MapInt(f Complex64OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex64OptionOption) MapInt8(f Complex64OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex64OptionOption) MapInt16(f Complex64OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex64OptionOption) MapInt32(f Complex64OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex64OptionOption) MapInt64(f Complex64OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex64OptionOption) MapUint(f Complex64OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex64OptionOption) MapUint8(f Complex64OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex64OptionOption) MapUint16(f Complex64OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex64OptionOption) MapUint32(f Complex64OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex64OptionOption) MapUint64(f Complex64OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex64OptionOption) MapUintptr(f Complex64OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex64OptionOption) MapByte(f Complex64OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex64OptionOption) MapRune(f Complex64OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex64OptionOption) MapFloat32(f Complex64OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex64OptionOption) MapFloat64(f Complex64OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex64OptionOption) MapComplex64(f Complex64OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex64OptionOption) MapComplex128(f Complex64OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex64OptionOption) MapAny(f Complex64OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex64OptionOption) MapBoolOption(f Complex64OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex64OptionOption) MapStringOption(f Complex64OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex64OptionOption) MapIntOption(f Complex64OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex64OptionOption) MapInt8Option(f Complex64OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex64OptionOption) MapInt16Option(f Complex64OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex64OptionOption) MapInt32Option(f Complex64OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex64OptionOption) MapInt64Option(f Complex64OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex64OptionOption) MapUintOption(f Complex64OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex64OptionOption) MapUint8Option(f Complex64OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex64OptionOption) MapUint16Option(f Complex64OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex64OptionOption) MapUint32Option(f Complex64OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex64OptionOption) MapUint64Option(f Complex64OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex64OptionOption) MapUintptrOption(f Complex64OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex64OptionOption) MapByteOption(f Complex64OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex64OptionOption) MapRuneOption(f Complex64OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex64OptionOption) MapFloat32Option(f Complex64OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex64OptionOption) MapFloat64Option(f Complex64OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex64OptionOption) MapComplex64Option(f Complex64OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex64OptionOption) MapComplex128Option(f Complex64OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex64OptionOption) MapAnyOption(f Complex64OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex64OptionOption) MapBoolArray(f Complex64OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex64OptionOption) MapStringArray(f Complex64OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex64OptionOption) MapIntArray(f Complex64OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex64OptionOption) MapInt8Array(f Complex64OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex64OptionOption) MapInt16Array(f Complex64OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex64OptionOption) MapInt32Array(f Complex64OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex64OptionOption) MapInt64Array(f Complex64OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex64OptionOption) MapUintArray(f Complex64OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex64OptionOption) MapUint8Array(f Complex64OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex64OptionOption) MapUint16Array(f Complex64OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex64OptionOption) MapUint32Array(f Complex64OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex64OptionOption) MapUint64Array(f Complex64OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex64OptionOption) MapUintptrArray(f Complex64OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex64OptionOption) MapByteArray(f Complex64OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex64OptionOption) MapRuneArray(f Complex64OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex64OptionOption) MapFloat32Array(f Complex64OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex64OptionOption) MapFloat64Array(f Complex64OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex64OptionOption) MapComplex64Array(f Complex64OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex64OptionOption) MapComplex128Array(f Complex64OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex64OptionOption) MapAnyArray(f Complex64OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex64OptionOption) MapBoolList(f Complex64OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex64OptionOption) MapStringList(f Complex64OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex64OptionOption) MapIntList(f Complex64OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex64OptionOption) MapInt8List(f Complex64OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex64OptionOption) MapInt16List(f Complex64OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex64OptionOption) MapInt32List(f Complex64OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex64OptionOption) MapInt64List(f Complex64OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex64OptionOption) MapUintList(f Complex64OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex64OptionOption) MapUint8List(f Complex64OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex64OptionOption) MapUint16List(f Complex64OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex64OptionOption) MapUint32List(f Complex64OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex64OptionOption) MapUint64List(f Complex64OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex64OptionOption) MapUintptrList(f Complex64OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex64OptionOption) MapByteList(f Complex64OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex64OptionOption) MapRuneList(f Complex64OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex64OptionOption) MapFloat32List(f Complex64OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex64OptionOption) MapFloat64List(f Complex64OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex64OptionOption) MapComplex64List(f Complex64OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex64OptionOption) MapComplex128List(f Complex64OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex64OptionOption) MapAnyList(f Complex64OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m Complex128OptionOption) MapBool(f Complex128OptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m Complex128OptionOption) MapString(f Complex128OptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m Complex128OptionOption) MapInt(f Complex128OptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m Complex128OptionOption) MapInt8(f Complex128OptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m Complex128OptionOption) MapInt16(f Complex128OptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m Complex128OptionOption) MapInt32(f Complex128OptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m Complex128OptionOption) MapInt64(f Complex128OptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m Complex128OptionOption) MapUint(f Complex128OptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m Complex128OptionOption) MapUint8(f Complex128OptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m Complex128OptionOption) MapUint16(f Complex128OptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m Complex128OptionOption) MapUint32(f Complex128OptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m Complex128OptionOption) MapUint64(f Complex128OptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m Complex128OptionOption) MapUintptr(f Complex128OptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m Complex128OptionOption) MapByte(f Complex128OptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m Complex128OptionOption) MapRune(f Complex128OptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m Complex128OptionOption) MapFloat32(f Complex128OptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m Complex128OptionOption) MapFloat64(f Complex128OptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m Complex128OptionOption) MapComplex64(f Complex128OptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m Complex128OptionOption) MapComplex128(f Complex128OptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m Complex128OptionOption) MapAny(f Complex128OptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m Complex128OptionOption) MapBoolOption(f Complex128OptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m Complex128OptionOption) MapStringOption(f Complex128OptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m Complex128OptionOption) MapIntOption(f Complex128OptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m Complex128OptionOption) MapInt8Option(f Complex128OptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m Complex128OptionOption) MapInt16Option(f Complex128OptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m Complex128OptionOption) MapInt32Option(f Complex128OptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m Complex128OptionOption) MapInt64Option(f Complex128OptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m Complex128OptionOption) MapUintOption(f Complex128OptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m Complex128OptionOption) MapUint8Option(f Complex128OptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m Complex128OptionOption) MapUint16Option(f Complex128OptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m Complex128OptionOption) MapUint32Option(f Complex128OptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m Complex128OptionOption) MapUint64Option(f Complex128OptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m Complex128OptionOption) MapUintptrOption(f Complex128OptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m Complex128OptionOption) MapByteOption(f Complex128OptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m Complex128OptionOption) MapRuneOption(f Complex128OptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m Complex128OptionOption) MapFloat32Option(f Complex128OptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m Complex128OptionOption) MapFloat64Option(f Complex128OptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m Complex128OptionOption) MapComplex64Option(f Complex128OptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m Complex128OptionOption) MapComplex128Option(f Complex128OptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m Complex128OptionOption) MapAnyOption(f Complex128OptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m Complex128OptionOption) MapBoolArray(f Complex128OptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m Complex128OptionOption) MapStringArray(f Complex128OptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m Complex128OptionOption) MapIntArray(f Complex128OptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m Complex128OptionOption) MapInt8Array(f Complex128OptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m Complex128OptionOption) MapInt16Array(f Complex128OptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m Complex128OptionOption) MapInt32Array(f Complex128OptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m Complex128OptionOption) MapInt64Array(f Complex128OptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m Complex128OptionOption) MapUintArray(f Complex128OptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m Complex128OptionOption) MapUint8Array(f Complex128OptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m Complex128OptionOption) MapUint16Array(f Complex128OptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m Complex128OptionOption) MapUint32Array(f Complex128OptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m Complex128OptionOption) MapUint64Array(f Complex128OptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m Complex128OptionOption) MapUintptrArray(f Complex128OptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m Complex128OptionOption) MapByteArray(f Complex128OptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m Complex128OptionOption) MapRuneArray(f Complex128OptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m Complex128OptionOption) MapFloat32Array(f Complex128OptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m Complex128OptionOption) MapFloat64Array(f Complex128OptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m Complex128OptionOption) MapComplex64Array(f Complex128OptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m Complex128OptionOption) MapComplex128Array(f Complex128OptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m Complex128OptionOption) MapAnyArray(f Complex128OptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m Complex128OptionOption) MapBoolList(f Complex128OptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m Complex128OptionOption) MapStringList(f Complex128OptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m Complex128OptionOption) MapIntList(f Complex128OptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m Complex128OptionOption) MapInt8List(f Complex128OptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m Complex128OptionOption) MapInt16List(f Complex128OptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m Complex128OptionOption) MapInt32List(f Complex128OptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m Complex128OptionOption) MapInt64List(f Complex128OptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m Complex128OptionOption) MapUintList(f Complex128OptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m Complex128OptionOption) MapUint8List(f Complex128OptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m Complex128OptionOption) MapUint16List(f Complex128OptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m Complex128OptionOption) MapUint32List(f Complex128OptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m Complex128OptionOption) MapUint64List(f Complex128OptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m Complex128OptionOption) MapUintptrList(f Complex128OptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m Complex128OptionOption) MapByteList(f Complex128OptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m Complex128OptionOption) MapRuneList(f Complex128OptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m Complex128OptionOption) MapFloat32List(f Complex128OptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m Complex128OptionOption) MapFloat64List(f Complex128OptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m Complex128OptionOption) MapComplex64List(f Complex128OptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m Complex128OptionOption) MapComplex128List(f Complex128OptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m Complex128OptionOption) MapAnyList(f Complex128OptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
func (m AnyOptionOption) MapBool(f AnyOptionToBoolTransformer) BoolOption {
	if m.IsDefined() {
		return MakeBoolOption(f(*m.value))
	} else {
		return NoneBool
	}
}
func (m AnyOptionOption) MapString(f AnyOptionToStringTransformer) StringOption {
	if m.IsDefined() {
		return MakeStringOption(f(*m.value))
	} else {
		return NoneString
	}
}
func (m AnyOptionOption) MapInt(f AnyOptionToIntTransformer) IntOption {
	if m.IsDefined() {
		return MakeIntOption(f(*m.value))
	} else {
		return NoneInt
	}
}
func (m AnyOptionOption) MapInt8(f AnyOptionToInt8Transformer) Int8Option {
	if m.IsDefined() {
		return MakeInt8Option(f(*m.value))
	} else {
		return NoneInt8
	}
}
func (m AnyOptionOption) MapInt16(f AnyOptionToInt16Transformer) Int16Option {
	if m.IsDefined() {
		return MakeInt16Option(f(*m.value))
	} else {
		return NoneInt16
	}
}
func (m AnyOptionOption) MapInt32(f AnyOptionToInt32Transformer) Int32Option {
	if m.IsDefined() {
		return MakeInt32Option(f(*m.value))
	} else {
		return NoneInt32
	}
}
func (m AnyOptionOption) MapInt64(f AnyOptionToInt64Transformer) Int64Option {
	if m.IsDefined() {
		return MakeInt64Option(f(*m.value))
	} else {
		return NoneInt64
	}
}
func (m AnyOptionOption) MapUint(f AnyOptionToUintTransformer) UintOption {
	if m.IsDefined() {
		return MakeUintOption(f(*m.value))
	} else {
		return NoneUint
	}
}
func (m AnyOptionOption) MapUint8(f AnyOptionToUint8Transformer) Uint8Option {
	if m.IsDefined() {
		return MakeUint8Option(f(*m.value))
	} else {
		return NoneUint8
	}
}
func (m AnyOptionOption) MapUint16(f AnyOptionToUint16Transformer) Uint16Option {
	if m.IsDefined() {
		return MakeUint16Option(f(*m.value))
	} else {
		return NoneUint16
	}
}
func (m AnyOptionOption) MapUint32(f AnyOptionToUint32Transformer) Uint32Option {
	if m.IsDefined() {
		return MakeUint32Option(f(*m.value))
	} else {
		return NoneUint32
	}
}
func (m AnyOptionOption) MapUint64(f AnyOptionToUint64Transformer) Uint64Option {
	if m.IsDefined() {
		return MakeUint64Option(f(*m.value))
	} else {
		return NoneUint64
	}
}
func (m AnyOptionOption) MapUintptr(f AnyOptionToUintptrTransformer) UintptrOption {
	if m.IsDefined() {
		return MakeUintptrOption(f(*m.value))
	} else {
		return NoneUintptr
	}
}
func (m AnyOptionOption) MapByte(f AnyOptionToByteTransformer) ByteOption {
	if m.IsDefined() {
		return MakeByteOption(f(*m.value))
	} else {
		return NoneByte
	}
}
func (m AnyOptionOption) MapRune(f AnyOptionToRuneTransformer) RuneOption {
	if m.IsDefined() {
		return MakeRuneOption(f(*m.value))
	} else {
		return NoneRune
	}
}
func (m AnyOptionOption) MapFloat32(f AnyOptionToFloat32Transformer) Float32Option {
	if m.IsDefined() {
		return MakeFloat32Option(f(*m.value))
	} else {
		return NoneFloat32
	}
}
func (m AnyOptionOption) MapFloat64(f AnyOptionToFloat64Transformer) Float64Option {
	if m.IsDefined() {
		return MakeFloat64Option(f(*m.value))
	} else {
		return NoneFloat64
	}
}
func (m AnyOptionOption) MapComplex64(f AnyOptionToComplex64Transformer) Complex64Option {
	if m.IsDefined() {
		return MakeComplex64Option(f(*m.value))
	} else {
		return NoneComplex64
	}
}
func (m AnyOptionOption) MapComplex128(f AnyOptionToComplex128Transformer) Complex128Option {
	if m.IsDefined() {
		return MakeComplex128Option(f(*m.value))
	} else {
		return NoneComplex128
	}
}
func (m AnyOptionOption) MapAny(f AnyOptionToAnyTransformer) AnyOption {
	if m.IsDefined() {
		return MakeAnyOption(f(*m.value))
	} else {
		return NoneAny
	}
}
func (m AnyOptionOption) MapBoolOption(f AnyOptionToBoolOptionTransformer) BoolOptionOption {
	if m.IsDefined() {
		return MakeBoolOptionOption(f(*m.value))
	} else {
		return NoneBoolOption
	}
}
func (m AnyOptionOption) MapStringOption(f AnyOptionToStringOptionTransformer) StringOptionOption {
	if m.IsDefined() {
		return MakeStringOptionOption(f(*m.value))
	} else {
		return NoneStringOption
	}
}
func (m AnyOptionOption) MapIntOption(f AnyOptionToIntOptionTransformer) IntOptionOption {
	if m.IsDefined() {
		return MakeIntOptionOption(f(*m.value))
	} else {
		return NoneIntOption
	}
}
func (m AnyOptionOption) MapInt8Option(f AnyOptionToInt8OptionTransformer) Int8OptionOption {
	if m.IsDefined() {
		return MakeInt8OptionOption(f(*m.value))
	} else {
		return NoneInt8Option
	}
}
func (m AnyOptionOption) MapInt16Option(f AnyOptionToInt16OptionTransformer) Int16OptionOption {
	if m.IsDefined() {
		return MakeInt16OptionOption(f(*m.value))
	} else {
		return NoneInt16Option
	}
}
func (m AnyOptionOption) MapInt32Option(f AnyOptionToInt32OptionTransformer) Int32OptionOption {
	if m.IsDefined() {
		return MakeInt32OptionOption(f(*m.value))
	} else {
		return NoneInt32Option
	}
}
func (m AnyOptionOption) MapInt64Option(f AnyOptionToInt64OptionTransformer) Int64OptionOption {
	if m.IsDefined() {
		return MakeInt64OptionOption(f(*m.value))
	} else {
		return NoneInt64Option
	}
}
func (m AnyOptionOption) MapUintOption(f AnyOptionToUintOptionTransformer) UintOptionOption {
	if m.IsDefined() {
		return MakeUintOptionOption(f(*m.value))
	} else {
		return NoneUintOption
	}
}
func (m AnyOptionOption) MapUint8Option(f AnyOptionToUint8OptionTransformer) Uint8OptionOption {
	if m.IsDefined() {
		return MakeUint8OptionOption(f(*m.value))
	} else {
		return NoneUint8Option
	}
}
func (m AnyOptionOption) MapUint16Option(f AnyOptionToUint16OptionTransformer) Uint16OptionOption {
	if m.IsDefined() {
		return MakeUint16OptionOption(f(*m.value))
	} else {
		return NoneUint16Option
	}
}
func (m AnyOptionOption) MapUint32Option(f AnyOptionToUint32OptionTransformer) Uint32OptionOption {
	if m.IsDefined() {
		return MakeUint32OptionOption(f(*m.value))
	} else {
		return NoneUint32Option
	}
}
func (m AnyOptionOption) MapUint64Option(f AnyOptionToUint64OptionTransformer) Uint64OptionOption {
	if m.IsDefined() {
		return MakeUint64OptionOption(f(*m.value))
	} else {
		return NoneUint64Option
	}
}
func (m AnyOptionOption) MapUintptrOption(f AnyOptionToUintptrOptionTransformer) UintptrOptionOption {
	if m.IsDefined() {
		return MakeUintptrOptionOption(f(*m.value))
	} else {
		return NoneUintptrOption
	}
}
func (m AnyOptionOption) MapByteOption(f AnyOptionToByteOptionTransformer) ByteOptionOption {
	if m.IsDefined() {
		return MakeByteOptionOption(f(*m.value))
	} else {
		return NoneByteOption
	}
}
func (m AnyOptionOption) MapRuneOption(f AnyOptionToRuneOptionTransformer) RuneOptionOption {
	if m.IsDefined() {
		return MakeRuneOptionOption(f(*m.value))
	} else {
		return NoneRuneOption
	}
}
func (m AnyOptionOption) MapFloat32Option(f AnyOptionToFloat32OptionTransformer) Float32OptionOption {
	if m.IsDefined() {
		return MakeFloat32OptionOption(f(*m.value))
	} else {
		return NoneFloat32Option
	}
}
func (m AnyOptionOption) MapFloat64Option(f AnyOptionToFloat64OptionTransformer) Float64OptionOption {
	if m.IsDefined() {
		return MakeFloat64OptionOption(f(*m.value))
	} else {
		return NoneFloat64Option
	}
}
func (m AnyOptionOption) MapComplex64Option(f AnyOptionToComplex64OptionTransformer) Complex64OptionOption {
	if m.IsDefined() {
		return MakeComplex64OptionOption(f(*m.value))
	} else {
		return NoneComplex64Option
	}
}
func (m AnyOptionOption) MapComplex128Option(f AnyOptionToComplex128OptionTransformer) Complex128OptionOption {
	if m.IsDefined() {
		return MakeComplex128OptionOption(f(*m.value))
	} else {
		return NoneComplex128Option
	}
}
func (m AnyOptionOption) MapAnyOption(f AnyOptionToAnyOptionTransformer) AnyOptionOption {
	if m.IsDefined() {
		return MakeAnyOptionOption(f(*m.value))
	} else {
		return NoneAnyOption
	}
}
func (m AnyOptionOption) MapBoolArray(f AnyOptionToBoolArrayTransformer) BoolArrayOption {
	if m.IsDefined() {
		return MakeBoolArrayOption(f(*m.value))
	} else {
		return NoneBoolArray
	}
}
func (m AnyOptionOption) MapStringArray(f AnyOptionToStringArrayTransformer) StringArrayOption {
	if m.IsDefined() {
		return MakeStringArrayOption(f(*m.value))
	} else {
		return NoneStringArray
	}
}
func (m AnyOptionOption) MapIntArray(f AnyOptionToIntArrayTransformer) IntArrayOption {
	if m.IsDefined() {
		return MakeIntArrayOption(f(*m.value))
	} else {
		return NoneIntArray
	}
}
func (m AnyOptionOption) MapInt8Array(f AnyOptionToInt8ArrayTransformer) Int8ArrayOption {
	if m.IsDefined() {
		return MakeInt8ArrayOption(f(*m.value))
	} else {
		return NoneInt8Array
	}
}
func (m AnyOptionOption) MapInt16Array(f AnyOptionToInt16ArrayTransformer) Int16ArrayOption {
	if m.IsDefined() {
		return MakeInt16ArrayOption(f(*m.value))
	} else {
		return NoneInt16Array
	}
}
func (m AnyOptionOption) MapInt32Array(f AnyOptionToInt32ArrayTransformer) Int32ArrayOption {
	if m.IsDefined() {
		return MakeInt32ArrayOption(f(*m.value))
	} else {
		return NoneInt32Array
	}
}
func (m AnyOptionOption) MapInt64Array(f AnyOptionToInt64ArrayTransformer) Int64ArrayOption {
	if m.IsDefined() {
		return MakeInt64ArrayOption(f(*m.value))
	} else {
		return NoneInt64Array
	}
}
func (m AnyOptionOption) MapUintArray(f AnyOptionToUintArrayTransformer) UintArrayOption {
	if m.IsDefined() {
		return MakeUintArrayOption(f(*m.value))
	} else {
		return NoneUintArray
	}
}
func (m AnyOptionOption) MapUint8Array(f AnyOptionToUint8ArrayTransformer) Uint8ArrayOption {
	if m.IsDefined() {
		return MakeUint8ArrayOption(f(*m.value))
	} else {
		return NoneUint8Array
	}
}
func (m AnyOptionOption) MapUint16Array(f AnyOptionToUint16ArrayTransformer) Uint16ArrayOption {
	if m.IsDefined() {
		return MakeUint16ArrayOption(f(*m.value))
	} else {
		return NoneUint16Array
	}
}
func (m AnyOptionOption) MapUint32Array(f AnyOptionToUint32ArrayTransformer) Uint32ArrayOption {
	if m.IsDefined() {
		return MakeUint32ArrayOption(f(*m.value))
	} else {
		return NoneUint32Array
	}
}
func (m AnyOptionOption) MapUint64Array(f AnyOptionToUint64ArrayTransformer) Uint64ArrayOption {
	if m.IsDefined() {
		return MakeUint64ArrayOption(f(*m.value))
	} else {
		return NoneUint64Array
	}
}
func (m AnyOptionOption) MapUintptrArray(f AnyOptionToUintptrArrayTransformer) UintptrArrayOption {
	if m.IsDefined() {
		return MakeUintptrArrayOption(f(*m.value))
	} else {
		return NoneUintptrArray
	}
}
func (m AnyOptionOption) MapByteArray(f AnyOptionToByteArrayTransformer) ByteArrayOption {
	if m.IsDefined() {
		return MakeByteArrayOption(f(*m.value))
	} else {
		return NoneByteArray
	}
}
func (m AnyOptionOption) MapRuneArray(f AnyOptionToRuneArrayTransformer) RuneArrayOption {
	if m.IsDefined() {
		return MakeRuneArrayOption(f(*m.value))
	} else {
		return NoneRuneArray
	}
}
func (m AnyOptionOption) MapFloat32Array(f AnyOptionToFloat32ArrayTransformer) Float32ArrayOption {
	if m.IsDefined() {
		return MakeFloat32ArrayOption(f(*m.value))
	} else {
		return NoneFloat32Array
	}
}
func (m AnyOptionOption) MapFloat64Array(f AnyOptionToFloat64ArrayTransformer) Float64ArrayOption {
	if m.IsDefined() {
		return MakeFloat64ArrayOption(f(*m.value))
	} else {
		return NoneFloat64Array
	}
}
func (m AnyOptionOption) MapComplex64Array(f AnyOptionToComplex64ArrayTransformer) Complex64ArrayOption {
	if m.IsDefined() {
		return MakeComplex64ArrayOption(f(*m.value))
	} else {
		return NoneComplex64Array
	}
}
func (m AnyOptionOption) MapComplex128Array(f AnyOptionToComplex128ArrayTransformer) Complex128ArrayOption {
	if m.IsDefined() {
		return MakeComplex128ArrayOption(f(*m.value))
	} else {
		return NoneComplex128Array
	}
}
func (m AnyOptionOption) MapAnyArray(f AnyOptionToAnyArrayTransformer) AnyArrayOption {
	if m.IsDefined() {
		return MakeAnyArrayOption(f(*m.value))
	} else {
		return NoneAnyArray
	}
}
func (m AnyOptionOption) MapBoolList(f AnyOptionToBoolListTransformer) BoolListOption {
	if m.IsDefined() {
		return MakeBoolListOption(f(*m.value))
	} else {
		return NoneBoolList
	}
}
func (m AnyOptionOption) MapStringList(f AnyOptionToStringListTransformer) StringListOption {
	if m.IsDefined() {
		return MakeStringListOption(f(*m.value))
	} else {
		return NoneStringList
	}
}
func (m AnyOptionOption) MapIntList(f AnyOptionToIntListTransformer) IntListOption {
	if m.IsDefined() {
		return MakeIntListOption(f(*m.value))
	} else {
		return NoneIntList
	}
}
func (m AnyOptionOption) MapInt8List(f AnyOptionToInt8ListTransformer) Int8ListOption {
	if m.IsDefined() {
		return MakeInt8ListOption(f(*m.value))
	} else {
		return NoneInt8List
	}
}
func (m AnyOptionOption) MapInt16List(f AnyOptionToInt16ListTransformer) Int16ListOption {
	if m.IsDefined() {
		return MakeInt16ListOption(f(*m.value))
	} else {
		return NoneInt16List
	}
}
func (m AnyOptionOption) MapInt32List(f AnyOptionToInt32ListTransformer) Int32ListOption {
	if m.IsDefined() {
		return MakeInt32ListOption(f(*m.value))
	} else {
		return NoneInt32List
	}
}
func (m AnyOptionOption) MapInt64List(f AnyOptionToInt64ListTransformer) Int64ListOption {
	if m.IsDefined() {
		return MakeInt64ListOption(f(*m.value))
	} else {
		return NoneInt64List
	}
}
func (m AnyOptionOption) MapUintList(f AnyOptionToUintListTransformer) UintListOption {
	if m.IsDefined() {
		return MakeUintListOption(f(*m.value))
	} else {
		return NoneUintList
	}
}
func (m AnyOptionOption) MapUint8List(f AnyOptionToUint8ListTransformer) Uint8ListOption {
	if m.IsDefined() {
		return MakeUint8ListOption(f(*m.value))
	} else {
		return NoneUint8List
	}
}
func (m AnyOptionOption) MapUint16List(f AnyOptionToUint16ListTransformer) Uint16ListOption {
	if m.IsDefined() {
		return MakeUint16ListOption(f(*m.value))
	} else {
		return NoneUint16List
	}
}
func (m AnyOptionOption) MapUint32List(f AnyOptionToUint32ListTransformer) Uint32ListOption {
	if m.IsDefined() {
		return MakeUint32ListOption(f(*m.value))
	} else {
		return NoneUint32List
	}
}
func (m AnyOptionOption) MapUint64List(f AnyOptionToUint64ListTransformer) Uint64ListOption {
	if m.IsDefined() {
		return MakeUint64ListOption(f(*m.value))
	} else {
		return NoneUint64List
	}
}
func (m AnyOptionOption) MapUintptrList(f AnyOptionToUintptrListTransformer) UintptrListOption {
	if m.IsDefined() {
		return MakeUintptrListOption(f(*m.value))
	} else {
		return NoneUintptrList
	}
}
func (m AnyOptionOption) MapByteList(f AnyOptionToByteListTransformer) ByteListOption {
	if m.IsDefined() {
		return MakeByteListOption(f(*m.value))
	} else {
		return NoneByteList
	}
}
func (m AnyOptionOption) MapRuneList(f AnyOptionToRuneListTransformer) RuneListOption {
	if m.IsDefined() {
		return MakeRuneListOption(f(*m.value))
	} else {
		return NoneRuneList
	}
}
func (m AnyOptionOption) MapFloat32List(f AnyOptionToFloat32ListTransformer) Float32ListOption {
	if m.IsDefined() {
		return MakeFloat32ListOption(f(*m.value))
	} else {
		return NoneFloat32List
	}
}
func (m AnyOptionOption) MapFloat64List(f AnyOptionToFloat64ListTransformer) Float64ListOption {
	if m.IsDefined() {
		return MakeFloat64ListOption(f(*m.value))
	} else {
		return NoneFloat64List
	}
}
func (m AnyOptionOption) MapComplex64List(f AnyOptionToComplex64ListTransformer) Complex64ListOption {
	if m.IsDefined() {
		return MakeComplex64ListOption(f(*m.value))
	} else {
		return NoneComplex64List
	}
}
func (m AnyOptionOption) MapComplex128List(f AnyOptionToComplex128ListTransformer) Complex128ListOption {
	if m.IsDefined() {
		return MakeComplex128ListOption(f(*m.value))
	} else {
		return NoneComplex128List
	}
}
func (m AnyOptionOption) MapAnyList(f AnyOptionToAnyListTransformer) AnyListOption {
	if m.IsDefined() {
		return MakeAnyListOption(f(*m.value))
	} else {
		return NoneAnyList
	}
}
