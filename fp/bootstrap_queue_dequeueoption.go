// bootstrap_queue_dequeueoption.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) DequeueOption() (BoolOption, BoolQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkBoolOption(h), BoolQueue{swapped.in, &t}
	} else {
		return NoneBool, NilBoolQueue
	}
}
func (q StringQueue) DequeueOption() (StringOption, StringQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkStringOption(h), StringQueue{swapped.in, &t}
	} else {
		return NoneString, NilStringQueue
	}
}
func (q IntQueue) DequeueOption() (IntOption, IntQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkIntOption(h), IntQueue{swapped.in, &t}
	} else {
		return NoneInt, NilIntQueue
	}
}
func (q Int64Queue) DequeueOption() (Int64Option, Int64Queue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkInt64Option(h), Int64Queue{swapped.in, &t}
	} else {
		return NoneInt64, NilInt64Queue
	}
}
func (q ByteQueue) DequeueOption() (ByteOption, ByteQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkByteOption(h), ByteQueue{swapped.in, &t}
	} else {
		return NoneByte, NilByteQueue
	}
}
func (q RuneQueue) DequeueOption() (RuneOption, RuneQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkRuneOption(h), RuneQueue{swapped.in, &t}
	} else {
		return NoneRune, NilRuneQueue
	}
}
func (q Float32Queue) DequeueOption() (Float32Option, Float32Queue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat32Option(h), Float32Queue{swapped.in, &t}
	} else {
		return NoneFloat32, NilFloat32Queue
	}
}
func (q Float64Queue) DequeueOption() (Float64Option, Float64Queue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat64Option(h), Float64Queue{swapped.in, &t}
	} else {
		return NoneFloat64, NilFloat64Queue
	}
}
func (q AnyQueue) DequeueOption() (AnyOption, AnyQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkAnyOption(h), AnyQueue{swapped.in, &t}
	} else {
		return NoneAny, NilAnyQueue
	}
}
func (q Tuple2Queue) DequeueOption() (Tuple2Option, Tuple2Queue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkTuple2Option(h), Tuple2Queue{swapped.in, &t}
	} else {
		return NoneTuple2, NilTuple2Queue
	}
}
func (q BoolArrayQueue) DequeueOption() (BoolArrayOption, BoolArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkBoolArrayOption(h), BoolArrayQueue{swapped.in, &t}
	} else {
		return NoneBoolArray, NilBoolArrayQueue
	}
}
func (q StringArrayQueue) DequeueOption() (StringArrayOption, StringArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkStringArrayOption(h), StringArrayQueue{swapped.in, &t}
	} else {
		return NoneStringArray, NilStringArrayQueue
	}
}
func (q IntArrayQueue) DequeueOption() (IntArrayOption, IntArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkIntArrayOption(h), IntArrayQueue{swapped.in, &t}
	} else {
		return NoneIntArray, NilIntArrayQueue
	}
}
func (q Int64ArrayQueue) DequeueOption() (Int64ArrayOption, Int64ArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkInt64ArrayOption(h), Int64ArrayQueue{swapped.in, &t}
	} else {
		return NoneInt64Array, NilInt64ArrayQueue
	}
}
func (q ByteArrayQueue) DequeueOption() (ByteArrayOption, ByteArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkByteArrayOption(h), ByteArrayQueue{swapped.in, &t}
	} else {
		return NoneByteArray, NilByteArrayQueue
	}
}
func (q RuneArrayQueue) DequeueOption() (RuneArrayOption, RuneArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkRuneArrayOption(h), RuneArrayQueue{swapped.in, &t}
	} else {
		return NoneRuneArray, NilRuneArrayQueue
	}
}
func (q Float32ArrayQueue) DequeueOption() (Float32ArrayOption, Float32ArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat32ArrayOption(h), Float32ArrayQueue{swapped.in, &t}
	} else {
		return NoneFloat32Array, NilFloat32ArrayQueue
	}
}
func (q Float64ArrayQueue) DequeueOption() (Float64ArrayOption, Float64ArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat64ArrayOption(h), Float64ArrayQueue{swapped.in, &t}
	} else {
		return NoneFloat64Array, NilFloat64ArrayQueue
	}
}
func (q AnyArrayQueue) DequeueOption() (AnyArrayOption, AnyArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkAnyArrayOption(h), AnyArrayQueue{swapped.in, &t}
	} else {
		return NoneAnyArray, NilAnyArrayQueue
	}
}
func (q Tuple2ArrayQueue) DequeueOption() (Tuple2ArrayOption, Tuple2ArrayQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkTuple2ArrayOption(h), Tuple2ArrayQueue{swapped.in, &t}
	} else {
		return NoneTuple2Array, NilTuple2ArrayQueue
	}
}
func (q BoolOptionQueue) DequeueOption() (BoolOptionOption, BoolOptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkBoolOptionOption(h), BoolOptionQueue{swapped.in, &t}
	} else {
		return NoneBoolOption, NilBoolOptionQueue
	}
}
func (q StringOptionQueue) DequeueOption() (StringOptionOption, StringOptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkStringOptionOption(h), StringOptionQueue{swapped.in, &t}
	} else {
		return NoneStringOption, NilStringOptionQueue
	}
}
func (q IntOptionQueue) DequeueOption() (IntOptionOption, IntOptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkIntOptionOption(h), IntOptionQueue{swapped.in, &t}
	} else {
		return NoneIntOption, NilIntOptionQueue
	}
}
func (q Int64OptionQueue) DequeueOption() (Int64OptionOption, Int64OptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkInt64OptionOption(h), Int64OptionQueue{swapped.in, &t}
	} else {
		return NoneInt64Option, NilInt64OptionQueue
	}
}
func (q ByteOptionQueue) DequeueOption() (ByteOptionOption, ByteOptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkByteOptionOption(h), ByteOptionQueue{swapped.in, &t}
	} else {
		return NoneByteOption, NilByteOptionQueue
	}
}
func (q RuneOptionQueue) DequeueOption() (RuneOptionOption, RuneOptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkRuneOptionOption(h), RuneOptionQueue{swapped.in, &t}
	} else {
		return NoneRuneOption, NilRuneOptionQueue
	}
}
func (q Float32OptionQueue) DequeueOption() (Float32OptionOption, Float32OptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat32OptionOption(h), Float32OptionQueue{swapped.in, &t}
	} else {
		return NoneFloat32Option, NilFloat32OptionQueue
	}
}
func (q Float64OptionQueue) DequeueOption() (Float64OptionOption, Float64OptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat64OptionOption(h), Float64OptionQueue{swapped.in, &t}
	} else {
		return NoneFloat64Option, NilFloat64OptionQueue
	}
}
func (q AnyOptionQueue) DequeueOption() (AnyOptionOption, AnyOptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkAnyOptionOption(h), AnyOptionQueue{swapped.in, &t}
	} else {
		return NoneAnyOption, NilAnyOptionQueue
	}
}
func (q Tuple2OptionQueue) DequeueOption() (Tuple2OptionOption, Tuple2OptionQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkTuple2OptionOption(h), Tuple2OptionQueue{swapped.in, &t}
	} else {
		return NoneTuple2Option, NilTuple2OptionQueue
	}
}
func (q BoolListQueue) DequeueOption() (BoolListOption, BoolListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkBoolListOption(h), BoolListQueue{swapped.in, &t}
	} else {
		return NoneBoolList, NilBoolListQueue
	}
}
func (q StringListQueue) DequeueOption() (StringListOption, StringListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkStringListOption(h), StringListQueue{swapped.in, &t}
	} else {
		return NoneStringList, NilStringListQueue
	}
}
func (q IntListQueue) DequeueOption() (IntListOption, IntListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkIntListOption(h), IntListQueue{swapped.in, &t}
	} else {
		return NoneIntList, NilIntListQueue
	}
}
func (q Int64ListQueue) DequeueOption() (Int64ListOption, Int64ListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkInt64ListOption(h), Int64ListQueue{swapped.in, &t}
	} else {
		return NoneInt64List, NilInt64ListQueue
	}
}
func (q ByteListQueue) DequeueOption() (ByteListOption, ByteListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkByteListOption(h), ByteListQueue{swapped.in, &t}
	} else {
		return NoneByteList, NilByteListQueue
	}
}
func (q RuneListQueue) DequeueOption() (RuneListOption, RuneListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkRuneListOption(h), RuneListQueue{swapped.in, &t}
	} else {
		return NoneRuneList, NilRuneListQueue
	}
}
func (q Float32ListQueue) DequeueOption() (Float32ListOption, Float32ListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat32ListOption(h), Float32ListQueue{swapped.in, &t}
	} else {
		return NoneFloat32List, NilFloat32ListQueue
	}
}
func (q Float64ListQueue) DequeueOption() (Float64ListOption, Float64ListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkFloat64ListOption(h), Float64ListQueue{swapped.in, &t}
	} else {
		return NoneFloat64List, NilFloat64ListQueue
	}
}
func (q AnyListQueue) DequeueOption() (AnyListOption, AnyListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkAnyListOption(h), AnyListQueue{swapped.in, &t}
	} else {
		return NoneAnyList, NilAnyListQueue
	}
}
func (q Tuple2ListQueue) DequeueOption() (Tuple2ListOption, Tuple2ListQueue) {
	if q.NonEmpty() {
		swapped := q.swap()
		h := (*swapped.out).Head()
		t := (*swapped.out).Tail()
		return MkTuple2ListOption(h), Tuple2ListQueue{swapped.in, &t}
	} else {
		return NoneTuple2List, NilTuple2ListQueue
	}
}
