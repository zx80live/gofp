// bootstrap_queue_drop.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) Drop(n int) BoolQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolQueue{&NilBoolList, &xs}
}
func (q StringQueue) Drop(n int) StringQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringQueue{&NilStringList, &xs}
}
func (q IntQueue) Drop(n int) IntQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntQueue{&NilIntList, &xs}
}
func (q Int64Queue) Drop(n int) Int64Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64Queue{&NilInt64List, &xs}
}
func (q ByteQueue) Drop(n int) ByteQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteQueue{&NilByteList, &xs}
}
func (q RuneQueue) Drop(n int) RuneQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneQueue{&NilRuneList, &xs}
}
func (q Float32Queue) Drop(n int) Float32Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32Queue{&NilFloat32List, &xs}
}
func (q Float64Queue) Drop(n int) Float64Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64Queue{&NilFloat64List, &xs}
}
func (q AnyQueue) Drop(n int) AnyQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyQueue{&NilAnyList, &xs}
}
func (q Tuple2Queue) Drop(n int) Tuple2Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2Queue{&NilTuple2List, &xs}
}
func (q BoolArrayQueue) Drop(n int) BoolArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolArrayQueue{&NilBoolArrayList, &xs}
}
func (q StringArrayQueue) Drop(n int) StringArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringArrayQueue{&NilStringArrayList, &xs}
}
func (q IntArrayQueue) Drop(n int) IntArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntArrayQueue{&NilIntArrayList, &xs}
}
func (q Int64ArrayQueue) Drop(n int) Int64ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64ArrayQueue{&NilInt64ArrayList, &xs}
}
func (q ByteArrayQueue) Drop(n int) ByteArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteArrayQueue{&NilByteArrayList, &xs}
}
func (q RuneArrayQueue) Drop(n int) RuneArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneArrayQueue{&NilRuneArrayList, &xs}
}
func (q Float32ArrayQueue) Drop(n int) Float32ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32ArrayQueue{&NilFloat32ArrayList, &xs}
}
func (q Float64ArrayQueue) Drop(n int) Float64ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64ArrayQueue{&NilFloat64ArrayList, &xs}
}
func (q AnyArrayQueue) Drop(n int) AnyArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyArrayQueue{&NilAnyArrayList, &xs}
}
func (q Tuple2ArrayQueue) Drop(n int) Tuple2ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2ArrayQueue{&NilTuple2ArrayList, &xs}
}
func (q BoolOptionQueue) Drop(n int) BoolOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolOptionQueue{&NilBoolOptionList, &xs}
}
func (q StringOptionQueue) Drop(n int) StringOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringOptionQueue{&NilStringOptionList, &xs}
}
func (q IntOptionQueue) Drop(n int) IntOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntOptionQueue{&NilIntOptionList, &xs}
}
func (q Int64OptionQueue) Drop(n int) Int64OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64OptionQueue{&NilInt64OptionList, &xs}
}
func (q ByteOptionQueue) Drop(n int) ByteOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteOptionQueue{&NilByteOptionList, &xs}
}
func (q RuneOptionQueue) Drop(n int) RuneOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneOptionQueue{&NilRuneOptionList, &xs}
}
func (q Float32OptionQueue) Drop(n int) Float32OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32OptionQueue{&NilFloat32OptionList, &xs}
}
func (q Float64OptionQueue) Drop(n int) Float64OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64OptionQueue{&NilFloat64OptionList, &xs}
}
func (q AnyOptionQueue) Drop(n int) AnyOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyOptionQueue{&NilAnyOptionList, &xs}
}
func (q Tuple2OptionQueue) Drop(n int) Tuple2OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2OptionQueue{&NilTuple2OptionList, &xs}
}
func (q BoolListQueue) Drop(n int) BoolListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolListQueue{&NilBoolListList, &xs}
}
func (q StringListQueue) Drop(n int) StringListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringListQueue{&NilStringListList, &xs}
}
func (q IntListQueue) Drop(n int) IntListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntListQueue{&NilIntListList, &xs}
}
func (q Int64ListQueue) Drop(n int) Int64ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64ListQueue{&NilInt64ListList, &xs}
}
func (q ByteListQueue) Drop(n int) ByteListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteListQueue{&NilByteListList, &xs}
}
func (q RuneListQueue) Drop(n int) RuneListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneListQueue{&NilRuneListList, &xs}
}
func (q Float32ListQueue) Drop(n int) Float32ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32ListQueue{&NilFloat32ListList, &xs}
}
func (q Float64ListQueue) Drop(n int) Float64ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64ListQueue{&NilFloat64ListList, &xs}
}
func (q AnyListQueue) Drop(n int) AnyListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyListQueue{&NilAnyListList, &xs}
}
func (q Tuple2ListQueue) Drop(n int) Tuple2ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2ListQueue{&NilTuple2ListList, &xs}
}
