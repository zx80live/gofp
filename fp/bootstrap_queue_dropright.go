// bootstrap_queue_dropright.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) DropRight(n int) BoolQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolQueue{&xs, &NilBoolList}
}
func (q StringQueue) DropRight(n int) StringQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringQueue{&xs, &NilStringList}
}
func (q IntQueue) DropRight(n int) IntQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntQueue{&xs, &NilIntList}
}
func (q Int64Queue) DropRight(n int) Int64Queue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64Queue{&xs, &NilInt64List}
}
func (q ByteQueue) DropRight(n int) ByteQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteQueue{&xs, &NilByteList}
}
func (q RuneQueue) DropRight(n int) RuneQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneQueue{&xs, &NilRuneList}
}
func (q Float32Queue) DropRight(n int) Float32Queue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32Queue{&xs, &NilFloat32List}
}
func (q Float64Queue) DropRight(n int) Float64Queue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64Queue{&xs, &NilFloat64List}
}
func (q AnyQueue) DropRight(n int) AnyQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyQueue{&xs, &NilAnyList}
}
func (q Tuple2Queue) DropRight(n int) Tuple2Queue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2Queue{&xs, &NilTuple2List}
}
func (q BoolArrayQueue) DropRight(n int) BoolArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolArrayQueue{&xs, &NilBoolArrayList}
}
func (q StringArrayQueue) DropRight(n int) StringArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringArrayQueue{&xs, &NilStringArrayList}
}
func (q IntArrayQueue) DropRight(n int) IntArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntArrayQueue{&xs, &NilIntArrayList}
}
func (q Int64ArrayQueue) DropRight(n int) Int64ArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64ArrayQueue{&xs, &NilInt64ArrayList}
}
func (q ByteArrayQueue) DropRight(n int) ByteArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteArrayQueue{&xs, &NilByteArrayList}
}
func (q RuneArrayQueue) DropRight(n int) RuneArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneArrayQueue{&xs, &NilRuneArrayList}
}
func (q Float32ArrayQueue) DropRight(n int) Float32ArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32ArrayQueue{&xs, &NilFloat32ArrayList}
}
func (q Float64ArrayQueue) DropRight(n int) Float64ArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64ArrayQueue{&xs, &NilFloat64ArrayList}
}
func (q AnyArrayQueue) DropRight(n int) AnyArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyArrayQueue{&xs, &NilAnyArrayList}
}
func (q Tuple2ArrayQueue) DropRight(n int) Tuple2ArrayQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2ArrayQueue{&xs, &NilTuple2ArrayList}
}
func (q BoolOptionQueue) DropRight(n int) BoolOptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolOptionQueue{&xs, &NilBoolOptionList}
}
func (q StringOptionQueue) DropRight(n int) StringOptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringOptionQueue{&xs, &NilStringOptionList}
}
func (q IntOptionQueue) DropRight(n int) IntOptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntOptionQueue{&xs, &NilIntOptionList}
}
func (q Int64OptionQueue) DropRight(n int) Int64OptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64OptionQueue{&xs, &NilInt64OptionList}
}
func (q ByteOptionQueue) DropRight(n int) ByteOptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteOptionQueue{&xs, &NilByteOptionList}
}
func (q RuneOptionQueue) DropRight(n int) RuneOptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneOptionQueue{&xs, &NilRuneOptionList}
}
func (q Float32OptionQueue) DropRight(n int) Float32OptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32OptionQueue{&xs, &NilFloat32OptionList}
}
func (q Float64OptionQueue) DropRight(n int) Float64OptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64OptionQueue{&xs, &NilFloat64OptionList}
}
func (q AnyOptionQueue) DropRight(n int) AnyOptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyOptionQueue{&xs, &NilAnyOptionList}
}
func (q Tuple2OptionQueue) DropRight(n int) Tuple2OptionQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2OptionQueue{&xs, &NilTuple2OptionList}
}
func (q BoolListQueue) DropRight(n int) BoolListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return BoolListQueue{&xs, &NilBoolListList}
}
func (q StringListQueue) DropRight(n int) StringListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return StringListQueue{&xs, &NilStringListList}
}
func (q IntListQueue) DropRight(n int) IntListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return IntListQueue{&xs, &NilIntListList}
}
func (q Int64ListQueue) DropRight(n int) Int64ListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Int64ListQueue{&xs, &NilInt64ListList}
}
func (q ByteListQueue) DropRight(n int) ByteListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return ByteListQueue{&xs, &NilByteListList}
}
func (q RuneListQueue) DropRight(n int) RuneListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return RuneListQueue{&xs, &NilRuneListList}
}
func (q Float32ListQueue) DropRight(n int) Float32ListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float32ListQueue{&xs, &NilFloat32ListList}
}
func (q Float64ListQueue) DropRight(n int) Float64ListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Float64ListQueue{&xs, &NilFloat64ListList}
}
func (q AnyListQueue) DropRight(n int) AnyListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return AnyListQueue{&xs, &NilAnyListList}
}
func (q Tuple2ListQueue) DropRight(n int) Tuple2ListQueue {
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		xs = *xs.tail
	}
	return Tuple2ListQueue{&xs, &NilTuple2ListList}
}
