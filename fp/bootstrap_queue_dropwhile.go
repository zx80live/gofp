// bootstrap_queue_dropwhile.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) DropWhile(p func(bool) bool) BoolQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return BoolQueue{&NilBoolList, &xs}
}
func (q StringQueue) DropWhile(p func(string) bool) StringQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return StringQueue{&NilStringList, &xs}
}
func (q IntQueue) DropWhile(p func(int) bool) IntQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return IntQueue{&NilIntList, &xs}
}
func (q Int64Queue) DropWhile(p func(int64) bool) Int64Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Int64Queue{&NilInt64List, &xs}
}
func (q ByteQueue) DropWhile(p func(byte) bool) ByteQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return ByteQueue{&NilByteList, &xs}
}
func (q RuneQueue) DropWhile(p func(rune) bool) RuneQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return RuneQueue{&NilRuneList, &xs}
}
func (q Float32Queue) DropWhile(p func(float32) bool) Float32Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float32Queue{&NilFloat32List, &xs}
}
func (q Float64Queue) DropWhile(p func(float64) bool) Float64Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float64Queue{&NilFloat64List, &xs}
}
func (q AnyQueue) DropWhile(p func(Any) bool) AnyQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return AnyQueue{&NilAnyList, &xs}
}
func (q Tuple2Queue) DropWhile(p func(Tuple2) bool) Tuple2Queue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Tuple2Queue{&NilTuple2List, &xs}
}
func (q BoolArrayQueue) DropWhile(p func([]bool) bool) BoolArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return BoolArrayQueue{&NilBoolArrayList, &xs}
}
func (q StringArrayQueue) DropWhile(p func([]string) bool) StringArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return StringArrayQueue{&NilStringArrayList, &xs}
}
func (q IntArrayQueue) DropWhile(p func([]int) bool) IntArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return IntArrayQueue{&NilIntArrayList, &xs}
}
func (q Int64ArrayQueue) DropWhile(p func([]int64) bool) Int64ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Int64ArrayQueue{&NilInt64ArrayList, &xs}
}
func (q ByteArrayQueue) DropWhile(p func([]byte) bool) ByteArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return ByteArrayQueue{&NilByteArrayList, &xs}
}
func (q RuneArrayQueue) DropWhile(p func([]rune) bool) RuneArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return RuneArrayQueue{&NilRuneArrayList, &xs}
}
func (q Float32ArrayQueue) DropWhile(p func([]float32) bool) Float32ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float32ArrayQueue{&NilFloat32ArrayList, &xs}
}
func (q Float64ArrayQueue) DropWhile(p func([]float64) bool) Float64ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float64ArrayQueue{&NilFloat64ArrayList, &xs}
}
func (q AnyArrayQueue) DropWhile(p func([]Any) bool) AnyArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return AnyArrayQueue{&NilAnyArrayList, &xs}
}
func (q Tuple2ArrayQueue) DropWhile(p func([]Tuple2) bool) Tuple2ArrayQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Tuple2ArrayQueue{&NilTuple2ArrayList, &xs}
}
func (q BoolOptionQueue) DropWhile(p func(BoolOption) bool) BoolOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return BoolOptionQueue{&NilBoolOptionList, &xs}
}
func (q StringOptionQueue) DropWhile(p func(StringOption) bool) StringOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return StringOptionQueue{&NilStringOptionList, &xs}
}
func (q IntOptionQueue) DropWhile(p func(IntOption) bool) IntOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return IntOptionQueue{&NilIntOptionList, &xs}
}
func (q Int64OptionQueue) DropWhile(p func(Int64Option) bool) Int64OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Int64OptionQueue{&NilInt64OptionList, &xs}
}
func (q ByteOptionQueue) DropWhile(p func(ByteOption) bool) ByteOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return ByteOptionQueue{&NilByteOptionList, &xs}
}
func (q RuneOptionQueue) DropWhile(p func(RuneOption) bool) RuneOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return RuneOptionQueue{&NilRuneOptionList, &xs}
}
func (q Float32OptionQueue) DropWhile(p func(Float32Option) bool) Float32OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float32OptionQueue{&NilFloat32OptionList, &xs}
}
func (q Float64OptionQueue) DropWhile(p func(Float64Option) bool) Float64OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float64OptionQueue{&NilFloat64OptionList, &xs}
}
func (q AnyOptionQueue) DropWhile(p func(AnyOption) bool) AnyOptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return AnyOptionQueue{&NilAnyOptionList, &xs}
}
func (q Tuple2OptionQueue) DropWhile(p func(Tuple2Option) bool) Tuple2OptionQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Tuple2OptionQueue{&NilTuple2OptionList, &xs}
}
func (q BoolListQueue) DropWhile(p func(BoolList) bool) BoolListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return BoolListQueue{&NilBoolListList, &xs}
}
func (q StringListQueue) DropWhile(p func(StringList) bool) StringListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return StringListQueue{&NilStringListList, &xs}
}
func (q IntListQueue) DropWhile(p func(IntList) bool) IntListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return IntListQueue{&NilIntListList, &xs}
}
func (q Int64ListQueue) DropWhile(p func(Int64List) bool) Int64ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Int64ListQueue{&NilInt64ListList, &xs}
}
func (q ByteListQueue) DropWhile(p func(ByteList) bool) ByteListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return ByteListQueue{&NilByteListList, &xs}
}
func (q RuneListQueue) DropWhile(p func(RuneList) bool) RuneListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return RuneListQueue{&NilRuneListList, &xs}
}
func (q Float32ListQueue) DropWhile(p func(Float32List) bool) Float32ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float32ListQueue{&NilFloat32ListList, &xs}
}
func (q Float64ListQueue) DropWhile(p func(Float64List) bool) Float64ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Float64ListQueue{&NilFloat64ListList, &xs}
}
func (q AnyListQueue) DropWhile(p func(AnyList) bool) AnyListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return AnyListQueue{&NilAnyListList, &xs}
}
func (q Tuple2ListQueue) DropWhile(p func(Tuple2List) bool) Tuple2ListQueue {
	xs := *q.swap().out

	for i := 0; xs.NonEmpty() && p(*xs.head); i++ {
		xs = *xs.tail
	}
	return Tuple2ListQueue{&NilTuple2ListList, &xs}
}
