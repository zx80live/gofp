// bootstrap_queue_equals.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (a BoolQueue) Equals(b BoolQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !BoolEquals(Bool(h1), Bool(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a StringQueue) Equals(b StringQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !StringEquals(String(h1), String(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a IntQueue) Equals(b IntQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !IntEquals(Int(h1), Int(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Int64Queue) Equals(b Int64Queue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Int64Equals(Int64(h1), Int64(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a ByteQueue) Equals(b ByteQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !ByteEquals(Byte(h1), Byte(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a RuneQueue) Equals(b RuneQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !RuneEquals(Rune(h1), Rune(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float32Queue) Equals(b Float32Queue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float32Equals(Float32(h1), Float32(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float64Queue) Equals(b Float64Queue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float64Equals(Float64(h1), Float64(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a AnyQueue) Equals(b AnyQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !AnyEquals(Any(h1), Any(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Tuple2Queue) Equals(b Tuple2Queue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Tuple2Equals(Tuple2(h1), Tuple2(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a BoolArrayQueue) Equals(b BoolArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !BoolArrayEquals(BoolArray(h1), BoolArray(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a StringArrayQueue) Equals(b StringArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !StringArrayEquals(StringArray(h1), StringArray(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a IntArrayQueue) Equals(b IntArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !IntArrayEquals(IntArray(h1), IntArray(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Int64ArrayQueue) Equals(b Int64ArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Int64ArrayEquals(Int64Array(h1), Int64Array(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a ByteArrayQueue) Equals(b ByteArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !ByteArrayEquals(ByteArray(h1), ByteArray(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a RuneArrayQueue) Equals(b RuneArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !RuneArrayEquals(RuneArray(h1), RuneArray(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float32ArrayQueue) Equals(b Float32ArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float32ArrayEquals(Float32Array(h1), Float32Array(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float64ArrayQueue) Equals(b Float64ArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float64ArrayEquals(Float64Array(h1), Float64Array(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a AnyArrayQueue) Equals(b AnyArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !AnyArrayEquals(AnyArray(h1), AnyArray(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Tuple2ArrayQueue) Equals(b Tuple2ArrayQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Tuple2ArrayEquals(Tuple2Array(h1), Tuple2Array(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a BoolOptionQueue) Equals(b BoolOptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !BoolOptionEquals(BoolOption(h1), BoolOption(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a StringOptionQueue) Equals(b StringOptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !StringOptionEquals(StringOption(h1), StringOption(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a IntOptionQueue) Equals(b IntOptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !IntOptionEquals(IntOption(h1), IntOption(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Int64OptionQueue) Equals(b Int64OptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Int64OptionEquals(Int64Option(h1), Int64Option(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a ByteOptionQueue) Equals(b ByteOptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !ByteOptionEquals(ByteOption(h1), ByteOption(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a RuneOptionQueue) Equals(b RuneOptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !RuneOptionEquals(RuneOption(h1), RuneOption(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float32OptionQueue) Equals(b Float32OptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float32OptionEquals(Float32Option(h1), Float32Option(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float64OptionQueue) Equals(b Float64OptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float64OptionEquals(Float64Option(h1), Float64Option(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a AnyOptionQueue) Equals(b AnyOptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !AnyOptionEquals(AnyOption(h1), AnyOption(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Tuple2OptionQueue) Equals(b Tuple2OptionQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Tuple2OptionEquals(Tuple2Option(h1), Tuple2Option(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a BoolListQueue) Equals(b BoolListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !BoolListEquals(BoolList(h1), BoolList(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a StringListQueue) Equals(b StringListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !StringListEquals(StringList(h1), StringList(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a IntListQueue) Equals(b IntListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !IntListEquals(IntList(h1), IntList(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Int64ListQueue) Equals(b Int64ListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Int64ListEquals(Int64List(h1), Int64List(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a ByteListQueue) Equals(b ByteListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !ByteListEquals(ByteList(h1), ByteList(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a RuneListQueue) Equals(b RuneListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !RuneListEquals(RuneList(h1), RuneList(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float32ListQueue) Equals(b Float32ListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float32ListEquals(Float32List(h1), Float32List(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Float64ListQueue) Equals(b Float64ListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Float64ListEquals(Float64List(h1), Float64List(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a AnyListQueue) Equals(b AnyListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !AnyListEquals(AnyList(h1), AnyList(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
func (a Tuple2ListQueue) Equals(b Tuple2ListQueue) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	if len1 == 0 {
		return true
	}
	xs1 := a
	xs2 := b
	for {
		h1, t1 := xs1.Dequeue()
		h2, t2 := xs2.Dequeue()

		if !Tuple2ListEquals(Tuple2List(h1), Tuple2List(h2)) {
			return false
		}

		if t1.IsEmpty() {
			break
		}
		xs1 = t1
		xs2 = t2
	}
	return true
}
