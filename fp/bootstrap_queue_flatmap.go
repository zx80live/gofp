// bootstrap_queue_flatmap.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (m BoolQueue) FlatMapBool(f func(bool) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapString(f func(bool) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapInt(f func(bool) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapInt64(f func(bool) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapByte(f func(bool) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapRune(f func(bool) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapFloat32(f func(bool) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapFloat64(f func(bool) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapAny(f func(bool) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolQueue) FlatMapTuple2(f func(bool) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapBool(f func(string) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapString(f func(string) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapInt(f func(string) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapInt64(f func(string) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapByte(f func(string) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapRune(f func(string) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapFloat32(f func(string) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapFloat64(f func(string) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapAny(f func(string) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringQueue) FlatMapTuple2(f func(string) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapBool(f func(int) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapString(f func(int) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapInt(f func(int) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapInt64(f func(int) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapByte(f func(int) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapRune(f func(int) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapFloat32(f func(int) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapFloat64(f func(int) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapAny(f func(int) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntQueue) FlatMapTuple2(f func(int) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapBool(f func(int64) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapString(f func(int64) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapInt(f func(int64) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapInt64(f func(int64) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapByte(f func(int64) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapRune(f func(int64) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapFloat32(f func(int64) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapFloat64(f func(int64) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapAny(f func(int64) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64Queue) FlatMapTuple2(f func(int64) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapBool(f func(byte) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapString(f func(byte) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapInt(f func(byte) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapInt64(f func(byte) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapByte(f func(byte) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapRune(f func(byte) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapFloat32(f func(byte) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapFloat64(f func(byte) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapAny(f func(byte) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteQueue) FlatMapTuple2(f func(byte) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapBool(f func(rune) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapString(f func(rune) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapInt(f func(rune) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapInt64(f func(rune) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapByte(f func(rune) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapRune(f func(rune) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapFloat32(f func(rune) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapFloat64(f func(rune) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapAny(f func(rune) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneQueue) FlatMapTuple2(f func(rune) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapBool(f func(float32) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapString(f func(float32) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapInt(f func(float32) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapInt64(f func(float32) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapByte(f func(float32) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapRune(f func(float32) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapFloat32(f func(float32) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapFloat64(f func(float32) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapAny(f func(float32) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32Queue) FlatMapTuple2(f func(float32) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapBool(f func(float64) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapString(f func(float64) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapInt(f func(float64) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapInt64(f func(float64) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapByte(f func(float64) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapRune(f func(float64) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapFloat32(f func(float64) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapFloat64(f func(float64) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapAny(f func(float64) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64Queue) FlatMapTuple2(f func(float64) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapBool(f func(Any) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapString(f func(Any) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapInt(f func(Any) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapInt64(f func(Any) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapByte(f func(Any) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapRune(f func(Any) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapFloat32(f func(Any) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapFloat64(f func(Any) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapAny(f func(Any) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyQueue) FlatMapTuple2(f func(Any) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapBool(f func(Tuple2) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapString(f func(Tuple2) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapInt(f func(Tuple2) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapInt64(f func(Tuple2) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapByte(f func(Tuple2) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapRune(f func(Tuple2) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapFloat32(f func(Tuple2) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapFloat64(f func(Tuple2) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapAny(f func(Tuple2) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2Queue) FlatMapTuple2(f func(Tuple2) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapBool(f func([]bool) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapString(f func([]bool) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapInt(f func([]bool) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapInt64(f func([]bool) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapByte(f func([]bool) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapRune(f func([]bool) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapFloat32(f func([]bool) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapFloat64(f func([]bool) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapAny(f func([]bool) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolArrayQueue) FlatMapTuple2(f func([]bool) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]bool(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapBool(f func([]string) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapString(f func([]string) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapInt(f func([]string) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapInt64(f func([]string) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapByte(f func([]string) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapRune(f func([]string) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapFloat32(f func([]string) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapFloat64(f func([]string) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapAny(f func([]string) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringArrayQueue) FlatMapTuple2(f func([]string) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]string(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapBool(f func([]int) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapString(f func([]int) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapInt(f func([]int) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapInt64(f func([]int) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapByte(f func([]int) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapRune(f func([]int) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapFloat32(f func([]int) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapFloat64(f func([]int) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapAny(f func([]int) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntArrayQueue) FlatMapTuple2(f func([]int) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapBool(f func([]int64) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapString(f func([]int64) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapInt(f func([]int64) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapInt64(f func([]int64) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapByte(f func([]int64) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapRune(f func([]int64) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapFloat32(f func([]int64) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapFloat64(f func([]int64) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapAny(f func([]int64) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ArrayQueue) FlatMapTuple2(f func([]int64) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]int64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapBool(f func([]byte) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapString(f func([]byte) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapInt(f func([]byte) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapInt64(f func([]byte) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapByte(f func([]byte) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapRune(f func([]byte) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapFloat32(f func([]byte) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapFloat64(f func([]byte) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapAny(f func([]byte) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteArrayQueue) FlatMapTuple2(f func([]byte) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]byte(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapBool(f func([]rune) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapString(f func([]rune) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapInt(f func([]rune) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapInt64(f func([]rune) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapByte(f func([]rune) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapRune(f func([]rune) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapFloat32(f func([]rune) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapFloat64(f func([]rune) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapAny(f func([]rune) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneArrayQueue) FlatMapTuple2(f func([]rune) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]rune(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapBool(f func([]float32) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapString(f func([]float32) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapInt(f func([]float32) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapInt64(f func([]float32) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapByte(f func([]float32) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapRune(f func([]float32) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapFloat32(f func([]float32) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapFloat64(f func([]float32) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapAny(f func([]float32) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ArrayQueue) FlatMapTuple2(f func([]float32) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float32(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapBool(f func([]float64) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapString(f func([]float64) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapInt(f func([]float64) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapInt64(f func([]float64) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapByte(f func([]float64) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapRune(f func([]float64) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapFloat32(f func([]float64) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapFloat64(f func([]float64) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapAny(f func([]float64) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ArrayQueue) FlatMapTuple2(f func([]float64) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]float64(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapBool(f func([]Any) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapString(f func([]Any) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapInt(f func([]Any) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapInt64(f func([]Any) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapByte(f func([]Any) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapRune(f func([]Any) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapFloat32(f func([]Any) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapFloat64(f func([]Any) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapAny(f func([]Any) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyArrayQueue) FlatMapTuple2(f func([]Any) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Any(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapBool(f func([]Tuple2) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapString(f func([]Tuple2) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapInt(f func([]Tuple2) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapInt64(f func([]Tuple2) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapByte(f func([]Tuple2) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapRune(f func([]Tuple2) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapFloat32(f func([]Tuple2) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapFloat64(f func([]Tuple2) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapAny(f func([]Tuple2) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ArrayQueue) FlatMapTuple2(f func([]Tuple2) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f([]Tuple2(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapBool(f func(BoolOption) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapString(f func(BoolOption) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapInt(f func(BoolOption) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapInt64(f func(BoolOption) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapByte(f func(BoolOption) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapRune(f func(BoolOption) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapFloat32(f func(BoolOption) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapFloat64(f func(BoolOption) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapAny(f func(BoolOption) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolOptionQueue) FlatMapTuple2(f func(BoolOption) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapBool(f func(StringOption) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapString(f func(StringOption) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapInt(f func(StringOption) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapInt64(f func(StringOption) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapByte(f func(StringOption) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapRune(f func(StringOption) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapFloat32(f func(StringOption) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapFloat64(f func(StringOption) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapAny(f func(StringOption) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringOptionQueue) FlatMapTuple2(f func(StringOption) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapBool(f func(IntOption) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapString(f func(IntOption) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapInt(f func(IntOption) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapInt64(f func(IntOption) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapByte(f func(IntOption) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapRune(f func(IntOption) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapFloat32(f func(IntOption) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapFloat64(f func(IntOption) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapAny(f func(IntOption) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntOptionQueue) FlatMapTuple2(f func(IntOption) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapBool(f func(Int64Option) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapString(f func(Int64Option) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapInt(f func(Int64Option) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapInt64(f func(Int64Option) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapByte(f func(Int64Option) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapRune(f func(Int64Option) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapFloat32(f func(Int64Option) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapFloat64(f func(Int64Option) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapAny(f func(Int64Option) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64OptionQueue) FlatMapTuple2(f func(Int64Option) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapBool(f func(ByteOption) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapString(f func(ByteOption) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapInt(f func(ByteOption) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapInt64(f func(ByteOption) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapByte(f func(ByteOption) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapRune(f func(ByteOption) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapFloat32(f func(ByteOption) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapFloat64(f func(ByteOption) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapAny(f func(ByteOption) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteOptionQueue) FlatMapTuple2(f func(ByteOption) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapBool(f func(RuneOption) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapString(f func(RuneOption) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapInt(f func(RuneOption) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapInt64(f func(RuneOption) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapByte(f func(RuneOption) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapRune(f func(RuneOption) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapFloat32(f func(RuneOption) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapFloat64(f func(RuneOption) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapAny(f func(RuneOption) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneOptionQueue) FlatMapTuple2(f func(RuneOption) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapBool(f func(Float32Option) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapString(f func(Float32Option) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapInt(f func(Float32Option) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapInt64(f func(Float32Option) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapByte(f func(Float32Option) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapRune(f func(Float32Option) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapFloat32(f func(Float32Option) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapFloat64(f func(Float32Option) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapAny(f func(Float32Option) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32OptionQueue) FlatMapTuple2(f func(Float32Option) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapBool(f func(Float64Option) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapString(f func(Float64Option) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapInt(f func(Float64Option) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapInt64(f func(Float64Option) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapByte(f func(Float64Option) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapRune(f func(Float64Option) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapFloat32(f func(Float64Option) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapFloat64(f func(Float64Option) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapAny(f func(Float64Option) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64OptionQueue) FlatMapTuple2(f func(Float64Option) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapBool(f func(AnyOption) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapString(f func(AnyOption) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapInt(f func(AnyOption) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapInt64(f func(AnyOption) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapByte(f func(AnyOption) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapRune(f func(AnyOption) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapFloat32(f func(AnyOption) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapFloat64(f func(AnyOption) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapAny(f func(AnyOption) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyOptionQueue) FlatMapTuple2(f func(AnyOption) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyOption(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapBool(f func(Tuple2Option) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapString(f func(Tuple2Option) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapInt(f func(Tuple2Option) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapInt64(f func(Tuple2Option) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapByte(f func(Tuple2Option) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapRune(f func(Tuple2Option) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapFloat32(f func(Tuple2Option) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapFloat64(f func(Tuple2Option) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapAny(f func(Tuple2Option) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2OptionQueue) FlatMapTuple2(f func(Tuple2Option) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2Option(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapBool(f func(BoolList) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapString(f func(BoolList) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapInt(f func(BoolList) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapInt64(f func(BoolList) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapByte(f func(BoolList) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapRune(f func(BoolList) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapFloat32(f func(BoolList) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapFloat64(f func(BoolList) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapAny(f func(BoolList) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m BoolListQueue) FlatMapTuple2(f func(BoolList) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(BoolList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapBool(f func(StringList) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapString(f func(StringList) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapInt(f func(StringList) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapInt64(f func(StringList) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapByte(f func(StringList) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapRune(f func(StringList) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapFloat32(f func(StringList) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapFloat64(f func(StringList) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapAny(f func(StringList) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m StringListQueue) FlatMapTuple2(f func(StringList) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(StringList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapBool(f func(IntList) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapString(f func(IntList) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapInt(f func(IntList) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapInt64(f func(IntList) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapByte(f func(IntList) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapRune(f func(IntList) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapFloat32(f func(IntList) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapFloat64(f func(IntList) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapAny(f func(IntList) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m IntListQueue) FlatMapTuple2(f func(IntList) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(IntList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapBool(f func(Int64List) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapString(f func(Int64List) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapInt(f func(Int64List) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapInt64(f func(Int64List) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapByte(f func(Int64List) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapRune(f func(Int64List) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapFloat32(f func(Int64List) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapFloat64(f func(Int64List) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapAny(f func(Int64List) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Int64ListQueue) FlatMapTuple2(f func(Int64List) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Int64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapBool(f func(ByteList) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapString(f func(ByteList) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapInt(f func(ByteList) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapInt64(f func(ByteList) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapByte(f func(ByteList) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapRune(f func(ByteList) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapFloat32(f func(ByteList) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapFloat64(f func(ByteList) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapAny(f func(ByteList) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m ByteListQueue) FlatMapTuple2(f func(ByteList) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(ByteList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapBool(f func(RuneList) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapString(f func(RuneList) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapInt(f func(RuneList) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapInt64(f func(RuneList) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapByte(f func(RuneList) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapRune(f func(RuneList) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapFloat32(f func(RuneList) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapFloat64(f func(RuneList) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapAny(f func(RuneList) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m RuneListQueue) FlatMapTuple2(f func(RuneList) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(RuneList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapBool(f func(Float32List) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapString(f func(Float32List) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapInt(f func(Float32List) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapInt64(f func(Float32List) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapByte(f func(Float32List) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapRune(f func(Float32List) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapFloat32(f func(Float32List) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapFloat64(f func(Float32List) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapAny(f func(Float32List) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float32ListQueue) FlatMapTuple2(f func(Float32List) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float32List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapBool(f func(Float64List) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapString(f func(Float64List) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapInt(f func(Float64List) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapInt64(f func(Float64List) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapByte(f func(Float64List) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapRune(f func(Float64List) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapFloat32(f func(Float64List) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapFloat64(f func(Float64List) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapAny(f func(Float64List) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Float64ListQueue) FlatMapTuple2(f func(Float64List) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Float64List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapBool(f func(AnyList) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapString(f func(AnyList) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapInt(f func(AnyList) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapInt64(f func(AnyList) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapByte(f func(AnyList) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapRune(f func(AnyList) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapFloat32(f func(AnyList) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapFloat64(f func(AnyList) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapAny(f func(AnyList) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m AnyListQueue) FlatMapTuple2(f func(AnyList) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(AnyList(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapBool(f func(Tuple2List) BoolQueue) BoolQueue {
	if m.IsEmpty() {
		return NilBoolQueue
	} else {
		acc := NilBoolQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(bool(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapString(f func(Tuple2List) StringQueue) StringQueue {
	if m.IsEmpty() {
		return NilStringQueue
	} else {
		acc := NilStringQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(string(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapInt(f func(Tuple2List) IntQueue) IntQueue {
	if m.IsEmpty() {
		return NilIntQueue
	} else {
		acc := NilIntQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapInt64(f func(Tuple2List) Int64Queue) Int64Queue {
	if m.IsEmpty() {
		return NilInt64Queue
	} else {
		acc := NilInt64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(int64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapByte(f func(Tuple2List) ByteQueue) ByteQueue {
	if m.IsEmpty() {
		return NilByteQueue
	} else {
		acc := NilByteQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(byte(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapRune(f func(Tuple2List) RuneQueue) RuneQueue {
	if m.IsEmpty() {
		return NilRuneQueue
	} else {
		acc := NilRuneQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(rune(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapFloat32(f func(Tuple2List) Float32Queue) Float32Queue {
	if m.IsEmpty() {
		return NilFloat32Queue
	} else {
		acc := NilFloat32Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float32(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapFloat64(f func(Tuple2List) Float64Queue) Float64Queue {
	if m.IsEmpty() {
		return NilFloat64Queue
	} else {
		acc := NilFloat64Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(float64(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapAny(f func(Tuple2List) AnyQueue) AnyQueue {
	if m.IsEmpty() {
		return NilAnyQueue
	} else {
		acc := NilAnyQueue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Any(inner.Next()))
			}
		}
		return acc
	}
}
func (m Tuple2ListQueue) FlatMapTuple2(f func(Tuple2List) Tuple2Queue) Tuple2Queue {
	if m.IsEmpty() {
		return NilTuple2Queue
	} else {
		acc := NilTuple2Queue
		it := m.Iterator()
		for it.HasNext() {
			inner := f(Tuple2List(it.Next())).Iterator()

			for inner.HasNext() {
				acc = acc.Enqueue(Tuple2(inner.Next()))
			}
		}
		return acc
	}
}
