// bootstrap_queue_foldleft.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) FoldLeftBool(z bool, f func(bool, bool) bool) bool {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftString(z string, f func(string, bool) string) string {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftInt(z int, f func(int, bool) int) int {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftInt64(z int64, f func(int64, bool) int64) int64 {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftByte(z byte, f func(byte, bool) byte) byte {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftRune(z rune, f func(rune, bool) rune) rune {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftFloat32(z float32, f func(float32, bool) float32) float32 {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftFloat64(z float64, f func(float64, bool) float64) float64 {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftAny(z Any, f func(Any, bool) Any) Any {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, bool) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, bool) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, bool) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, bool) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, bool) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, bool) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, bool) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, bool) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, bool) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, bool) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q BoolQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, bool) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e bool) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftBool(z bool, f func(bool, string) bool) bool {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftString(z string, f func(string, string) string) string {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftInt(z int, f func(int, string) int) int {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftInt64(z int64, f func(int64, string) int64) int64 {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftByte(z byte, f func(byte, string) byte) byte {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftRune(z rune, f func(rune, string) rune) rune {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftFloat32(z float32, f func(float32, string) float32) float32 {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftFloat64(z float64, f func(float64, string) float64) float64 {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftAny(z Any, f func(Any, string) Any) Any {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, string) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, string) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, string) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, string) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, string) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, string) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, string) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, string) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, string) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, string) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q StringQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, string) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e string) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftBool(z bool, f func(bool, int) bool) bool {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftString(z string, f func(string, int) string) string {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftInt(z int, f func(int, int) int) int {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftInt64(z int64, f func(int64, int) int64) int64 {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftByte(z byte, f func(byte, int) byte) byte {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftRune(z rune, f func(rune, int) rune) rune {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftFloat32(z float32, f func(float32, int) float32) float32 {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftFloat64(z float64, f func(float64, int) float64) float64 {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftAny(z Any, f func(Any, int) Any) Any {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, int) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, int) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, int) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, int) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, int) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, int) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, int) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, int) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, int) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, int) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q IntQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, int) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e int) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftBool(z bool, f func(bool, int64) bool) bool {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftString(z string, f func(string, int64) string) string {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftInt(z int, f func(int, int64) int) int {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftInt64(z int64, f func(int64, int64) int64) int64 {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftByte(z byte, f func(byte, int64) byte) byte {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftRune(z rune, f func(rune, int64) rune) rune {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftFloat32(z float32, f func(float32, int64) float32) float32 {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftFloat64(z float64, f func(float64, int64) float64) float64 {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftAny(z Any, f func(Any, int64) Any) Any {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftTuple2(z Tuple2, f func(Tuple2, int64) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, int64) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, int64) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, int64) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, int64) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, int64) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, int64) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, int64) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, int64) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, int64) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q Int64Queue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, int64) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e int64) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftBool(z bool, f func(bool, byte) bool) bool {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftString(z string, f func(string, byte) string) string {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftInt(z int, f func(int, byte) int) int {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftInt64(z int64, f func(int64, byte) int64) int64 {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftByte(z byte, f func(byte, byte) byte) byte {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftRune(z rune, f func(rune, byte) rune) rune {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftFloat32(z float32, f func(float32, byte) float32) float32 {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftFloat64(z float64, f func(float64, byte) float64) float64 {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftAny(z Any, f func(Any, byte) Any) Any {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, byte) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, byte) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, byte) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, byte) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, byte) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, byte) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, byte) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, byte) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, byte) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, byte) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q ByteQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, byte) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e byte) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftBool(z bool, f func(bool, rune) bool) bool {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftString(z string, f func(string, rune) string) string {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftInt(z int, f func(int, rune) int) int {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftInt64(z int64, f func(int64, rune) int64) int64 {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftByte(z byte, f func(byte, rune) byte) byte {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftRune(z rune, f func(rune, rune) rune) rune {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftFloat32(z float32, f func(float32, rune) float32) float32 {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftFloat64(z float64, f func(float64, rune) float64) float64 {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftAny(z Any, f func(Any, rune) Any) Any {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, rune) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, rune) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, rune) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, rune) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, rune) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, rune) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, rune) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, rune) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, rune) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, rune) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q RuneQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, rune) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e rune) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftBool(z bool, f func(bool, float32) bool) bool {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftString(z string, f func(string, float32) string) string {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftInt(z int, f func(int, float32) int) int {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftInt64(z int64, f func(int64, float32) int64) int64 {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftByte(z byte, f func(byte, float32) byte) byte {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftRune(z rune, f func(rune, float32) rune) rune {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftFloat32(z float32, f func(float32, float32) float32) float32 {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftFloat64(z float64, f func(float64, float32) float64) float64 {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftAny(z Any, f func(Any, float32) Any) Any {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftTuple2(z Tuple2, f func(Tuple2, float32) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, float32) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, float32) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, float32) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, float32) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, float32) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, float32) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, float32) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, float32) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, float32) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float32Queue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, float32) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e float32) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftBool(z bool, f func(bool, float64) bool) bool {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftString(z string, f func(string, float64) string) string {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftInt(z int, f func(int, float64) int) int {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftInt64(z int64, f func(int64, float64) int64) int64 {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftByte(z byte, f func(byte, float64) byte) byte {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftRune(z rune, f func(rune, float64) rune) rune {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftFloat32(z float32, f func(float32, float64) float32) float32 {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftFloat64(z float64, f func(float64, float64) float64) float64 {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftAny(z Any, f func(Any, float64) Any) Any {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftTuple2(z Tuple2, f func(Tuple2, float64) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, float64) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, float64) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, float64) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, float64) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, float64) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, float64) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, float64) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, float64) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, float64) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q Float64Queue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, float64) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e float64) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftBool(z bool, f func(bool, Any) bool) bool {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftString(z string, f func(string, Any) string) string {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftInt(z int, f func(int, Any) int) int {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftInt64(z int64, f func(int64, Any) int64) int64 {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftByte(z byte, f func(byte, Any) byte) byte {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftRune(z rune, f func(rune, Any) rune) rune {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftFloat32(z float32, f func(float32, Any) float32) float32 {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftFloat64(z float64, f func(float64, Any) float64) float64 {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftAny(z Any, f func(Any, Any) Any) Any {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, Any) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, Any) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, Any) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, Any) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, Any) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, Any) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, Any) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, Any) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, Any) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, Any) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q AnyQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, Any) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e Any) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftBool(z bool, f func(bool, Tuple2) bool) bool {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftString(z string, f func(string, Tuple2) string) string {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftInt(z int, f func(int, Tuple2) int) int {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftInt64(z int64, f func(int64, Tuple2) int64) int64 {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftByte(z byte, f func(byte, Tuple2) byte) byte {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftRune(z rune, f func(rune, Tuple2) rune) rune {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftFloat32(z float32, f func(float32, Tuple2) float32) float32 {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftFloat64(z float64, f func(float64, Tuple2) float64) float64 {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftAny(z Any, f func(Any, Tuple2) Any) Any {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftTuple2(z Tuple2, f func(Tuple2, Tuple2) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, Tuple2) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, Tuple2) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, Tuple2) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, Tuple2) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, Tuple2) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, Tuple2) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, Tuple2) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, Tuple2) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, Tuple2) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q Tuple2Queue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, Tuple2) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e Tuple2) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftBool(z bool, f func(bool, BoolOption) bool) bool {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftString(z string, f func(string, BoolOption) string) string {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftInt(z int, f func(int, BoolOption) int) int {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftInt64(z int64, f func(int64, BoolOption) int64) int64 {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftByte(z byte, f func(byte, BoolOption) byte) byte {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftRune(z rune, f func(rune, BoolOption) rune) rune {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftFloat32(z float32, f func(float32, BoolOption) float32) float32 {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftFloat64(z float64, f func(float64, BoolOption) float64) float64 {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftAny(z Any, f func(Any, BoolOption) Any) Any {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, BoolOption) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, BoolOption) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, BoolOption) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, BoolOption) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, BoolOption) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, BoolOption) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, BoolOption) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, BoolOption) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, BoolOption) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, BoolOption) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q BoolOptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, BoolOption) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e BoolOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftBool(z bool, f func(bool, StringOption) bool) bool {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftString(z string, f func(string, StringOption) string) string {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftInt(z int, f func(int, StringOption) int) int {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftInt64(z int64, f func(int64, StringOption) int64) int64 {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftByte(z byte, f func(byte, StringOption) byte) byte {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftRune(z rune, f func(rune, StringOption) rune) rune {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftFloat32(z float32, f func(float32, StringOption) float32) float32 {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftFloat64(z float64, f func(float64, StringOption) float64) float64 {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftAny(z Any, f func(Any, StringOption) Any) Any {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, StringOption) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, StringOption) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, StringOption) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, StringOption) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, StringOption) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, StringOption) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, StringOption) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, StringOption) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, StringOption) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, StringOption) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q StringOptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, StringOption) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e StringOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftBool(z bool, f func(bool, IntOption) bool) bool {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftString(z string, f func(string, IntOption) string) string {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftInt(z int, f func(int, IntOption) int) int {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftInt64(z int64, f func(int64, IntOption) int64) int64 {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftByte(z byte, f func(byte, IntOption) byte) byte {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftRune(z rune, f func(rune, IntOption) rune) rune {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftFloat32(z float32, f func(float32, IntOption) float32) float32 {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftFloat64(z float64, f func(float64, IntOption) float64) float64 {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftAny(z Any, f func(Any, IntOption) Any) Any {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, IntOption) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, IntOption) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, IntOption) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, IntOption) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, IntOption) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, IntOption) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, IntOption) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, IntOption) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, IntOption) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, IntOption) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q IntOptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, IntOption) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e IntOption) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftBool(z bool, f func(bool, Int64Option) bool) bool {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftString(z string, f func(string, Int64Option) string) string {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftInt(z int, f func(int, Int64Option) int) int {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftInt64(z int64, f func(int64, Int64Option) int64) int64 {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftByte(z byte, f func(byte, Int64Option) byte) byte {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftRune(z rune, f func(rune, Int64Option) rune) rune {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftFloat32(z float32, f func(float32, Int64Option) float32) float32 {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftFloat64(z float64, f func(float64, Int64Option) float64) float64 {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftAny(z Any, f func(Any, Int64Option) Any) Any {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, Int64Option) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, Int64Option) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, Int64Option) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, Int64Option) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, Int64Option) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, Int64Option) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, Int64Option) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, Int64Option) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, Int64Option) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, Int64Option) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q Int64OptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, Int64Option) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e Int64Option) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftBool(z bool, f func(bool, ByteOption) bool) bool {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftString(z string, f func(string, ByteOption) string) string {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftInt(z int, f func(int, ByteOption) int) int {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftInt64(z int64, f func(int64, ByteOption) int64) int64 {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftByte(z byte, f func(byte, ByteOption) byte) byte {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftRune(z rune, f func(rune, ByteOption) rune) rune {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftFloat32(z float32, f func(float32, ByteOption) float32) float32 {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftFloat64(z float64, f func(float64, ByteOption) float64) float64 {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftAny(z Any, f func(Any, ByteOption) Any) Any {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, ByteOption) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, ByteOption) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, ByteOption) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, ByteOption) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, ByteOption) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, ByteOption) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, ByteOption) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, ByteOption) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, ByteOption) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, ByteOption) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q ByteOptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, ByteOption) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e ByteOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftBool(z bool, f func(bool, RuneOption) bool) bool {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftString(z string, f func(string, RuneOption) string) string {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftInt(z int, f func(int, RuneOption) int) int {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftInt64(z int64, f func(int64, RuneOption) int64) int64 {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftByte(z byte, f func(byte, RuneOption) byte) byte {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftRune(z rune, f func(rune, RuneOption) rune) rune {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftFloat32(z float32, f func(float32, RuneOption) float32) float32 {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftFloat64(z float64, f func(float64, RuneOption) float64) float64 {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftAny(z Any, f func(Any, RuneOption) Any) Any {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, RuneOption) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, RuneOption) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, RuneOption) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, RuneOption) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, RuneOption) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, RuneOption) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, RuneOption) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, RuneOption) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, RuneOption) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, RuneOption) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q RuneOptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, RuneOption) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e RuneOption) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftBool(z bool, f func(bool, Float32Option) bool) bool {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftString(z string, f func(string, Float32Option) string) string {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftInt(z int, f func(int, Float32Option) int) int {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftInt64(z int64, f func(int64, Float32Option) int64) int64 {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftByte(z byte, f func(byte, Float32Option) byte) byte {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftRune(z rune, f func(rune, Float32Option) rune) rune {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftFloat32(z float32, f func(float32, Float32Option) float32) float32 {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftFloat64(z float64, f func(float64, Float32Option) float64) float64 {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftAny(z Any, f func(Any, Float32Option) Any) Any {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, Float32Option) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, Float32Option) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, Float32Option) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, Float32Option) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, Float32Option) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, Float32Option) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, Float32Option) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, Float32Option) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, Float32Option) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, Float32Option) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float32OptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, Float32Option) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e Float32Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftBool(z bool, f func(bool, Float64Option) bool) bool {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftString(z string, f func(string, Float64Option) string) string {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftInt(z int, f func(int, Float64Option) int) int {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftInt64(z int64, f func(int64, Float64Option) int64) int64 {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftByte(z byte, f func(byte, Float64Option) byte) byte {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftRune(z rune, f func(rune, Float64Option) rune) rune {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftFloat32(z float32, f func(float32, Float64Option) float32) float32 {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftFloat64(z float64, f func(float64, Float64Option) float64) float64 {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftAny(z Any, f func(Any, Float64Option) Any) Any {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, Float64Option) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, Float64Option) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, Float64Option) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, Float64Option) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, Float64Option) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, Float64Option) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, Float64Option) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, Float64Option) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, Float64Option) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, Float64Option) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q Float64OptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, Float64Option) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e Float64Option) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftBool(z bool, f func(bool, AnyOption) bool) bool {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftString(z string, f func(string, AnyOption) string) string {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftInt(z int, f func(int, AnyOption) int) int {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftInt64(z int64, f func(int64, AnyOption) int64) int64 {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftByte(z byte, f func(byte, AnyOption) byte) byte {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftRune(z rune, f func(rune, AnyOption) rune) rune {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftFloat32(z float32, f func(float32, AnyOption) float32) float32 {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftFloat64(z float64, f func(float64, AnyOption) float64) float64 {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftAny(z Any, f func(Any, AnyOption) Any) Any {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, AnyOption) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, AnyOption) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, AnyOption) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, AnyOption) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, AnyOption) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, AnyOption) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, AnyOption) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, AnyOption) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, AnyOption) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, AnyOption) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q AnyOptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, AnyOption) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e AnyOption) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftBool(z bool, f func(bool, Tuple2Option) bool) bool {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftString(z string, f func(string, Tuple2Option) string) string {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftInt(z int, f func(int, Tuple2Option) int) int {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftInt64(z int64, f func(int64, Tuple2Option) int64) int64 {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftByte(z byte, f func(byte, Tuple2Option) byte) byte {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftRune(z rune, f func(rune, Tuple2Option) rune) rune {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftFloat32(z float32, f func(float32, Tuple2Option) float32) float32 {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftFloat64(z float64, f func(float64, Tuple2Option) float64) float64 {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftAny(z Any, f func(Any, Tuple2Option) Any) Any {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftTuple2(z Tuple2, f func(Tuple2, Tuple2Option) Tuple2) Tuple2 {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftBoolQueue(z BoolQueue, f func(BoolQueue, Tuple2Option) BoolQueue) BoolQueue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftStringQueue(z StringQueue, f func(StringQueue, Tuple2Option) StringQueue) StringQueue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftIntQueue(z IntQueue, f func(IntQueue, Tuple2Option) IntQueue) IntQueue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftInt64Queue(z Int64Queue, f func(Int64Queue, Tuple2Option) Int64Queue) Int64Queue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftByteQueue(z ByteQueue, f func(ByteQueue, Tuple2Option) ByteQueue) ByteQueue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftRuneQueue(z RuneQueue, f func(RuneQueue, Tuple2Option) RuneQueue) RuneQueue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftFloat32Queue(z Float32Queue, f func(Float32Queue, Tuple2Option) Float32Queue) Float32Queue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftFloat64Queue(z Float64Queue, f func(Float64Queue, Tuple2Option) Float64Queue) Float64Queue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftAnyQueue(z AnyQueue, f func(AnyQueue, Tuple2Option) AnyQueue) AnyQueue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
func (q Tuple2OptionQueue) FoldLeftTuple2Queue(z Tuple2Queue, f func(Tuple2Queue, Tuple2Option) Tuple2Queue) Tuple2Queue {
	acc := z
	q.Foreach(func(e Tuple2Option) { acc = f(acc, e) })
	return acc
}
