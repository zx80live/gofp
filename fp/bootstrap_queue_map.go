// bootstrap_queue_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) MapBool(f func(bool) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapString(f func(bool) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapInt(f func(bool) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapInt64(f func(bool) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapByte(f func(bool) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapRune(f func(bool) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat32(f func(bool) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat64(f func(bool) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapAny(f func(bool) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapTuple2(f func(bool) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapBoolArray(f func(bool) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapStringArray(f func(bool) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapIntArray(f func(bool) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapInt64Array(f func(bool) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapByteArray(f func(bool) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapRuneArray(f func(bool) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat32Array(f func(bool) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat64Array(f func(bool) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapAnyArray(f func(bool) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapTuple2Array(f func(bool) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapBoolOption(f func(bool) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapStringOption(f func(bool) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapIntOption(f func(bool) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapInt64Option(f func(bool) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapByteOption(f func(bool) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapRuneOption(f func(bool) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat32Option(f func(bool) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat64Option(f func(bool) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapAnyOption(f func(bool) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapTuple2Option(f func(bool) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapBoolList(f func(bool) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapStringList(f func(bool) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapIntList(f func(bool) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapInt64List(f func(bool) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapByteList(f func(bool) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapRuneList(f func(bool) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat32List(f func(bool) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapFloat64List(f func(bool) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapAnyList(f func(bool) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolQueue) MapTuple2List(f func(bool) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapBool(f func(string) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapString(f func(string) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapInt(f func(string) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapInt64(f func(string) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapByte(f func(string) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapRune(f func(string) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat32(f func(string) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat64(f func(string) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapAny(f func(string) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapTuple2(f func(string) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapBoolArray(f func(string) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapStringArray(f func(string) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapIntArray(f func(string) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapInt64Array(f func(string) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapByteArray(f func(string) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapRuneArray(f func(string) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat32Array(f func(string) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat64Array(f func(string) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapAnyArray(f func(string) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapTuple2Array(f func(string) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapBoolOption(f func(string) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapStringOption(f func(string) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapIntOption(f func(string) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapInt64Option(f func(string) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapByteOption(f func(string) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapRuneOption(f func(string) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat32Option(f func(string) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat64Option(f func(string) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapAnyOption(f func(string) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapTuple2Option(f func(string) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapBoolList(f func(string) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapStringList(f func(string) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapIntList(f func(string) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapInt64List(f func(string) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapByteList(f func(string) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapRuneList(f func(string) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat32List(f func(string) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapFloat64List(f func(string) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapAnyList(f func(string) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringQueue) MapTuple2List(f func(string) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapBool(f func(int) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapString(f func(int) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapInt(f func(int) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapInt64(f func(int) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapByte(f func(int) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapRune(f func(int) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat32(f func(int) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat64(f func(int) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapAny(f func(int) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapTuple2(f func(int) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapBoolArray(f func(int) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapStringArray(f func(int) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapIntArray(f func(int) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapInt64Array(f func(int) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapByteArray(f func(int) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapRuneArray(f func(int) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat32Array(f func(int) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat64Array(f func(int) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapAnyArray(f func(int) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapTuple2Array(f func(int) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapBoolOption(f func(int) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapStringOption(f func(int) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapIntOption(f func(int) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapInt64Option(f func(int) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapByteOption(f func(int) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapRuneOption(f func(int) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat32Option(f func(int) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat64Option(f func(int) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapAnyOption(f func(int) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapTuple2Option(f func(int) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapBoolList(f func(int) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapStringList(f func(int) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapIntList(f func(int) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapInt64List(f func(int) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapByteList(f func(int) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapRuneList(f func(int) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat32List(f func(int) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapFloat64List(f func(int) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapAnyList(f func(int) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntQueue) MapTuple2List(f func(int) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapBool(f func(int64) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapString(f func(int64) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapInt(f func(int64) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapInt64(f func(int64) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapByte(f func(int64) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapRune(f func(int64) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat32(f func(int64) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat64(f func(int64) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapAny(f func(int64) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapTuple2(f func(int64) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapBoolArray(f func(int64) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapStringArray(f func(int64) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapIntArray(f func(int64) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapInt64Array(f func(int64) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapByteArray(f func(int64) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapRuneArray(f func(int64) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat32Array(f func(int64) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat64Array(f func(int64) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapAnyArray(f func(int64) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapTuple2Array(f func(int64) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapBoolOption(f func(int64) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapStringOption(f func(int64) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapIntOption(f func(int64) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapInt64Option(f func(int64) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapByteOption(f func(int64) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapRuneOption(f func(int64) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat32Option(f func(int64) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat64Option(f func(int64) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapAnyOption(f func(int64) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapTuple2Option(f func(int64) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapBoolList(f func(int64) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapStringList(f func(int64) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapIntList(f func(int64) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapInt64List(f func(int64) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapByteList(f func(int64) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapRuneList(f func(int64) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat32List(f func(int64) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapFloat64List(f func(int64) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapAnyList(f func(int64) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64Queue) MapTuple2List(f func(int64) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapBool(f func(byte) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapString(f func(byte) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapInt(f func(byte) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapInt64(f func(byte) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapByte(f func(byte) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapRune(f func(byte) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat32(f func(byte) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat64(f func(byte) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapAny(f func(byte) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapTuple2(f func(byte) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapBoolArray(f func(byte) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapStringArray(f func(byte) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapIntArray(f func(byte) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapInt64Array(f func(byte) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapByteArray(f func(byte) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapRuneArray(f func(byte) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat32Array(f func(byte) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat64Array(f func(byte) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapAnyArray(f func(byte) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapTuple2Array(f func(byte) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapBoolOption(f func(byte) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapStringOption(f func(byte) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapIntOption(f func(byte) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapInt64Option(f func(byte) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapByteOption(f func(byte) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapRuneOption(f func(byte) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat32Option(f func(byte) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat64Option(f func(byte) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapAnyOption(f func(byte) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapTuple2Option(f func(byte) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapBoolList(f func(byte) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapStringList(f func(byte) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapIntList(f func(byte) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapInt64List(f func(byte) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapByteList(f func(byte) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapRuneList(f func(byte) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat32List(f func(byte) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapFloat64List(f func(byte) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapAnyList(f func(byte) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteQueue) MapTuple2List(f func(byte) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapBool(f func(rune) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapString(f func(rune) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapInt(f func(rune) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapInt64(f func(rune) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapByte(f func(rune) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapRune(f func(rune) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat32(f func(rune) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat64(f func(rune) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapAny(f func(rune) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapTuple2(f func(rune) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapBoolArray(f func(rune) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapStringArray(f func(rune) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapIntArray(f func(rune) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapInt64Array(f func(rune) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapByteArray(f func(rune) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapRuneArray(f func(rune) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat32Array(f func(rune) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat64Array(f func(rune) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapAnyArray(f func(rune) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapTuple2Array(f func(rune) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapBoolOption(f func(rune) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapStringOption(f func(rune) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapIntOption(f func(rune) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapInt64Option(f func(rune) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapByteOption(f func(rune) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapRuneOption(f func(rune) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat32Option(f func(rune) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat64Option(f func(rune) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapAnyOption(f func(rune) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapTuple2Option(f func(rune) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapBoolList(f func(rune) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapStringList(f func(rune) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapIntList(f func(rune) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapInt64List(f func(rune) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapByteList(f func(rune) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapRuneList(f func(rune) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat32List(f func(rune) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapFloat64List(f func(rune) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapAnyList(f func(rune) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneQueue) MapTuple2List(f func(rune) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapBool(f func(float32) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapString(f func(float32) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapInt(f func(float32) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapInt64(f func(float32) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapByte(f func(float32) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapRune(f func(float32) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat32(f func(float32) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat64(f func(float32) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapAny(f func(float32) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapTuple2(f func(float32) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapBoolArray(f func(float32) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapStringArray(f func(float32) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapIntArray(f func(float32) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapInt64Array(f func(float32) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapByteArray(f func(float32) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapRuneArray(f func(float32) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat32Array(f func(float32) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat64Array(f func(float32) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapAnyArray(f func(float32) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapTuple2Array(f func(float32) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapBoolOption(f func(float32) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapStringOption(f func(float32) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapIntOption(f func(float32) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapInt64Option(f func(float32) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapByteOption(f func(float32) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapRuneOption(f func(float32) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat32Option(f func(float32) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat64Option(f func(float32) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapAnyOption(f func(float32) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapTuple2Option(f func(float32) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapBoolList(f func(float32) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapStringList(f func(float32) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapIntList(f func(float32) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapInt64List(f func(float32) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapByteList(f func(float32) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapRuneList(f func(float32) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat32List(f func(float32) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapFloat64List(f func(float32) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapAnyList(f func(float32) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32Queue) MapTuple2List(f func(float32) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapBool(f func(float64) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapString(f func(float64) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapInt(f func(float64) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapInt64(f func(float64) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapByte(f func(float64) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapRune(f func(float64) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat32(f func(float64) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat64(f func(float64) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapAny(f func(float64) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapTuple2(f func(float64) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapBoolArray(f func(float64) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapStringArray(f func(float64) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapIntArray(f func(float64) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapInt64Array(f func(float64) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapByteArray(f func(float64) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapRuneArray(f func(float64) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat32Array(f func(float64) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat64Array(f func(float64) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapAnyArray(f func(float64) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapTuple2Array(f func(float64) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapBoolOption(f func(float64) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapStringOption(f func(float64) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapIntOption(f func(float64) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapInt64Option(f func(float64) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapByteOption(f func(float64) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapRuneOption(f func(float64) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat32Option(f func(float64) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat64Option(f func(float64) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapAnyOption(f func(float64) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapTuple2Option(f func(float64) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapBoolList(f func(float64) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapStringList(f func(float64) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapIntList(f func(float64) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapInt64List(f func(float64) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapByteList(f func(float64) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapRuneList(f func(float64) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat32List(f func(float64) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapFloat64List(f func(float64) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapAnyList(f func(float64) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64Queue) MapTuple2List(f func(float64) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapBool(f func(Any) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapString(f func(Any) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapInt(f func(Any) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapInt64(f func(Any) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapByte(f func(Any) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapRune(f func(Any) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat32(f func(Any) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat64(f func(Any) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapAny(f func(Any) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapTuple2(f func(Any) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapBoolArray(f func(Any) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapStringArray(f func(Any) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapIntArray(f func(Any) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapInt64Array(f func(Any) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapByteArray(f func(Any) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapRuneArray(f func(Any) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat32Array(f func(Any) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat64Array(f func(Any) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapAnyArray(f func(Any) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapTuple2Array(f func(Any) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapBoolOption(f func(Any) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapStringOption(f func(Any) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapIntOption(f func(Any) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapInt64Option(f func(Any) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapByteOption(f func(Any) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapRuneOption(f func(Any) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat32Option(f func(Any) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat64Option(f func(Any) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapAnyOption(f func(Any) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapTuple2Option(f func(Any) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapBoolList(f func(Any) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapStringList(f func(Any) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapIntList(f func(Any) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapInt64List(f func(Any) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapByteList(f func(Any) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapRuneList(f func(Any) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat32List(f func(Any) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapFloat64List(f func(Any) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapAnyList(f func(Any) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyQueue) MapTuple2List(f func(Any) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapBool(f func(Tuple2) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapString(f func(Tuple2) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapInt(f func(Tuple2) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapInt64(f func(Tuple2) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapByte(f func(Tuple2) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapRune(f func(Tuple2) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat32(f func(Tuple2) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat64(f func(Tuple2) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapAny(f func(Tuple2) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapTuple2(f func(Tuple2) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapBoolArray(f func(Tuple2) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapStringArray(f func(Tuple2) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapIntArray(f func(Tuple2) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapInt64Array(f func(Tuple2) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapByteArray(f func(Tuple2) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapRuneArray(f func(Tuple2) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat32Array(f func(Tuple2) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat64Array(f func(Tuple2) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapAnyArray(f func(Tuple2) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapTuple2Array(f func(Tuple2) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapBoolOption(f func(Tuple2) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapStringOption(f func(Tuple2) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapIntOption(f func(Tuple2) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapInt64Option(f func(Tuple2) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapByteOption(f func(Tuple2) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapRuneOption(f func(Tuple2) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat32Option(f func(Tuple2) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat64Option(f func(Tuple2) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapAnyOption(f func(Tuple2) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapTuple2Option(f func(Tuple2) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapBoolList(f func(Tuple2) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapStringList(f func(Tuple2) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapIntList(f func(Tuple2) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapInt64List(f func(Tuple2) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapByteList(f func(Tuple2) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapRuneList(f func(Tuple2) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat32List(f func(Tuple2) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapFloat64List(f func(Tuple2) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapAnyList(f func(Tuple2) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2Queue) MapTuple2List(f func(Tuple2) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapBool(f func([]bool) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapString(f func([]bool) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapInt(f func([]bool) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapInt64(f func([]bool) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapByte(f func([]bool) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapRune(f func([]bool) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat32(f func([]bool) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat64(f func([]bool) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapAny(f func([]bool) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapTuple2(f func([]bool) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapBoolArray(f func([]bool) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapStringArray(f func([]bool) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapIntArray(f func([]bool) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapInt64Array(f func([]bool) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapByteArray(f func([]bool) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapRuneArray(f func([]bool) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat32Array(f func([]bool) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat64Array(f func([]bool) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapAnyArray(f func([]bool) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapTuple2Array(f func([]bool) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapBoolOption(f func([]bool) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapStringOption(f func([]bool) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapIntOption(f func([]bool) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapInt64Option(f func([]bool) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapByteOption(f func([]bool) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapRuneOption(f func([]bool) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat32Option(f func([]bool) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat64Option(f func([]bool) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapAnyOption(f func([]bool) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapTuple2Option(f func([]bool) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapBoolList(f func([]bool) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapStringList(f func([]bool) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapIntList(f func([]bool) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapInt64List(f func([]bool) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapByteList(f func([]bool) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapRuneList(f func([]bool) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat32List(f func([]bool) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapFloat64List(f func([]bool) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapAnyList(f func([]bool) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolArrayQueue) MapTuple2List(f func([]bool) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapBool(f func([]string) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapString(f func([]string) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapInt(f func([]string) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapInt64(f func([]string) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapByte(f func([]string) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapRune(f func([]string) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat32(f func([]string) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat64(f func([]string) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapAny(f func([]string) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapTuple2(f func([]string) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapBoolArray(f func([]string) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapStringArray(f func([]string) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapIntArray(f func([]string) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapInt64Array(f func([]string) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapByteArray(f func([]string) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapRuneArray(f func([]string) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat32Array(f func([]string) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat64Array(f func([]string) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapAnyArray(f func([]string) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapTuple2Array(f func([]string) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapBoolOption(f func([]string) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapStringOption(f func([]string) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapIntOption(f func([]string) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapInt64Option(f func([]string) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapByteOption(f func([]string) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapRuneOption(f func([]string) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat32Option(f func([]string) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat64Option(f func([]string) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapAnyOption(f func([]string) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapTuple2Option(f func([]string) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapBoolList(f func([]string) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapStringList(f func([]string) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapIntList(f func([]string) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapInt64List(f func([]string) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapByteList(f func([]string) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapRuneList(f func([]string) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat32List(f func([]string) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapFloat64List(f func([]string) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapAnyList(f func([]string) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringArrayQueue) MapTuple2List(f func([]string) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapBool(f func([]int) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapString(f func([]int) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapInt(f func([]int) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapInt64(f func([]int) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapByte(f func([]int) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapRune(f func([]int) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat32(f func([]int) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat64(f func([]int) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapAny(f func([]int) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapTuple2(f func([]int) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapBoolArray(f func([]int) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapStringArray(f func([]int) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapIntArray(f func([]int) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapInt64Array(f func([]int) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapByteArray(f func([]int) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapRuneArray(f func([]int) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat32Array(f func([]int) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat64Array(f func([]int) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapAnyArray(f func([]int) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapTuple2Array(f func([]int) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapBoolOption(f func([]int) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapStringOption(f func([]int) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapIntOption(f func([]int) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapInt64Option(f func([]int) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapByteOption(f func([]int) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapRuneOption(f func([]int) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat32Option(f func([]int) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat64Option(f func([]int) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapAnyOption(f func([]int) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapTuple2Option(f func([]int) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapBoolList(f func([]int) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapStringList(f func([]int) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapIntList(f func([]int) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapInt64List(f func([]int) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapByteList(f func([]int) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapRuneList(f func([]int) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat32List(f func([]int) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapFloat64List(f func([]int) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapAnyList(f func([]int) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntArrayQueue) MapTuple2List(f func([]int) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapBool(f func([]int64) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapString(f func([]int64) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapInt(f func([]int64) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapInt64(f func([]int64) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapByte(f func([]int64) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapRune(f func([]int64) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat32(f func([]int64) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat64(f func([]int64) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapAny(f func([]int64) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapTuple2(f func([]int64) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapBoolArray(f func([]int64) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapStringArray(f func([]int64) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapIntArray(f func([]int64) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapInt64Array(f func([]int64) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapByteArray(f func([]int64) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapRuneArray(f func([]int64) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat32Array(f func([]int64) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat64Array(f func([]int64) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapAnyArray(f func([]int64) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapTuple2Array(f func([]int64) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapBoolOption(f func([]int64) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapStringOption(f func([]int64) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapIntOption(f func([]int64) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapInt64Option(f func([]int64) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapByteOption(f func([]int64) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapRuneOption(f func([]int64) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat32Option(f func([]int64) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat64Option(f func([]int64) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapAnyOption(f func([]int64) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapTuple2Option(f func([]int64) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapBoolList(f func([]int64) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapStringList(f func([]int64) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapIntList(f func([]int64) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapInt64List(f func([]int64) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapByteList(f func([]int64) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapRuneList(f func([]int64) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat32List(f func([]int64) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapFloat64List(f func([]int64) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapAnyList(f func([]int64) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ArrayQueue) MapTuple2List(f func([]int64) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapBool(f func([]byte) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapString(f func([]byte) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapInt(f func([]byte) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapInt64(f func([]byte) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapByte(f func([]byte) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapRune(f func([]byte) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat32(f func([]byte) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat64(f func([]byte) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapAny(f func([]byte) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapTuple2(f func([]byte) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapBoolArray(f func([]byte) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapStringArray(f func([]byte) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapIntArray(f func([]byte) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapInt64Array(f func([]byte) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapByteArray(f func([]byte) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapRuneArray(f func([]byte) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat32Array(f func([]byte) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat64Array(f func([]byte) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapAnyArray(f func([]byte) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapTuple2Array(f func([]byte) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapBoolOption(f func([]byte) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapStringOption(f func([]byte) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapIntOption(f func([]byte) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapInt64Option(f func([]byte) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapByteOption(f func([]byte) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapRuneOption(f func([]byte) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat32Option(f func([]byte) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat64Option(f func([]byte) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapAnyOption(f func([]byte) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapTuple2Option(f func([]byte) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapBoolList(f func([]byte) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapStringList(f func([]byte) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapIntList(f func([]byte) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapInt64List(f func([]byte) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapByteList(f func([]byte) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapRuneList(f func([]byte) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat32List(f func([]byte) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapFloat64List(f func([]byte) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapAnyList(f func([]byte) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteArrayQueue) MapTuple2List(f func([]byte) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapBool(f func([]rune) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapString(f func([]rune) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapInt(f func([]rune) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapInt64(f func([]rune) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapByte(f func([]rune) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapRune(f func([]rune) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat32(f func([]rune) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat64(f func([]rune) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapAny(f func([]rune) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapTuple2(f func([]rune) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapBoolArray(f func([]rune) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapStringArray(f func([]rune) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapIntArray(f func([]rune) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapInt64Array(f func([]rune) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapByteArray(f func([]rune) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapRuneArray(f func([]rune) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat32Array(f func([]rune) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat64Array(f func([]rune) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapAnyArray(f func([]rune) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapTuple2Array(f func([]rune) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapBoolOption(f func([]rune) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapStringOption(f func([]rune) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapIntOption(f func([]rune) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapInt64Option(f func([]rune) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapByteOption(f func([]rune) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapRuneOption(f func([]rune) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat32Option(f func([]rune) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat64Option(f func([]rune) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapAnyOption(f func([]rune) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapTuple2Option(f func([]rune) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapBoolList(f func([]rune) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapStringList(f func([]rune) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapIntList(f func([]rune) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapInt64List(f func([]rune) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapByteList(f func([]rune) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapRuneList(f func([]rune) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat32List(f func([]rune) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapFloat64List(f func([]rune) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapAnyList(f func([]rune) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneArrayQueue) MapTuple2List(f func([]rune) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapBool(f func([]float32) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapString(f func([]float32) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapInt(f func([]float32) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapInt64(f func([]float32) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapByte(f func([]float32) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapRune(f func([]float32) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat32(f func([]float32) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat64(f func([]float32) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapAny(f func([]float32) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapTuple2(f func([]float32) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapBoolArray(f func([]float32) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapStringArray(f func([]float32) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapIntArray(f func([]float32) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapInt64Array(f func([]float32) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapByteArray(f func([]float32) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapRuneArray(f func([]float32) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat32Array(f func([]float32) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat64Array(f func([]float32) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapAnyArray(f func([]float32) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapTuple2Array(f func([]float32) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapBoolOption(f func([]float32) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapStringOption(f func([]float32) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapIntOption(f func([]float32) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapInt64Option(f func([]float32) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapByteOption(f func([]float32) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapRuneOption(f func([]float32) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat32Option(f func([]float32) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat64Option(f func([]float32) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapAnyOption(f func([]float32) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapTuple2Option(f func([]float32) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapBoolList(f func([]float32) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapStringList(f func([]float32) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapIntList(f func([]float32) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapInt64List(f func([]float32) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapByteList(f func([]float32) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapRuneList(f func([]float32) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat32List(f func([]float32) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapFloat64List(f func([]float32) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapAnyList(f func([]float32) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ArrayQueue) MapTuple2List(f func([]float32) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapBool(f func([]float64) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapString(f func([]float64) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapInt(f func([]float64) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapInt64(f func([]float64) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapByte(f func([]float64) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapRune(f func([]float64) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat32(f func([]float64) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat64(f func([]float64) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapAny(f func([]float64) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapTuple2(f func([]float64) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapBoolArray(f func([]float64) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapStringArray(f func([]float64) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapIntArray(f func([]float64) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapInt64Array(f func([]float64) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapByteArray(f func([]float64) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapRuneArray(f func([]float64) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat32Array(f func([]float64) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat64Array(f func([]float64) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapAnyArray(f func([]float64) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapTuple2Array(f func([]float64) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapBoolOption(f func([]float64) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapStringOption(f func([]float64) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapIntOption(f func([]float64) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapInt64Option(f func([]float64) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapByteOption(f func([]float64) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapRuneOption(f func([]float64) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat32Option(f func([]float64) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat64Option(f func([]float64) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapAnyOption(f func([]float64) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapTuple2Option(f func([]float64) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapBoolList(f func([]float64) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapStringList(f func([]float64) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapIntList(f func([]float64) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapInt64List(f func([]float64) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapByteList(f func([]float64) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapRuneList(f func([]float64) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat32List(f func([]float64) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapFloat64List(f func([]float64) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapAnyList(f func([]float64) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ArrayQueue) MapTuple2List(f func([]float64) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapBool(f func([]Any) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapString(f func([]Any) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapInt(f func([]Any) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapInt64(f func([]Any) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapByte(f func([]Any) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapRune(f func([]Any) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat32(f func([]Any) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat64(f func([]Any) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapAny(f func([]Any) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapTuple2(f func([]Any) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapBoolArray(f func([]Any) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapStringArray(f func([]Any) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapIntArray(f func([]Any) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapInt64Array(f func([]Any) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapByteArray(f func([]Any) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapRuneArray(f func([]Any) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat32Array(f func([]Any) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat64Array(f func([]Any) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapAnyArray(f func([]Any) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapTuple2Array(f func([]Any) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapBoolOption(f func([]Any) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapStringOption(f func([]Any) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapIntOption(f func([]Any) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapInt64Option(f func([]Any) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapByteOption(f func([]Any) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapRuneOption(f func([]Any) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat32Option(f func([]Any) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat64Option(f func([]Any) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapAnyOption(f func([]Any) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapTuple2Option(f func([]Any) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapBoolList(f func([]Any) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapStringList(f func([]Any) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapIntList(f func([]Any) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapInt64List(f func([]Any) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapByteList(f func([]Any) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapRuneList(f func([]Any) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat32List(f func([]Any) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapFloat64List(f func([]Any) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapAnyList(f func([]Any) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyArrayQueue) MapTuple2List(f func([]Any) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapBool(f func([]Tuple2) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapString(f func([]Tuple2) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapInt(f func([]Tuple2) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapInt64(f func([]Tuple2) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapByte(f func([]Tuple2) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapRune(f func([]Tuple2) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat32(f func([]Tuple2) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat64(f func([]Tuple2) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapAny(f func([]Tuple2) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapTuple2(f func([]Tuple2) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapBoolArray(f func([]Tuple2) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapStringArray(f func([]Tuple2) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapIntArray(f func([]Tuple2) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapInt64Array(f func([]Tuple2) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapByteArray(f func([]Tuple2) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapRuneArray(f func([]Tuple2) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat32Array(f func([]Tuple2) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat64Array(f func([]Tuple2) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapAnyArray(f func([]Tuple2) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapTuple2Array(f func([]Tuple2) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapBoolOption(f func([]Tuple2) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapStringOption(f func([]Tuple2) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapIntOption(f func([]Tuple2) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapInt64Option(f func([]Tuple2) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapByteOption(f func([]Tuple2) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapRuneOption(f func([]Tuple2) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat32Option(f func([]Tuple2) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat64Option(f func([]Tuple2) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapAnyOption(f func([]Tuple2) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapTuple2Option(f func([]Tuple2) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapBoolList(f func([]Tuple2) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapStringList(f func([]Tuple2) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapIntList(f func([]Tuple2) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapInt64List(f func([]Tuple2) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapByteList(f func([]Tuple2) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapRuneList(f func([]Tuple2) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat32List(f func([]Tuple2) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapFloat64List(f func([]Tuple2) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapAnyList(f func([]Tuple2) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ArrayQueue) MapTuple2List(f func([]Tuple2) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapBool(f func(BoolOption) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapString(f func(BoolOption) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapInt(f func(BoolOption) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapInt64(f func(BoolOption) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapByte(f func(BoolOption) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapRune(f func(BoolOption) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat32(f func(BoolOption) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat64(f func(BoolOption) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapAny(f func(BoolOption) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapTuple2(f func(BoolOption) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapBoolArray(f func(BoolOption) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapStringArray(f func(BoolOption) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapIntArray(f func(BoolOption) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapInt64Array(f func(BoolOption) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapByteArray(f func(BoolOption) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapRuneArray(f func(BoolOption) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat32Array(f func(BoolOption) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat64Array(f func(BoolOption) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapAnyArray(f func(BoolOption) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapTuple2Array(f func(BoolOption) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapBoolOption(f func(BoolOption) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapStringOption(f func(BoolOption) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapIntOption(f func(BoolOption) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapInt64Option(f func(BoolOption) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapByteOption(f func(BoolOption) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapRuneOption(f func(BoolOption) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat32Option(f func(BoolOption) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat64Option(f func(BoolOption) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapAnyOption(f func(BoolOption) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapTuple2Option(f func(BoolOption) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapBoolList(f func(BoolOption) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapStringList(f func(BoolOption) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapIntList(f func(BoolOption) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapInt64List(f func(BoolOption) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapByteList(f func(BoolOption) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapRuneList(f func(BoolOption) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat32List(f func(BoolOption) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapFloat64List(f func(BoolOption) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapAnyList(f func(BoolOption) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolOptionQueue) MapTuple2List(f func(BoolOption) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapBool(f func(StringOption) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapString(f func(StringOption) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapInt(f func(StringOption) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapInt64(f func(StringOption) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapByte(f func(StringOption) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapRune(f func(StringOption) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat32(f func(StringOption) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat64(f func(StringOption) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapAny(f func(StringOption) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapTuple2(f func(StringOption) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapBoolArray(f func(StringOption) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapStringArray(f func(StringOption) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapIntArray(f func(StringOption) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapInt64Array(f func(StringOption) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapByteArray(f func(StringOption) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapRuneArray(f func(StringOption) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat32Array(f func(StringOption) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat64Array(f func(StringOption) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapAnyArray(f func(StringOption) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapTuple2Array(f func(StringOption) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapBoolOption(f func(StringOption) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapStringOption(f func(StringOption) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapIntOption(f func(StringOption) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapInt64Option(f func(StringOption) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapByteOption(f func(StringOption) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapRuneOption(f func(StringOption) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat32Option(f func(StringOption) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat64Option(f func(StringOption) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapAnyOption(f func(StringOption) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapTuple2Option(f func(StringOption) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapBoolList(f func(StringOption) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapStringList(f func(StringOption) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapIntList(f func(StringOption) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapInt64List(f func(StringOption) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapByteList(f func(StringOption) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapRuneList(f func(StringOption) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat32List(f func(StringOption) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapFloat64List(f func(StringOption) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapAnyList(f func(StringOption) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringOptionQueue) MapTuple2List(f func(StringOption) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapBool(f func(IntOption) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapString(f func(IntOption) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapInt(f func(IntOption) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapInt64(f func(IntOption) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapByte(f func(IntOption) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapRune(f func(IntOption) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat32(f func(IntOption) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat64(f func(IntOption) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapAny(f func(IntOption) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapTuple2(f func(IntOption) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapBoolArray(f func(IntOption) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapStringArray(f func(IntOption) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapIntArray(f func(IntOption) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapInt64Array(f func(IntOption) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapByteArray(f func(IntOption) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapRuneArray(f func(IntOption) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat32Array(f func(IntOption) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat64Array(f func(IntOption) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapAnyArray(f func(IntOption) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapTuple2Array(f func(IntOption) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapBoolOption(f func(IntOption) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapStringOption(f func(IntOption) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapIntOption(f func(IntOption) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapInt64Option(f func(IntOption) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapByteOption(f func(IntOption) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapRuneOption(f func(IntOption) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat32Option(f func(IntOption) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat64Option(f func(IntOption) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapAnyOption(f func(IntOption) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapTuple2Option(f func(IntOption) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapBoolList(f func(IntOption) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapStringList(f func(IntOption) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapIntList(f func(IntOption) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapInt64List(f func(IntOption) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapByteList(f func(IntOption) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapRuneList(f func(IntOption) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat32List(f func(IntOption) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapFloat64List(f func(IntOption) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapAnyList(f func(IntOption) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntOptionQueue) MapTuple2List(f func(IntOption) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapBool(f func(Int64Option) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapString(f func(Int64Option) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapInt(f func(Int64Option) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapInt64(f func(Int64Option) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapByte(f func(Int64Option) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapRune(f func(Int64Option) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat32(f func(Int64Option) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat64(f func(Int64Option) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapAny(f func(Int64Option) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapTuple2(f func(Int64Option) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapBoolArray(f func(Int64Option) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapStringArray(f func(Int64Option) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapIntArray(f func(Int64Option) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapInt64Array(f func(Int64Option) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapByteArray(f func(Int64Option) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapRuneArray(f func(Int64Option) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat32Array(f func(Int64Option) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat64Array(f func(Int64Option) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapAnyArray(f func(Int64Option) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapTuple2Array(f func(Int64Option) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapBoolOption(f func(Int64Option) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapStringOption(f func(Int64Option) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapIntOption(f func(Int64Option) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapInt64Option(f func(Int64Option) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapByteOption(f func(Int64Option) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapRuneOption(f func(Int64Option) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat32Option(f func(Int64Option) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat64Option(f func(Int64Option) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapAnyOption(f func(Int64Option) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapTuple2Option(f func(Int64Option) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapBoolList(f func(Int64Option) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapStringList(f func(Int64Option) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapIntList(f func(Int64Option) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapInt64List(f func(Int64Option) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapByteList(f func(Int64Option) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapRuneList(f func(Int64Option) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat32List(f func(Int64Option) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapFloat64List(f func(Int64Option) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapAnyList(f func(Int64Option) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64OptionQueue) MapTuple2List(f func(Int64Option) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapBool(f func(ByteOption) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapString(f func(ByteOption) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapInt(f func(ByteOption) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapInt64(f func(ByteOption) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapByte(f func(ByteOption) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapRune(f func(ByteOption) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat32(f func(ByteOption) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat64(f func(ByteOption) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapAny(f func(ByteOption) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapTuple2(f func(ByteOption) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapBoolArray(f func(ByteOption) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapStringArray(f func(ByteOption) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapIntArray(f func(ByteOption) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapInt64Array(f func(ByteOption) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapByteArray(f func(ByteOption) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapRuneArray(f func(ByteOption) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat32Array(f func(ByteOption) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat64Array(f func(ByteOption) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapAnyArray(f func(ByteOption) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapTuple2Array(f func(ByteOption) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapBoolOption(f func(ByteOption) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapStringOption(f func(ByteOption) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapIntOption(f func(ByteOption) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapInt64Option(f func(ByteOption) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapByteOption(f func(ByteOption) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapRuneOption(f func(ByteOption) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat32Option(f func(ByteOption) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat64Option(f func(ByteOption) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapAnyOption(f func(ByteOption) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapTuple2Option(f func(ByteOption) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapBoolList(f func(ByteOption) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapStringList(f func(ByteOption) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapIntList(f func(ByteOption) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapInt64List(f func(ByteOption) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapByteList(f func(ByteOption) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapRuneList(f func(ByteOption) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat32List(f func(ByteOption) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapFloat64List(f func(ByteOption) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapAnyList(f func(ByteOption) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteOptionQueue) MapTuple2List(f func(ByteOption) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapBool(f func(RuneOption) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapString(f func(RuneOption) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapInt(f func(RuneOption) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapInt64(f func(RuneOption) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapByte(f func(RuneOption) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapRune(f func(RuneOption) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat32(f func(RuneOption) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat64(f func(RuneOption) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapAny(f func(RuneOption) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapTuple2(f func(RuneOption) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapBoolArray(f func(RuneOption) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapStringArray(f func(RuneOption) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapIntArray(f func(RuneOption) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapInt64Array(f func(RuneOption) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapByteArray(f func(RuneOption) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapRuneArray(f func(RuneOption) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat32Array(f func(RuneOption) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat64Array(f func(RuneOption) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapAnyArray(f func(RuneOption) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapTuple2Array(f func(RuneOption) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapBoolOption(f func(RuneOption) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapStringOption(f func(RuneOption) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapIntOption(f func(RuneOption) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapInt64Option(f func(RuneOption) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapByteOption(f func(RuneOption) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapRuneOption(f func(RuneOption) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat32Option(f func(RuneOption) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat64Option(f func(RuneOption) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapAnyOption(f func(RuneOption) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapTuple2Option(f func(RuneOption) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapBoolList(f func(RuneOption) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapStringList(f func(RuneOption) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapIntList(f func(RuneOption) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapInt64List(f func(RuneOption) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapByteList(f func(RuneOption) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapRuneList(f func(RuneOption) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat32List(f func(RuneOption) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapFloat64List(f func(RuneOption) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapAnyList(f func(RuneOption) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneOptionQueue) MapTuple2List(f func(RuneOption) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapBool(f func(Float32Option) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapString(f func(Float32Option) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapInt(f func(Float32Option) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapInt64(f func(Float32Option) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapByte(f func(Float32Option) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapRune(f func(Float32Option) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat32(f func(Float32Option) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat64(f func(Float32Option) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapAny(f func(Float32Option) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapTuple2(f func(Float32Option) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapBoolArray(f func(Float32Option) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapStringArray(f func(Float32Option) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapIntArray(f func(Float32Option) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapInt64Array(f func(Float32Option) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapByteArray(f func(Float32Option) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapRuneArray(f func(Float32Option) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat32Array(f func(Float32Option) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat64Array(f func(Float32Option) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapAnyArray(f func(Float32Option) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapTuple2Array(f func(Float32Option) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapBoolOption(f func(Float32Option) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapStringOption(f func(Float32Option) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapIntOption(f func(Float32Option) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapInt64Option(f func(Float32Option) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapByteOption(f func(Float32Option) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapRuneOption(f func(Float32Option) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat32Option(f func(Float32Option) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat64Option(f func(Float32Option) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapAnyOption(f func(Float32Option) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapTuple2Option(f func(Float32Option) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapBoolList(f func(Float32Option) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapStringList(f func(Float32Option) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapIntList(f func(Float32Option) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapInt64List(f func(Float32Option) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapByteList(f func(Float32Option) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapRuneList(f func(Float32Option) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat32List(f func(Float32Option) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapFloat64List(f func(Float32Option) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapAnyList(f func(Float32Option) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32OptionQueue) MapTuple2List(f func(Float32Option) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapBool(f func(Float64Option) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapString(f func(Float64Option) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapInt(f func(Float64Option) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapInt64(f func(Float64Option) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapByte(f func(Float64Option) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapRune(f func(Float64Option) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat32(f func(Float64Option) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat64(f func(Float64Option) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapAny(f func(Float64Option) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapTuple2(f func(Float64Option) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapBoolArray(f func(Float64Option) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapStringArray(f func(Float64Option) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapIntArray(f func(Float64Option) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapInt64Array(f func(Float64Option) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapByteArray(f func(Float64Option) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapRuneArray(f func(Float64Option) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat32Array(f func(Float64Option) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat64Array(f func(Float64Option) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapAnyArray(f func(Float64Option) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapTuple2Array(f func(Float64Option) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapBoolOption(f func(Float64Option) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapStringOption(f func(Float64Option) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapIntOption(f func(Float64Option) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapInt64Option(f func(Float64Option) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapByteOption(f func(Float64Option) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapRuneOption(f func(Float64Option) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat32Option(f func(Float64Option) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat64Option(f func(Float64Option) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapAnyOption(f func(Float64Option) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapTuple2Option(f func(Float64Option) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapBoolList(f func(Float64Option) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapStringList(f func(Float64Option) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapIntList(f func(Float64Option) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapInt64List(f func(Float64Option) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapByteList(f func(Float64Option) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapRuneList(f func(Float64Option) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat32List(f func(Float64Option) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapFloat64List(f func(Float64Option) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapAnyList(f func(Float64Option) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64OptionQueue) MapTuple2List(f func(Float64Option) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapBool(f func(AnyOption) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapString(f func(AnyOption) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapInt(f func(AnyOption) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapInt64(f func(AnyOption) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapByte(f func(AnyOption) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapRune(f func(AnyOption) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat32(f func(AnyOption) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat64(f func(AnyOption) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapAny(f func(AnyOption) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapTuple2(f func(AnyOption) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapBoolArray(f func(AnyOption) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapStringArray(f func(AnyOption) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapIntArray(f func(AnyOption) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapInt64Array(f func(AnyOption) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapByteArray(f func(AnyOption) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapRuneArray(f func(AnyOption) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat32Array(f func(AnyOption) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat64Array(f func(AnyOption) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapAnyArray(f func(AnyOption) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapTuple2Array(f func(AnyOption) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapBoolOption(f func(AnyOption) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapStringOption(f func(AnyOption) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapIntOption(f func(AnyOption) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapInt64Option(f func(AnyOption) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapByteOption(f func(AnyOption) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapRuneOption(f func(AnyOption) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat32Option(f func(AnyOption) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat64Option(f func(AnyOption) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapAnyOption(f func(AnyOption) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapTuple2Option(f func(AnyOption) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapBoolList(f func(AnyOption) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapStringList(f func(AnyOption) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapIntList(f func(AnyOption) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapInt64List(f func(AnyOption) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapByteList(f func(AnyOption) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapRuneList(f func(AnyOption) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat32List(f func(AnyOption) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapFloat64List(f func(AnyOption) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapAnyList(f func(AnyOption) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyOptionQueue) MapTuple2List(f func(AnyOption) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapBool(f func(Tuple2Option) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapString(f func(Tuple2Option) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapInt(f func(Tuple2Option) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapInt64(f func(Tuple2Option) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapByte(f func(Tuple2Option) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapRune(f func(Tuple2Option) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat32(f func(Tuple2Option) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat64(f func(Tuple2Option) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapAny(f func(Tuple2Option) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapTuple2(f func(Tuple2Option) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapBoolArray(f func(Tuple2Option) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapStringArray(f func(Tuple2Option) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapIntArray(f func(Tuple2Option) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapInt64Array(f func(Tuple2Option) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapByteArray(f func(Tuple2Option) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapRuneArray(f func(Tuple2Option) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat32Array(f func(Tuple2Option) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat64Array(f func(Tuple2Option) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapAnyArray(f func(Tuple2Option) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapTuple2Array(f func(Tuple2Option) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapBoolOption(f func(Tuple2Option) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapStringOption(f func(Tuple2Option) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapIntOption(f func(Tuple2Option) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapInt64Option(f func(Tuple2Option) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapByteOption(f func(Tuple2Option) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapRuneOption(f func(Tuple2Option) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat32Option(f func(Tuple2Option) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat64Option(f func(Tuple2Option) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapAnyOption(f func(Tuple2Option) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapTuple2Option(f func(Tuple2Option) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapBoolList(f func(Tuple2Option) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapStringList(f func(Tuple2Option) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapIntList(f func(Tuple2Option) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapInt64List(f func(Tuple2Option) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapByteList(f func(Tuple2Option) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapRuneList(f func(Tuple2Option) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat32List(f func(Tuple2Option) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapFloat64List(f func(Tuple2Option) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapAnyList(f func(Tuple2Option) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2OptionQueue) MapTuple2List(f func(Tuple2Option) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapBool(f func(BoolList) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapString(f func(BoolList) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapInt(f func(BoolList) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapInt64(f func(BoolList) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapByte(f func(BoolList) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapRune(f func(BoolList) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat32(f func(BoolList) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat64(f func(BoolList) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapAny(f func(BoolList) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapTuple2(f func(BoolList) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapBoolArray(f func(BoolList) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapStringArray(f func(BoolList) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapIntArray(f func(BoolList) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapInt64Array(f func(BoolList) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapByteArray(f func(BoolList) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapRuneArray(f func(BoolList) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat32Array(f func(BoolList) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat64Array(f func(BoolList) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapAnyArray(f func(BoolList) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapTuple2Array(f func(BoolList) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapBoolOption(f func(BoolList) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapStringOption(f func(BoolList) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapIntOption(f func(BoolList) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapInt64Option(f func(BoolList) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapByteOption(f func(BoolList) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapRuneOption(f func(BoolList) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat32Option(f func(BoolList) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat64Option(f func(BoolList) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapAnyOption(f func(BoolList) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapTuple2Option(f func(BoolList) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapBoolList(f func(BoolList) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapStringList(f func(BoolList) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapIntList(f func(BoolList) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapInt64List(f func(BoolList) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapByteList(f func(BoolList) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapRuneList(f func(BoolList) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat32List(f func(BoolList) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapFloat64List(f func(BoolList) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapAnyList(f func(BoolList) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q BoolListQueue) MapTuple2List(f func(BoolList) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapBool(f func(StringList) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapString(f func(StringList) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapInt(f func(StringList) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapInt64(f func(StringList) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapByte(f func(StringList) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapRune(f func(StringList) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat32(f func(StringList) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat64(f func(StringList) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapAny(f func(StringList) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapTuple2(f func(StringList) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapBoolArray(f func(StringList) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapStringArray(f func(StringList) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapIntArray(f func(StringList) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapInt64Array(f func(StringList) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapByteArray(f func(StringList) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapRuneArray(f func(StringList) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat32Array(f func(StringList) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat64Array(f func(StringList) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapAnyArray(f func(StringList) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapTuple2Array(f func(StringList) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapBoolOption(f func(StringList) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapStringOption(f func(StringList) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapIntOption(f func(StringList) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapInt64Option(f func(StringList) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapByteOption(f func(StringList) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapRuneOption(f func(StringList) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat32Option(f func(StringList) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat64Option(f func(StringList) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapAnyOption(f func(StringList) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapTuple2Option(f func(StringList) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapBoolList(f func(StringList) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapStringList(f func(StringList) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapIntList(f func(StringList) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapInt64List(f func(StringList) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapByteList(f func(StringList) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapRuneList(f func(StringList) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat32List(f func(StringList) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapFloat64List(f func(StringList) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapAnyList(f func(StringList) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q StringListQueue) MapTuple2List(f func(StringList) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapBool(f func(IntList) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapString(f func(IntList) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapInt(f func(IntList) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapInt64(f func(IntList) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapByte(f func(IntList) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapRune(f func(IntList) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat32(f func(IntList) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat64(f func(IntList) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapAny(f func(IntList) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapTuple2(f func(IntList) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapBoolArray(f func(IntList) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapStringArray(f func(IntList) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapIntArray(f func(IntList) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapInt64Array(f func(IntList) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapByteArray(f func(IntList) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapRuneArray(f func(IntList) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat32Array(f func(IntList) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat64Array(f func(IntList) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapAnyArray(f func(IntList) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapTuple2Array(f func(IntList) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapBoolOption(f func(IntList) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapStringOption(f func(IntList) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapIntOption(f func(IntList) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapInt64Option(f func(IntList) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapByteOption(f func(IntList) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapRuneOption(f func(IntList) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat32Option(f func(IntList) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat64Option(f func(IntList) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapAnyOption(f func(IntList) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapTuple2Option(f func(IntList) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapBoolList(f func(IntList) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapStringList(f func(IntList) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapIntList(f func(IntList) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapInt64List(f func(IntList) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapByteList(f func(IntList) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapRuneList(f func(IntList) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat32List(f func(IntList) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapFloat64List(f func(IntList) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapAnyList(f func(IntList) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q IntListQueue) MapTuple2List(f func(IntList) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapBool(f func(Int64List) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapString(f func(Int64List) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapInt(f func(Int64List) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapInt64(f func(Int64List) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapByte(f func(Int64List) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapRune(f func(Int64List) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat32(f func(Int64List) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat64(f func(Int64List) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapAny(f func(Int64List) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapTuple2(f func(Int64List) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapBoolArray(f func(Int64List) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapStringArray(f func(Int64List) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapIntArray(f func(Int64List) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapInt64Array(f func(Int64List) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapByteArray(f func(Int64List) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapRuneArray(f func(Int64List) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat32Array(f func(Int64List) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat64Array(f func(Int64List) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapAnyArray(f func(Int64List) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapTuple2Array(f func(Int64List) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapBoolOption(f func(Int64List) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapStringOption(f func(Int64List) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapIntOption(f func(Int64List) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapInt64Option(f func(Int64List) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapByteOption(f func(Int64List) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapRuneOption(f func(Int64List) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat32Option(f func(Int64List) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat64Option(f func(Int64List) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapAnyOption(f func(Int64List) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapTuple2Option(f func(Int64List) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapBoolList(f func(Int64List) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapStringList(f func(Int64List) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapIntList(f func(Int64List) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapInt64List(f func(Int64List) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapByteList(f func(Int64List) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapRuneList(f func(Int64List) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat32List(f func(Int64List) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapFloat64List(f func(Int64List) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapAnyList(f func(Int64List) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Int64ListQueue) MapTuple2List(f func(Int64List) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapBool(f func(ByteList) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapString(f func(ByteList) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapInt(f func(ByteList) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapInt64(f func(ByteList) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapByte(f func(ByteList) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapRune(f func(ByteList) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat32(f func(ByteList) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat64(f func(ByteList) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapAny(f func(ByteList) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapTuple2(f func(ByteList) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapBoolArray(f func(ByteList) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapStringArray(f func(ByteList) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapIntArray(f func(ByteList) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapInt64Array(f func(ByteList) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapByteArray(f func(ByteList) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapRuneArray(f func(ByteList) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat32Array(f func(ByteList) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat64Array(f func(ByteList) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapAnyArray(f func(ByteList) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapTuple2Array(f func(ByteList) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapBoolOption(f func(ByteList) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapStringOption(f func(ByteList) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapIntOption(f func(ByteList) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapInt64Option(f func(ByteList) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapByteOption(f func(ByteList) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapRuneOption(f func(ByteList) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat32Option(f func(ByteList) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat64Option(f func(ByteList) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapAnyOption(f func(ByteList) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapTuple2Option(f func(ByteList) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapBoolList(f func(ByteList) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapStringList(f func(ByteList) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapIntList(f func(ByteList) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapInt64List(f func(ByteList) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapByteList(f func(ByteList) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapRuneList(f func(ByteList) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat32List(f func(ByteList) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapFloat64List(f func(ByteList) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapAnyList(f func(ByteList) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q ByteListQueue) MapTuple2List(f func(ByteList) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapBool(f func(RuneList) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapString(f func(RuneList) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapInt(f func(RuneList) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapInt64(f func(RuneList) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapByte(f func(RuneList) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapRune(f func(RuneList) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat32(f func(RuneList) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat64(f func(RuneList) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapAny(f func(RuneList) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapTuple2(f func(RuneList) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapBoolArray(f func(RuneList) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapStringArray(f func(RuneList) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapIntArray(f func(RuneList) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapInt64Array(f func(RuneList) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapByteArray(f func(RuneList) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapRuneArray(f func(RuneList) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat32Array(f func(RuneList) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat64Array(f func(RuneList) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapAnyArray(f func(RuneList) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapTuple2Array(f func(RuneList) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapBoolOption(f func(RuneList) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapStringOption(f func(RuneList) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapIntOption(f func(RuneList) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapInt64Option(f func(RuneList) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapByteOption(f func(RuneList) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapRuneOption(f func(RuneList) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat32Option(f func(RuneList) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat64Option(f func(RuneList) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapAnyOption(f func(RuneList) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapTuple2Option(f func(RuneList) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapBoolList(f func(RuneList) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapStringList(f func(RuneList) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapIntList(f func(RuneList) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapInt64List(f func(RuneList) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapByteList(f func(RuneList) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapRuneList(f func(RuneList) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat32List(f func(RuneList) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapFloat64List(f func(RuneList) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapAnyList(f func(RuneList) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q RuneListQueue) MapTuple2List(f func(RuneList) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapBool(f func(Float32List) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapString(f func(Float32List) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapInt(f func(Float32List) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapInt64(f func(Float32List) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapByte(f func(Float32List) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapRune(f func(Float32List) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat32(f func(Float32List) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat64(f func(Float32List) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapAny(f func(Float32List) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapTuple2(f func(Float32List) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapBoolArray(f func(Float32List) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapStringArray(f func(Float32List) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapIntArray(f func(Float32List) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapInt64Array(f func(Float32List) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapByteArray(f func(Float32List) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapRuneArray(f func(Float32List) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat32Array(f func(Float32List) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat64Array(f func(Float32List) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapAnyArray(f func(Float32List) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapTuple2Array(f func(Float32List) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapBoolOption(f func(Float32List) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapStringOption(f func(Float32List) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapIntOption(f func(Float32List) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapInt64Option(f func(Float32List) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapByteOption(f func(Float32List) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapRuneOption(f func(Float32List) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat32Option(f func(Float32List) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat64Option(f func(Float32List) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapAnyOption(f func(Float32List) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapTuple2Option(f func(Float32List) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapBoolList(f func(Float32List) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapStringList(f func(Float32List) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapIntList(f func(Float32List) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapInt64List(f func(Float32List) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapByteList(f func(Float32List) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapRuneList(f func(Float32List) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat32List(f func(Float32List) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapFloat64List(f func(Float32List) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapAnyList(f func(Float32List) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float32ListQueue) MapTuple2List(f func(Float32List) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapBool(f func(Float64List) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapString(f func(Float64List) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapInt(f func(Float64List) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapInt64(f func(Float64List) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapByte(f func(Float64List) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapRune(f func(Float64List) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat32(f func(Float64List) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat64(f func(Float64List) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapAny(f func(Float64List) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapTuple2(f func(Float64List) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapBoolArray(f func(Float64List) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapStringArray(f func(Float64List) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapIntArray(f func(Float64List) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapInt64Array(f func(Float64List) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapByteArray(f func(Float64List) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapRuneArray(f func(Float64List) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat32Array(f func(Float64List) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat64Array(f func(Float64List) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapAnyArray(f func(Float64List) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapTuple2Array(f func(Float64List) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapBoolOption(f func(Float64List) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapStringOption(f func(Float64List) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapIntOption(f func(Float64List) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapInt64Option(f func(Float64List) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapByteOption(f func(Float64List) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapRuneOption(f func(Float64List) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat32Option(f func(Float64List) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat64Option(f func(Float64List) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapAnyOption(f func(Float64List) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapTuple2Option(f func(Float64List) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapBoolList(f func(Float64List) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapStringList(f func(Float64List) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapIntList(f func(Float64List) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapInt64List(f func(Float64List) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapByteList(f func(Float64List) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapRuneList(f func(Float64List) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat32List(f func(Float64List) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapFloat64List(f func(Float64List) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapAnyList(f func(Float64List) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Float64ListQueue) MapTuple2List(f func(Float64List) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapBool(f func(AnyList) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapString(f func(AnyList) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapInt(f func(AnyList) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapInt64(f func(AnyList) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapByte(f func(AnyList) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapRune(f func(AnyList) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat32(f func(AnyList) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat64(f func(AnyList) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapAny(f func(AnyList) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapTuple2(f func(AnyList) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapBoolArray(f func(AnyList) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapStringArray(f func(AnyList) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapIntArray(f func(AnyList) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapInt64Array(f func(AnyList) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapByteArray(f func(AnyList) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapRuneArray(f func(AnyList) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat32Array(f func(AnyList) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat64Array(f func(AnyList) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapAnyArray(f func(AnyList) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapTuple2Array(f func(AnyList) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapBoolOption(f func(AnyList) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapStringOption(f func(AnyList) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapIntOption(f func(AnyList) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapInt64Option(f func(AnyList) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapByteOption(f func(AnyList) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapRuneOption(f func(AnyList) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat32Option(f func(AnyList) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat64Option(f func(AnyList) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapAnyOption(f func(AnyList) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapTuple2Option(f func(AnyList) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapBoolList(f func(AnyList) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapStringList(f func(AnyList) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapIntList(f func(AnyList) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapInt64List(f func(AnyList) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapByteList(f func(AnyList) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapRuneList(f func(AnyList) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat32List(f func(AnyList) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapFloat64List(f func(AnyList) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapAnyList(f func(AnyList) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q AnyListQueue) MapTuple2List(f func(AnyList) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapBool(f func(Tuple2List) bool) BoolQueue {
	acc := NilBoolQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapString(f func(Tuple2List) string) StringQueue {
	acc := NilStringQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapInt(f func(Tuple2List) int) IntQueue {
	acc := NilIntQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapInt64(f func(Tuple2List) int64) Int64Queue {
	acc := NilInt64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapByte(f func(Tuple2List) byte) ByteQueue {
	acc := NilByteQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapRune(f func(Tuple2List) rune) RuneQueue {
	acc := NilRuneQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat32(f func(Tuple2List) float32) Float32Queue {
	acc := NilFloat32Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat64(f func(Tuple2List) float64) Float64Queue {
	acc := NilFloat64Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapAny(f func(Tuple2List) Any) AnyQueue {
	acc := NilAnyQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapTuple2(f func(Tuple2List) Tuple2) Tuple2Queue {
	acc := NilTuple2Queue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapBoolArray(f func(Tuple2List) []bool) BoolArrayQueue {
	acc := NilBoolArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapStringArray(f func(Tuple2List) []string) StringArrayQueue {
	acc := NilStringArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapIntArray(f func(Tuple2List) []int) IntArrayQueue {
	acc := NilIntArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapInt64Array(f func(Tuple2List) []int64) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapByteArray(f func(Tuple2List) []byte) ByteArrayQueue {
	acc := NilByteArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapRuneArray(f func(Tuple2List) []rune) RuneArrayQueue {
	acc := NilRuneArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat32Array(f func(Tuple2List) []float32) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat64Array(f func(Tuple2List) []float64) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapAnyArray(f func(Tuple2List) []Any) AnyArrayQueue {
	acc := NilAnyArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapTuple2Array(f func(Tuple2List) []Tuple2) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapBoolOption(f func(Tuple2List) BoolOption) BoolOptionQueue {
	acc := NilBoolOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapStringOption(f func(Tuple2List) StringOption) StringOptionQueue {
	acc := NilStringOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapIntOption(f func(Tuple2List) IntOption) IntOptionQueue {
	acc := NilIntOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapInt64Option(f func(Tuple2List) Int64Option) Int64OptionQueue {
	acc := NilInt64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapByteOption(f func(Tuple2List) ByteOption) ByteOptionQueue {
	acc := NilByteOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapRuneOption(f func(Tuple2List) RuneOption) RuneOptionQueue {
	acc := NilRuneOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat32Option(f func(Tuple2List) Float32Option) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat64Option(f func(Tuple2List) Float64Option) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapAnyOption(f func(Tuple2List) AnyOption) AnyOptionQueue {
	acc := NilAnyOptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapTuple2Option(f func(Tuple2List) Tuple2Option) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapBoolList(f func(Tuple2List) BoolList) BoolListQueue {
	acc := NilBoolListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapStringList(f func(Tuple2List) StringList) StringListQueue {
	acc := NilStringListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapIntList(f func(Tuple2List) IntList) IntListQueue {
	acc := NilIntListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapInt64List(f func(Tuple2List) Int64List) Int64ListQueue {
	acc := NilInt64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapByteList(f func(Tuple2List) ByteList) ByteListQueue {
	acc := NilByteListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapRuneList(f func(Tuple2List) RuneList) RuneListQueue {
	acc := NilRuneListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat32List(f func(Tuple2List) Float32List) Float32ListQueue {
	acc := NilFloat32ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapFloat64List(f func(Tuple2List) Float64List) Float64ListQueue {
	acc := NilFloat64ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapAnyList(f func(Tuple2List) AnyList) AnyListQueue {
	acc := NilAnyListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
func (q Tuple2ListQueue) MapTuple2List(f func(Tuple2List) Tuple2List) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	if q.IsEmpty() {
		return acc
	}
	xs := q
	for {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(f(h))
		xs = t

		if t.IsEmpty() {
			return acc
		}
	}
	return acc
}
