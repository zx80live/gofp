// bootstrap_queue_swap.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) swap() BoolQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return BoolQueue{&NilBool, &out}
	}
}
func (q StringQueue) swap() StringQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return StringQueue{&NilString, &out}
	}
}
func (q IntQueue) swap() IntQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return IntQueue{&NilInt, &out}
	}
}
func (q Int64Queue) swap() Int64Queue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Int64Queue{&NilInt64, &out}
	}
}
func (q ByteQueue) swap() ByteQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return ByteQueue{&NilByte, &out}
	}
}
func (q RuneQueue) swap() RuneQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return RuneQueue{&NilRune, &out}
	}
}
func (q Float32Queue) swap() Float32Queue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float32Queue{&NilFloat32, &out}
	}
}
func (q Float64Queue) swap() Float64Queue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float64Queue{&NilFloat64, &out}
	}
}
func (q AnyQueue) swap() AnyQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return AnyQueue{&NilAny, &out}
	}
}
func (q Tuple2Queue) swap() Tuple2Queue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Tuple2Queue{&NilTuple2, &out}
	}
}
func (q BoolArrayQueue) swap() BoolArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return BoolArrayQueue{&NilBoolArray, &out}
	}
}
func (q StringArrayQueue) swap() StringArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return StringArrayQueue{&NilStringArray, &out}
	}
}
func (q IntArrayQueue) swap() IntArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return IntArrayQueue{&NilIntArray, &out}
	}
}
func (q Int64ArrayQueue) swap() Int64ArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Int64ArrayQueue{&NilInt64Array, &out}
	}
}
func (q ByteArrayQueue) swap() ByteArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return ByteArrayQueue{&NilByteArray, &out}
	}
}
func (q RuneArrayQueue) swap() RuneArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return RuneArrayQueue{&NilRuneArray, &out}
	}
}
func (q Float32ArrayQueue) swap() Float32ArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float32ArrayQueue{&NilFloat32Array, &out}
	}
}
func (q Float64ArrayQueue) swap() Float64ArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float64ArrayQueue{&NilFloat64Array, &out}
	}
}
func (q AnyArrayQueue) swap() AnyArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return AnyArrayQueue{&NilAnyArray, &out}
	}
}
func (q Tuple2ArrayQueue) swap() Tuple2ArrayQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Tuple2ArrayQueue{&NilTuple2Array, &out}
	}
}
func (q BoolOptionQueue) swap() BoolOptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return BoolOptionQueue{&NilBoolOption, &out}
	}
}
func (q StringOptionQueue) swap() StringOptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return StringOptionQueue{&NilStringOption, &out}
	}
}
func (q IntOptionQueue) swap() IntOptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return IntOptionQueue{&NilIntOption, &out}
	}
}
func (q Int64OptionQueue) swap() Int64OptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Int64OptionQueue{&NilInt64Option, &out}
	}
}
func (q ByteOptionQueue) swap() ByteOptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return ByteOptionQueue{&NilByteOption, &out}
	}
}
func (q RuneOptionQueue) swap() RuneOptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return RuneOptionQueue{&NilRuneOption, &out}
	}
}
func (q Float32OptionQueue) swap() Float32OptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float32OptionQueue{&NilFloat32Option, &out}
	}
}
func (q Float64OptionQueue) swap() Float64OptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float64OptionQueue{&NilFloat64Option, &out}
	}
}
func (q AnyOptionQueue) swap() AnyOptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return AnyOptionQueue{&NilAnyOption, &out}
	}
}
func (q Tuple2OptionQueue) swap() Tuple2OptionQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Tuple2OptionQueue{&NilTuple2Option, &out}
	}
}
func (q BoolListQueue) swap() BoolListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return BoolListQueue{&NilBoolList, &out}
	}
}
func (q StringListQueue) swap() StringListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return StringListQueue{&NilStringList, &out}
	}
}
func (q IntListQueue) swap() IntListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return IntListQueue{&NilIntList, &out}
	}
}
func (q Int64ListQueue) swap() Int64ListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Int64ListQueue{&NilInt64List, &out}
	}
}
func (q ByteListQueue) swap() ByteListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return ByteListQueue{&NilByteList, &out}
	}
}
func (q RuneListQueue) swap() RuneListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return RuneListQueue{&NilRuneList, &out}
	}
}
func (q Float32ListQueue) swap() Float32ListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float32ListQueue{&NilFloat32List, &out}
	}
}
func (q Float64ListQueue) swap() Float64ListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Float64ListQueue{&NilFloat64List, &out}
	}
}
func (q AnyListQueue) swap() AnyListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return AnyListQueue{&NilAnyList, &out}
	}
}
func (q Tuple2ListQueue) swap() Tuple2ListQueue {
	if (*q.out).NonEmpty() {
		return q
	} else {
		out := (*q.in).Reverse()
		return Tuple2ListQueue{&NilTuple2List, &out}
	}
}
