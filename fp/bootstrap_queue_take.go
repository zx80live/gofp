// bootstrap_queue_take.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) Take(n int) BoolQueue {
	acc := NilBoolQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q StringQueue) Take(n int) StringQueue {
	acc := NilStringQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q IntQueue) Take(n int) IntQueue {
	acc := NilIntQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Int64Queue) Take(n int) Int64Queue {
	acc := NilInt64Queue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q ByteQueue) Take(n int) ByteQueue {
	acc := NilByteQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q RuneQueue) Take(n int) RuneQueue {
	acc := NilRuneQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float32Queue) Take(n int) Float32Queue {
	acc := NilFloat32Queue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float64Queue) Take(n int) Float64Queue {
	acc := NilFloat64Queue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q AnyQueue) Take(n int) AnyQueue {
	acc := NilAnyQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Tuple2Queue) Take(n int) Tuple2Queue {
	acc := NilTuple2Queue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q BoolArrayQueue) Take(n int) BoolArrayQueue {
	acc := NilBoolArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q StringArrayQueue) Take(n int) StringArrayQueue {
	acc := NilStringArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q IntArrayQueue) Take(n int) IntArrayQueue {
	acc := NilIntArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Int64ArrayQueue) Take(n int) Int64ArrayQueue {
	acc := NilInt64ArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q ByteArrayQueue) Take(n int) ByteArrayQueue {
	acc := NilByteArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q RuneArrayQueue) Take(n int) RuneArrayQueue {
	acc := NilRuneArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float32ArrayQueue) Take(n int) Float32ArrayQueue {
	acc := NilFloat32ArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float64ArrayQueue) Take(n int) Float64ArrayQueue {
	acc := NilFloat64ArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q AnyArrayQueue) Take(n int) AnyArrayQueue {
	acc := NilAnyArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Tuple2ArrayQueue) Take(n int) Tuple2ArrayQueue {
	acc := NilTuple2ArrayQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q BoolOptionQueue) Take(n int) BoolOptionQueue {
	acc := NilBoolOptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q StringOptionQueue) Take(n int) StringOptionQueue {
	acc := NilStringOptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q IntOptionQueue) Take(n int) IntOptionQueue {
	acc := NilIntOptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Int64OptionQueue) Take(n int) Int64OptionQueue {
	acc := NilInt64OptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q ByteOptionQueue) Take(n int) ByteOptionQueue {
	acc := NilByteOptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q RuneOptionQueue) Take(n int) RuneOptionQueue {
	acc := NilRuneOptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float32OptionQueue) Take(n int) Float32OptionQueue {
	acc := NilFloat32OptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float64OptionQueue) Take(n int) Float64OptionQueue {
	acc := NilFloat64OptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q AnyOptionQueue) Take(n int) AnyOptionQueue {
	acc := NilAnyOptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Tuple2OptionQueue) Take(n int) Tuple2OptionQueue {
	acc := NilTuple2OptionQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q BoolListQueue) Take(n int) BoolListQueue {
	acc := NilBoolListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q StringListQueue) Take(n int) StringListQueue {
	acc := NilStringListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q IntListQueue) Take(n int) IntListQueue {
	acc := NilIntListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Int64ListQueue) Take(n int) Int64ListQueue {
	acc := NilInt64ListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q ByteListQueue) Take(n int) ByteListQueue {
	acc := NilByteListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q RuneListQueue) Take(n int) RuneListQueue {
	acc := NilRuneListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float32ListQueue) Take(n int) Float32ListQueue {
	acc := NilFloat32ListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Float64ListQueue) Take(n int) Float64ListQueue {
	acc := NilFloat64ListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q AnyListQueue) Take(n int) AnyListQueue {
	acc := NilAnyListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
func (q Tuple2ListQueue) Take(n int) Tuple2ListQueue {
	acc := NilTuple2ListQueue
	xs := q
	for i := 0; xs.NonEmpty() && i < n; i++ {
		h, t := xs.Dequeue()
		acc = acc.Enqueue(h)
		xs = t
	}
	return acc
}
