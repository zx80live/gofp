// bootstrap_queue_takeright.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (q BoolQueue) TakeRight(n int) BoolQueue {
	acc := NilBoolList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return BoolQueue{&NilBoolList, &acc}
}
func (q StringQueue) TakeRight(n int) StringQueue {
	acc := NilStringList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return StringQueue{&NilStringList, &acc}
}
func (q IntQueue) TakeRight(n int) IntQueue {
	acc := NilIntList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return IntQueue{&NilIntList, &acc}
}
func (q Int64Queue) TakeRight(n int) Int64Queue {
	acc := NilInt64List
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Int64Queue{&NilInt64List, &acc}
}
func (q ByteQueue) TakeRight(n int) ByteQueue {
	acc := NilByteList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return ByteQueue{&NilByteList, &acc}
}
func (q RuneQueue) TakeRight(n int) RuneQueue {
	acc := NilRuneList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return RuneQueue{&NilRuneList, &acc}
}
func (q Float32Queue) TakeRight(n int) Float32Queue {
	acc := NilFloat32List
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float32Queue{&NilFloat32List, &acc}
}
func (q Float64Queue) TakeRight(n int) Float64Queue {
	acc := NilFloat64List
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float64Queue{&NilFloat64List, &acc}
}
func (q AnyQueue) TakeRight(n int) AnyQueue {
	acc := NilAnyList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return AnyQueue{&NilAnyList, &acc}
}
func (q Tuple2Queue) TakeRight(n int) Tuple2Queue {
	acc := NilTuple2List
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Tuple2Queue{&NilTuple2List, &acc}
}
func (q BoolArrayQueue) TakeRight(n int) BoolArrayQueue {
	acc := NilBoolArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return BoolArrayQueue{&NilBoolArrayList, &acc}
}
func (q StringArrayQueue) TakeRight(n int) StringArrayQueue {
	acc := NilStringArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return StringArrayQueue{&NilStringArrayList, &acc}
}
func (q IntArrayQueue) TakeRight(n int) IntArrayQueue {
	acc := NilIntArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return IntArrayQueue{&NilIntArrayList, &acc}
}
func (q Int64ArrayQueue) TakeRight(n int) Int64ArrayQueue {
	acc := NilInt64ArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Int64ArrayQueue{&NilInt64ArrayList, &acc}
}
func (q ByteArrayQueue) TakeRight(n int) ByteArrayQueue {
	acc := NilByteArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return ByteArrayQueue{&NilByteArrayList, &acc}
}
func (q RuneArrayQueue) TakeRight(n int) RuneArrayQueue {
	acc := NilRuneArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return RuneArrayQueue{&NilRuneArrayList, &acc}
}
func (q Float32ArrayQueue) TakeRight(n int) Float32ArrayQueue {
	acc := NilFloat32ArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float32ArrayQueue{&NilFloat32ArrayList, &acc}
}
func (q Float64ArrayQueue) TakeRight(n int) Float64ArrayQueue {
	acc := NilFloat64ArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float64ArrayQueue{&NilFloat64ArrayList, &acc}
}
func (q AnyArrayQueue) TakeRight(n int) AnyArrayQueue {
	acc := NilAnyArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return AnyArrayQueue{&NilAnyArrayList, &acc}
}
func (q Tuple2ArrayQueue) TakeRight(n int) Tuple2ArrayQueue {
	acc := NilTuple2ArrayList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Tuple2ArrayQueue{&NilTuple2ArrayList, &acc}
}
func (q BoolOptionQueue) TakeRight(n int) BoolOptionQueue {
	acc := NilBoolOptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return BoolOptionQueue{&NilBoolOptionList, &acc}
}
func (q StringOptionQueue) TakeRight(n int) StringOptionQueue {
	acc := NilStringOptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return StringOptionQueue{&NilStringOptionList, &acc}
}
func (q IntOptionQueue) TakeRight(n int) IntOptionQueue {
	acc := NilIntOptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return IntOptionQueue{&NilIntOptionList, &acc}
}
func (q Int64OptionQueue) TakeRight(n int) Int64OptionQueue {
	acc := NilInt64OptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Int64OptionQueue{&NilInt64OptionList, &acc}
}
func (q ByteOptionQueue) TakeRight(n int) ByteOptionQueue {
	acc := NilByteOptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return ByteOptionQueue{&NilByteOptionList, &acc}
}
func (q RuneOptionQueue) TakeRight(n int) RuneOptionQueue {
	acc := NilRuneOptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return RuneOptionQueue{&NilRuneOptionList, &acc}
}
func (q Float32OptionQueue) TakeRight(n int) Float32OptionQueue {
	acc := NilFloat32OptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float32OptionQueue{&NilFloat32OptionList, &acc}
}
func (q Float64OptionQueue) TakeRight(n int) Float64OptionQueue {
	acc := NilFloat64OptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float64OptionQueue{&NilFloat64OptionList, &acc}
}
func (q AnyOptionQueue) TakeRight(n int) AnyOptionQueue {
	acc := NilAnyOptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return AnyOptionQueue{&NilAnyOptionList, &acc}
}
func (q Tuple2OptionQueue) TakeRight(n int) Tuple2OptionQueue {
	acc := NilTuple2OptionList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Tuple2OptionQueue{&NilTuple2OptionList, &acc}
}
func (q BoolListQueue) TakeRight(n int) BoolListQueue {
	acc := NilBoolListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return BoolListQueue{&NilBoolListList, &acc}
}
func (q StringListQueue) TakeRight(n int) StringListQueue {
	acc := NilStringListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return StringListQueue{&NilStringListList, &acc}
}
func (q IntListQueue) TakeRight(n int) IntListQueue {
	acc := NilIntListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return IntListQueue{&NilIntListList, &acc}
}
func (q Int64ListQueue) TakeRight(n int) Int64ListQueue {
	acc := NilInt64ListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Int64ListQueue{&NilInt64ListList, &acc}
}
func (q ByteListQueue) TakeRight(n int) ByteListQueue {
	acc := NilByteListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return ByteListQueue{&NilByteListList, &acc}
}
func (q RuneListQueue) TakeRight(n int) RuneListQueue {
	acc := NilRuneListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return RuneListQueue{&NilRuneListList, &acc}
}
func (q Float32ListQueue) TakeRight(n int) Float32ListQueue {
	acc := NilFloat32ListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float32ListQueue{&NilFloat32ListList, &acc}
}
func (q Float64ListQueue) TakeRight(n int) Float64ListQueue {
	acc := NilFloat64ListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Float64ListQueue{&NilFloat64ListList, &acc}
}
func (q AnyListQueue) TakeRight(n int) AnyListQueue {
	acc := NilAnyListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return AnyListQueue{&NilAnyListList, &acc}
}
func (q Tuple2ListQueue) TakeRight(n int) Tuple2ListQueue {
	acc := NilTuple2ListList
	xs := q.swap().out.Reverse()

	for i := 0; xs.NonEmpty() && i < n; i++ {
		acc = acc.Cons(*xs.head)
		xs = *xs.tail
	}
	return Tuple2ListQueue{&NilTuple2ListList, &acc}
}
