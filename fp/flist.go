// flist.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

type ListBool struct {
	head    bool
	tail    *ListBool
	functor FunctorBoolBool
}

type ListRune struct {
	head    rune
	tail    *ListRune
	functor FunctorRuneRune
}

type ListByte struct {
	head    byte
	tail    *ListByte
	functor FunctorByteByte
}

type ListInt struct {
	head    int
	tail    *ListInt
	functor FunctorIntInt
}

type ListInt8 struct {
	head    int8
	tail    *ListInt8
	functor FunctorInt8Int8
}

type ListInt16 struct {
	head    int16
	tail    *ListInt16
	functor FunctorInt16Int16
}

type ListInt32 struct {
	head    int32
	tail    *ListInt32
	functor FunctorInt32Int32
}

type ListInt64 struct {
	head    int64
	tail    *ListInt64
	functor FunctorInt64Int64
}

type ListUint struct {
	head    uint
	tail    *ListUint
	functor FunctorUintUint
}

type ListUint8 struct {
	head    uint8
	tail    *ListUint8
	functor FunctorUint8Uint8
}

type ListUint16 struct {
	head    uint16
	tail    *ListUint16
	functor FunctorUint16Uint16
}

type ListUint32 struct {
	head    uint32
	tail    *ListUint32
	functor FunctorUint32Uint32
}

type ListUint64 struct {
	head    uint64
	tail    *ListUint64
	functor FunctorUint64Uint64
}

type ListUintptr struct {
	head    uintptr
	tail    *ListUintptr
	functor FunctorUintptrUintptr
}

type ListFloat32 struct {
	head    float32
	tail    *ListFloat32
	functor FunctorFloat32Float32
}

type ListFloat64 struct {
	head    float64
	tail    *ListFloat64
	functor FunctorFloat64Float64
}

type ListComplex64 struct {
	head    complex64
	tail    *ListComplex64
	functor FunctorComplex64Complex64
}

type ListComplex128 struct {
	head    complex128
	tail    *ListComplex128
	functor FunctorComplex128Complex128
}

type ListString struct {
	head    string
	tail    *ListString
	functor FunctorStringString
}

type ListInterface struct {
	head    interface{}
	tail    *ListInterface
	functor FunctorInterfaceInterface
}

type ListBoolArr struct {
	head    []bool
	tail    *ListBoolArr
	functor FunctorBoolArrBoolArr
}

type ListRuneArr struct {
	head    []rune
	tail    *ListRuneArr
	functor FunctorRuneArrRuneArr
}

type ListByteArr struct {
	head    []byte
	tail    *ListByteArr
	functor FunctorByteArrByteArr
}

type ListIntArr struct {
	head    []int
	tail    *ListIntArr
	functor FunctorIntArrIntArr
}

type ListInt8Arr struct {
	head    []int8
	tail    *ListInt8Arr
	functor FunctorInt8ArrInt8Arr
}

type ListInt16Arr struct {
	head    []int16
	tail    *ListInt16Arr
	functor FunctorInt16ArrInt16Arr
}

type ListInt32Arr struct {
	head    []int32
	tail    *ListInt32Arr
	functor FunctorInt32ArrInt32Arr
}

type ListInt64Arr struct {
	head    []int64
	tail    *ListInt64Arr
	functor FunctorInt64ArrInt64Arr
}

type ListUintArr struct {
	head    []uint
	tail    *ListUintArr
	functor FunctorUintArrUintArr
}

type ListUint8Arr struct {
	head    []uint8
	tail    *ListUint8Arr
	functor FunctorUint8ArrUint8Arr
}

type ListUint16Arr struct {
	head    []uint16
	tail    *ListUint16Arr
	functor FunctorUint16ArrUint16Arr
}

type ListUint32Arr struct {
	head    []uint32
	tail    *ListUint32Arr
	functor FunctorUint32ArrUint32Arr
}

type ListUint64Arr struct {
	head    []uint64
	tail    *ListUint64Arr
	functor FunctorUint64ArrUint64Arr
}

type ListUintptrArr struct {
	head    []uintptr
	tail    *ListUintptrArr
	functor FunctorUintptrArrUintptrArr
}

type ListFloat32Arr struct {
	head    []float32
	tail    *ListFloat32Arr
	functor FunctorFloat32ArrFloat32Arr
}

type ListFloat64Arr struct {
	head    []float64
	tail    *ListFloat64Arr
	functor FunctorFloat64ArrFloat64Arr
}

type ListComplex64Arr struct {
	head    []complex64
	tail    *ListComplex64Arr
	functor FunctorComplex64ArrComplex64Arr
}

type ListComplex128Arr struct {
	head    []complex128
	tail    *ListComplex128Arr
	functor FunctorComplex128ArrComplex128Arr
}

type ListStringArr struct {
	head    []string
	tail    *ListStringArr
	functor FunctorStringArrStringArr
}

type ListInterfaceArr struct {
	head    []interface{}
	tail    *ListInterfaceArr
	functor FunctorInterfaceArrInterfaceArr
}
