// flist_copy.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l ListBool) Copy() ListBool {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListBool{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListRune) Copy() ListRune {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListRune{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListByte) Copy() ListByte {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListByte{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt) Copy() ListInt {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt8) Copy() ListInt8 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt8{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt16) Copy() ListInt16 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt16{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt32) Copy() ListInt32 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt32{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt64) Copy() ListInt64 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt64{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint) Copy() ListUint {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint8) Copy() ListUint8 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint8{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint16) Copy() ListUint16 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint16{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint32) Copy() ListUint32 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint32{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint64) Copy() ListUint64 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint64{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUintptr) Copy() ListUintptr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUintptr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListFloat32) Copy() ListFloat32 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListFloat32{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListFloat64) Copy() ListFloat64 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListFloat64{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListComplex64) Copy() ListComplex64 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListComplex64{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListComplex128) Copy() ListComplex128 {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListComplex128{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListString) Copy() ListString {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListString{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInterface) Copy() ListInterface {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInterface{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListBoolArr) Copy() ListBoolArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListBoolArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListRuneArr) Copy() ListRuneArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListRuneArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListByteArr) Copy() ListByteArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListByteArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListIntArr) Copy() ListIntArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListIntArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt8Arr) Copy() ListInt8Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt8Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt16Arr) Copy() ListInt16Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt16Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt32Arr) Copy() ListInt32Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt32Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInt64Arr) Copy() ListInt64Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInt64Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUintArr) Copy() ListUintArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUintArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint8Arr) Copy() ListUint8Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint8Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint16Arr) Copy() ListUint16Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint16Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint32Arr) Copy() ListUint32Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint32Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUint64Arr) Copy() ListUint64Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUint64Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListUintptrArr) Copy() ListUintptrArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListUintptrArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListFloat32Arr) Copy() ListFloat32Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListFloat32Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListFloat64Arr) Copy() ListFloat64Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListFloat64Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListComplex64Arr) Copy() ListComplex64Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListComplex64Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListComplex128Arr) Copy() ListComplex128Arr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListComplex128Arr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListStringArr) Copy() ListStringArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListStringArr{
			head: l.head,
			tail: &tail,
		}
	}
}
func (l ListInterfaceArr) Copy() ListInterfaceArr {
	if l.IsEmpty() {
		return l
	} else {
		tail := l.tail.Copy()
		return ListInterfaceArr{
			head: l.head,
			tail: &tail,
		}
	}
}
