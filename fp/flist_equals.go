// flist_equals.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l1 BoolList) Equals(l2 BoolList) bool { return EqualBoolList(l1, l2) }

func (l1 RuneList) Equals(l2 RuneList) bool { return EqualRuneList(l1, l2) }

func (l1 ByteList) Equals(l2 ByteList) bool { return EqualByteList(l1, l2) }

func (l1 IntList) Equals(l2 IntList) bool { return EqualIntList(l1, l2) }

func (l1 Int8List) Equals(l2 Int8List) bool { return EqualInt8List(l1, l2) }

func (l1 Int16List) Equals(l2 Int16List) bool { return EqualInt16List(l1, l2) }

func (l1 Int32List) Equals(l2 Int32List) bool { return EqualInt32List(l1, l2) }

func (l1 Int64List) Equals(l2 Int64List) bool { return EqualInt64List(l1, l2) }

func (l1 UintList) Equals(l2 UintList) bool { return EqualUintList(l1, l2) }

func (l1 Uint8List) Equals(l2 Uint8List) bool { return EqualUint8List(l1, l2) }

func (l1 Uint16List) Equals(l2 Uint16List) bool { return EqualUint16List(l1, l2) }

func (l1 Uint32List) Equals(l2 Uint32List) bool { return EqualUint32List(l1, l2) }

func (l1 Uint64List) Equals(l2 Uint64List) bool { return EqualUint64List(l1, l2) }

func (l1 UintptrList) Equals(l2 UintptrList) bool { return EqualUintptrList(l1, l2) }

func (l1 Float32List) Equals(l2 Float32List) bool { return EqualFloat32List(l1, l2) }

func (l1 Float64List) Equals(l2 Float64List) bool { return EqualFloat64List(l1, l2) }

func (l1 Complex64List) Equals(l2 Complex64List) bool { return EqualComplex64List(l1, l2) }

func (l1 Complex128List) Equals(l2 Complex128List) bool { return EqualComplex128List(l1, l2) }

func (l1 StringList) Equals(l2 StringList) bool { return EqualStringList(l1, l2) }

func (l1 AnyList) Equals(l2 AnyList) bool { return EqualAnyList(l1, l2) }

func (l1 BoolArrList) Equals(l2 BoolArrList) bool { return EqualBoolArrList(l1, l2) }

func (l1 RuneArrList) Equals(l2 RuneArrList) bool { return EqualRuneArrList(l1, l2) }

func (l1 ByteArrList) Equals(l2 ByteArrList) bool { return EqualByteArrList(l1, l2) }

func (l1 IntArrList) Equals(l2 IntArrList) bool { return EqualIntArrList(l1, l2) }

func (l1 Int8ArrList) Equals(l2 Int8ArrList) bool { return EqualInt8ArrList(l1, l2) }

func (l1 Int16ArrList) Equals(l2 Int16ArrList) bool { return EqualInt16ArrList(l1, l2) }

func (l1 Int32ArrList) Equals(l2 Int32ArrList) bool { return EqualInt32ArrList(l1, l2) }

func (l1 Int64ArrList) Equals(l2 Int64ArrList) bool { return EqualInt64ArrList(l1, l2) }

func (l1 UintArrList) Equals(l2 UintArrList) bool { return EqualUintArrList(l1, l2) }

func (l1 Uint8ArrList) Equals(l2 Uint8ArrList) bool { return EqualUint8ArrList(l1, l2) }

func (l1 Uint16ArrList) Equals(l2 Uint16ArrList) bool { return EqualUint16ArrList(l1, l2) }

func (l1 Uint32ArrList) Equals(l2 Uint32ArrList) bool { return EqualUint32ArrList(l1, l2) }

func (l1 Uint64ArrList) Equals(l2 Uint64ArrList) bool { return EqualUint64ArrList(l1, l2) }

func (l1 UintptrArrList) Equals(l2 UintptrArrList) bool { return EqualUintptrArrList(l1, l2) }

func (l1 Float32ArrList) Equals(l2 Float32ArrList) bool { return EqualFloat32ArrList(l1, l2) }

func (l1 Float64ArrList) Equals(l2 Float64ArrList) bool { return EqualFloat64ArrList(l1, l2) }

func (l1 Complex64ArrList) Equals(l2 Complex64ArrList) bool { return EqualComplex64ArrList(l1, l2) }

func (l1 Complex128ArrList) Equals(l2 Complex128ArrList) bool { return EqualComplex128ArrList(l1, l2) }

func (l1 StringArrList) Equals(l2 StringArrList) bool { return EqualStringArrList(l1, l2) }

func (l1 AnyArrList) Equals(l2 AnyArrList) bool { return EqualAnyArrList(l1, l2) }
