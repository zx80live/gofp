// flist_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l BoolList) Filter(p BoolPredicate) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) Filter(p RunePredicate) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) Filter(p BytePredicate) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) Filter(p IntPredicate) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) Filter(p Int8Predicate) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) Filter(p Int16Predicate) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) Filter(p Int32Predicate) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) Filter(p Int64Predicate) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) Filter(p UintPredicate) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) Filter(p Uint8Predicate) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) Filter(p Uint16Predicate) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) Filter(p Uint32Predicate) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) Filter(p Uint64Predicate) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) Filter(p UintptrPredicate) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) Filter(p Float32Predicate) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) Filter(p Float64Predicate) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) Filter(p Complex64Predicate) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) Filter(p Complex128Predicate) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) Filter(p StringPredicate) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) Filter(p AnyPredicate) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) Filter(p BoolArrPredicate) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) Filter(p RuneArrPredicate) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) Filter(p ByteArrPredicate) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) Filter(p IntArrPredicate) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) Filter(p Int8ArrPredicate) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) Filter(p Int16ArrPredicate) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) Filter(p Int32ArrPredicate) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) Filter(p Int64ArrPredicate) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) Filter(p UintArrPredicate) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) Filter(p Uint8ArrPredicate) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) Filter(p Uint16ArrPredicate) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) Filter(p Uint32ArrPredicate) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) Filter(p Uint64ArrPredicate) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) Filter(p UintptrArrPredicate) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) Filter(p Float32ArrPredicate) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) Filter(p Float64ArrPredicate) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) Filter(p Complex64ArrPredicate) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) Filter(p Complex128ArrPredicate) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) Filter(p StringArrPredicate) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) Filter(p AnyArrPredicate) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = xs.tail
	}
	return acc.Reverse()
}
