// flist_make.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func MakeListBool(elements ...bool) ListBool {
	l := NilBool
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListRune(elements ...rune) ListRune {
	l := NilRune
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListByte(elements ...byte) ListByte {
	l := NilByte
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt(elements ...int) ListInt {
	l := NilInt
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt8(elements ...int8) ListInt8 {
	l := NilInt8
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt16(elements ...int16) ListInt16 {
	l := NilInt16
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt32(elements ...int32) ListInt32 {
	l := NilInt32
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt64(elements ...int64) ListInt64 {
	l := NilInt64
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint(elements ...uint) ListUint {
	l := NilUint
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint8(elements ...uint8) ListUint8 {
	l := NilUint8
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint16(elements ...uint16) ListUint16 {
	l := NilUint16
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint32(elements ...uint32) ListUint32 {
	l := NilUint32
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint64(elements ...uint64) ListUint64 {
	l := NilUint64
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUintptr(elements ...uintptr) ListUintptr {
	l := NilUintptr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListFloat32(elements ...float32) ListFloat32 {
	l := NilFloat32
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListFloat64(elements ...float64) ListFloat64 {
	l := NilFloat64
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListComplex64(elements ...complex64) ListComplex64 {
	l := NilComplex64
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListComplex128(elements ...complex128) ListComplex128 {
	l := NilComplex128
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListString(elements ...string) ListString {
	l := NilString
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInterface(elements ...interface{}) ListInterface {
	l := NilInterface
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListBoolArr(elements ...[]bool) ListBoolArr {
	l := NilBoolArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListRuneArr(elements ...[]rune) ListRuneArr {
	l := NilRuneArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListByteArr(elements ...[]byte) ListByteArr {
	l := NilByteArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListIntArr(elements ...[]int) ListIntArr {
	l := NilIntArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt8Arr(elements ...[]int8) ListInt8Arr {
	l := NilInt8Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt16Arr(elements ...[]int16) ListInt16Arr {
	l := NilInt16Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt32Arr(elements ...[]int32) ListInt32Arr {
	l := NilInt32Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInt64Arr(elements ...[]int64) ListInt64Arr {
	l := NilInt64Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUintArr(elements ...[]uint) ListUintArr {
	l := NilUintArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint8Arr(elements ...[]uint8) ListUint8Arr {
	l := NilUint8Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint16Arr(elements ...[]uint16) ListUint16Arr {
	l := NilUint16Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint32Arr(elements ...[]uint32) ListUint32Arr {
	l := NilUint32Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUint64Arr(elements ...[]uint64) ListUint64Arr {
	l := NilUint64Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListUintptrArr(elements ...[]uintptr) ListUintptrArr {
	l := NilUintptrArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListFloat32Arr(elements ...[]float32) ListFloat32Arr {
	l := NilFloat32Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListFloat64Arr(elements ...[]float64) ListFloat64Arr {
	l := NilFloat64Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListComplex64Arr(elements ...[]complex64) ListComplex64Arr {
	l := NilComplex64Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListComplex128Arr(elements ...[]complex128) ListComplex128Arr {
	l := NilComplex128Arr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListStringArr(elements ...[]string) ListStringArr {
	l := NilStringArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
func MakeListInterfaceArr(elements ...[]interface{}) ListInterfaceArr {
	l := NilInterfaceArr
	for i := len(elements) - 1; i >= 0; i-- {
		l = l.Cons(elements[i])
	}
	return l
}
