// flist_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l BoolList) MapBool(f BoolBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRune(f BoolRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByte(f BoolByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt(f BoolIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8(f BoolInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16(f BoolInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32(f BoolInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64(f BoolInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint(f BoolUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8(f BoolUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16(f BoolUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32(f BoolUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64(f BoolUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptr(f BoolUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32(f BoolFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64(f BoolFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64(f BoolComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128(f BoolComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapString(f BoolStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAny(f BoolAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapBoolArr(f BoolBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRuneArr(f BoolRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByteArr(f BoolByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapIntArr(f BoolIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8Arr(f BoolInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16Arr(f BoolInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32Arr(f BoolInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64Arr(f BoolInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintArr(f BoolUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8Arr(f BoolUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16Arr(f BoolUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32Arr(f BoolUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64Arr(f BoolUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptrArr(f BoolUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32Arr(f BoolFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64Arr(f BoolFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64Arr(f BoolComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128Arr(f BoolComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapStringArr(f BoolStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAnyArr(f BoolAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBool(f RuneBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRune(f RuneRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByte(f RuneByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt(f RuneIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8(f RuneInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16(f RuneInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32(f RuneInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64(f RuneInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint(f RuneUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8(f RuneUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16(f RuneUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32(f RuneUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64(f RuneUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptr(f RuneUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32(f RuneFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64(f RuneFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64(f RuneComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128(f RuneComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapString(f RuneStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAny(f RuneAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBoolArr(f RuneBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRuneArr(f RuneRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByteArr(f RuneByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapIntArr(f RuneIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8Arr(f RuneInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16Arr(f RuneInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32Arr(f RuneInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64Arr(f RuneInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintArr(f RuneUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8Arr(f RuneUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16Arr(f RuneUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32Arr(f RuneUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64Arr(f RuneUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptrArr(f RuneUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32Arr(f RuneFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64Arr(f RuneFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64Arr(f RuneComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128Arr(f RuneComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapStringArr(f RuneStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAnyArr(f RuneAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBool(f ByteBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRune(f ByteRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByte(f ByteByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt(f ByteIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8(f ByteInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16(f ByteInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32(f ByteInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64(f ByteInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint(f ByteUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8(f ByteUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16(f ByteUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32(f ByteUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64(f ByteUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptr(f ByteUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32(f ByteFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64(f ByteFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64(f ByteComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128(f ByteComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapString(f ByteStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAny(f ByteAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBoolArr(f ByteBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRuneArr(f ByteRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByteArr(f ByteByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapIntArr(f ByteIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8Arr(f ByteInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16Arr(f ByteInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32Arr(f ByteInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64Arr(f ByteInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintArr(f ByteUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8Arr(f ByteUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16Arr(f ByteUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32Arr(f ByteUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64Arr(f ByteUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptrArr(f ByteUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32Arr(f ByteFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64Arr(f ByteFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64Arr(f ByteComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128Arr(f ByteComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapStringArr(f ByteStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAnyArr(f ByteAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBool(f IntBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRune(f IntRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByte(f IntByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt(f IntIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8(f IntInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16(f IntInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32(f IntInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64(f IntInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint(f IntUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8(f IntUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16(f IntUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32(f IntUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64(f IntUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptr(f IntUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32(f IntFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64(f IntFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64(f IntComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128(f IntComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapString(f IntStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAny(f IntAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBoolArr(f IntBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRuneArr(f IntRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByteArr(f IntByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapIntArr(f IntIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8Arr(f IntInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16Arr(f IntInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32Arr(f IntInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64Arr(f IntInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintArr(f IntUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8Arr(f IntUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16Arr(f IntUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32Arr(f IntUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64Arr(f IntUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptrArr(f IntUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32Arr(f IntFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64Arr(f IntFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64Arr(f IntComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128Arr(f IntComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapStringArr(f IntStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAnyArr(f IntAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBool(f Int8BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRune(f Int8RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByte(f Int8ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt(f Int8IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8(f Int8Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16(f Int8Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32(f Int8Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64(f Int8Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint(f Int8UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8(f Int8Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16(f Int8Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32(f Int8Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64(f Int8Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptr(f Int8UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32(f Int8Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64(f Int8Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64(f Int8Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128(f Int8Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapString(f Int8StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAny(f Int8AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBoolArr(f Int8BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRuneArr(f Int8RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByteArr(f Int8ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapIntArr(f Int8IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8Arr(f Int8Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16Arr(f Int8Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32Arr(f Int8Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64Arr(f Int8Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintArr(f Int8UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8Arr(f Int8Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16Arr(f Int8Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32Arr(f Int8Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64Arr(f Int8Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptrArr(f Int8UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32Arr(f Int8Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64Arr(f Int8Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64Arr(f Int8Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128Arr(f Int8Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapStringArr(f Int8StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAnyArr(f Int8AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBool(f Int16BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRune(f Int16RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByte(f Int16ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt(f Int16IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8(f Int16Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16(f Int16Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32(f Int16Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64(f Int16Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint(f Int16UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8(f Int16Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16(f Int16Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32(f Int16Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64(f Int16Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptr(f Int16UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32(f Int16Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64(f Int16Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64(f Int16Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128(f Int16Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapString(f Int16StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAny(f Int16AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBoolArr(f Int16BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRuneArr(f Int16RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByteArr(f Int16ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapIntArr(f Int16IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8Arr(f Int16Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16Arr(f Int16Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32Arr(f Int16Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64Arr(f Int16Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintArr(f Int16UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8Arr(f Int16Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16Arr(f Int16Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32Arr(f Int16Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64Arr(f Int16Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptrArr(f Int16UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32Arr(f Int16Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64Arr(f Int16Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64Arr(f Int16Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128Arr(f Int16Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapStringArr(f Int16StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAnyArr(f Int16AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBool(f Int32BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRune(f Int32RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByte(f Int32ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt(f Int32IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8(f Int32Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16(f Int32Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32(f Int32Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64(f Int32Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint(f Int32UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8(f Int32Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16(f Int32Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32(f Int32Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64(f Int32Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptr(f Int32UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32(f Int32Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64(f Int32Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64(f Int32Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128(f Int32Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapString(f Int32StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAny(f Int32AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBoolArr(f Int32BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRuneArr(f Int32RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByteArr(f Int32ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapIntArr(f Int32IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8Arr(f Int32Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16Arr(f Int32Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32Arr(f Int32Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64Arr(f Int32Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintArr(f Int32UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8Arr(f Int32Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16Arr(f Int32Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32Arr(f Int32Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64Arr(f Int32Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptrArr(f Int32UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32Arr(f Int32Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64Arr(f Int32Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64Arr(f Int32Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128Arr(f Int32Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapStringArr(f Int32StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAnyArr(f Int32AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBool(f Int64BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRune(f Int64RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByte(f Int64ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt(f Int64IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8(f Int64Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16(f Int64Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32(f Int64Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64(f Int64Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint(f Int64UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8(f Int64Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16(f Int64Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32(f Int64Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64(f Int64Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptr(f Int64UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32(f Int64Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64(f Int64Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64(f Int64Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128(f Int64Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapString(f Int64StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAny(f Int64AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBoolArr(f Int64BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRuneArr(f Int64RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByteArr(f Int64ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapIntArr(f Int64IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8Arr(f Int64Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16Arr(f Int64Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32Arr(f Int64Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64Arr(f Int64Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintArr(f Int64UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8Arr(f Int64Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16Arr(f Int64Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32Arr(f Int64Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64Arr(f Int64Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptrArr(f Int64UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32Arr(f Int64Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64Arr(f Int64Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64Arr(f Int64Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128Arr(f Int64Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapStringArr(f Int64StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAnyArr(f Int64AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBool(f UintBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRune(f UintRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByte(f UintByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt(f UintIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8(f UintInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16(f UintInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32(f UintInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64(f UintInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint(f UintUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8(f UintUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16(f UintUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32(f UintUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64(f UintUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptr(f UintUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32(f UintFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64(f UintFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64(f UintComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128(f UintComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapString(f UintStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAny(f UintAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBoolArr(f UintBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRuneArr(f UintRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByteArr(f UintByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapIntArr(f UintIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8Arr(f UintInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16Arr(f UintInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32Arr(f UintInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64Arr(f UintInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintArr(f UintUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8Arr(f UintUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16Arr(f UintUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32Arr(f UintUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64Arr(f UintUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptrArr(f UintUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32Arr(f UintFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64Arr(f UintFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64Arr(f UintComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128Arr(f UintComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapStringArr(f UintStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAnyArr(f UintAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBool(f Uint8BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRune(f Uint8RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByte(f Uint8ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt(f Uint8IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8(f Uint8Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16(f Uint8Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32(f Uint8Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64(f Uint8Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint(f Uint8UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8(f Uint8Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16(f Uint8Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32(f Uint8Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64(f Uint8Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptr(f Uint8UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32(f Uint8Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64(f Uint8Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64(f Uint8Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128(f Uint8Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapString(f Uint8StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAny(f Uint8AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBoolArr(f Uint8BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRuneArr(f Uint8RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByteArr(f Uint8ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapIntArr(f Uint8IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8Arr(f Uint8Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16Arr(f Uint8Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32Arr(f Uint8Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64Arr(f Uint8Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintArr(f Uint8UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8Arr(f Uint8Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16Arr(f Uint8Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32Arr(f Uint8Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64Arr(f Uint8Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptrArr(f Uint8UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32Arr(f Uint8Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64Arr(f Uint8Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64Arr(f Uint8Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128Arr(f Uint8Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapStringArr(f Uint8StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAnyArr(f Uint8AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBool(f Uint16BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRune(f Uint16RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByte(f Uint16ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt(f Uint16IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8(f Uint16Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16(f Uint16Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32(f Uint16Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64(f Uint16Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint(f Uint16UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8(f Uint16Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16(f Uint16Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32(f Uint16Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64(f Uint16Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptr(f Uint16UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32(f Uint16Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64(f Uint16Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64(f Uint16Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128(f Uint16Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapString(f Uint16StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAny(f Uint16AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBoolArr(f Uint16BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRuneArr(f Uint16RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByteArr(f Uint16ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapIntArr(f Uint16IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8Arr(f Uint16Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16Arr(f Uint16Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32Arr(f Uint16Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64Arr(f Uint16Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintArr(f Uint16UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8Arr(f Uint16Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16Arr(f Uint16Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32Arr(f Uint16Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64Arr(f Uint16Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptrArr(f Uint16UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32Arr(f Uint16Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64Arr(f Uint16Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64Arr(f Uint16Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128Arr(f Uint16Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapStringArr(f Uint16StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAnyArr(f Uint16AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBool(f Uint32BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRune(f Uint32RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByte(f Uint32ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt(f Uint32IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8(f Uint32Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16(f Uint32Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32(f Uint32Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64(f Uint32Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint(f Uint32UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8(f Uint32Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16(f Uint32Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32(f Uint32Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64(f Uint32Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptr(f Uint32UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32(f Uint32Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64(f Uint32Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64(f Uint32Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128(f Uint32Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapString(f Uint32StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAny(f Uint32AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBoolArr(f Uint32BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRuneArr(f Uint32RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByteArr(f Uint32ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapIntArr(f Uint32IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8Arr(f Uint32Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16Arr(f Uint32Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32Arr(f Uint32Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64Arr(f Uint32Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintArr(f Uint32UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8Arr(f Uint32Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16Arr(f Uint32Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32Arr(f Uint32Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64Arr(f Uint32Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptrArr(f Uint32UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32Arr(f Uint32Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64Arr(f Uint32Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64Arr(f Uint32Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128Arr(f Uint32Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapStringArr(f Uint32StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAnyArr(f Uint32AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBool(f Uint64BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRune(f Uint64RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByte(f Uint64ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt(f Uint64IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8(f Uint64Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16(f Uint64Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32(f Uint64Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64(f Uint64Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint(f Uint64UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8(f Uint64Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16(f Uint64Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32(f Uint64Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64(f Uint64Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptr(f Uint64UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32(f Uint64Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64(f Uint64Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64(f Uint64Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128(f Uint64Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapString(f Uint64StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAny(f Uint64AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBoolArr(f Uint64BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRuneArr(f Uint64RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByteArr(f Uint64ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapIntArr(f Uint64IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8Arr(f Uint64Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16Arr(f Uint64Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32Arr(f Uint64Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64Arr(f Uint64Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintArr(f Uint64UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8Arr(f Uint64Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16Arr(f Uint64Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32Arr(f Uint64Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64Arr(f Uint64Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptrArr(f Uint64UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32Arr(f Uint64Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64Arr(f Uint64Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64Arr(f Uint64Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128Arr(f Uint64Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapStringArr(f Uint64StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAnyArr(f Uint64AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBool(f UintptrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRune(f UintptrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByte(f UintptrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt(f UintptrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8(f UintptrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16(f UintptrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32(f UintptrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64(f UintptrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint(f UintptrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8(f UintptrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16(f UintptrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32(f UintptrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64(f UintptrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptr(f UintptrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32(f UintptrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64(f UintptrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64(f UintptrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128(f UintptrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapString(f UintptrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAny(f UintptrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBoolArr(f UintptrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRuneArr(f UintptrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByteArr(f UintptrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapIntArr(f UintptrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8Arr(f UintptrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16Arr(f UintptrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32Arr(f UintptrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64Arr(f UintptrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintArr(f UintptrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8Arr(f UintptrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16Arr(f UintptrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32Arr(f UintptrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64Arr(f UintptrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptrArr(f UintptrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32Arr(f UintptrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64Arr(f UintptrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64Arr(f UintptrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128Arr(f UintptrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapStringArr(f UintptrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAnyArr(f UintptrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBool(f Float32BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRune(f Float32RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByte(f Float32ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt(f Float32IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8(f Float32Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16(f Float32Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32(f Float32Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64(f Float32Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint(f Float32UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8(f Float32Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16(f Float32Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32(f Float32Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64(f Float32Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptr(f Float32UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32(f Float32Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64(f Float32Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64(f Float32Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128(f Float32Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapString(f Float32StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAny(f Float32AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBoolArr(f Float32BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRuneArr(f Float32RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByteArr(f Float32ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapIntArr(f Float32IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8Arr(f Float32Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16Arr(f Float32Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32Arr(f Float32Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64Arr(f Float32Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintArr(f Float32UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8Arr(f Float32Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16Arr(f Float32Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32Arr(f Float32Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64Arr(f Float32Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptrArr(f Float32UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32Arr(f Float32Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64Arr(f Float32Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64Arr(f Float32Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128Arr(f Float32Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapStringArr(f Float32StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAnyArr(f Float32AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBool(f Float64BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRune(f Float64RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByte(f Float64ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt(f Float64IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8(f Float64Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16(f Float64Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32(f Float64Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64(f Float64Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint(f Float64UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8(f Float64Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16(f Float64Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32(f Float64Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64(f Float64Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptr(f Float64UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32(f Float64Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64(f Float64Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64(f Float64Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128(f Float64Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapString(f Float64StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAny(f Float64AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBoolArr(f Float64BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRuneArr(f Float64RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByteArr(f Float64ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapIntArr(f Float64IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8Arr(f Float64Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16Arr(f Float64Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32Arr(f Float64Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64Arr(f Float64Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintArr(f Float64UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8Arr(f Float64Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16Arr(f Float64Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32Arr(f Float64Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64Arr(f Float64Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptrArr(f Float64UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32Arr(f Float64Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64Arr(f Float64Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64Arr(f Float64Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128Arr(f Float64Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapStringArr(f Float64StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAnyArr(f Float64AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBool(f Complex64BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRune(f Complex64RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByte(f Complex64ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt(f Complex64IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8(f Complex64Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16(f Complex64Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32(f Complex64Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64(f Complex64Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint(f Complex64UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8(f Complex64Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16(f Complex64Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32(f Complex64Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64(f Complex64Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptr(f Complex64UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32(f Complex64Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64(f Complex64Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64(f Complex64Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128(f Complex64Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapString(f Complex64StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAny(f Complex64AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBoolArr(f Complex64BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRuneArr(f Complex64RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByteArr(f Complex64ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapIntArr(f Complex64IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8Arr(f Complex64Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16Arr(f Complex64Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32Arr(f Complex64Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64Arr(f Complex64Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintArr(f Complex64UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8Arr(f Complex64Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16Arr(f Complex64Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32Arr(f Complex64Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64Arr(f Complex64Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptrArr(f Complex64UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32Arr(f Complex64Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64Arr(f Complex64Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64Arr(f Complex64Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128Arr(f Complex64Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapStringArr(f Complex64StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAnyArr(f Complex64AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBool(f Complex128BoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRune(f Complex128RuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByte(f Complex128ByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt(f Complex128IntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8(f Complex128Int8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16(f Complex128Int16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32(f Complex128Int32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64(f Complex128Int64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint(f Complex128UintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8(f Complex128Uint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16(f Complex128Uint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32(f Complex128Uint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64(f Complex128Uint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptr(f Complex128UintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32(f Complex128Float32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64(f Complex128Float64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64(f Complex128Complex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128(f Complex128Complex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapString(f Complex128StringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAny(f Complex128AnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBoolArr(f Complex128BoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRuneArr(f Complex128RuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByteArr(f Complex128ByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapIntArr(f Complex128IntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8Arr(f Complex128Int8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16Arr(f Complex128Int16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32Arr(f Complex128Int32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64Arr(f Complex128Int64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintArr(f Complex128UintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8Arr(f Complex128Uint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16Arr(f Complex128Uint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32Arr(f Complex128Uint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64Arr(f Complex128Uint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptrArr(f Complex128UintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32Arr(f Complex128Float32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64Arr(f Complex128Float64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64Arr(f Complex128Complex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128Arr(f Complex128Complex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapStringArr(f Complex128StringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAnyArr(f Complex128AnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBool(f StringBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRune(f StringRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByte(f StringByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt(f StringIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8(f StringInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16(f StringInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32(f StringInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64(f StringInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint(f StringUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8(f StringUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16(f StringUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32(f StringUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64(f StringUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptr(f StringUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32(f StringFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64(f StringFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64(f StringComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128(f StringComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapString(f StringStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAny(f StringAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBoolArr(f StringBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRuneArr(f StringRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByteArr(f StringByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapIntArr(f StringIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8Arr(f StringInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16Arr(f StringInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32Arr(f StringInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64Arr(f StringInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintArr(f StringUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8Arr(f StringUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16Arr(f StringUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32Arr(f StringUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64Arr(f StringUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptrArr(f StringUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32Arr(f StringFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64Arr(f StringFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64Arr(f StringComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128Arr(f StringComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapStringArr(f StringStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAnyArr(f StringAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBool(f AnyBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRune(f AnyRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByte(f AnyByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt(f AnyIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8(f AnyInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16(f AnyInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32(f AnyInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64(f AnyInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint(f AnyUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8(f AnyUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16(f AnyUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32(f AnyUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64(f AnyUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptr(f AnyUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32(f AnyFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64(f AnyFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64(f AnyComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128(f AnyComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapString(f AnyStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAny(f AnyAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBoolArr(f AnyBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRuneArr(f AnyRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByteArr(f AnyByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapIntArr(f AnyIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8Arr(f AnyInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16Arr(f AnyInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32Arr(f AnyInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64Arr(f AnyInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintArr(f AnyUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8Arr(f AnyUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16Arr(f AnyUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32Arr(f AnyUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64Arr(f AnyUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptrArr(f AnyUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32Arr(f AnyFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64Arr(f AnyFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64Arr(f AnyComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128Arr(f AnyComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapStringArr(f AnyStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAnyArr(f AnyAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapBool(f BoolArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapRune(f BoolArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapByte(f BoolArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt(f BoolArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt8(f BoolArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt16(f BoolArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt32(f BoolArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt64(f BoolArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint(f BoolArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint8(f BoolArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint16(f BoolArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint32(f BoolArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint64(f BoolArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUintptr(f BoolArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat32(f BoolArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat64(f BoolArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex64(f BoolArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex128(f BoolArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapString(f BoolArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapAny(f BoolArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapBoolArr(f BoolArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapRuneArr(f BoolArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapByteArr(f BoolArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapIntArr(f BoolArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt8Arr(f BoolArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt16Arr(f BoolArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt32Arr(f BoolArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt64Arr(f BoolArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUintArr(f BoolArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint8Arr(f BoolArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint16Arr(f BoolArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint32Arr(f BoolArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint64Arr(f BoolArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUintptrArr(f BoolArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat32Arr(f BoolArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat64Arr(f BoolArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex64Arr(f BoolArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex128Arr(f BoolArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapStringArr(f BoolArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapAnyArr(f BoolArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapBool(f RuneArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapRune(f RuneArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapByte(f RuneArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt(f RuneArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt8(f RuneArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt16(f RuneArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt32(f RuneArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt64(f RuneArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint(f RuneArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint8(f RuneArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint16(f RuneArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint32(f RuneArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint64(f RuneArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUintptr(f RuneArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat32(f RuneArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat64(f RuneArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex64(f RuneArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex128(f RuneArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapString(f RuneArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapAny(f RuneArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapBoolArr(f RuneArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapRuneArr(f RuneArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapByteArr(f RuneArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapIntArr(f RuneArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt8Arr(f RuneArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt16Arr(f RuneArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt32Arr(f RuneArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt64Arr(f RuneArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUintArr(f RuneArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint8Arr(f RuneArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint16Arr(f RuneArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint32Arr(f RuneArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint64Arr(f RuneArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUintptrArr(f RuneArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat32Arr(f RuneArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat64Arr(f RuneArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex64Arr(f RuneArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex128Arr(f RuneArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapStringArr(f RuneArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapAnyArr(f RuneArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapBool(f ByteArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapRune(f ByteArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapByte(f ByteArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt(f ByteArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt8(f ByteArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt16(f ByteArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt32(f ByteArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt64(f ByteArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint(f ByteArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint8(f ByteArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint16(f ByteArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint32(f ByteArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint64(f ByteArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUintptr(f ByteArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat32(f ByteArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat64(f ByteArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex64(f ByteArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex128(f ByteArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapString(f ByteArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapAny(f ByteArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapBoolArr(f ByteArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapRuneArr(f ByteArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapByteArr(f ByteArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapIntArr(f ByteArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt8Arr(f ByteArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt16Arr(f ByteArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt32Arr(f ByteArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt64Arr(f ByteArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUintArr(f ByteArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint8Arr(f ByteArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint16Arr(f ByteArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint32Arr(f ByteArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint64Arr(f ByteArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUintptrArr(f ByteArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat32Arr(f ByteArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat64Arr(f ByteArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex64Arr(f ByteArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex128Arr(f ByteArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapStringArr(f ByteArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapAnyArr(f ByteArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapBool(f IntArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapRune(f IntArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapByte(f IntArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt(f IntArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt8(f IntArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt16(f IntArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt32(f IntArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt64(f IntArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint(f IntArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint8(f IntArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint16(f IntArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint32(f IntArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint64(f IntArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUintptr(f IntArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat32(f IntArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat64(f IntArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex64(f IntArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex128(f IntArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapString(f IntArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapAny(f IntArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapBoolArr(f IntArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapRuneArr(f IntArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapByteArr(f IntArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapIntArr(f IntArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt8Arr(f IntArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt16Arr(f IntArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt32Arr(f IntArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt64Arr(f IntArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUintArr(f IntArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint8Arr(f IntArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint16Arr(f IntArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint32Arr(f IntArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint64Arr(f IntArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUintptrArr(f IntArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat32Arr(f IntArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat64Arr(f IntArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex64Arr(f IntArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex128Arr(f IntArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapStringArr(f IntArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapAnyArr(f IntArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapBool(f Int8ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapRune(f Int8ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapByte(f Int8ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt(f Int8ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt8(f Int8ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt16(f Int8ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt32(f Int8ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt64(f Int8ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint(f Int8ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint8(f Int8ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint16(f Int8ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint32(f Int8ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint64(f Int8ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUintptr(f Int8ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat32(f Int8ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat64(f Int8ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex64(f Int8ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex128(f Int8ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapString(f Int8ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapAny(f Int8ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapBoolArr(f Int8ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapRuneArr(f Int8ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapByteArr(f Int8ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapIntArr(f Int8ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt8Arr(f Int8ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt16Arr(f Int8ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt32Arr(f Int8ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt64Arr(f Int8ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUintArr(f Int8ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint8Arr(f Int8ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint16Arr(f Int8ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint32Arr(f Int8ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint64Arr(f Int8ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUintptrArr(f Int8ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat32Arr(f Int8ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat64Arr(f Int8ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex64Arr(f Int8ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex128Arr(f Int8ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapStringArr(f Int8ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapAnyArr(f Int8ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapBool(f Int16ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapRune(f Int16ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapByte(f Int16ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt(f Int16ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt8(f Int16ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt16(f Int16ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt32(f Int16ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt64(f Int16ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint(f Int16ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint8(f Int16ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint16(f Int16ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint32(f Int16ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint64(f Int16ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUintptr(f Int16ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat32(f Int16ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat64(f Int16ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex64(f Int16ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex128(f Int16ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapString(f Int16ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapAny(f Int16ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapBoolArr(f Int16ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapRuneArr(f Int16ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapByteArr(f Int16ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapIntArr(f Int16ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt8Arr(f Int16ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt16Arr(f Int16ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt32Arr(f Int16ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt64Arr(f Int16ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUintArr(f Int16ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint8Arr(f Int16ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint16Arr(f Int16ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint32Arr(f Int16ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint64Arr(f Int16ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUintptrArr(f Int16ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat32Arr(f Int16ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat64Arr(f Int16ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex64Arr(f Int16ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex128Arr(f Int16ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapStringArr(f Int16ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapAnyArr(f Int16ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapBool(f Int32ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapRune(f Int32ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapByte(f Int32ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt(f Int32ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt8(f Int32ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt16(f Int32ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt32(f Int32ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt64(f Int32ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint(f Int32ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint8(f Int32ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint16(f Int32ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint32(f Int32ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint64(f Int32ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUintptr(f Int32ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat32(f Int32ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat64(f Int32ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex64(f Int32ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex128(f Int32ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapString(f Int32ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapAny(f Int32ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapBoolArr(f Int32ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapRuneArr(f Int32ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapByteArr(f Int32ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapIntArr(f Int32ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt8Arr(f Int32ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt16Arr(f Int32ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt32Arr(f Int32ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt64Arr(f Int32ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUintArr(f Int32ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint8Arr(f Int32ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint16Arr(f Int32ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint32Arr(f Int32ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint64Arr(f Int32ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUintptrArr(f Int32ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat32Arr(f Int32ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat64Arr(f Int32ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex64Arr(f Int32ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex128Arr(f Int32ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapStringArr(f Int32ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapAnyArr(f Int32ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapBool(f Int64ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapRune(f Int64ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapByte(f Int64ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt(f Int64ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt8(f Int64ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt16(f Int64ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt32(f Int64ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt64(f Int64ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint(f Int64ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint8(f Int64ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint16(f Int64ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint32(f Int64ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint64(f Int64ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUintptr(f Int64ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat32(f Int64ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat64(f Int64ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex64(f Int64ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex128(f Int64ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapString(f Int64ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapAny(f Int64ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapBoolArr(f Int64ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapRuneArr(f Int64ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapByteArr(f Int64ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapIntArr(f Int64ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt8Arr(f Int64ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt16Arr(f Int64ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt32Arr(f Int64ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt64Arr(f Int64ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUintArr(f Int64ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint8Arr(f Int64ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint16Arr(f Int64ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint32Arr(f Int64ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint64Arr(f Int64ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUintptrArr(f Int64ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat32Arr(f Int64ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat64Arr(f Int64ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex64Arr(f Int64ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex128Arr(f Int64ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapStringArr(f Int64ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapAnyArr(f Int64ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapBool(f UintArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapRune(f UintArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapByte(f UintArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt(f UintArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt8(f UintArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt16(f UintArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt32(f UintArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt64(f UintArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint(f UintArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint8(f UintArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint16(f UintArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint32(f UintArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint64(f UintArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUintptr(f UintArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat32(f UintArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat64(f UintArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex64(f UintArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex128(f UintArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapString(f UintArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapAny(f UintArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapBoolArr(f UintArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapRuneArr(f UintArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapByteArr(f UintArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapIntArr(f UintArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt8Arr(f UintArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt16Arr(f UintArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt32Arr(f UintArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt64Arr(f UintArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUintArr(f UintArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint8Arr(f UintArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint16Arr(f UintArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint32Arr(f UintArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint64Arr(f UintArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUintptrArr(f UintArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat32Arr(f UintArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat64Arr(f UintArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex64Arr(f UintArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex128Arr(f UintArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapStringArr(f UintArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapAnyArr(f UintArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapBool(f Uint8ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapRune(f Uint8ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapByte(f Uint8ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt(f Uint8ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt8(f Uint8ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt16(f Uint8ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt32(f Uint8ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt64(f Uint8ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint(f Uint8ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint8(f Uint8ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint16(f Uint8ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint32(f Uint8ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint64(f Uint8ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUintptr(f Uint8ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat32(f Uint8ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat64(f Uint8ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex64(f Uint8ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex128(f Uint8ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapString(f Uint8ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapAny(f Uint8ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapBoolArr(f Uint8ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapRuneArr(f Uint8ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapByteArr(f Uint8ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapIntArr(f Uint8ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt8Arr(f Uint8ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt16Arr(f Uint8ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt32Arr(f Uint8ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt64Arr(f Uint8ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUintArr(f Uint8ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint8Arr(f Uint8ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint16Arr(f Uint8ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint32Arr(f Uint8ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint64Arr(f Uint8ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUintptrArr(f Uint8ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat32Arr(f Uint8ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat64Arr(f Uint8ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex64Arr(f Uint8ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex128Arr(f Uint8ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapStringArr(f Uint8ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapAnyArr(f Uint8ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapBool(f Uint16ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapRune(f Uint16ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapByte(f Uint16ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt(f Uint16ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt8(f Uint16ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt16(f Uint16ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt32(f Uint16ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt64(f Uint16ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint(f Uint16ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint8(f Uint16ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint16(f Uint16ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint32(f Uint16ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint64(f Uint16ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUintptr(f Uint16ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat32(f Uint16ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat64(f Uint16ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex64(f Uint16ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex128(f Uint16ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapString(f Uint16ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapAny(f Uint16ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapBoolArr(f Uint16ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapRuneArr(f Uint16ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapByteArr(f Uint16ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapIntArr(f Uint16ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt8Arr(f Uint16ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt16Arr(f Uint16ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt32Arr(f Uint16ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt64Arr(f Uint16ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUintArr(f Uint16ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint8Arr(f Uint16ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint16Arr(f Uint16ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint32Arr(f Uint16ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint64Arr(f Uint16ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUintptrArr(f Uint16ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat32Arr(f Uint16ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat64Arr(f Uint16ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex64Arr(f Uint16ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex128Arr(f Uint16ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapStringArr(f Uint16ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapAnyArr(f Uint16ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapBool(f Uint32ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapRune(f Uint32ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapByte(f Uint32ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt(f Uint32ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt8(f Uint32ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt16(f Uint32ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt32(f Uint32ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt64(f Uint32ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint(f Uint32ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint8(f Uint32ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint16(f Uint32ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint32(f Uint32ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint64(f Uint32ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUintptr(f Uint32ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat32(f Uint32ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat64(f Uint32ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex64(f Uint32ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex128(f Uint32ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapString(f Uint32ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapAny(f Uint32ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapBoolArr(f Uint32ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapRuneArr(f Uint32ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapByteArr(f Uint32ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapIntArr(f Uint32ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt8Arr(f Uint32ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt16Arr(f Uint32ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt32Arr(f Uint32ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt64Arr(f Uint32ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUintArr(f Uint32ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint8Arr(f Uint32ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint16Arr(f Uint32ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint32Arr(f Uint32ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint64Arr(f Uint32ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUintptrArr(f Uint32ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat32Arr(f Uint32ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat64Arr(f Uint32ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex64Arr(f Uint32ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex128Arr(f Uint32ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapStringArr(f Uint32ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapAnyArr(f Uint32ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapBool(f Uint64ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapRune(f Uint64ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapByte(f Uint64ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt(f Uint64ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt8(f Uint64ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt16(f Uint64ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt32(f Uint64ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt64(f Uint64ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint(f Uint64ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint8(f Uint64ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint16(f Uint64ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint32(f Uint64ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint64(f Uint64ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUintptr(f Uint64ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat32(f Uint64ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat64(f Uint64ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex64(f Uint64ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex128(f Uint64ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapString(f Uint64ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapAny(f Uint64ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapBoolArr(f Uint64ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapRuneArr(f Uint64ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapByteArr(f Uint64ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapIntArr(f Uint64ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt8Arr(f Uint64ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt16Arr(f Uint64ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt32Arr(f Uint64ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt64Arr(f Uint64ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUintArr(f Uint64ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint8Arr(f Uint64ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint16Arr(f Uint64ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint32Arr(f Uint64ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint64Arr(f Uint64ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUintptrArr(f Uint64ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat32Arr(f Uint64ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat64Arr(f Uint64ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex64Arr(f Uint64ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex128Arr(f Uint64ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapStringArr(f Uint64ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapAnyArr(f Uint64ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapBool(f UintptrArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapRune(f UintptrArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapByte(f UintptrArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt(f UintptrArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt8(f UintptrArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt16(f UintptrArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt32(f UintptrArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt64(f UintptrArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint(f UintptrArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint8(f UintptrArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint16(f UintptrArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint32(f UintptrArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint64(f UintptrArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUintptr(f UintptrArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat32(f UintptrArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat64(f UintptrArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex64(f UintptrArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex128(f UintptrArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapString(f UintptrArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapAny(f UintptrArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapBoolArr(f UintptrArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapRuneArr(f UintptrArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapByteArr(f UintptrArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapIntArr(f UintptrArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt8Arr(f UintptrArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt16Arr(f UintptrArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt32Arr(f UintptrArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt64Arr(f UintptrArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUintArr(f UintptrArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint8Arr(f UintptrArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint16Arr(f UintptrArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint32Arr(f UintptrArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint64Arr(f UintptrArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUintptrArr(f UintptrArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat32Arr(f UintptrArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat64Arr(f UintptrArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex64Arr(f UintptrArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex128Arr(f UintptrArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapStringArr(f UintptrArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapAnyArr(f UintptrArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapBool(f Float32ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapRune(f Float32ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapByte(f Float32ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt(f Float32ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt8(f Float32ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt16(f Float32ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt32(f Float32ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt64(f Float32ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint(f Float32ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint8(f Float32ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint16(f Float32ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint32(f Float32ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint64(f Float32ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUintptr(f Float32ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat32(f Float32ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat64(f Float32ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex64(f Float32ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex128(f Float32ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapString(f Float32ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapAny(f Float32ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapBoolArr(f Float32ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapRuneArr(f Float32ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapByteArr(f Float32ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapIntArr(f Float32ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt8Arr(f Float32ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt16Arr(f Float32ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt32Arr(f Float32ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt64Arr(f Float32ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUintArr(f Float32ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint8Arr(f Float32ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint16Arr(f Float32ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint32Arr(f Float32ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint64Arr(f Float32ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUintptrArr(f Float32ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat32Arr(f Float32ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat64Arr(f Float32ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex64Arr(f Float32ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex128Arr(f Float32ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapStringArr(f Float32ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapAnyArr(f Float32ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapBool(f Float64ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapRune(f Float64ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapByte(f Float64ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt(f Float64ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt8(f Float64ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt16(f Float64ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt32(f Float64ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt64(f Float64ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint(f Float64ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint8(f Float64ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint16(f Float64ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint32(f Float64ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint64(f Float64ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUintptr(f Float64ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat32(f Float64ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat64(f Float64ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex64(f Float64ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex128(f Float64ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapString(f Float64ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapAny(f Float64ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapBoolArr(f Float64ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapRuneArr(f Float64ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapByteArr(f Float64ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapIntArr(f Float64ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt8Arr(f Float64ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt16Arr(f Float64ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt32Arr(f Float64ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt64Arr(f Float64ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUintArr(f Float64ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint8Arr(f Float64ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint16Arr(f Float64ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint32Arr(f Float64ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint64Arr(f Float64ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUintptrArr(f Float64ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat32Arr(f Float64ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat64Arr(f Float64ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex64Arr(f Float64ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex128Arr(f Float64ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapStringArr(f Float64ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapAnyArr(f Float64ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapBool(f Complex64ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapRune(f Complex64ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapByte(f Complex64ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt(f Complex64ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt8(f Complex64ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt16(f Complex64ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt32(f Complex64ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt64(f Complex64ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint(f Complex64ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint8(f Complex64ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint16(f Complex64ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint32(f Complex64ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint64(f Complex64ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUintptr(f Complex64ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat32(f Complex64ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat64(f Complex64ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex64(f Complex64ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex128(f Complex64ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapString(f Complex64ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapAny(f Complex64ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapBoolArr(f Complex64ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapRuneArr(f Complex64ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapByteArr(f Complex64ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapIntArr(f Complex64ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt8Arr(f Complex64ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt16Arr(f Complex64ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt32Arr(f Complex64ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt64Arr(f Complex64ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUintArr(f Complex64ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint8Arr(f Complex64ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint16Arr(f Complex64ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint32Arr(f Complex64ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint64Arr(f Complex64ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUintptrArr(f Complex64ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat32Arr(f Complex64ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat64Arr(f Complex64ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex64Arr(f Complex64ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex128Arr(f Complex64ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapStringArr(f Complex64ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapAnyArr(f Complex64ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapBool(f Complex128ArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapRune(f Complex128ArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapByte(f Complex128ArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt(f Complex128ArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt8(f Complex128ArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt16(f Complex128ArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt32(f Complex128ArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt64(f Complex128ArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint(f Complex128ArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint8(f Complex128ArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint16(f Complex128ArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint32(f Complex128ArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint64(f Complex128ArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUintptr(f Complex128ArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat32(f Complex128ArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat64(f Complex128ArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex64(f Complex128ArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex128(f Complex128ArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapString(f Complex128ArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapAny(f Complex128ArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapBoolArr(f Complex128ArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapRuneArr(f Complex128ArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapByteArr(f Complex128ArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapIntArr(f Complex128ArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt8Arr(f Complex128ArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt16Arr(f Complex128ArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt32Arr(f Complex128ArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt64Arr(f Complex128ArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUintArr(f Complex128ArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint8Arr(f Complex128ArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint16Arr(f Complex128ArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint32Arr(f Complex128ArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint64Arr(f Complex128ArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUintptrArr(f Complex128ArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat32Arr(f Complex128ArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat64Arr(f Complex128ArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex64Arr(f Complex128ArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex128Arr(f Complex128ArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapStringArr(f Complex128ArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapAnyArr(f Complex128ArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapBool(f StringArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapRune(f StringArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapByte(f StringArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt(f StringArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt8(f StringArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt16(f StringArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt32(f StringArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt64(f StringArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint(f StringArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint8(f StringArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint16(f StringArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint32(f StringArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint64(f StringArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUintptr(f StringArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat32(f StringArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat64(f StringArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex64(f StringArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex128(f StringArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapString(f StringArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapAny(f StringArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapBoolArr(f StringArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapRuneArr(f StringArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapByteArr(f StringArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapIntArr(f StringArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt8Arr(f StringArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt16Arr(f StringArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt32Arr(f StringArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt64Arr(f StringArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUintArr(f StringArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint8Arr(f StringArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint16Arr(f StringArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint32Arr(f StringArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint64Arr(f StringArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUintptrArr(f StringArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat32Arr(f StringArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat64Arr(f StringArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex64Arr(f StringArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex128Arr(f StringArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapStringArr(f StringArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapAnyArr(f StringArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapBool(f AnyArrBoolTransformer) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapRune(f AnyArrRuneTransformer) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapByte(f AnyArrByteTransformer) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt(f AnyArrIntTransformer) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt8(f AnyArrInt8Transformer) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt16(f AnyArrInt16Transformer) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt32(f AnyArrInt32Transformer) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt64(f AnyArrInt64Transformer) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint(f AnyArrUintTransformer) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint8(f AnyArrUint8Transformer) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint16(f AnyArrUint16Transformer) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint32(f AnyArrUint32Transformer) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint64(f AnyArrUint64Transformer) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUintptr(f AnyArrUintptrTransformer) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat32(f AnyArrFloat32Transformer) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat64(f AnyArrFloat64Transformer) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex64(f AnyArrComplex64Transformer) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex128(f AnyArrComplex128Transformer) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapString(f AnyArrStringTransformer) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapAny(f AnyArrAnyTransformer) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapBoolArr(f AnyArrBoolArrTransformer) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapRuneArr(f AnyArrRuneArrTransformer) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapByteArr(f AnyArrByteArrTransformer) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapIntArr(f AnyArrIntArrTransformer) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt8Arr(f AnyArrInt8ArrTransformer) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt16Arr(f AnyArrInt16ArrTransformer) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt32Arr(f AnyArrInt32ArrTransformer) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt64Arr(f AnyArrInt64ArrTransformer) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUintArr(f AnyArrUintArrTransformer) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint8Arr(f AnyArrUint8ArrTransformer) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint16Arr(f AnyArrUint16ArrTransformer) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint32Arr(f AnyArrUint32ArrTransformer) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint64Arr(f AnyArrUint64ArrTransformer) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUintptrArr(f AnyArrUintptrArrTransformer) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat32Arr(f AnyArrFloat32ArrTransformer) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat64Arr(f AnyArrFloat64ArrTransformer) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex64Arr(f AnyArrComplex64ArrTransformer) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex128Arr(f AnyArrComplex128ArrTransformer) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapStringArr(f AnyArrStringArrTransformer) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapAnyArr(f AnyArrAnyArrTransformer) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
