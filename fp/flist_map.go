// flist_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l ListBool) MapBool(f FunctorBoolBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapRune(f FunctorBoolRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapByte(f FunctorBoolByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt(f FunctorBoolInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt8(f FunctorBoolInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt16(f FunctorBoolInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt32(f FunctorBoolInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt64(f FunctorBoolInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint(f FunctorBoolUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint8(f FunctorBoolUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint16(f FunctorBoolUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint32(f FunctorBoolUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint64(f FunctorBoolUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUintptr(f FunctorBoolUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapFloat32(f FunctorBoolFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapFloat64(f FunctorBoolFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapComplex64(f FunctorBoolComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapComplex128(f FunctorBoolComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapString(f FunctorBoolString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInterface(f FunctorBoolInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapBoolArr(f FunctorBoolBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapRuneArr(f FunctorBoolRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapByteArr(f FunctorBoolByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapIntArr(f FunctorBoolIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt8Arr(f FunctorBoolInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt16Arr(f FunctorBoolInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt32Arr(f FunctorBoolInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInt64Arr(f FunctorBoolInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUintArr(f FunctorBoolUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint8Arr(f FunctorBoolUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint16Arr(f FunctorBoolUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint32Arr(f FunctorBoolUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUint64Arr(f FunctorBoolUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapUintptrArr(f FunctorBoolUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapFloat32Arr(f FunctorBoolFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapFloat64Arr(f FunctorBoolFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapComplex64Arr(f FunctorBoolComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapComplex128Arr(f FunctorBoolComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapStringArr(f FunctorBoolStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBool) MapInterfaceArr(f FunctorBoolInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapBool(f FunctorRuneBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapRune(f FunctorRuneRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapByte(f FunctorRuneByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt(f FunctorRuneInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt8(f FunctorRuneInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt16(f FunctorRuneInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt32(f FunctorRuneInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt64(f FunctorRuneInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint(f FunctorRuneUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint8(f FunctorRuneUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint16(f FunctorRuneUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint32(f FunctorRuneUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint64(f FunctorRuneUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUintptr(f FunctorRuneUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapFloat32(f FunctorRuneFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapFloat64(f FunctorRuneFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapComplex64(f FunctorRuneComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapComplex128(f FunctorRuneComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapString(f FunctorRuneString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInterface(f FunctorRuneInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapBoolArr(f FunctorRuneBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapRuneArr(f FunctorRuneRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapByteArr(f FunctorRuneByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapIntArr(f FunctorRuneIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt8Arr(f FunctorRuneInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt16Arr(f FunctorRuneInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt32Arr(f FunctorRuneInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInt64Arr(f FunctorRuneInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUintArr(f FunctorRuneUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint8Arr(f FunctorRuneUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint16Arr(f FunctorRuneUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint32Arr(f FunctorRuneUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUint64Arr(f FunctorRuneUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapUintptrArr(f FunctorRuneUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapFloat32Arr(f FunctorRuneFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapFloat64Arr(f FunctorRuneFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapComplex64Arr(f FunctorRuneComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapComplex128Arr(f FunctorRuneComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapStringArr(f FunctorRuneStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRune) MapInterfaceArr(f FunctorRuneInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapBool(f FunctorByteBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapRune(f FunctorByteRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapByte(f FunctorByteByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt(f FunctorByteInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt8(f FunctorByteInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt16(f FunctorByteInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt32(f FunctorByteInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt64(f FunctorByteInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint(f FunctorByteUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint8(f FunctorByteUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint16(f FunctorByteUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint32(f FunctorByteUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint64(f FunctorByteUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUintptr(f FunctorByteUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapFloat32(f FunctorByteFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapFloat64(f FunctorByteFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapComplex64(f FunctorByteComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapComplex128(f FunctorByteComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapString(f FunctorByteString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInterface(f FunctorByteInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapBoolArr(f FunctorByteBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapRuneArr(f FunctorByteRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapByteArr(f FunctorByteByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapIntArr(f FunctorByteIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt8Arr(f FunctorByteInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt16Arr(f FunctorByteInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt32Arr(f FunctorByteInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInt64Arr(f FunctorByteInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUintArr(f FunctorByteUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint8Arr(f FunctorByteUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint16Arr(f FunctorByteUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint32Arr(f FunctorByteUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUint64Arr(f FunctorByteUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapUintptrArr(f FunctorByteUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapFloat32Arr(f FunctorByteFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapFloat64Arr(f FunctorByteFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapComplex64Arr(f FunctorByteComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapComplex128Arr(f FunctorByteComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapStringArr(f FunctorByteStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByte) MapInterfaceArr(f FunctorByteInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapBool(f FunctorIntBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapRune(f FunctorIntRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapByte(f FunctorIntByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt(f FunctorIntInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt8(f FunctorIntInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt16(f FunctorIntInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt32(f FunctorIntInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt64(f FunctorIntInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint(f FunctorIntUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint8(f FunctorIntUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint16(f FunctorIntUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint32(f FunctorIntUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint64(f FunctorIntUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUintptr(f FunctorIntUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapFloat32(f FunctorIntFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapFloat64(f FunctorIntFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapComplex64(f FunctorIntComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapComplex128(f FunctorIntComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapString(f FunctorIntString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInterface(f FunctorIntInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapBoolArr(f FunctorIntBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapRuneArr(f FunctorIntRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapByteArr(f FunctorIntByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapIntArr(f FunctorIntIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt8Arr(f FunctorIntInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt16Arr(f FunctorIntInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt32Arr(f FunctorIntInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInt64Arr(f FunctorIntInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUintArr(f FunctorIntUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint8Arr(f FunctorIntUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint16Arr(f FunctorIntUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint32Arr(f FunctorIntUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUint64Arr(f FunctorIntUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapUintptrArr(f FunctorIntUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapFloat32Arr(f FunctorIntFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapFloat64Arr(f FunctorIntFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapComplex64Arr(f FunctorIntComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapComplex128Arr(f FunctorIntComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapStringArr(f FunctorIntStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt) MapInterfaceArr(f FunctorIntInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapBool(f FunctorInt8Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapRune(f FunctorInt8Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapByte(f FunctorInt8Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt(f FunctorInt8Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt8(f FunctorInt8Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt16(f FunctorInt8Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt32(f FunctorInt8Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt64(f FunctorInt8Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint(f FunctorInt8Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint8(f FunctorInt8Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint16(f FunctorInt8Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint32(f FunctorInt8Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint64(f FunctorInt8Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUintptr(f FunctorInt8Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapFloat32(f FunctorInt8Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapFloat64(f FunctorInt8Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapComplex64(f FunctorInt8Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapComplex128(f FunctorInt8Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapString(f FunctorInt8String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInterface(f FunctorInt8Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapBoolArr(f FunctorInt8BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapRuneArr(f FunctorInt8RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapByteArr(f FunctorInt8ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapIntArr(f FunctorInt8IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt8Arr(f FunctorInt8Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt16Arr(f FunctorInt8Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt32Arr(f FunctorInt8Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInt64Arr(f FunctorInt8Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUintArr(f FunctorInt8UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint8Arr(f FunctorInt8Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint16Arr(f FunctorInt8Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint32Arr(f FunctorInt8Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUint64Arr(f FunctorInt8Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapUintptrArr(f FunctorInt8UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapFloat32Arr(f FunctorInt8Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapFloat64Arr(f FunctorInt8Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapComplex64Arr(f FunctorInt8Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapComplex128Arr(f FunctorInt8Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapStringArr(f FunctorInt8StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8) MapInterfaceArr(f FunctorInt8InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapBool(f FunctorInt16Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapRune(f FunctorInt16Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapByte(f FunctorInt16Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt(f FunctorInt16Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt8(f FunctorInt16Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt16(f FunctorInt16Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt32(f FunctorInt16Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt64(f FunctorInt16Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint(f FunctorInt16Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint8(f FunctorInt16Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint16(f FunctorInt16Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint32(f FunctorInt16Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint64(f FunctorInt16Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUintptr(f FunctorInt16Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapFloat32(f FunctorInt16Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapFloat64(f FunctorInt16Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapComplex64(f FunctorInt16Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapComplex128(f FunctorInt16Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapString(f FunctorInt16String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInterface(f FunctorInt16Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapBoolArr(f FunctorInt16BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapRuneArr(f FunctorInt16RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapByteArr(f FunctorInt16ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapIntArr(f FunctorInt16IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt8Arr(f FunctorInt16Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt16Arr(f FunctorInt16Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt32Arr(f FunctorInt16Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInt64Arr(f FunctorInt16Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUintArr(f FunctorInt16UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint8Arr(f FunctorInt16Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint16Arr(f FunctorInt16Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint32Arr(f FunctorInt16Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUint64Arr(f FunctorInt16Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapUintptrArr(f FunctorInt16UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapFloat32Arr(f FunctorInt16Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapFloat64Arr(f FunctorInt16Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapComplex64Arr(f FunctorInt16Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapComplex128Arr(f FunctorInt16Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapStringArr(f FunctorInt16StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16) MapInterfaceArr(f FunctorInt16InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapBool(f FunctorInt32Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapRune(f FunctorInt32Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapByte(f FunctorInt32Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt(f FunctorInt32Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt8(f FunctorInt32Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt16(f FunctorInt32Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt32(f FunctorInt32Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt64(f FunctorInt32Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint(f FunctorInt32Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint8(f FunctorInt32Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint16(f FunctorInt32Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint32(f FunctorInt32Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint64(f FunctorInt32Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUintptr(f FunctorInt32Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapFloat32(f FunctorInt32Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapFloat64(f FunctorInt32Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapComplex64(f FunctorInt32Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapComplex128(f FunctorInt32Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapString(f FunctorInt32String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInterface(f FunctorInt32Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapBoolArr(f FunctorInt32BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapRuneArr(f FunctorInt32RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapByteArr(f FunctorInt32ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapIntArr(f FunctorInt32IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt8Arr(f FunctorInt32Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt16Arr(f FunctorInt32Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt32Arr(f FunctorInt32Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInt64Arr(f FunctorInt32Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUintArr(f FunctorInt32UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint8Arr(f FunctorInt32Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint16Arr(f FunctorInt32Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint32Arr(f FunctorInt32Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUint64Arr(f FunctorInt32Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapUintptrArr(f FunctorInt32UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapFloat32Arr(f FunctorInt32Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapFloat64Arr(f FunctorInt32Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapComplex64Arr(f FunctorInt32Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapComplex128Arr(f FunctorInt32Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapStringArr(f FunctorInt32StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32) MapInterfaceArr(f FunctorInt32InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapBool(f FunctorInt64Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapRune(f FunctorInt64Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapByte(f FunctorInt64Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt(f FunctorInt64Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt8(f FunctorInt64Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt16(f FunctorInt64Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt32(f FunctorInt64Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt64(f FunctorInt64Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint(f FunctorInt64Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint8(f FunctorInt64Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint16(f FunctorInt64Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint32(f FunctorInt64Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint64(f FunctorInt64Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUintptr(f FunctorInt64Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapFloat32(f FunctorInt64Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapFloat64(f FunctorInt64Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapComplex64(f FunctorInt64Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapComplex128(f FunctorInt64Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapString(f FunctorInt64String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInterface(f FunctorInt64Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapBoolArr(f FunctorInt64BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapRuneArr(f FunctorInt64RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapByteArr(f FunctorInt64ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapIntArr(f FunctorInt64IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt8Arr(f FunctorInt64Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt16Arr(f FunctorInt64Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt32Arr(f FunctorInt64Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInt64Arr(f FunctorInt64Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUintArr(f FunctorInt64UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint8Arr(f FunctorInt64Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint16Arr(f FunctorInt64Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint32Arr(f FunctorInt64Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUint64Arr(f FunctorInt64Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapUintptrArr(f FunctorInt64UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapFloat32Arr(f FunctorInt64Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapFloat64Arr(f FunctorInt64Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapComplex64Arr(f FunctorInt64Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapComplex128Arr(f FunctorInt64Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapStringArr(f FunctorInt64StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64) MapInterfaceArr(f FunctorInt64InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapBool(f FunctorUintBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapRune(f FunctorUintRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapByte(f FunctorUintByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt(f FunctorUintInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt8(f FunctorUintInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt16(f FunctorUintInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt32(f FunctorUintInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt64(f FunctorUintInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint(f FunctorUintUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint8(f FunctorUintUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint16(f FunctorUintUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint32(f FunctorUintUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint64(f FunctorUintUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUintptr(f FunctorUintUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapFloat32(f FunctorUintFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapFloat64(f FunctorUintFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapComplex64(f FunctorUintComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapComplex128(f FunctorUintComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapString(f FunctorUintString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInterface(f FunctorUintInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapBoolArr(f FunctorUintBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapRuneArr(f FunctorUintRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapByteArr(f FunctorUintByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapIntArr(f FunctorUintIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt8Arr(f FunctorUintInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt16Arr(f FunctorUintInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt32Arr(f FunctorUintInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInt64Arr(f FunctorUintInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUintArr(f FunctorUintUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint8Arr(f FunctorUintUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint16Arr(f FunctorUintUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint32Arr(f FunctorUintUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUint64Arr(f FunctorUintUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapUintptrArr(f FunctorUintUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapFloat32Arr(f FunctorUintFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapFloat64Arr(f FunctorUintFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapComplex64Arr(f FunctorUintComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapComplex128Arr(f FunctorUintComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapStringArr(f FunctorUintStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint) MapInterfaceArr(f FunctorUintInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapBool(f FunctorUint8Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapRune(f FunctorUint8Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapByte(f FunctorUint8Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt(f FunctorUint8Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt8(f FunctorUint8Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt16(f FunctorUint8Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt32(f FunctorUint8Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt64(f FunctorUint8Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint(f FunctorUint8Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint8(f FunctorUint8Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint16(f FunctorUint8Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint32(f FunctorUint8Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint64(f FunctorUint8Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUintptr(f FunctorUint8Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapFloat32(f FunctorUint8Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapFloat64(f FunctorUint8Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapComplex64(f FunctorUint8Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapComplex128(f FunctorUint8Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapString(f FunctorUint8String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInterface(f FunctorUint8Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapBoolArr(f FunctorUint8BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapRuneArr(f FunctorUint8RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapByteArr(f FunctorUint8ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapIntArr(f FunctorUint8IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt8Arr(f FunctorUint8Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt16Arr(f FunctorUint8Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt32Arr(f FunctorUint8Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInt64Arr(f FunctorUint8Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUintArr(f FunctorUint8UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint8Arr(f FunctorUint8Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint16Arr(f FunctorUint8Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint32Arr(f FunctorUint8Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUint64Arr(f FunctorUint8Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapUintptrArr(f FunctorUint8UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapFloat32Arr(f FunctorUint8Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapFloat64Arr(f FunctorUint8Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapComplex64Arr(f FunctorUint8Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapComplex128Arr(f FunctorUint8Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapStringArr(f FunctorUint8StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8) MapInterfaceArr(f FunctorUint8InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapBool(f FunctorUint16Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapRune(f FunctorUint16Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapByte(f FunctorUint16Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt(f FunctorUint16Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt8(f FunctorUint16Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt16(f FunctorUint16Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt32(f FunctorUint16Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt64(f FunctorUint16Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint(f FunctorUint16Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint8(f FunctorUint16Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint16(f FunctorUint16Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint32(f FunctorUint16Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint64(f FunctorUint16Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUintptr(f FunctorUint16Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapFloat32(f FunctorUint16Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapFloat64(f FunctorUint16Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapComplex64(f FunctorUint16Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapComplex128(f FunctorUint16Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapString(f FunctorUint16String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInterface(f FunctorUint16Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapBoolArr(f FunctorUint16BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapRuneArr(f FunctorUint16RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapByteArr(f FunctorUint16ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapIntArr(f FunctorUint16IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt8Arr(f FunctorUint16Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt16Arr(f FunctorUint16Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt32Arr(f FunctorUint16Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInt64Arr(f FunctorUint16Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUintArr(f FunctorUint16UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint8Arr(f FunctorUint16Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint16Arr(f FunctorUint16Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint32Arr(f FunctorUint16Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUint64Arr(f FunctorUint16Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapUintptrArr(f FunctorUint16UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapFloat32Arr(f FunctorUint16Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapFloat64Arr(f FunctorUint16Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapComplex64Arr(f FunctorUint16Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapComplex128Arr(f FunctorUint16Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapStringArr(f FunctorUint16StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16) MapInterfaceArr(f FunctorUint16InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapBool(f FunctorUint32Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapRune(f FunctorUint32Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapByte(f FunctorUint32Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt(f FunctorUint32Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt8(f FunctorUint32Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt16(f FunctorUint32Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt32(f FunctorUint32Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt64(f FunctorUint32Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint(f FunctorUint32Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint8(f FunctorUint32Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint16(f FunctorUint32Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint32(f FunctorUint32Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint64(f FunctorUint32Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUintptr(f FunctorUint32Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapFloat32(f FunctorUint32Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapFloat64(f FunctorUint32Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapComplex64(f FunctorUint32Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapComplex128(f FunctorUint32Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapString(f FunctorUint32String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInterface(f FunctorUint32Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapBoolArr(f FunctorUint32BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapRuneArr(f FunctorUint32RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapByteArr(f FunctorUint32ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapIntArr(f FunctorUint32IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt8Arr(f FunctorUint32Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt16Arr(f FunctorUint32Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt32Arr(f FunctorUint32Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInt64Arr(f FunctorUint32Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUintArr(f FunctorUint32UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint8Arr(f FunctorUint32Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint16Arr(f FunctorUint32Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint32Arr(f FunctorUint32Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUint64Arr(f FunctorUint32Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapUintptrArr(f FunctorUint32UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapFloat32Arr(f FunctorUint32Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapFloat64Arr(f FunctorUint32Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapComplex64Arr(f FunctorUint32Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapComplex128Arr(f FunctorUint32Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapStringArr(f FunctorUint32StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32) MapInterfaceArr(f FunctorUint32InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapBool(f FunctorUint64Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapRune(f FunctorUint64Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapByte(f FunctorUint64Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt(f FunctorUint64Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt8(f FunctorUint64Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt16(f FunctorUint64Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt32(f FunctorUint64Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt64(f FunctorUint64Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint(f FunctorUint64Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint8(f FunctorUint64Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint16(f FunctorUint64Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint32(f FunctorUint64Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint64(f FunctorUint64Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUintptr(f FunctorUint64Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapFloat32(f FunctorUint64Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapFloat64(f FunctorUint64Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapComplex64(f FunctorUint64Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapComplex128(f FunctorUint64Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapString(f FunctorUint64String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInterface(f FunctorUint64Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapBoolArr(f FunctorUint64BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapRuneArr(f FunctorUint64RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapByteArr(f FunctorUint64ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapIntArr(f FunctorUint64IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt8Arr(f FunctorUint64Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt16Arr(f FunctorUint64Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt32Arr(f FunctorUint64Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInt64Arr(f FunctorUint64Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUintArr(f FunctorUint64UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint8Arr(f FunctorUint64Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint16Arr(f FunctorUint64Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint32Arr(f FunctorUint64Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUint64Arr(f FunctorUint64Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapUintptrArr(f FunctorUint64UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapFloat32Arr(f FunctorUint64Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapFloat64Arr(f FunctorUint64Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapComplex64Arr(f FunctorUint64Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapComplex128Arr(f FunctorUint64Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapStringArr(f FunctorUint64StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64) MapInterfaceArr(f FunctorUint64InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapBool(f FunctorUintptrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapRune(f FunctorUintptrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapByte(f FunctorUintptrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt(f FunctorUintptrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt8(f FunctorUintptrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt16(f FunctorUintptrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt32(f FunctorUintptrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt64(f FunctorUintptrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint(f FunctorUintptrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint8(f FunctorUintptrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint16(f FunctorUintptrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint32(f FunctorUintptrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint64(f FunctorUintptrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUintptr(f FunctorUintptrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapFloat32(f FunctorUintptrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapFloat64(f FunctorUintptrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapComplex64(f FunctorUintptrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapComplex128(f FunctorUintptrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapString(f FunctorUintptrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInterface(f FunctorUintptrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapBoolArr(f FunctorUintptrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapRuneArr(f FunctorUintptrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapByteArr(f FunctorUintptrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapIntArr(f FunctorUintptrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt8Arr(f FunctorUintptrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt16Arr(f FunctorUintptrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt32Arr(f FunctorUintptrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInt64Arr(f FunctorUintptrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUintArr(f FunctorUintptrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint8Arr(f FunctorUintptrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint16Arr(f FunctorUintptrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint32Arr(f FunctorUintptrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUint64Arr(f FunctorUintptrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapUintptrArr(f FunctorUintptrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapFloat32Arr(f FunctorUintptrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapFloat64Arr(f FunctorUintptrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapComplex64Arr(f FunctorUintptrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapComplex128Arr(f FunctorUintptrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapStringArr(f FunctorUintptrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptr) MapInterfaceArr(f FunctorUintptrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapBool(f FunctorFloat32Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapRune(f FunctorFloat32Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapByte(f FunctorFloat32Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt(f FunctorFloat32Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt8(f FunctorFloat32Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt16(f FunctorFloat32Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt32(f FunctorFloat32Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt64(f FunctorFloat32Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint(f FunctorFloat32Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint8(f FunctorFloat32Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint16(f FunctorFloat32Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint32(f FunctorFloat32Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint64(f FunctorFloat32Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUintptr(f FunctorFloat32Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapFloat32(f FunctorFloat32Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapFloat64(f FunctorFloat32Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapComplex64(f FunctorFloat32Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapComplex128(f FunctorFloat32Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapString(f FunctorFloat32String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInterface(f FunctorFloat32Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapBoolArr(f FunctorFloat32BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapRuneArr(f FunctorFloat32RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapByteArr(f FunctorFloat32ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapIntArr(f FunctorFloat32IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt8Arr(f FunctorFloat32Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt16Arr(f FunctorFloat32Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt32Arr(f FunctorFloat32Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInt64Arr(f FunctorFloat32Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUintArr(f FunctorFloat32UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint8Arr(f FunctorFloat32Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint16Arr(f FunctorFloat32Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint32Arr(f FunctorFloat32Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUint64Arr(f FunctorFloat32Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapUintptrArr(f FunctorFloat32UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapFloat32Arr(f FunctorFloat32Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapFloat64Arr(f FunctorFloat32Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapComplex64Arr(f FunctorFloat32Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapComplex128Arr(f FunctorFloat32Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapStringArr(f FunctorFloat32StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32) MapInterfaceArr(f FunctorFloat32InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapBool(f FunctorFloat64Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapRune(f FunctorFloat64Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapByte(f FunctorFloat64Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt(f FunctorFloat64Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt8(f FunctorFloat64Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt16(f FunctorFloat64Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt32(f FunctorFloat64Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt64(f FunctorFloat64Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint(f FunctorFloat64Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint8(f FunctorFloat64Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint16(f FunctorFloat64Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint32(f FunctorFloat64Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint64(f FunctorFloat64Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUintptr(f FunctorFloat64Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapFloat32(f FunctorFloat64Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapFloat64(f FunctorFloat64Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapComplex64(f FunctorFloat64Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapComplex128(f FunctorFloat64Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapString(f FunctorFloat64String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInterface(f FunctorFloat64Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapBoolArr(f FunctorFloat64BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapRuneArr(f FunctorFloat64RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapByteArr(f FunctorFloat64ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapIntArr(f FunctorFloat64IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt8Arr(f FunctorFloat64Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt16Arr(f FunctorFloat64Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt32Arr(f FunctorFloat64Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInt64Arr(f FunctorFloat64Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUintArr(f FunctorFloat64UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint8Arr(f FunctorFloat64Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint16Arr(f FunctorFloat64Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint32Arr(f FunctorFloat64Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUint64Arr(f FunctorFloat64Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapUintptrArr(f FunctorFloat64UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapFloat32Arr(f FunctorFloat64Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapFloat64Arr(f FunctorFloat64Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapComplex64Arr(f FunctorFloat64Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapComplex128Arr(f FunctorFloat64Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapStringArr(f FunctorFloat64StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64) MapInterfaceArr(f FunctorFloat64InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapBool(f FunctorComplex64Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapRune(f FunctorComplex64Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapByte(f FunctorComplex64Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt(f FunctorComplex64Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt8(f FunctorComplex64Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt16(f FunctorComplex64Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt32(f FunctorComplex64Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt64(f FunctorComplex64Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint(f FunctorComplex64Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint8(f FunctorComplex64Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint16(f FunctorComplex64Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint32(f FunctorComplex64Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint64(f FunctorComplex64Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUintptr(f FunctorComplex64Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapFloat32(f FunctorComplex64Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapFloat64(f FunctorComplex64Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapComplex64(f FunctorComplex64Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapComplex128(f FunctorComplex64Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapString(f FunctorComplex64String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInterface(f FunctorComplex64Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapBoolArr(f FunctorComplex64BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapRuneArr(f FunctorComplex64RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapByteArr(f FunctorComplex64ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapIntArr(f FunctorComplex64IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt8Arr(f FunctorComplex64Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt16Arr(f FunctorComplex64Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt32Arr(f FunctorComplex64Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInt64Arr(f FunctorComplex64Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUintArr(f FunctorComplex64UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint8Arr(f FunctorComplex64Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint16Arr(f FunctorComplex64Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint32Arr(f FunctorComplex64Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUint64Arr(f FunctorComplex64Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapUintptrArr(f FunctorComplex64UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapFloat32Arr(f FunctorComplex64Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapFloat64Arr(f FunctorComplex64Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapComplex64Arr(f FunctorComplex64Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapComplex128Arr(f FunctorComplex64Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapStringArr(f FunctorComplex64StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64) MapInterfaceArr(f FunctorComplex64InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapBool(f FunctorComplex128Bool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapRune(f FunctorComplex128Rune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapByte(f FunctorComplex128Byte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt(f FunctorComplex128Int) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt8(f FunctorComplex128Int8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt16(f FunctorComplex128Int16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt32(f FunctorComplex128Int32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt64(f FunctorComplex128Int64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint(f FunctorComplex128Uint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint8(f FunctorComplex128Uint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint16(f FunctorComplex128Uint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint32(f FunctorComplex128Uint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint64(f FunctorComplex128Uint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUintptr(f FunctorComplex128Uintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapFloat32(f FunctorComplex128Float32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapFloat64(f FunctorComplex128Float64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapComplex64(f FunctorComplex128Complex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapComplex128(f FunctorComplex128Complex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapString(f FunctorComplex128String) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInterface(f FunctorComplex128Interface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapBoolArr(f FunctorComplex128BoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapRuneArr(f FunctorComplex128RuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapByteArr(f FunctorComplex128ByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapIntArr(f FunctorComplex128IntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt8Arr(f FunctorComplex128Int8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt16Arr(f FunctorComplex128Int16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt32Arr(f FunctorComplex128Int32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInt64Arr(f FunctorComplex128Int64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUintArr(f FunctorComplex128UintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint8Arr(f FunctorComplex128Uint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint16Arr(f FunctorComplex128Uint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint32Arr(f FunctorComplex128Uint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUint64Arr(f FunctorComplex128Uint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapUintptrArr(f FunctorComplex128UintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapFloat32Arr(f FunctorComplex128Float32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapFloat64Arr(f FunctorComplex128Float64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapComplex64Arr(f FunctorComplex128Complex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapComplex128Arr(f FunctorComplex128Complex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapStringArr(f FunctorComplex128StringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128) MapInterfaceArr(f FunctorComplex128InterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapBool(f FunctorStringBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapRune(f FunctorStringRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapByte(f FunctorStringByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt(f FunctorStringInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt8(f FunctorStringInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt16(f FunctorStringInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt32(f FunctorStringInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt64(f FunctorStringInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint(f FunctorStringUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint8(f FunctorStringUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint16(f FunctorStringUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint32(f FunctorStringUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint64(f FunctorStringUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUintptr(f FunctorStringUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapFloat32(f FunctorStringFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapFloat64(f FunctorStringFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapComplex64(f FunctorStringComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapComplex128(f FunctorStringComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapString(f FunctorStringString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInterface(f FunctorStringInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapBoolArr(f FunctorStringBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapRuneArr(f FunctorStringRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapByteArr(f FunctorStringByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapIntArr(f FunctorStringIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt8Arr(f FunctorStringInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt16Arr(f FunctorStringInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt32Arr(f FunctorStringInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInt64Arr(f FunctorStringInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUintArr(f FunctorStringUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint8Arr(f FunctorStringUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint16Arr(f FunctorStringUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint32Arr(f FunctorStringUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUint64Arr(f FunctorStringUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapUintptrArr(f FunctorStringUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapFloat32Arr(f FunctorStringFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapFloat64Arr(f FunctorStringFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapComplex64Arr(f FunctorStringComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapComplex128Arr(f FunctorStringComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapStringArr(f FunctorStringStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListString) MapInterfaceArr(f FunctorStringInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapBool(f FunctorInterfaceBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapRune(f FunctorInterfaceRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapByte(f FunctorInterfaceByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt(f FunctorInterfaceInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt8(f FunctorInterfaceInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt16(f FunctorInterfaceInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt32(f FunctorInterfaceInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt64(f FunctorInterfaceInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint(f FunctorInterfaceUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint8(f FunctorInterfaceUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint16(f FunctorInterfaceUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint32(f FunctorInterfaceUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint64(f FunctorInterfaceUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUintptr(f FunctorInterfaceUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapFloat32(f FunctorInterfaceFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapFloat64(f FunctorInterfaceFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapComplex64(f FunctorInterfaceComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapComplex128(f FunctorInterfaceComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapString(f FunctorInterfaceString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInterface(f FunctorInterfaceInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapBoolArr(f FunctorInterfaceBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapRuneArr(f FunctorInterfaceRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapByteArr(f FunctorInterfaceByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapIntArr(f FunctorInterfaceIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt8Arr(f FunctorInterfaceInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt16Arr(f FunctorInterfaceInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt32Arr(f FunctorInterfaceInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInt64Arr(f FunctorInterfaceInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUintArr(f FunctorInterfaceUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint8Arr(f FunctorInterfaceUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint16Arr(f FunctorInterfaceUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint32Arr(f FunctorInterfaceUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUint64Arr(f FunctorInterfaceUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapUintptrArr(f FunctorInterfaceUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapFloat32Arr(f FunctorInterfaceFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapFloat64Arr(f FunctorInterfaceFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapComplex64Arr(f FunctorInterfaceComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapComplex128Arr(f FunctorInterfaceComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapStringArr(f FunctorInterfaceStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterface) MapInterfaceArr(f FunctorInterfaceInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapBool(f FunctorBoolArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapRune(f FunctorBoolArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapByte(f FunctorBoolArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt(f FunctorBoolArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt8(f FunctorBoolArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt16(f FunctorBoolArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt32(f FunctorBoolArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt64(f FunctorBoolArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint(f FunctorBoolArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint8(f FunctorBoolArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint16(f FunctorBoolArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint32(f FunctorBoolArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint64(f FunctorBoolArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUintptr(f FunctorBoolArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapFloat32(f FunctorBoolArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapFloat64(f FunctorBoolArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapComplex64(f FunctorBoolArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapComplex128(f FunctorBoolArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapString(f FunctorBoolArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInterface(f FunctorBoolArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapBoolArr(f FunctorBoolArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapRuneArr(f FunctorBoolArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapByteArr(f FunctorBoolArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapIntArr(f FunctorBoolArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt8Arr(f FunctorBoolArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt16Arr(f FunctorBoolArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt32Arr(f FunctorBoolArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInt64Arr(f FunctorBoolArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUintArr(f FunctorBoolArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint8Arr(f FunctorBoolArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint16Arr(f FunctorBoolArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint32Arr(f FunctorBoolArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUint64Arr(f FunctorBoolArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapUintptrArr(f FunctorBoolArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapFloat32Arr(f FunctorBoolArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapFloat64Arr(f FunctorBoolArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapComplex64Arr(f FunctorBoolArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapComplex128Arr(f FunctorBoolArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapStringArr(f FunctorBoolArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListBoolArr) MapInterfaceArr(f FunctorBoolArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapBool(f FunctorRuneArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapRune(f FunctorRuneArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapByte(f FunctorRuneArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt(f FunctorRuneArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt8(f FunctorRuneArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt16(f FunctorRuneArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt32(f FunctorRuneArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt64(f FunctorRuneArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint(f FunctorRuneArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint8(f FunctorRuneArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint16(f FunctorRuneArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint32(f FunctorRuneArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint64(f FunctorRuneArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUintptr(f FunctorRuneArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapFloat32(f FunctorRuneArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapFloat64(f FunctorRuneArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapComplex64(f FunctorRuneArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapComplex128(f FunctorRuneArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapString(f FunctorRuneArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInterface(f FunctorRuneArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapBoolArr(f FunctorRuneArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapRuneArr(f FunctorRuneArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapByteArr(f FunctorRuneArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapIntArr(f FunctorRuneArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt8Arr(f FunctorRuneArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt16Arr(f FunctorRuneArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt32Arr(f FunctorRuneArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInt64Arr(f FunctorRuneArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUintArr(f FunctorRuneArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint8Arr(f FunctorRuneArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint16Arr(f FunctorRuneArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint32Arr(f FunctorRuneArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUint64Arr(f FunctorRuneArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapUintptrArr(f FunctorRuneArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapFloat32Arr(f FunctorRuneArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapFloat64Arr(f FunctorRuneArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapComplex64Arr(f FunctorRuneArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapComplex128Arr(f FunctorRuneArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapStringArr(f FunctorRuneArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListRuneArr) MapInterfaceArr(f FunctorRuneArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapBool(f FunctorByteArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapRune(f FunctorByteArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapByte(f FunctorByteArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt(f FunctorByteArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt8(f FunctorByteArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt16(f FunctorByteArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt32(f FunctorByteArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt64(f FunctorByteArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint(f FunctorByteArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint8(f FunctorByteArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint16(f FunctorByteArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint32(f FunctorByteArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint64(f FunctorByteArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUintptr(f FunctorByteArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapFloat32(f FunctorByteArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapFloat64(f FunctorByteArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapComplex64(f FunctorByteArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapComplex128(f FunctorByteArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapString(f FunctorByteArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInterface(f FunctorByteArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapBoolArr(f FunctorByteArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapRuneArr(f FunctorByteArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapByteArr(f FunctorByteArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapIntArr(f FunctorByteArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt8Arr(f FunctorByteArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt16Arr(f FunctorByteArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt32Arr(f FunctorByteArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInt64Arr(f FunctorByteArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUintArr(f FunctorByteArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint8Arr(f FunctorByteArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint16Arr(f FunctorByteArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint32Arr(f FunctorByteArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUint64Arr(f FunctorByteArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapUintptrArr(f FunctorByteArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapFloat32Arr(f FunctorByteArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapFloat64Arr(f FunctorByteArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapComplex64Arr(f FunctorByteArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapComplex128Arr(f FunctorByteArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapStringArr(f FunctorByteArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListByteArr) MapInterfaceArr(f FunctorByteArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapBool(f FunctorIntArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapRune(f FunctorIntArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapByte(f FunctorIntArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt(f FunctorIntArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt8(f FunctorIntArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt16(f FunctorIntArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt32(f FunctorIntArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt64(f FunctorIntArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint(f FunctorIntArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint8(f FunctorIntArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint16(f FunctorIntArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint32(f FunctorIntArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint64(f FunctorIntArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUintptr(f FunctorIntArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapFloat32(f FunctorIntArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapFloat64(f FunctorIntArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapComplex64(f FunctorIntArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapComplex128(f FunctorIntArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapString(f FunctorIntArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInterface(f FunctorIntArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapBoolArr(f FunctorIntArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapRuneArr(f FunctorIntArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapByteArr(f FunctorIntArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapIntArr(f FunctorIntArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt8Arr(f FunctorIntArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt16Arr(f FunctorIntArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt32Arr(f FunctorIntArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInt64Arr(f FunctorIntArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUintArr(f FunctorIntArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint8Arr(f FunctorIntArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint16Arr(f FunctorIntArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint32Arr(f FunctorIntArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUint64Arr(f FunctorIntArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapUintptrArr(f FunctorIntArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapFloat32Arr(f FunctorIntArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapFloat64Arr(f FunctorIntArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapComplex64Arr(f FunctorIntArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapComplex128Arr(f FunctorIntArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapStringArr(f FunctorIntArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListIntArr) MapInterfaceArr(f FunctorIntArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapBool(f FunctorInt8ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapRune(f FunctorInt8ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapByte(f FunctorInt8ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt(f FunctorInt8ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt8(f FunctorInt8ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt16(f FunctorInt8ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt32(f FunctorInt8ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt64(f FunctorInt8ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint(f FunctorInt8ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint8(f FunctorInt8ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint16(f FunctorInt8ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint32(f FunctorInt8ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint64(f FunctorInt8ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUintptr(f FunctorInt8ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapFloat32(f FunctorInt8ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapFloat64(f FunctorInt8ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapComplex64(f FunctorInt8ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapComplex128(f FunctorInt8ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapString(f FunctorInt8ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInterface(f FunctorInt8ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapBoolArr(f FunctorInt8ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapRuneArr(f FunctorInt8ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapByteArr(f FunctorInt8ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapIntArr(f FunctorInt8ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt8Arr(f FunctorInt8ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt16Arr(f FunctorInt8ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt32Arr(f FunctorInt8ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInt64Arr(f FunctorInt8ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUintArr(f FunctorInt8ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint8Arr(f FunctorInt8ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint16Arr(f FunctorInt8ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint32Arr(f FunctorInt8ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUint64Arr(f FunctorInt8ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapUintptrArr(f FunctorInt8ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapFloat32Arr(f FunctorInt8ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapFloat64Arr(f FunctorInt8ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapComplex64Arr(f FunctorInt8ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapComplex128Arr(f FunctorInt8ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapStringArr(f FunctorInt8ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt8Arr) MapInterfaceArr(f FunctorInt8ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapBool(f FunctorInt16ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapRune(f FunctorInt16ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapByte(f FunctorInt16ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt(f FunctorInt16ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt8(f FunctorInt16ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt16(f FunctorInt16ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt32(f FunctorInt16ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt64(f FunctorInt16ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint(f FunctorInt16ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint8(f FunctorInt16ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint16(f FunctorInt16ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint32(f FunctorInt16ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint64(f FunctorInt16ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUintptr(f FunctorInt16ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapFloat32(f FunctorInt16ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapFloat64(f FunctorInt16ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapComplex64(f FunctorInt16ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapComplex128(f FunctorInt16ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapString(f FunctorInt16ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInterface(f FunctorInt16ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapBoolArr(f FunctorInt16ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapRuneArr(f FunctorInt16ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapByteArr(f FunctorInt16ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapIntArr(f FunctorInt16ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt8Arr(f FunctorInt16ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt16Arr(f FunctorInt16ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt32Arr(f FunctorInt16ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInt64Arr(f FunctorInt16ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUintArr(f FunctorInt16ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint8Arr(f FunctorInt16ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint16Arr(f FunctorInt16ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint32Arr(f FunctorInt16ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUint64Arr(f FunctorInt16ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapUintptrArr(f FunctorInt16ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapFloat32Arr(f FunctorInt16ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapFloat64Arr(f FunctorInt16ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapComplex64Arr(f FunctorInt16ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapComplex128Arr(f FunctorInt16ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapStringArr(f FunctorInt16ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt16Arr) MapInterfaceArr(f FunctorInt16ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapBool(f FunctorInt32ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapRune(f FunctorInt32ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapByte(f FunctorInt32ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt(f FunctorInt32ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt8(f FunctorInt32ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt16(f FunctorInt32ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt32(f FunctorInt32ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt64(f FunctorInt32ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint(f FunctorInt32ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint8(f FunctorInt32ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint16(f FunctorInt32ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint32(f FunctorInt32ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint64(f FunctorInt32ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUintptr(f FunctorInt32ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapFloat32(f FunctorInt32ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapFloat64(f FunctorInt32ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapComplex64(f FunctorInt32ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapComplex128(f FunctorInt32ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapString(f FunctorInt32ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInterface(f FunctorInt32ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapBoolArr(f FunctorInt32ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapRuneArr(f FunctorInt32ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapByteArr(f FunctorInt32ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapIntArr(f FunctorInt32ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt8Arr(f FunctorInt32ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt16Arr(f FunctorInt32ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt32Arr(f FunctorInt32ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInt64Arr(f FunctorInt32ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUintArr(f FunctorInt32ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint8Arr(f FunctorInt32ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint16Arr(f FunctorInt32ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint32Arr(f FunctorInt32ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUint64Arr(f FunctorInt32ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapUintptrArr(f FunctorInt32ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapFloat32Arr(f FunctorInt32ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapFloat64Arr(f FunctorInt32ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapComplex64Arr(f FunctorInt32ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapComplex128Arr(f FunctorInt32ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapStringArr(f FunctorInt32ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt32Arr) MapInterfaceArr(f FunctorInt32ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapBool(f FunctorInt64ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapRune(f FunctorInt64ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapByte(f FunctorInt64ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt(f FunctorInt64ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt8(f FunctorInt64ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt16(f FunctorInt64ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt32(f FunctorInt64ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt64(f FunctorInt64ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint(f FunctorInt64ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint8(f FunctorInt64ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint16(f FunctorInt64ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint32(f FunctorInt64ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint64(f FunctorInt64ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUintptr(f FunctorInt64ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapFloat32(f FunctorInt64ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapFloat64(f FunctorInt64ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapComplex64(f FunctorInt64ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapComplex128(f FunctorInt64ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapString(f FunctorInt64ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInterface(f FunctorInt64ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapBoolArr(f FunctorInt64ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapRuneArr(f FunctorInt64ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapByteArr(f FunctorInt64ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapIntArr(f FunctorInt64ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt8Arr(f FunctorInt64ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt16Arr(f FunctorInt64ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt32Arr(f FunctorInt64ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInt64Arr(f FunctorInt64ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUintArr(f FunctorInt64ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint8Arr(f FunctorInt64ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint16Arr(f FunctorInt64ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint32Arr(f FunctorInt64ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUint64Arr(f FunctorInt64ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapUintptrArr(f FunctorInt64ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapFloat32Arr(f FunctorInt64ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapFloat64Arr(f FunctorInt64ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapComplex64Arr(f FunctorInt64ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapComplex128Arr(f FunctorInt64ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapStringArr(f FunctorInt64ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInt64Arr) MapInterfaceArr(f FunctorInt64ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapBool(f FunctorUintArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapRune(f FunctorUintArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapByte(f FunctorUintArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt(f FunctorUintArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt8(f FunctorUintArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt16(f FunctorUintArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt32(f FunctorUintArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt64(f FunctorUintArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint(f FunctorUintArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint8(f FunctorUintArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint16(f FunctorUintArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint32(f FunctorUintArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint64(f FunctorUintArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUintptr(f FunctorUintArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapFloat32(f FunctorUintArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapFloat64(f FunctorUintArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapComplex64(f FunctorUintArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapComplex128(f FunctorUintArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapString(f FunctorUintArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInterface(f FunctorUintArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapBoolArr(f FunctorUintArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapRuneArr(f FunctorUintArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapByteArr(f FunctorUintArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapIntArr(f FunctorUintArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt8Arr(f FunctorUintArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt16Arr(f FunctorUintArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt32Arr(f FunctorUintArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInt64Arr(f FunctorUintArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUintArr(f FunctorUintArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint8Arr(f FunctorUintArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint16Arr(f FunctorUintArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint32Arr(f FunctorUintArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUint64Arr(f FunctorUintArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapUintptrArr(f FunctorUintArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapFloat32Arr(f FunctorUintArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapFloat64Arr(f FunctorUintArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapComplex64Arr(f FunctorUintArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapComplex128Arr(f FunctorUintArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapStringArr(f FunctorUintArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintArr) MapInterfaceArr(f FunctorUintArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapBool(f FunctorUint8ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapRune(f FunctorUint8ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapByte(f FunctorUint8ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt(f FunctorUint8ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt8(f FunctorUint8ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt16(f FunctorUint8ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt32(f FunctorUint8ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt64(f FunctorUint8ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint(f FunctorUint8ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint8(f FunctorUint8ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint16(f FunctorUint8ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint32(f FunctorUint8ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint64(f FunctorUint8ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUintptr(f FunctorUint8ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapFloat32(f FunctorUint8ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapFloat64(f FunctorUint8ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapComplex64(f FunctorUint8ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapComplex128(f FunctorUint8ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapString(f FunctorUint8ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInterface(f FunctorUint8ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapBoolArr(f FunctorUint8ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapRuneArr(f FunctorUint8ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapByteArr(f FunctorUint8ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapIntArr(f FunctorUint8ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt8Arr(f FunctorUint8ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt16Arr(f FunctorUint8ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt32Arr(f FunctorUint8ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInt64Arr(f FunctorUint8ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUintArr(f FunctorUint8ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint8Arr(f FunctorUint8ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint16Arr(f FunctorUint8ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint32Arr(f FunctorUint8ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUint64Arr(f FunctorUint8ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapUintptrArr(f FunctorUint8ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapFloat32Arr(f FunctorUint8ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapFloat64Arr(f FunctorUint8ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapComplex64Arr(f FunctorUint8ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapComplex128Arr(f FunctorUint8ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapStringArr(f FunctorUint8ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint8Arr) MapInterfaceArr(f FunctorUint8ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapBool(f FunctorUint16ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapRune(f FunctorUint16ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapByte(f FunctorUint16ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt(f FunctorUint16ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt8(f FunctorUint16ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt16(f FunctorUint16ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt32(f FunctorUint16ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt64(f FunctorUint16ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint(f FunctorUint16ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint8(f FunctorUint16ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint16(f FunctorUint16ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint32(f FunctorUint16ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint64(f FunctorUint16ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUintptr(f FunctorUint16ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapFloat32(f FunctorUint16ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapFloat64(f FunctorUint16ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapComplex64(f FunctorUint16ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapComplex128(f FunctorUint16ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapString(f FunctorUint16ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInterface(f FunctorUint16ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapBoolArr(f FunctorUint16ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapRuneArr(f FunctorUint16ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapByteArr(f FunctorUint16ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapIntArr(f FunctorUint16ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt8Arr(f FunctorUint16ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt16Arr(f FunctorUint16ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt32Arr(f FunctorUint16ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInt64Arr(f FunctorUint16ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUintArr(f FunctorUint16ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint8Arr(f FunctorUint16ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint16Arr(f FunctorUint16ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint32Arr(f FunctorUint16ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUint64Arr(f FunctorUint16ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapUintptrArr(f FunctorUint16ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapFloat32Arr(f FunctorUint16ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapFloat64Arr(f FunctorUint16ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapComplex64Arr(f FunctorUint16ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapComplex128Arr(f FunctorUint16ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapStringArr(f FunctorUint16ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint16Arr) MapInterfaceArr(f FunctorUint16ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapBool(f FunctorUint32ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapRune(f FunctorUint32ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapByte(f FunctorUint32ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt(f FunctorUint32ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt8(f FunctorUint32ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt16(f FunctorUint32ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt32(f FunctorUint32ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt64(f FunctorUint32ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint(f FunctorUint32ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint8(f FunctorUint32ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint16(f FunctorUint32ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint32(f FunctorUint32ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint64(f FunctorUint32ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUintptr(f FunctorUint32ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapFloat32(f FunctorUint32ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapFloat64(f FunctorUint32ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapComplex64(f FunctorUint32ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapComplex128(f FunctorUint32ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapString(f FunctorUint32ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInterface(f FunctorUint32ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapBoolArr(f FunctorUint32ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapRuneArr(f FunctorUint32ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapByteArr(f FunctorUint32ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapIntArr(f FunctorUint32ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt8Arr(f FunctorUint32ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt16Arr(f FunctorUint32ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt32Arr(f FunctorUint32ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInt64Arr(f FunctorUint32ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUintArr(f FunctorUint32ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint8Arr(f FunctorUint32ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint16Arr(f FunctorUint32ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint32Arr(f FunctorUint32ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUint64Arr(f FunctorUint32ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapUintptrArr(f FunctorUint32ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapFloat32Arr(f FunctorUint32ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapFloat64Arr(f FunctorUint32ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapComplex64Arr(f FunctorUint32ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapComplex128Arr(f FunctorUint32ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapStringArr(f FunctorUint32ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint32Arr) MapInterfaceArr(f FunctorUint32ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapBool(f FunctorUint64ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapRune(f FunctorUint64ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapByte(f FunctorUint64ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt(f FunctorUint64ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt8(f FunctorUint64ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt16(f FunctorUint64ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt32(f FunctorUint64ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt64(f FunctorUint64ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint(f FunctorUint64ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint8(f FunctorUint64ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint16(f FunctorUint64ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint32(f FunctorUint64ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint64(f FunctorUint64ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUintptr(f FunctorUint64ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapFloat32(f FunctorUint64ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapFloat64(f FunctorUint64ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapComplex64(f FunctorUint64ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapComplex128(f FunctorUint64ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapString(f FunctorUint64ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInterface(f FunctorUint64ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapBoolArr(f FunctorUint64ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapRuneArr(f FunctorUint64ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapByteArr(f FunctorUint64ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapIntArr(f FunctorUint64ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt8Arr(f FunctorUint64ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt16Arr(f FunctorUint64ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt32Arr(f FunctorUint64ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInt64Arr(f FunctorUint64ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUintArr(f FunctorUint64ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint8Arr(f FunctorUint64ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint16Arr(f FunctorUint64ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint32Arr(f FunctorUint64ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUint64Arr(f FunctorUint64ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapUintptrArr(f FunctorUint64ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapFloat32Arr(f FunctorUint64ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapFloat64Arr(f FunctorUint64ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapComplex64Arr(f FunctorUint64ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapComplex128Arr(f FunctorUint64ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapStringArr(f FunctorUint64ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUint64Arr) MapInterfaceArr(f FunctorUint64ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapBool(f FunctorUintptrArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapRune(f FunctorUintptrArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapByte(f FunctorUintptrArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt(f FunctorUintptrArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt8(f FunctorUintptrArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt16(f FunctorUintptrArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt32(f FunctorUintptrArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt64(f FunctorUintptrArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint(f FunctorUintptrArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint8(f FunctorUintptrArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint16(f FunctorUintptrArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint32(f FunctorUintptrArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint64(f FunctorUintptrArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUintptr(f FunctorUintptrArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapFloat32(f FunctorUintptrArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapFloat64(f FunctorUintptrArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapComplex64(f FunctorUintptrArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapComplex128(f FunctorUintptrArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapString(f FunctorUintptrArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInterface(f FunctorUintptrArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapBoolArr(f FunctorUintptrArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapRuneArr(f FunctorUintptrArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapByteArr(f FunctorUintptrArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapIntArr(f FunctorUintptrArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt8Arr(f FunctorUintptrArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt16Arr(f FunctorUintptrArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt32Arr(f FunctorUintptrArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInt64Arr(f FunctorUintptrArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUintArr(f FunctorUintptrArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint8Arr(f FunctorUintptrArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint16Arr(f FunctorUintptrArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint32Arr(f FunctorUintptrArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUint64Arr(f FunctorUintptrArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapUintptrArr(f FunctorUintptrArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapFloat32Arr(f FunctorUintptrArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapFloat64Arr(f FunctorUintptrArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapComplex64Arr(f FunctorUintptrArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapComplex128Arr(f FunctorUintptrArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapStringArr(f FunctorUintptrArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListUintptrArr) MapInterfaceArr(f FunctorUintptrArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapBool(f FunctorFloat32ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapRune(f FunctorFloat32ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapByte(f FunctorFloat32ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt(f FunctorFloat32ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt8(f FunctorFloat32ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt16(f FunctorFloat32ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt32(f FunctorFloat32ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt64(f FunctorFloat32ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint(f FunctorFloat32ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint8(f FunctorFloat32ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint16(f FunctorFloat32ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint32(f FunctorFloat32ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint64(f FunctorFloat32ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUintptr(f FunctorFloat32ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapFloat32(f FunctorFloat32ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapFloat64(f FunctorFloat32ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapComplex64(f FunctorFloat32ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapComplex128(f FunctorFloat32ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapString(f FunctorFloat32ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInterface(f FunctorFloat32ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapBoolArr(f FunctorFloat32ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapRuneArr(f FunctorFloat32ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapByteArr(f FunctorFloat32ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapIntArr(f FunctorFloat32ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt8Arr(f FunctorFloat32ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt16Arr(f FunctorFloat32ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt32Arr(f FunctorFloat32ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInt64Arr(f FunctorFloat32ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUintArr(f FunctorFloat32ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint8Arr(f FunctorFloat32ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint16Arr(f FunctorFloat32ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint32Arr(f FunctorFloat32ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUint64Arr(f FunctorFloat32ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapUintptrArr(f FunctorFloat32ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapFloat32Arr(f FunctorFloat32ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapFloat64Arr(f FunctorFloat32ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapComplex64Arr(f FunctorFloat32ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapComplex128Arr(f FunctorFloat32ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapStringArr(f FunctorFloat32ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat32Arr) MapInterfaceArr(f FunctorFloat32ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapBool(f FunctorFloat64ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapRune(f FunctorFloat64ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapByte(f FunctorFloat64ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt(f FunctorFloat64ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt8(f FunctorFloat64ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt16(f FunctorFloat64ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt32(f FunctorFloat64ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt64(f FunctorFloat64ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint(f FunctorFloat64ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint8(f FunctorFloat64ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint16(f FunctorFloat64ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint32(f FunctorFloat64ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint64(f FunctorFloat64ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUintptr(f FunctorFloat64ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapFloat32(f FunctorFloat64ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapFloat64(f FunctorFloat64ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapComplex64(f FunctorFloat64ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapComplex128(f FunctorFloat64ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapString(f FunctorFloat64ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInterface(f FunctorFloat64ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapBoolArr(f FunctorFloat64ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapRuneArr(f FunctorFloat64ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapByteArr(f FunctorFloat64ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapIntArr(f FunctorFloat64ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt8Arr(f FunctorFloat64ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt16Arr(f FunctorFloat64ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt32Arr(f FunctorFloat64ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInt64Arr(f FunctorFloat64ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUintArr(f FunctorFloat64ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint8Arr(f FunctorFloat64ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint16Arr(f FunctorFloat64ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint32Arr(f FunctorFloat64ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUint64Arr(f FunctorFloat64ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapUintptrArr(f FunctorFloat64ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapFloat32Arr(f FunctorFloat64ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapFloat64Arr(f FunctorFloat64ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapComplex64Arr(f FunctorFloat64ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapComplex128Arr(f FunctorFloat64ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapStringArr(f FunctorFloat64ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListFloat64Arr) MapInterfaceArr(f FunctorFloat64ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapBool(f FunctorComplex64ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapRune(f FunctorComplex64ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapByte(f FunctorComplex64ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt(f FunctorComplex64ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt8(f FunctorComplex64ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt16(f FunctorComplex64ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt32(f FunctorComplex64ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt64(f FunctorComplex64ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint(f FunctorComplex64ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint8(f FunctorComplex64ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint16(f FunctorComplex64ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint32(f FunctorComplex64ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint64(f FunctorComplex64ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUintptr(f FunctorComplex64ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapFloat32(f FunctorComplex64ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapFloat64(f FunctorComplex64ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapComplex64(f FunctorComplex64ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapComplex128(f FunctorComplex64ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapString(f FunctorComplex64ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInterface(f FunctorComplex64ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapBoolArr(f FunctorComplex64ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapRuneArr(f FunctorComplex64ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapByteArr(f FunctorComplex64ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapIntArr(f FunctorComplex64ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt8Arr(f FunctorComplex64ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt16Arr(f FunctorComplex64ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt32Arr(f FunctorComplex64ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInt64Arr(f FunctorComplex64ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUintArr(f FunctorComplex64ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint8Arr(f FunctorComplex64ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint16Arr(f FunctorComplex64ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint32Arr(f FunctorComplex64ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUint64Arr(f FunctorComplex64ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapUintptrArr(f FunctorComplex64ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapFloat32Arr(f FunctorComplex64ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapFloat64Arr(f FunctorComplex64ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapComplex64Arr(f FunctorComplex64ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapComplex128Arr(f FunctorComplex64ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapStringArr(f FunctorComplex64ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex64Arr) MapInterfaceArr(f FunctorComplex64ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapBool(f FunctorComplex128ArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapRune(f FunctorComplex128ArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapByte(f FunctorComplex128ArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt(f FunctorComplex128ArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt8(f FunctorComplex128ArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt16(f FunctorComplex128ArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt32(f FunctorComplex128ArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt64(f FunctorComplex128ArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint(f FunctorComplex128ArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint8(f FunctorComplex128ArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint16(f FunctorComplex128ArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint32(f FunctorComplex128ArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint64(f FunctorComplex128ArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUintptr(f FunctorComplex128ArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapFloat32(f FunctorComplex128ArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapFloat64(f FunctorComplex128ArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapComplex64(f FunctorComplex128ArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapComplex128(f FunctorComplex128ArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapString(f FunctorComplex128ArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInterface(f FunctorComplex128ArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapBoolArr(f FunctorComplex128ArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapRuneArr(f FunctorComplex128ArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapByteArr(f FunctorComplex128ArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapIntArr(f FunctorComplex128ArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt8Arr(f FunctorComplex128ArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt16Arr(f FunctorComplex128ArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt32Arr(f FunctorComplex128ArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInt64Arr(f FunctorComplex128ArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUintArr(f FunctorComplex128ArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint8Arr(f FunctorComplex128ArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint16Arr(f FunctorComplex128ArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint32Arr(f FunctorComplex128ArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUint64Arr(f FunctorComplex128ArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapUintptrArr(f FunctorComplex128ArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapFloat32Arr(f FunctorComplex128ArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapFloat64Arr(f FunctorComplex128ArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapComplex64Arr(f FunctorComplex128ArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapComplex128Arr(f FunctorComplex128ArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapStringArr(f FunctorComplex128ArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListComplex128Arr) MapInterfaceArr(f FunctorComplex128ArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapBool(f FunctorStringArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapRune(f FunctorStringArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapByte(f FunctorStringArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt(f FunctorStringArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt8(f FunctorStringArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt16(f FunctorStringArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt32(f FunctorStringArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt64(f FunctorStringArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint(f FunctorStringArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint8(f FunctorStringArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint16(f FunctorStringArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint32(f FunctorStringArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint64(f FunctorStringArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUintptr(f FunctorStringArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapFloat32(f FunctorStringArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapFloat64(f FunctorStringArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapComplex64(f FunctorStringArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapComplex128(f FunctorStringArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapString(f FunctorStringArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInterface(f FunctorStringArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapBoolArr(f FunctorStringArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapRuneArr(f FunctorStringArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapByteArr(f FunctorStringArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapIntArr(f FunctorStringArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt8Arr(f FunctorStringArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt16Arr(f FunctorStringArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt32Arr(f FunctorStringArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInt64Arr(f FunctorStringArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUintArr(f FunctorStringArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint8Arr(f FunctorStringArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint16Arr(f FunctorStringArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint32Arr(f FunctorStringArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUint64Arr(f FunctorStringArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapUintptrArr(f FunctorStringArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapFloat32Arr(f FunctorStringArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapFloat64Arr(f FunctorStringArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapComplex64Arr(f FunctorStringArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapComplex128Arr(f FunctorStringArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapStringArr(f FunctorStringArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListStringArr) MapInterfaceArr(f FunctorStringArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapBool(f FunctorInterfaceArrBool) ListBool {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapRune(f FunctorInterfaceArrRune) ListRune {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapByte(f FunctorInterfaceArrByte) ListByte {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt(f FunctorInterfaceArrInt) ListInt {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt8(f FunctorInterfaceArrInt8) ListInt8 {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt16(f FunctorInterfaceArrInt16) ListInt16 {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt32(f FunctorInterfaceArrInt32) ListInt32 {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt64(f FunctorInterfaceArrInt64) ListInt64 {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint(f FunctorInterfaceArrUint) ListUint {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint8(f FunctorInterfaceArrUint8) ListUint8 {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint16(f FunctorInterfaceArrUint16) ListUint16 {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint32(f FunctorInterfaceArrUint32) ListUint32 {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint64(f FunctorInterfaceArrUint64) ListUint64 {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUintptr(f FunctorInterfaceArrUintptr) ListUintptr {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapFloat32(f FunctorInterfaceArrFloat32) ListFloat32 {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapFloat64(f FunctorInterfaceArrFloat64) ListFloat64 {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapComplex64(f FunctorInterfaceArrComplex64) ListComplex64 {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapComplex128(f FunctorInterfaceArrComplex128) ListComplex128 {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapString(f FunctorInterfaceArrString) ListString {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInterface(f FunctorInterfaceArrInterface) ListInterface {
	acc := NilInterface
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapBoolArr(f FunctorInterfaceArrBoolArr) ListBoolArr {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapRuneArr(f FunctorInterfaceArrRuneArr) ListRuneArr {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapByteArr(f FunctorInterfaceArrByteArr) ListByteArr {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapIntArr(f FunctorInterfaceArrIntArr) ListIntArr {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt8Arr(f FunctorInterfaceArrInt8Arr) ListInt8Arr {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt16Arr(f FunctorInterfaceArrInt16Arr) ListInt16Arr {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt32Arr(f FunctorInterfaceArrInt32Arr) ListInt32Arr {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInt64Arr(f FunctorInterfaceArrInt64Arr) ListInt64Arr {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUintArr(f FunctorInterfaceArrUintArr) ListUintArr {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint8Arr(f FunctorInterfaceArrUint8Arr) ListUint8Arr {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint16Arr(f FunctorInterfaceArrUint16Arr) ListUint16Arr {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint32Arr(f FunctorInterfaceArrUint32Arr) ListUint32Arr {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUint64Arr(f FunctorInterfaceArrUint64Arr) ListUint64Arr {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapUintptrArr(f FunctorInterfaceArrUintptrArr) ListUintptrArr {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapFloat32Arr(f FunctorInterfaceArrFloat32Arr) ListFloat32Arr {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapFloat64Arr(f FunctorInterfaceArrFloat64Arr) ListFloat64Arr {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapComplex64Arr(f FunctorInterfaceArrComplex64Arr) ListComplex64Arr {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapComplex128Arr(f FunctorInterfaceArrComplex128Arr) ListComplex128Arr {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapStringArr(f FunctorInterfaceArrStringArr) ListStringArr {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ListInterfaceArr) MapInterfaceArr(f FunctorInterfaceArrInterfaceArr) ListInterfaceArr {
	acc := NilInterfaceArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
