// flist_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l BoolList) MapBool(f BoolBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRune(f BoolRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByte(f BoolByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt(f BoolIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8(f BoolInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16(f BoolInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32(f BoolInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64(f BoolInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint(f BoolUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8(f BoolUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16(f BoolUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32(f BoolUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64(f BoolUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptr(f BoolUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32(f BoolFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64(f BoolFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64(f BoolComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128(f BoolComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapString(f BoolStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAny(f BoolAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapBoolArr(f BoolBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapRuneArr(f BoolRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapByteArr(f BoolByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapIntArr(f BoolIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt8Arr(f BoolInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt16Arr(f BoolInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt32Arr(f BoolInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapInt64Arr(f BoolInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintArr(f BoolUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint8Arr(f BoolUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint16Arr(f BoolUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint32Arr(f BoolUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUint64Arr(f BoolUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapUintptrArr(f BoolUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat32Arr(f BoolFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapFloat64Arr(f BoolFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex64Arr(f BoolComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapComplex128Arr(f BoolComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapStringArr(f BoolStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolList) MapAnyArr(f BoolAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBool(f RuneBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRune(f RuneRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByte(f RuneByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt(f RuneIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8(f RuneInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16(f RuneInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32(f RuneInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64(f RuneInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint(f RuneUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8(f RuneUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16(f RuneUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32(f RuneUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64(f RuneUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptr(f RuneUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32(f RuneFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64(f RuneFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64(f RuneComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128(f RuneComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapString(f RuneStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAny(f RuneAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapBoolArr(f RuneBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapRuneArr(f RuneRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapByteArr(f RuneByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapIntArr(f RuneIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt8Arr(f RuneInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt16Arr(f RuneInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt32Arr(f RuneInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapInt64Arr(f RuneInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintArr(f RuneUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint8Arr(f RuneUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint16Arr(f RuneUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint32Arr(f RuneUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUint64Arr(f RuneUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapUintptrArr(f RuneUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat32Arr(f RuneFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapFloat64Arr(f RuneFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex64Arr(f RuneComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapComplex128Arr(f RuneComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapStringArr(f RuneStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) MapAnyArr(f RuneAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBool(f ByteBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRune(f ByteRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByte(f ByteByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt(f ByteIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8(f ByteInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16(f ByteInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32(f ByteInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64(f ByteInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint(f ByteUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8(f ByteUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16(f ByteUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32(f ByteUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64(f ByteUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptr(f ByteUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32(f ByteFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64(f ByteFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64(f ByteComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128(f ByteComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapString(f ByteStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAny(f ByteAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapBoolArr(f ByteBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapRuneArr(f ByteRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapByteArr(f ByteByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapIntArr(f ByteIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt8Arr(f ByteInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt16Arr(f ByteInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt32Arr(f ByteInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapInt64Arr(f ByteInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintArr(f ByteUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint8Arr(f ByteUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint16Arr(f ByteUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint32Arr(f ByteUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUint64Arr(f ByteUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapUintptrArr(f ByteUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat32Arr(f ByteFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapFloat64Arr(f ByteFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex64Arr(f ByteComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapComplex128Arr(f ByteComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapStringArr(f ByteStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) MapAnyArr(f ByteAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBool(f IntBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRune(f IntRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByte(f IntByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt(f IntIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8(f IntInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16(f IntInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32(f IntInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64(f IntInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint(f IntUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8(f IntUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16(f IntUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32(f IntUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64(f IntUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptr(f IntUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32(f IntFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64(f IntFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64(f IntComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128(f IntComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapString(f IntStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAny(f IntAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapBoolArr(f IntBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapRuneArr(f IntRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapByteArr(f IntByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapIntArr(f IntIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt8Arr(f IntInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt16Arr(f IntInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt32Arr(f IntInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapInt64Arr(f IntInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintArr(f IntUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint8Arr(f IntUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint16Arr(f IntUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint32Arr(f IntUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUint64Arr(f IntUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapUintptrArr(f IntUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat32Arr(f IntFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapFloat64Arr(f IntFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex64Arr(f IntComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapComplex128Arr(f IntComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapStringArr(f IntStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntList) MapAnyArr(f IntAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBool(f Int8BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRune(f Int8RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByte(f Int8ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt(f Int8IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8(f Int8Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16(f Int8Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32(f Int8Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64(f Int8Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint(f Int8UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8(f Int8Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16(f Int8Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32(f Int8Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64(f Int8Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptr(f Int8UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32(f Int8Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64(f Int8Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64(f Int8Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128(f Int8Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapString(f Int8StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAny(f Int8AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapBoolArr(f Int8BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapRuneArr(f Int8RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapByteArr(f Int8ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapIntArr(f Int8IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt8Arr(f Int8Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt16Arr(f Int8Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt32Arr(f Int8Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapInt64Arr(f Int8Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintArr(f Int8UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint8Arr(f Int8Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint16Arr(f Int8Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint32Arr(f Int8Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUint64Arr(f Int8Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapUintptrArr(f Int8UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat32Arr(f Int8Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapFloat64Arr(f Int8Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex64Arr(f Int8Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapComplex128Arr(f Int8Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapStringArr(f Int8StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) MapAnyArr(f Int8AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBool(f Int16BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRune(f Int16RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByte(f Int16ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt(f Int16IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8(f Int16Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16(f Int16Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32(f Int16Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64(f Int16Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint(f Int16UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8(f Int16Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16(f Int16Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32(f Int16Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64(f Int16Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptr(f Int16UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32(f Int16Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64(f Int16Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64(f Int16Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128(f Int16Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapString(f Int16StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAny(f Int16AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapBoolArr(f Int16BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapRuneArr(f Int16RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapByteArr(f Int16ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapIntArr(f Int16IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt8Arr(f Int16Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt16Arr(f Int16Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt32Arr(f Int16Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapInt64Arr(f Int16Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintArr(f Int16UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint8Arr(f Int16Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint16Arr(f Int16Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint32Arr(f Int16Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUint64Arr(f Int16Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapUintptrArr(f Int16UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat32Arr(f Int16Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapFloat64Arr(f Int16Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex64Arr(f Int16Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapComplex128Arr(f Int16Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapStringArr(f Int16StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) MapAnyArr(f Int16AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBool(f Int32BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRune(f Int32RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByte(f Int32ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt(f Int32IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8(f Int32Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16(f Int32Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32(f Int32Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64(f Int32Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint(f Int32UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8(f Int32Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16(f Int32Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32(f Int32Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64(f Int32Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptr(f Int32UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32(f Int32Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64(f Int32Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64(f Int32Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128(f Int32Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapString(f Int32StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAny(f Int32AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapBoolArr(f Int32BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapRuneArr(f Int32RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapByteArr(f Int32ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapIntArr(f Int32IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt8Arr(f Int32Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt16Arr(f Int32Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt32Arr(f Int32Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapInt64Arr(f Int32Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintArr(f Int32UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint8Arr(f Int32Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint16Arr(f Int32Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint32Arr(f Int32Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUint64Arr(f Int32Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapUintptrArr(f Int32UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat32Arr(f Int32Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapFloat64Arr(f Int32Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex64Arr(f Int32Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapComplex128Arr(f Int32Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapStringArr(f Int32StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) MapAnyArr(f Int32AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBool(f Int64BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRune(f Int64RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByte(f Int64ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt(f Int64IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8(f Int64Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16(f Int64Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32(f Int64Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64(f Int64Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint(f Int64UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8(f Int64Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16(f Int64Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32(f Int64Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64(f Int64Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptr(f Int64UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32(f Int64Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64(f Int64Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64(f Int64Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128(f Int64Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapString(f Int64StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAny(f Int64AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapBoolArr(f Int64BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapRuneArr(f Int64RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapByteArr(f Int64ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapIntArr(f Int64IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt8Arr(f Int64Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt16Arr(f Int64Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt32Arr(f Int64Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapInt64Arr(f Int64Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintArr(f Int64UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint8Arr(f Int64Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint16Arr(f Int64Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint32Arr(f Int64Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUint64Arr(f Int64Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapUintptrArr(f Int64UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat32Arr(f Int64Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapFloat64Arr(f Int64Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex64Arr(f Int64Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapComplex128Arr(f Int64Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapStringArr(f Int64StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) MapAnyArr(f Int64AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBool(f UintBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRune(f UintRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByte(f UintByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt(f UintIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8(f UintInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16(f UintInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32(f UintInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64(f UintInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint(f UintUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8(f UintUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16(f UintUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32(f UintUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64(f UintUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptr(f UintUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32(f UintFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64(f UintFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64(f UintComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128(f UintComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapString(f UintStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAny(f UintAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapBoolArr(f UintBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapRuneArr(f UintRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapByteArr(f UintByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapIntArr(f UintIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt8Arr(f UintInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt16Arr(f UintInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt32Arr(f UintInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapInt64Arr(f UintInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintArr(f UintUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint8Arr(f UintUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint16Arr(f UintUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint32Arr(f UintUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUint64Arr(f UintUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapUintptrArr(f UintUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat32Arr(f UintFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapFloat64Arr(f UintFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex64Arr(f UintComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapComplex128Arr(f UintComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapStringArr(f UintStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintList) MapAnyArr(f UintAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBool(f Uint8BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRune(f Uint8RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByte(f Uint8ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt(f Uint8IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8(f Uint8Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16(f Uint8Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32(f Uint8Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64(f Uint8Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint(f Uint8UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8(f Uint8Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16(f Uint8Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32(f Uint8Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64(f Uint8Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptr(f Uint8UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32(f Uint8Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64(f Uint8Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64(f Uint8Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128(f Uint8Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapString(f Uint8StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAny(f Uint8AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapBoolArr(f Uint8BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapRuneArr(f Uint8RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapByteArr(f Uint8ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapIntArr(f Uint8IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt8Arr(f Uint8Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt16Arr(f Uint8Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt32Arr(f Uint8Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapInt64Arr(f Uint8Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintArr(f Uint8UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint8Arr(f Uint8Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint16Arr(f Uint8Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint32Arr(f Uint8Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUint64Arr(f Uint8Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapUintptrArr(f Uint8UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat32Arr(f Uint8Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapFloat64Arr(f Uint8Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex64Arr(f Uint8Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapComplex128Arr(f Uint8Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapStringArr(f Uint8StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) MapAnyArr(f Uint8AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBool(f Uint16BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRune(f Uint16RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByte(f Uint16ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt(f Uint16IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8(f Uint16Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16(f Uint16Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32(f Uint16Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64(f Uint16Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint(f Uint16UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8(f Uint16Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16(f Uint16Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32(f Uint16Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64(f Uint16Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptr(f Uint16UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32(f Uint16Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64(f Uint16Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64(f Uint16Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128(f Uint16Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapString(f Uint16StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAny(f Uint16AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapBoolArr(f Uint16BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapRuneArr(f Uint16RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapByteArr(f Uint16ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapIntArr(f Uint16IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt8Arr(f Uint16Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt16Arr(f Uint16Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt32Arr(f Uint16Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapInt64Arr(f Uint16Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintArr(f Uint16UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint8Arr(f Uint16Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint16Arr(f Uint16Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint32Arr(f Uint16Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUint64Arr(f Uint16Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapUintptrArr(f Uint16UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat32Arr(f Uint16Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapFloat64Arr(f Uint16Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex64Arr(f Uint16Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapComplex128Arr(f Uint16Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapStringArr(f Uint16StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) MapAnyArr(f Uint16AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBool(f Uint32BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRune(f Uint32RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByte(f Uint32ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt(f Uint32IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8(f Uint32Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16(f Uint32Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32(f Uint32Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64(f Uint32Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint(f Uint32UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8(f Uint32Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16(f Uint32Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32(f Uint32Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64(f Uint32Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptr(f Uint32UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32(f Uint32Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64(f Uint32Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64(f Uint32Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128(f Uint32Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapString(f Uint32StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAny(f Uint32AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapBoolArr(f Uint32BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapRuneArr(f Uint32RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapByteArr(f Uint32ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapIntArr(f Uint32IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt8Arr(f Uint32Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt16Arr(f Uint32Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt32Arr(f Uint32Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapInt64Arr(f Uint32Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintArr(f Uint32UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint8Arr(f Uint32Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint16Arr(f Uint32Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint32Arr(f Uint32Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUint64Arr(f Uint32Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapUintptrArr(f Uint32UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat32Arr(f Uint32Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapFloat64Arr(f Uint32Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex64Arr(f Uint32Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapComplex128Arr(f Uint32Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapStringArr(f Uint32StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) MapAnyArr(f Uint32AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBool(f Uint64BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRune(f Uint64RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByte(f Uint64ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt(f Uint64IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8(f Uint64Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16(f Uint64Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32(f Uint64Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64(f Uint64Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint(f Uint64UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8(f Uint64Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16(f Uint64Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32(f Uint64Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64(f Uint64Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptr(f Uint64UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32(f Uint64Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64(f Uint64Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64(f Uint64Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128(f Uint64Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapString(f Uint64StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAny(f Uint64AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapBoolArr(f Uint64BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapRuneArr(f Uint64RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapByteArr(f Uint64ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapIntArr(f Uint64IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt8Arr(f Uint64Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt16Arr(f Uint64Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt32Arr(f Uint64Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapInt64Arr(f Uint64Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintArr(f Uint64UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint8Arr(f Uint64Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint16Arr(f Uint64Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint32Arr(f Uint64Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUint64Arr(f Uint64Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapUintptrArr(f Uint64UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat32Arr(f Uint64Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapFloat64Arr(f Uint64Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex64Arr(f Uint64Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapComplex128Arr(f Uint64Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapStringArr(f Uint64StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) MapAnyArr(f Uint64AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBool(f UintptrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRune(f UintptrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByte(f UintptrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt(f UintptrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8(f UintptrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16(f UintptrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32(f UintptrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64(f UintptrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint(f UintptrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8(f UintptrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16(f UintptrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32(f UintptrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64(f UintptrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptr(f UintptrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32(f UintptrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64(f UintptrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64(f UintptrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128(f UintptrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapString(f UintptrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAny(f UintptrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapBoolArr(f UintptrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapRuneArr(f UintptrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapByteArr(f UintptrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapIntArr(f UintptrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt8Arr(f UintptrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt16Arr(f UintptrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt32Arr(f UintptrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapInt64Arr(f UintptrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintArr(f UintptrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint8Arr(f UintptrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint16Arr(f UintptrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint32Arr(f UintptrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUint64Arr(f UintptrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapUintptrArr(f UintptrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat32Arr(f UintptrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapFloat64Arr(f UintptrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex64Arr(f UintptrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapComplex128Arr(f UintptrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapStringArr(f UintptrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) MapAnyArr(f UintptrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBool(f Float32BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRune(f Float32RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByte(f Float32ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt(f Float32IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8(f Float32Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16(f Float32Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32(f Float32Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64(f Float32Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint(f Float32UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8(f Float32Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16(f Float32Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32(f Float32Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64(f Float32Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptr(f Float32UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32(f Float32Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64(f Float32Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64(f Float32Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128(f Float32Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapString(f Float32StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAny(f Float32AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapBoolArr(f Float32BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapRuneArr(f Float32RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapByteArr(f Float32ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapIntArr(f Float32IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt8Arr(f Float32Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt16Arr(f Float32Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt32Arr(f Float32Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapInt64Arr(f Float32Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintArr(f Float32UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint8Arr(f Float32Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint16Arr(f Float32Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint32Arr(f Float32Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUint64Arr(f Float32Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapUintptrArr(f Float32UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat32Arr(f Float32Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapFloat64Arr(f Float32Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex64Arr(f Float32Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapComplex128Arr(f Float32Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapStringArr(f Float32StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) MapAnyArr(f Float32AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBool(f Float64BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRune(f Float64RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByte(f Float64ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt(f Float64IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8(f Float64Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16(f Float64Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32(f Float64Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64(f Float64Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint(f Float64UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8(f Float64Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16(f Float64Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32(f Float64Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64(f Float64Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptr(f Float64UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32(f Float64Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64(f Float64Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64(f Float64Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128(f Float64Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapString(f Float64StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAny(f Float64AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapBoolArr(f Float64BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapRuneArr(f Float64RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapByteArr(f Float64ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapIntArr(f Float64IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt8Arr(f Float64Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt16Arr(f Float64Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt32Arr(f Float64Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapInt64Arr(f Float64Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintArr(f Float64UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint8Arr(f Float64Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint16Arr(f Float64Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint32Arr(f Float64Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUint64Arr(f Float64Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapUintptrArr(f Float64UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat32Arr(f Float64Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapFloat64Arr(f Float64Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex64Arr(f Float64Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapComplex128Arr(f Float64Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapStringArr(f Float64StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) MapAnyArr(f Float64AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBool(f Complex64BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRune(f Complex64RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByte(f Complex64ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt(f Complex64IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8(f Complex64Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16(f Complex64Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32(f Complex64Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64(f Complex64Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint(f Complex64UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8(f Complex64Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16(f Complex64Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32(f Complex64Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64(f Complex64Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptr(f Complex64UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32(f Complex64Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64(f Complex64Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64(f Complex64Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128(f Complex64Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapString(f Complex64StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAny(f Complex64AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapBoolArr(f Complex64BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapRuneArr(f Complex64RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapByteArr(f Complex64ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapIntArr(f Complex64IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt8Arr(f Complex64Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt16Arr(f Complex64Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt32Arr(f Complex64Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapInt64Arr(f Complex64Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintArr(f Complex64UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint8Arr(f Complex64Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint16Arr(f Complex64Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint32Arr(f Complex64Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUint64Arr(f Complex64Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapUintptrArr(f Complex64UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat32Arr(f Complex64Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapFloat64Arr(f Complex64Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex64Arr(f Complex64Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapComplex128Arr(f Complex64Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapStringArr(f Complex64StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) MapAnyArr(f Complex64AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBool(f Complex128BoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRune(f Complex128RuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByte(f Complex128ByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt(f Complex128IntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8(f Complex128Int8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16(f Complex128Int16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32(f Complex128Int32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64(f Complex128Int64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint(f Complex128UintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8(f Complex128Uint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16(f Complex128Uint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32(f Complex128Uint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64(f Complex128Uint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptr(f Complex128UintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32(f Complex128Float32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64(f Complex128Float64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64(f Complex128Complex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128(f Complex128Complex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapString(f Complex128StringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAny(f Complex128AnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapBoolArr(f Complex128BoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapRuneArr(f Complex128RuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapByteArr(f Complex128ByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapIntArr(f Complex128IntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt8Arr(f Complex128Int8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt16Arr(f Complex128Int16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt32Arr(f Complex128Int32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapInt64Arr(f Complex128Int64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintArr(f Complex128UintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint8Arr(f Complex128Uint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint16Arr(f Complex128Uint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint32Arr(f Complex128Uint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUint64Arr(f Complex128Uint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapUintptrArr(f Complex128UintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat32Arr(f Complex128Float32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapFloat64Arr(f Complex128Float64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex64Arr(f Complex128Complex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapComplex128Arr(f Complex128Complex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapStringArr(f Complex128StringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) MapAnyArr(f Complex128AnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBool(f StringBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRune(f StringRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByte(f StringByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt(f StringIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8(f StringInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16(f StringInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32(f StringInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64(f StringInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint(f StringUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8(f StringUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16(f StringUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32(f StringUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64(f StringUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptr(f StringUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32(f StringFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64(f StringFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64(f StringComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128(f StringComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapString(f StringStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAny(f StringAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapBoolArr(f StringBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapRuneArr(f StringRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapByteArr(f StringByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapIntArr(f StringIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt8Arr(f StringInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt16Arr(f StringInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt32Arr(f StringInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapInt64Arr(f StringInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintArr(f StringUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint8Arr(f StringUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint16Arr(f StringUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint32Arr(f StringUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUint64Arr(f StringUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapUintptrArr(f StringUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat32Arr(f StringFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapFloat64Arr(f StringFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex64Arr(f StringComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapComplex128Arr(f StringComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapStringArr(f StringStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringList) MapAnyArr(f StringAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBool(f AnyBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRune(f AnyRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByte(f AnyByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt(f AnyIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8(f AnyInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16(f AnyInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32(f AnyInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64(f AnyInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint(f AnyUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8(f AnyUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16(f AnyUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32(f AnyUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64(f AnyUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptr(f AnyUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32(f AnyFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64(f AnyFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64(f AnyComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128(f AnyComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapString(f AnyStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAny(f AnyAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapBoolArr(f AnyBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapRuneArr(f AnyRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapByteArr(f AnyByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapIntArr(f AnyIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt8Arr(f AnyInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt16Arr(f AnyInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt32Arr(f AnyInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapInt64Arr(f AnyInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintArr(f AnyUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint8Arr(f AnyUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint16Arr(f AnyUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint32Arr(f AnyUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUint64Arr(f AnyUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapUintptrArr(f AnyUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat32Arr(f AnyFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapFloat64Arr(f AnyFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex64Arr(f AnyComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapComplex128Arr(f AnyComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapStringArr(f AnyStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) MapAnyArr(f AnyAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapBool(f BoolArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapRune(f BoolArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapByte(f BoolArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt(f BoolArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt8(f BoolArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt16(f BoolArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt32(f BoolArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt64(f BoolArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint(f BoolArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint8(f BoolArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint16(f BoolArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint32(f BoolArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint64(f BoolArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUintptr(f BoolArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat32(f BoolArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat64(f BoolArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex64(f BoolArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex128(f BoolArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapString(f BoolArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapAny(f BoolArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapBoolArr(f BoolArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapRuneArr(f BoolArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapByteArr(f BoolArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapIntArr(f BoolArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt8Arr(f BoolArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt16Arr(f BoolArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt32Arr(f BoolArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapInt64Arr(f BoolArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUintArr(f BoolArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint8Arr(f BoolArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint16Arr(f BoolArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint32Arr(f BoolArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUint64Arr(f BoolArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapUintptrArr(f BoolArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat32Arr(f BoolArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapFloat64Arr(f BoolArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex64Arr(f BoolArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapComplex128Arr(f BoolArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapStringArr(f BoolArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrList) MapAnyArr(f BoolArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapBool(f RuneArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapRune(f RuneArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapByte(f RuneArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt(f RuneArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt8(f RuneArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt16(f RuneArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt32(f RuneArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt64(f RuneArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint(f RuneArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint8(f RuneArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint16(f RuneArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint32(f RuneArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint64(f RuneArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUintptr(f RuneArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat32(f RuneArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat64(f RuneArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex64(f RuneArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex128(f RuneArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapString(f RuneArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapAny(f RuneArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapBoolArr(f RuneArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapRuneArr(f RuneArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapByteArr(f RuneArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapIntArr(f RuneArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt8Arr(f RuneArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt16Arr(f RuneArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt32Arr(f RuneArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapInt64Arr(f RuneArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUintArr(f RuneArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint8Arr(f RuneArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint16Arr(f RuneArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint32Arr(f RuneArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUint64Arr(f RuneArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapUintptrArr(f RuneArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat32Arr(f RuneArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapFloat64Arr(f RuneArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex64Arr(f RuneArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapComplex128Arr(f RuneArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapStringArr(f RuneArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrList) MapAnyArr(f RuneArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapBool(f ByteArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapRune(f ByteArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapByte(f ByteArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt(f ByteArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt8(f ByteArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt16(f ByteArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt32(f ByteArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt64(f ByteArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint(f ByteArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint8(f ByteArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint16(f ByteArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint32(f ByteArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint64(f ByteArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUintptr(f ByteArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat32(f ByteArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat64(f ByteArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex64(f ByteArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex128(f ByteArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapString(f ByteArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapAny(f ByteArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapBoolArr(f ByteArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapRuneArr(f ByteArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapByteArr(f ByteArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapIntArr(f ByteArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt8Arr(f ByteArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt16Arr(f ByteArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt32Arr(f ByteArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapInt64Arr(f ByteArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUintArr(f ByteArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint8Arr(f ByteArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint16Arr(f ByteArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint32Arr(f ByteArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUint64Arr(f ByteArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapUintptrArr(f ByteArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat32Arr(f ByteArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapFloat64Arr(f ByteArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex64Arr(f ByteArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapComplex128Arr(f ByteArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapStringArr(f ByteArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrList) MapAnyArr(f ByteArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapBool(f IntArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapRune(f IntArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapByte(f IntArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt(f IntArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt8(f IntArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt16(f IntArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt32(f IntArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt64(f IntArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint(f IntArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint8(f IntArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint16(f IntArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint32(f IntArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint64(f IntArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUintptr(f IntArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat32(f IntArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat64(f IntArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex64(f IntArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex128(f IntArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapString(f IntArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapAny(f IntArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapBoolArr(f IntArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapRuneArr(f IntArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapByteArr(f IntArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapIntArr(f IntArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt8Arr(f IntArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt16Arr(f IntArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt32Arr(f IntArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapInt64Arr(f IntArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUintArr(f IntArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint8Arr(f IntArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint16Arr(f IntArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint32Arr(f IntArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUint64Arr(f IntArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapUintptrArr(f IntArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat32Arr(f IntArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapFloat64Arr(f IntArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex64Arr(f IntArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapComplex128Arr(f IntArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapStringArr(f IntArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l IntArrList) MapAnyArr(f IntArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapBool(f Int8ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapRune(f Int8ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapByte(f Int8ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt(f Int8ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt8(f Int8ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt16(f Int8ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt32(f Int8ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt64(f Int8ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint(f Int8ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint8(f Int8ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint16(f Int8ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint32(f Int8ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint64(f Int8ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUintptr(f Int8ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat32(f Int8ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat64(f Int8ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex64(f Int8ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex128(f Int8ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapString(f Int8ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapAny(f Int8ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapBoolArr(f Int8ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapRuneArr(f Int8ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapByteArr(f Int8ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapIntArr(f Int8ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt8Arr(f Int8ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt16Arr(f Int8ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt32Arr(f Int8ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapInt64Arr(f Int8ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUintArr(f Int8ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint8Arr(f Int8ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint16Arr(f Int8ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint32Arr(f Int8ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUint64Arr(f Int8ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapUintptrArr(f Int8ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat32Arr(f Int8ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapFloat64Arr(f Int8ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex64Arr(f Int8ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapComplex128Arr(f Int8ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapStringArr(f Int8ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrList) MapAnyArr(f Int8ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapBool(f Int16ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapRune(f Int16ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapByte(f Int16ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt(f Int16ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt8(f Int16ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt16(f Int16ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt32(f Int16ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt64(f Int16ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint(f Int16ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint8(f Int16ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint16(f Int16ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint32(f Int16ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint64(f Int16ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUintptr(f Int16ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat32(f Int16ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat64(f Int16ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex64(f Int16ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex128(f Int16ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapString(f Int16ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapAny(f Int16ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapBoolArr(f Int16ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapRuneArr(f Int16ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapByteArr(f Int16ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapIntArr(f Int16ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt8Arr(f Int16ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt16Arr(f Int16ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt32Arr(f Int16ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapInt64Arr(f Int16ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUintArr(f Int16ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint8Arr(f Int16ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint16Arr(f Int16ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint32Arr(f Int16ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUint64Arr(f Int16ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapUintptrArr(f Int16ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat32Arr(f Int16ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapFloat64Arr(f Int16ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex64Arr(f Int16ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapComplex128Arr(f Int16ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapStringArr(f Int16ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrList) MapAnyArr(f Int16ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapBool(f Int32ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapRune(f Int32ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapByte(f Int32ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt(f Int32ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt8(f Int32ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt16(f Int32ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt32(f Int32ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt64(f Int32ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint(f Int32ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint8(f Int32ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint16(f Int32ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint32(f Int32ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint64(f Int32ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUintptr(f Int32ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat32(f Int32ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat64(f Int32ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex64(f Int32ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex128(f Int32ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapString(f Int32ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapAny(f Int32ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapBoolArr(f Int32ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapRuneArr(f Int32ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapByteArr(f Int32ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapIntArr(f Int32ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt8Arr(f Int32ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt16Arr(f Int32ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt32Arr(f Int32ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapInt64Arr(f Int32ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUintArr(f Int32ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint8Arr(f Int32ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint16Arr(f Int32ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint32Arr(f Int32ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUint64Arr(f Int32ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapUintptrArr(f Int32ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat32Arr(f Int32ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapFloat64Arr(f Int32ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex64Arr(f Int32ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapComplex128Arr(f Int32ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapStringArr(f Int32ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrList) MapAnyArr(f Int32ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapBool(f Int64ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapRune(f Int64ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapByte(f Int64ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt(f Int64ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt8(f Int64ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt16(f Int64ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt32(f Int64ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt64(f Int64ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint(f Int64ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint8(f Int64ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint16(f Int64ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint32(f Int64ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint64(f Int64ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUintptr(f Int64ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat32(f Int64ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat64(f Int64ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex64(f Int64ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex128(f Int64ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapString(f Int64ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapAny(f Int64ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapBoolArr(f Int64ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapRuneArr(f Int64ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapByteArr(f Int64ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapIntArr(f Int64ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt8Arr(f Int64ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt16Arr(f Int64ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt32Arr(f Int64ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapInt64Arr(f Int64ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUintArr(f Int64ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint8Arr(f Int64ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint16Arr(f Int64ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint32Arr(f Int64ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUint64Arr(f Int64ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapUintptrArr(f Int64ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat32Arr(f Int64ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapFloat64Arr(f Int64ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex64Arr(f Int64ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapComplex128Arr(f Int64ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapStringArr(f Int64ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrList) MapAnyArr(f Int64ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapBool(f UintArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapRune(f UintArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapByte(f UintArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt(f UintArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt8(f UintArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt16(f UintArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt32(f UintArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt64(f UintArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint(f UintArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint8(f UintArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint16(f UintArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint32(f UintArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint64(f UintArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUintptr(f UintArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat32(f UintArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat64(f UintArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex64(f UintArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex128(f UintArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapString(f UintArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapAny(f UintArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapBoolArr(f UintArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapRuneArr(f UintArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapByteArr(f UintArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapIntArr(f UintArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt8Arr(f UintArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt16Arr(f UintArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt32Arr(f UintArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapInt64Arr(f UintArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUintArr(f UintArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint8Arr(f UintArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint16Arr(f UintArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint32Arr(f UintArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUint64Arr(f UintArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapUintptrArr(f UintArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat32Arr(f UintArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapFloat64Arr(f UintArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex64Arr(f UintArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapComplex128Arr(f UintArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapStringArr(f UintArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintArrList) MapAnyArr(f UintArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapBool(f Uint8ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapRune(f Uint8ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapByte(f Uint8ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt(f Uint8ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt8(f Uint8ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt16(f Uint8ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt32(f Uint8ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt64(f Uint8ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint(f Uint8ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint8(f Uint8ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint16(f Uint8ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint32(f Uint8ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint64(f Uint8ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUintptr(f Uint8ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat32(f Uint8ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat64(f Uint8ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex64(f Uint8ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex128(f Uint8ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapString(f Uint8ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapAny(f Uint8ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapBoolArr(f Uint8ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapRuneArr(f Uint8ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapByteArr(f Uint8ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapIntArr(f Uint8ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt8Arr(f Uint8ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt16Arr(f Uint8ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt32Arr(f Uint8ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapInt64Arr(f Uint8ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUintArr(f Uint8ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint8Arr(f Uint8ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint16Arr(f Uint8ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint32Arr(f Uint8ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUint64Arr(f Uint8ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapUintptrArr(f Uint8ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat32Arr(f Uint8ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapFloat64Arr(f Uint8ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex64Arr(f Uint8ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapComplex128Arr(f Uint8ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapStringArr(f Uint8ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrList) MapAnyArr(f Uint8ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapBool(f Uint16ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapRune(f Uint16ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapByte(f Uint16ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt(f Uint16ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt8(f Uint16ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt16(f Uint16ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt32(f Uint16ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt64(f Uint16ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint(f Uint16ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint8(f Uint16ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint16(f Uint16ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint32(f Uint16ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint64(f Uint16ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUintptr(f Uint16ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat32(f Uint16ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat64(f Uint16ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex64(f Uint16ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex128(f Uint16ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapString(f Uint16ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapAny(f Uint16ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapBoolArr(f Uint16ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapRuneArr(f Uint16ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapByteArr(f Uint16ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapIntArr(f Uint16ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt8Arr(f Uint16ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt16Arr(f Uint16ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt32Arr(f Uint16ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapInt64Arr(f Uint16ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUintArr(f Uint16ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint8Arr(f Uint16ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint16Arr(f Uint16ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint32Arr(f Uint16ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUint64Arr(f Uint16ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapUintptrArr(f Uint16ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat32Arr(f Uint16ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapFloat64Arr(f Uint16ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex64Arr(f Uint16ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapComplex128Arr(f Uint16ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapStringArr(f Uint16ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrList) MapAnyArr(f Uint16ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapBool(f Uint32ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapRune(f Uint32ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapByte(f Uint32ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt(f Uint32ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt8(f Uint32ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt16(f Uint32ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt32(f Uint32ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt64(f Uint32ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint(f Uint32ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint8(f Uint32ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint16(f Uint32ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint32(f Uint32ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint64(f Uint32ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUintptr(f Uint32ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat32(f Uint32ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat64(f Uint32ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex64(f Uint32ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex128(f Uint32ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapString(f Uint32ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapAny(f Uint32ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapBoolArr(f Uint32ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapRuneArr(f Uint32ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapByteArr(f Uint32ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapIntArr(f Uint32ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt8Arr(f Uint32ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt16Arr(f Uint32ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt32Arr(f Uint32ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapInt64Arr(f Uint32ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUintArr(f Uint32ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint8Arr(f Uint32ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint16Arr(f Uint32ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint32Arr(f Uint32ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUint64Arr(f Uint32ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapUintptrArr(f Uint32ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat32Arr(f Uint32ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapFloat64Arr(f Uint32ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex64Arr(f Uint32ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapComplex128Arr(f Uint32ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapStringArr(f Uint32ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrList) MapAnyArr(f Uint32ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapBool(f Uint64ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapRune(f Uint64ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapByte(f Uint64ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt(f Uint64ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt8(f Uint64ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt16(f Uint64ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt32(f Uint64ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt64(f Uint64ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint(f Uint64ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint8(f Uint64ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint16(f Uint64ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint32(f Uint64ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint64(f Uint64ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUintptr(f Uint64ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat32(f Uint64ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat64(f Uint64ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex64(f Uint64ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex128(f Uint64ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapString(f Uint64ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapAny(f Uint64ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapBoolArr(f Uint64ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapRuneArr(f Uint64ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapByteArr(f Uint64ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapIntArr(f Uint64ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt8Arr(f Uint64ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt16Arr(f Uint64ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt32Arr(f Uint64ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapInt64Arr(f Uint64ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUintArr(f Uint64ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint8Arr(f Uint64ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint16Arr(f Uint64ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint32Arr(f Uint64ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUint64Arr(f Uint64ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapUintptrArr(f Uint64ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat32Arr(f Uint64ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapFloat64Arr(f Uint64ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex64Arr(f Uint64ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapComplex128Arr(f Uint64ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapStringArr(f Uint64ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrList) MapAnyArr(f Uint64ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapBool(f UintptrArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapRune(f UintptrArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapByte(f UintptrArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt(f UintptrArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt8(f UintptrArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt16(f UintptrArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt32(f UintptrArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt64(f UintptrArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint(f UintptrArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint8(f UintptrArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint16(f UintptrArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint32(f UintptrArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint64(f UintptrArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUintptr(f UintptrArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat32(f UintptrArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat64(f UintptrArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex64(f UintptrArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex128(f UintptrArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapString(f UintptrArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapAny(f UintptrArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapBoolArr(f UintptrArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapRuneArr(f UintptrArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapByteArr(f UintptrArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapIntArr(f UintptrArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt8Arr(f UintptrArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt16Arr(f UintptrArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt32Arr(f UintptrArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapInt64Arr(f UintptrArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUintArr(f UintptrArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint8Arr(f UintptrArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint16Arr(f UintptrArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint32Arr(f UintptrArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUint64Arr(f UintptrArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapUintptrArr(f UintptrArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat32Arr(f UintptrArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapFloat64Arr(f UintptrArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex64Arr(f UintptrArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapComplex128Arr(f UintptrArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapStringArr(f UintptrArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrList) MapAnyArr(f UintptrArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapBool(f Float32ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapRune(f Float32ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapByte(f Float32ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt(f Float32ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt8(f Float32ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt16(f Float32ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt32(f Float32ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt64(f Float32ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint(f Float32ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint8(f Float32ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint16(f Float32ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint32(f Float32ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint64(f Float32ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUintptr(f Float32ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat32(f Float32ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat64(f Float32ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex64(f Float32ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex128(f Float32ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapString(f Float32ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapAny(f Float32ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapBoolArr(f Float32ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapRuneArr(f Float32ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapByteArr(f Float32ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapIntArr(f Float32ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt8Arr(f Float32ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt16Arr(f Float32ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt32Arr(f Float32ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapInt64Arr(f Float32ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUintArr(f Float32ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint8Arr(f Float32ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint16Arr(f Float32ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint32Arr(f Float32ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUint64Arr(f Float32ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapUintptrArr(f Float32ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat32Arr(f Float32ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapFloat64Arr(f Float32ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex64Arr(f Float32ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapComplex128Arr(f Float32ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapStringArr(f Float32ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrList) MapAnyArr(f Float32ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapBool(f Float64ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapRune(f Float64ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapByte(f Float64ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt(f Float64ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt8(f Float64ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt16(f Float64ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt32(f Float64ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt64(f Float64ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint(f Float64ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint8(f Float64ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint16(f Float64ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint32(f Float64ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint64(f Float64ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUintptr(f Float64ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat32(f Float64ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat64(f Float64ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex64(f Float64ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex128(f Float64ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapString(f Float64ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapAny(f Float64ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapBoolArr(f Float64ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapRuneArr(f Float64ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapByteArr(f Float64ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapIntArr(f Float64ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt8Arr(f Float64ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt16Arr(f Float64ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt32Arr(f Float64ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapInt64Arr(f Float64ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUintArr(f Float64ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint8Arr(f Float64ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint16Arr(f Float64ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint32Arr(f Float64ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUint64Arr(f Float64ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapUintptrArr(f Float64ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat32Arr(f Float64ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapFloat64Arr(f Float64ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex64Arr(f Float64ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapComplex128Arr(f Float64ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapStringArr(f Float64ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrList) MapAnyArr(f Float64ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapBool(f Complex64ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapRune(f Complex64ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapByte(f Complex64ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt(f Complex64ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt8(f Complex64ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt16(f Complex64ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt32(f Complex64ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt64(f Complex64ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint(f Complex64ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint8(f Complex64ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint16(f Complex64ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint32(f Complex64ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint64(f Complex64ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUintptr(f Complex64ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat32(f Complex64ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat64(f Complex64ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex64(f Complex64ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex128(f Complex64ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapString(f Complex64ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapAny(f Complex64ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapBoolArr(f Complex64ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapRuneArr(f Complex64ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapByteArr(f Complex64ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapIntArr(f Complex64ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt8Arr(f Complex64ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt16Arr(f Complex64ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt32Arr(f Complex64ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapInt64Arr(f Complex64ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUintArr(f Complex64ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint8Arr(f Complex64ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint16Arr(f Complex64ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint32Arr(f Complex64ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUint64Arr(f Complex64ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapUintptrArr(f Complex64ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat32Arr(f Complex64ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapFloat64Arr(f Complex64ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex64Arr(f Complex64ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapComplex128Arr(f Complex64ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapStringArr(f Complex64ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrList) MapAnyArr(f Complex64ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapBool(f Complex128ArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapRune(f Complex128ArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapByte(f Complex128ArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt(f Complex128ArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt8(f Complex128ArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt16(f Complex128ArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt32(f Complex128ArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt64(f Complex128ArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint(f Complex128ArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint8(f Complex128ArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint16(f Complex128ArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint32(f Complex128ArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint64(f Complex128ArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUintptr(f Complex128ArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat32(f Complex128ArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat64(f Complex128ArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex64(f Complex128ArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex128(f Complex128ArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapString(f Complex128ArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapAny(f Complex128ArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapBoolArr(f Complex128ArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapRuneArr(f Complex128ArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapByteArr(f Complex128ArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapIntArr(f Complex128ArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt8Arr(f Complex128ArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt16Arr(f Complex128ArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt32Arr(f Complex128ArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapInt64Arr(f Complex128ArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUintArr(f Complex128ArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint8Arr(f Complex128ArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint16Arr(f Complex128ArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint32Arr(f Complex128ArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUint64Arr(f Complex128ArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapUintptrArr(f Complex128ArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat32Arr(f Complex128ArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapFloat64Arr(f Complex128ArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex64Arr(f Complex128ArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapComplex128Arr(f Complex128ArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapStringArr(f Complex128ArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrList) MapAnyArr(f Complex128ArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapBool(f StringArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapRune(f StringArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapByte(f StringArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt(f StringArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt8(f StringArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt16(f StringArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt32(f StringArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt64(f StringArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint(f StringArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint8(f StringArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint16(f StringArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint32(f StringArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint64(f StringArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUintptr(f StringArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat32(f StringArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat64(f StringArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex64(f StringArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex128(f StringArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapString(f StringArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapAny(f StringArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapBoolArr(f StringArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapRuneArr(f StringArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapByteArr(f StringArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapIntArr(f StringArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt8Arr(f StringArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt16Arr(f StringArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt32Arr(f StringArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapInt64Arr(f StringArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUintArr(f StringArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint8Arr(f StringArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint16Arr(f StringArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint32Arr(f StringArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUint64Arr(f StringArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapUintptrArr(f StringArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat32Arr(f StringArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapFloat64Arr(f StringArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex64Arr(f StringArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapComplex128Arr(f StringArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapStringArr(f StringArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l StringArrList) MapAnyArr(f StringArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapBool(f AnyArrBoolFunctor) BoolList {
	acc := NilBool
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapRune(f AnyArrRuneFunctor) RuneList {
	acc := NilRune
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapByte(f AnyArrByteFunctor) ByteList {
	acc := NilByte
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt(f AnyArrIntFunctor) IntList {
	acc := NilInt
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt8(f AnyArrInt8Functor) Int8List {
	acc := NilInt8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt16(f AnyArrInt16Functor) Int16List {
	acc := NilInt16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt32(f AnyArrInt32Functor) Int32List {
	acc := NilInt32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt64(f AnyArrInt64Functor) Int64List {
	acc := NilInt64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint(f AnyArrUintFunctor) UintList {
	acc := NilUint
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint8(f AnyArrUint8Functor) Uint8List {
	acc := NilUint8
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint16(f AnyArrUint16Functor) Uint16List {
	acc := NilUint16
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint32(f AnyArrUint32Functor) Uint32List {
	acc := NilUint32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint64(f AnyArrUint64Functor) Uint64List {
	acc := NilUint64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUintptr(f AnyArrUintptrFunctor) UintptrList {
	acc := NilUintptr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat32(f AnyArrFloat32Functor) Float32List {
	acc := NilFloat32
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat64(f AnyArrFloat64Functor) Float64List {
	acc := NilFloat64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex64(f AnyArrComplex64Functor) Complex64List {
	acc := NilComplex64
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex128(f AnyArrComplex128Functor) Complex128List {
	acc := NilComplex128
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapString(f AnyArrStringFunctor) StringList {
	acc := NilString
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapAny(f AnyArrAnyFunctor) AnyList {
	acc := NilAny
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapBoolArr(f AnyArrBoolArrFunctor) BoolArrList {
	acc := NilBoolArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapRuneArr(f AnyArrRuneArrFunctor) RuneArrList {
	acc := NilRuneArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapByteArr(f AnyArrByteArrFunctor) ByteArrList {
	acc := NilByteArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapIntArr(f AnyArrIntArrFunctor) IntArrList {
	acc := NilIntArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt8Arr(f AnyArrInt8ArrFunctor) Int8ArrList {
	acc := NilInt8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt16Arr(f AnyArrInt16ArrFunctor) Int16ArrList {
	acc := NilInt16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt32Arr(f AnyArrInt32ArrFunctor) Int32ArrList {
	acc := NilInt32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapInt64Arr(f AnyArrInt64ArrFunctor) Int64ArrList {
	acc := NilInt64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUintArr(f AnyArrUintArrFunctor) UintArrList {
	acc := NilUintArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint8Arr(f AnyArrUint8ArrFunctor) Uint8ArrList {
	acc := NilUint8Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint16Arr(f AnyArrUint16ArrFunctor) Uint16ArrList {
	acc := NilUint16Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint32Arr(f AnyArrUint32ArrFunctor) Uint32ArrList {
	acc := NilUint32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUint64Arr(f AnyArrUint64ArrFunctor) Uint64ArrList {
	acc := NilUint64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapUintptrArr(f AnyArrUintptrArrFunctor) UintptrArrList {
	acc := NilUintptrArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat32Arr(f AnyArrFloat32ArrFunctor) Float32ArrList {
	acc := NilFloat32Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapFloat64Arr(f AnyArrFloat64ArrFunctor) Float64ArrList {
	acc := NilFloat64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex64Arr(f AnyArrComplex64ArrFunctor) Complex64ArrList {
	acc := NilComplex64Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapComplex128Arr(f AnyArrComplex128ArrFunctor) Complex128ArrList {
	acc := NilComplex128Arr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapStringArr(f AnyArrStringArrFunctor) StringArrList {
	acc := NilStringArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrList) MapAnyArr(f AnyArrAnyArrFunctor) AnyArrList {
	acc := NilAnyArr
	xs := &l
	for xs.IsNotEmpty() {
		acc = acc.Cons(f(*xs.head))
		xs = xs.tail
	}
	return acc.Reverse()
}
