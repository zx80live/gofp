// flist_reverse.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l ListBool) Reverse() ListBool {
	xs := NilBool
	l.Foreach(func(e bool) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListRune) Reverse() ListRune {
	xs := NilRune
	l.Foreach(func(e rune) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListByte) Reverse() ListByte {
	xs := NilByte
	l.Foreach(func(e byte) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt) Reverse() ListInt {
	xs := NilInt
	l.Foreach(func(e int) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt8) Reverse() ListInt8 {
	xs := NilInt8
	l.Foreach(func(e int8) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt16) Reverse() ListInt16 {
	xs := NilInt16
	l.Foreach(func(e int16) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt32) Reverse() ListInt32 {
	xs := NilInt32
	l.Foreach(func(e int32) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt64) Reverse() ListInt64 {
	xs := NilInt64
	l.Foreach(func(e int64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint) Reverse() ListUint {
	xs := NilUint
	l.Foreach(func(e uint) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint8) Reverse() ListUint8 {
	xs := NilUint8
	l.Foreach(func(e uint8) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint16) Reverse() ListUint16 {
	xs := NilUint16
	l.Foreach(func(e uint16) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint32) Reverse() ListUint32 {
	xs := NilUint32
	l.Foreach(func(e uint32) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint64) Reverse() ListUint64 {
	xs := NilUint64
	l.Foreach(func(e uint64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUintptr) Reverse() ListUintptr {
	xs := NilUintptr
	l.Foreach(func(e uintptr) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListFloat32) Reverse() ListFloat32 {
	xs := NilFloat32
	l.Foreach(func(e float32) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListFloat64) Reverse() ListFloat64 {
	xs := NilFloat64
	l.Foreach(func(e float64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListComplex64) Reverse() ListComplex64 {
	xs := NilComplex64
	l.Foreach(func(e complex64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListComplex128) Reverse() ListComplex128 {
	xs := NilComplex128
	l.Foreach(func(e complex128) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListString) Reverse() ListString {
	xs := NilString
	l.Foreach(func(e string) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListAny) Reverse() ListAny {
	xs := NilAny
	l.Foreach(func(e Any) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListBoolArr) Reverse() ListBoolArr {
	xs := NilBoolArr
	l.Foreach(func(e []bool) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListRuneArr) Reverse() ListRuneArr {
	xs := NilRuneArr
	l.Foreach(func(e []rune) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListByteArr) Reverse() ListByteArr {
	xs := NilByteArr
	l.Foreach(func(e []byte) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListIntArr) Reverse() ListIntArr {
	xs := NilIntArr
	l.Foreach(func(e []int) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt8Arr) Reverse() ListInt8Arr {
	xs := NilInt8Arr
	l.Foreach(func(e []int8) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt16Arr) Reverse() ListInt16Arr {
	xs := NilInt16Arr
	l.Foreach(func(e []int16) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt32Arr) Reverse() ListInt32Arr {
	xs := NilInt32Arr
	l.Foreach(func(e []int32) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListInt64Arr) Reverse() ListInt64Arr {
	xs := NilInt64Arr
	l.Foreach(func(e []int64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUintArr) Reverse() ListUintArr {
	xs := NilUintArr
	l.Foreach(func(e []uint) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint8Arr) Reverse() ListUint8Arr {
	xs := NilUint8Arr
	l.Foreach(func(e []uint8) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint16Arr) Reverse() ListUint16Arr {
	xs := NilUint16Arr
	l.Foreach(func(e []uint16) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint32Arr) Reverse() ListUint32Arr {
	xs := NilUint32Arr
	l.Foreach(func(e []uint32) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUint64Arr) Reverse() ListUint64Arr {
	xs := NilUint64Arr
	l.Foreach(func(e []uint64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListUintptrArr) Reverse() ListUintptrArr {
	xs := NilUintptrArr
	l.Foreach(func(e []uintptr) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListFloat32Arr) Reverse() ListFloat32Arr {
	xs := NilFloat32Arr
	l.Foreach(func(e []float32) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListFloat64Arr) Reverse() ListFloat64Arr {
	xs := NilFloat64Arr
	l.Foreach(func(e []float64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListComplex64Arr) Reverse() ListComplex64Arr {
	xs := NilComplex64Arr
	l.Foreach(func(e []complex64) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListComplex128Arr) Reverse() ListComplex128Arr {
	xs := NilComplex128Arr
	l.Foreach(func(e []complex128) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListStringArr) Reverse() ListStringArr {
	xs := NilStringArr
	l.Foreach(func(e []string) {
		xs = xs.Cons(e)
	})
	return xs
}

func (l ListAnyArr) Reverse() ListAnyArr {
	xs := NilAnyArr
	l.Foreach(func(e []Any) {
		xs = xs.Cons(e)
	})
	return xs
}
