// flist_size.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l BoolList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l RuneList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l ByteList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l IntList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int8List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int16List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int32List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int64List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l UintList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint8List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint16List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint32List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint64List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l UintptrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Float32List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Float64List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Complex64List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Complex128List) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l StringList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l AnyList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l BoolArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l RuneArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l ByteArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l IntArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int8ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int16ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int32ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Int64ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l UintArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint8ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint16ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint32ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Uint64ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l UintptrArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Float32ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Float64ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Complex64ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l Complex128ArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l StringArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}

func (l AnyArrList) Size() int {
	count := 0
	xs := l
	for xs.IsNotEmpty() {
		count++
		xs = *xs.tail
	}
	return count
}
