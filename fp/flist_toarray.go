// flist_toarray.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (l BoolList) ToArray() []bool {
	len := l.Size()
	arr := make([]bool, len)
	i := 0
	l.Foreach(func(e bool) {
		arr[i] = e
		i++
	})
	return arr
}

func (l RuneList) ToArray() []rune {
	len := l.Size()
	arr := make([]rune, len)
	i := 0
	l.Foreach(func(e rune) {
		arr[i] = e
		i++
	})
	return arr
}

func (l ByteList) ToArray() []byte {
	len := l.Size()
	arr := make([]byte, len)
	i := 0
	l.Foreach(func(e byte) {
		arr[i] = e
		i++
	})
	return arr
}

func (l IntList) ToArray() []int {
	len := l.Size()
	arr := make([]int, len)
	i := 0
	l.Foreach(func(e int) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int8List) ToArray() []int8 {
	len := l.Size()
	arr := make([]int8, len)
	i := 0
	l.Foreach(func(e int8) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int16List) ToArray() []int16 {
	len := l.Size()
	arr := make([]int16, len)
	i := 0
	l.Foreach(func(e int16) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int32List) ToArray() []int32 {
	len := l.Size()
	arr := make([]int32, len)
	i := 0
	l.Foreach(func(e int32) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int64List) ToArray() []int64 {
	len := l.Size()
	arr := make([]int64, len)
	i := 0
	l.Foreach(func(e int64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l UintList) ToArray() []uint {
	len := l.Size()
	arr := make([]uint, len)
	i := 0
	l.Foreach(func(e uint) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint8List) ToArray() []uint8 {
	len := l.Size()
	arr := make([]uint8, len)
	i := 0
	l.Foreach(func(e uint8) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint16List) ToArray() []uint16 {
	len := l.Size()
	arr := make([]uint16, len)
	i := 0
	l.Foreach(func(e uint16) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint32List) ToArray() []uint32 {
	len := l.Size()
	arr := make([]uint32, len)
	i := 0
	l.Foreach(func(e uint32) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint64List) ToArray() []uint64 {
	len := l.Size()
	arr := make([]uint64, len)
	i := 0
	l.Foreach(func(e uint64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l UintptrList) ToArray() []uintptr {
	len := l.Size()
	arr := make([]uintptr, len)
	i := 0
	l.Foreach(func(e uintptr) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Float32List) ToArray() []float32 {
	len := l.Size()
	arr := make([]float32, len)
	i := 0
	l.Foreach(func(e float32) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Float64List) ToArray() []float64 {
	len := l.Size()
	arr := make([]float64, len)
	i := 0
	l.Foreach(func(e float64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Complex64List) ToArray() []complex64 {
	len := l.Size()
	arr := make([]complex64, len)
	i := 0
	l.Foreach(func(e complex64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Complex128List) ToArray() []complex128 {
	len := l.Size()
	arr := make([]complex128, len)
	i := 0
	l.Foreach(func(e complex128) {
		arr[i] = e
		i++
	})
	return arr
}

func (l StringList) ToArray() []string {
	len := l.Size()
	arr := make([]string, len)
	i := 0
	l.Foreach(func(e string) {
		arr[i] = e
		i++
	})
	return arr
}

func (l AnyList) ToArray() []Any {
	len := l.Size()
	arr := make([]Any, len)
	i := 0
	l.Foreach(func(e Any) {
		arr[i] = e
		i++
	})
	return arr
}

func (l BoolArrList) ToArray() [][]bool {
	len := l.Size()
	arr := make([][]bool, len)
	i := 0
	l.Foreach(func(e []bool) {
		arr[i] = e
		i++
	})
	return arr
}

func (l RuneArrList) ToArray() [][]rune {
	len := l.Size()
	arr := make([][]rune, len)
	i := 0
	l.Foreach(func(e []rune) {
		arr[i] = e
		i++
	})
	return arr
}

func (l ByteArrList) ToArray() [][]byte {
	len := l.Size()
	arr := make([][]byte, len)
	i := 0
	l.Foreach(func(e []byte) {
		arr[i] = e
		i++
	})
	return arr
}

func (l IntArrList) ToArray() [][]int {
	len := l.Size()
	arr := make([][]int, len)
	i := 0
	l.Foreach(func(e []int) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int8ArrList) ToArray() [][]int8 {
	len := l.Size()
	arr := make([][]int8, len)
	i := 0
	l.Foreach(func(e []int8) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int16ArrList) ToArray() [][]int16 {
	len := l.Size()
	arr := make([][]int16, len)
	i := 0
	l.Foreach(func(e []int16) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int32ArrList) ToArray() [][]int32 {
	len := l.Size()
	arr := make([][]int32, len)
	i := 0
	l.Foreach(func(e []int32) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Int64ArrList) ToArray() [][]int64 {
	len := l.Size()
	arr := make([][]int64, len)
	i := 0
	l.Foreach(func(e []int64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l UintArrList) ToArray() [][]uint {
	len := l.Size()
	arr := make([][]uint, len)
	i := 0
	l.Foreach(func(e []uint) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint8ArrList) ToArray() [][]uint8 {
	len := l.Size()
	arr := make([][]uint8, len)
	i := 0
	l.Foreach(func(e []uint8) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint16ArrList) ToArray() [][]uint16 {
	len := l.Size()
	arr := make([][]uint16, len)
	i := 0
	l.Foreach(func(e []uint16) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint32ArrList) ToArray() [][]uint32 {
	len := l.Size()
	arr := make([][]uint32, len)
	i := 0
	l.Foreach(func(e []uint32) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Uint64ArrList) ToArray() [][]uint64 {
	len := l.Size()
	arr := make([][]uint64, len)
	i := 0
	l.Foreach(func(e []uint64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l UintptrArrList) ToArray() [][]uintptr {
	len := l.Size()
	arr := make([][]uintptr, len)
	i := 0
	l.Foreach(func(e []uintptr) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Float32ArrList) ToArray() [][]float32 {
	len := l.Size()
	arr := make([][]float32, len)
	i := 0
	l.Foreach(func(e []float32) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Float64ArrList) ToArray() [][]float64 {
	len := l.Size()
	arr := make([][]float64, len)
	i := 0
	l.Foreach(func(e []float64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Complex64ArrList) ToArray() [][]complex64 {
	len := l.Size()
	arr := make([][]complex64, len)
	i := 0
	l.Foreach(func(e []complex64) {
		arr[i] = e
		i++
	})
	return arr
}

func (l Complex128ArrList) ToArray() [][]complex128 {
	len := l.Size()
	arr := make([][]complex128, len)
	i := 0
	l.Foreach(func(e []complex128) {
		arr[i] = e
		i++
	})
	return arr
}

func (l StringArrList) ToArray() [][]string {
	len := l.Size()
	arr := make([][]string, len)
	i := 0
	l.Foreach(func(e []string) {
		arr[i] = e
		i++
	})
	return arr
}

func (l AnyArrList) ToArray() [][]Any {
	len := l.Size()
	arr := make([][]Any, len)
	i := 0
	l.Foreach(func(e []Any) {
		arr[i] = e
		i++
	})
	return arr
}
