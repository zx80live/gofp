// foptional_equals.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (e1 OptionBool) Equals(e2 OptionBool) bool { return EqualOptionBool(e1, e2) }

func (e1 OptionRune) Equals(e2 OptionRune) bool { return EqualOptionRune(e1, e2) }

func (e1 OptionByte) Equals(e2 OptionByte) bool { return EqualOptionByte(e1, e2) }

func (e1 OptionInt) Equals(e2 OptionInt) bool { return EqualOptionInt(e1, e2) }

func (e1 OptionInt8) Equals(e2 OptionInt8) bool { return EqualOptionInt8(e1, e2) }

func (e1 OptionInt16) Equals(e2 OptionInt16) bool { return EqualOptionInt16(e1, e2) }

func (e1 OptionInt32) Equals(e2 OptionInt32) bool { return EqualOptionInt32(e1, e2) }

func (e1 OptionInt64) Equals(e2 OptionInt64) bool { return EqualOptionInt64(e1, e2) }

func (e1 OptionUint) Equals(e2 OptionUint) bool { return EqualOptionUint(e1, e2) }

func (e1 OptionUint8) Equals(e2 OptionUint8) bool { return EqualOptionUint8(e1, e2) }

func (e1 OptionUint16) Equals(e2 OptionUint16) bool { return EqualOptionUint16(e1, e2) }

func (e1 OptionUint32) Equals(e2 OptionUint32) bool { return EqualOptionUint32(e1, e2) }

func (e1 OptionUint64) Equals(e2 OptionUint64) bool { return EqualOptionUint64(e1, e2) }

func (e1 OptionUintptr) Equals(e2 OptionUintptr) bool { return EqualOptionUintptr(e1, e2) }

func (e1 OptionFloat32) Equals(e2 OptionFloat32) bool { return EqualOptionFloat32(e1, e2) }

func (e1 OptionFloat64) Equals(e2 OptionFloat64) bool { return EqualOptionFloat64(e1, e2) }

func (e1 OptionComplex64) Equals(e2 OptionComplex64) bool { return EqualOptionComplex64(e1, e2) }

func (e1 OptionComplex128) Equals(e2 OptionComplex128) bool { return EqualOptionComplex128(e1, e2) }

func (e1 OptionString) Equals(e2 OptionString) bool { return EqualOptionString(e1, e2) }

func (e1 OptionAny) Equals(e2 OptionAny) bool { return EqualOptionAny(e1, e2) }

func (e1 OptionBoolArr) Equals(e2 OptionBoolArr) bool { return EqualOptionBoolArr(e1, e2) }

func (e1 OptionRuneArr) Equals(e2 OptionRuneArr) bool { return EqualOptionRuneArr(e1, e2) }

func (e1 OptionByteArr) Equals(e2 OptionByteArr) bool { return EqualOptionByteArr(e1, e2) }

func (e1 OptionIntArr) Equals(e2 OptionIntArr) bool { return EqualOptionIntArr(e1, e2) }

func (e1 OptionInt8Arr) Equals(e2 OptionInt8Arr) bool { return EqualOptionInt8Arr(e1, e2) }

func (e1 OptionInt16Arr) Equals(e2 OptionInt16Arr) bool { return EqualOptionInt16Arr(e1, e2) }

func (e1 OptionInt32Arr) Equals(e2 OptionInt32Arr) bool { return EqualOptionInt32Arr(e1, e2) }

func (e1 OptionInt64Arr) Equals(e2 OptionInt64Arr) bool { return EqualOptionInt64Arr(e1, e2) }

func (e1 OptionUintArr) Equals(e2 OptionUintArr) bool { return EqualOptionUintArr(e1, e2) }

func (e1 OptionUint8Arr) Equals(e2 OptionUint8Arr) bool { return EqualOptionUint8Arr(e1, e2) }

func (e1 OptionUint16Arr) Equals(e2 OptionUint16Arr) bool { return EqualOptionUint16Arr(e1, e2) }

func (e1 OptionUint32Arr) Equals(e2 OptionUint32Arr) bool { return EqualOptionUint32Arr(e1, e2) }

func (e1 OptionUint64Arr) Equals(e2 OptionUint64Arr) bool { return EqualOptionUint64Arr(e1, e2) }

func (e1 OptionUintptrArr) Equals(e2 OptionUintptrArr) bool { return EqualOptionUintptrArr(e1, e2) }

func (e1 OptionFloat32Arr) Equals(e2 OptionFloat32Arr) bool { return EqualOptionFloat32Arr(e1, e2) }

func (e1 OptionFloat64Arr) Equals(e2 OptionFloat64Arr) bool { return EqualOptionFloat64Arr(e1, e2) }

func (e1 OptionComplex64Arr) Equals(e2 OptionComplex64Arr) bool {
	return EqualOptionComplex64Arr(e1, e2)
}

func (e1 OptionComplex128Arr) Equals(e2 OptionComplex128Arr) bool {
	return EqualOptionComplex128Arr(e1, e2)
}

func (e1 OptionStringArr) Equals(e2 OptionStringArr) bool { return EqualOptionStringArr(e1, e2) }

func (e1 OptionAnyArr) Equals(e2 OptionAnyArr) bool { return EqualOptionAnyArr(e1, e2) }
