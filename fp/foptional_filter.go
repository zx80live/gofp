// foptional_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (o OptionBool) Filter(p PredicateBool) OptionBool {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneBool
	}
}

func (o OptionRune) Filter(p PredicateRune) OptionRune {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneRune
	}
}

func (o OptionByte) Filter(p PredicateByte) OptionByte {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneByte
	}
}

func (o OptionInt) Filter(p PredicateInt) OptionInt {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt
	}
}

func (o OptionInt8) Filter(p PredicateInt8) OptionInt8 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt8
	}
}

func (o OptionInt16) Filter(p PredicateInt16) OptionInt16 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt16
	}
}

func (o OptionInt32) Filter(p PredicateInt32) OptionInt32 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt32
	}
}

func (o OptionInt64) Filter(p PredicateInt64) OptionInt64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt64
	}
}

func (o OptionUint) Filter(p PredicateUint) OptionUint {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint
	}
}

func (o OptionUint8) Filter(p PredicateUint8) OptionUint8 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint8
	}
}

func (o OptionUint16) Filter(p PredicateUint16) OptionUint16 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint16
	}
}

func (o OptionUint32) Filter(p PredicateUint32) OptionUint32 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint32
	}
}

func (o OptionUint64) Filter(p PredicateUint64) OptionUint64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint64
	}
}

func (o OptionUintptr) Filter(p PredicateUintptr) OptionUintptr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUintptr
	}
}

func (o OptionFloat32) Filter(p PredicateFloat32) OptionFloat32 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat32
	}
}

func (o OptionFloat64) Filter(p PredicateFloat64) OptionFloat64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat64
	}
}

func (o OptionComplex64) Filter(p PredicateComplex64) OptionComplex64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex64
	}
}

func (o OptionComplex128) Filter(p PredicateComplex128) OptionComplex128 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex128
	}
}

func (o OptionString) Filter(p PredicateString) OptionString {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneString
	}
}

func (o OptionAny) Filter(p PredicateAny) OptionAny {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneAny
	}
}

func (o OptionBoolArr) Filter(p PredicateBoolArr) OptionBoolArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneBoolArr
	}
}

func (o OptionRuneArr) Filter(p PredicateRuneArr) OptionRuneArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneRuneArr
	}
}

func (o OptionByteArr) Filter(p PredicateByteArr) OptionByteArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneByteArr
	}
}

func (o OptionIntArr) Filter(p PredicateIntArr) OptionIntArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneIntArr
	}
}

func (o OptionInt8Arr) Filter(p PredicateInt8Arr) OptionInt8Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt8Arr
	}
}

func (o OptionInt16Arr) Filter(p PredicateInt16Arr) OptionInt16Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt16Arr
	}
}

func (o OptionInt32Arr) Filter(p PredicateInt32Arr) OptionInt32Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt32Arr
	}
}

func (o OptionInt64Arr) Filter(p PredicateInt64Arr) OptionInt64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt64Arr
	}
}

func (o OptionUintArr) Filter(p PredicateUintArr) OptionUintArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUintArr
	}
}

func (o OptionUint8Arr) Filter(p PredicateUint8Arr) OptionUint8Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint8Arr
	}
}

func (o OptionUint16Arr) Filter(p PredicateUint16Arr) OptionUint16Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint16Arr
	}
}

func (o OptionUint32Arr) Filter(p PredicateUint32Arr) OptionUint32Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint32Arr
	}
}

func (o OptionUint64Arr) Filter(p PredicateUint64Arr) OptionUint64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint64Arr
	}
}

func (o OptionUintptrArr) Filter(p PredicateUintptrArr) OptionUintptrArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUintptrArr
	}
}

func (o OptionFloat32Arr) Filter(p PredicateFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat32Arr
	}
}

func (o OptionFloat64Arr) Filter(p PredicateFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat64Arr
	}
}

func (o OptionComplex64Arr) Filter(p PredicateComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex64Arr
	}
}

func (o OptionComplex128Arr) Filter(p PredicateComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex128Arr
	}
}

func (o OptionStringArr) Filter(p PredicateStringArr) OptionStringArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneStringArr
	}
}

func (o OptionAnyArr) Filter(p PredicateAnyArr) OptionAnyArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneAnyArr
	}
}
