// foptional_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (o OptionBool) Filter(p BoolPredicate) OptionBool {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneBool
	}
}

func (o OptionRune) Filter(p RunePredicate) OptionRune {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneRune
	}
}

func (o OptionByte) Filter(p BytePredicate) OptionByte {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneByte
	}
}

func (o OptionInt) Filter(p IntPredicate) OptionInt {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt
	}
}

func (o OptionInt8) Filter(p Int8Predicate) OptionInt8 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt8
	}
}

func (o OptionInt16) Filter(p Int16Predicate) OptionInt16 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt16
	}
}

func (o OptionInt32) Filter(p Int32Predicate) OptionInt32 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt32
	}
}

func (o OptionInt64) Filter(p Int64Predicate) OptionInt64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt64
	}
}

func (o OptionUint) Filter(p UintPredicate) OptionUint {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint
	}
}

func (o OptionUint8) Filter(p Uint8Predicate) OptionUint8 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint8
	}
}

func (o OptionUint16) Filter(p Uint16Predicate) OptionUint16 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint16
	}
}

func (o OptionUint32) Filter(p Uint32Predicate) OptionUint32 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint32
	}
}

func (o OptionUint64) Filter(p Uint64Predicate) OptionUint64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint64
	}
}

func (o OptionUintptr) Filter(p UintptrPredicate) OptionUintptr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUintptr
	}
}

func (o OptionFloat32) Filter(p Float32Predicate) OptionFloat32 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat32
	}
}

func (o OptionFloat64) Filter(p Float64Predicate) OptionFloat64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat64
	}
}

func (o OptionComplex64) Filter(p Complex64Predicate) OptionComplex64 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex64
	}
}

func (o OptionComplex128) Filter(p Complex128Predicate) OptionComplex128 {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex128
	}
}

func (o OptionString) Filter(p StringPredicate) OptionString {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneString
	}
}

func (o OptionAny) Filter(p AnyPredicate) OptionAny {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneAny
	}
}

func (o OptionBoolArr) Filter(p BoolArrPredicate) OptionBoolArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneBoolArr
	}
}

func (o OptionRuneArr) Filter(p RuneArrPredicate) OptionRuneArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneRuneArr
	}
}

func (o OptionByteArr) Filter(p ByteArrPredicate) OptionByteArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneByteArr
	}
}

func (o OptionIntArr) Filter(p IntArrPredicate) OptionIntArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneIntArr
	}
}

func (o OptionInt8Arr) Filter(p Int8ArrPredicate) OptionInt8Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt8Arr
	}
}

func (o OptionInt16Arr) Filter(p Int16ArrPredicate) OptionInt16Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt16Arr
	}
}

func (o OptionInt32Arr) Filter(p Int32ArrPredicate) OptionInt32Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt32Arr
	}
}

func (o OptionInt64Arr) Filter(p Int64ArrPredicate) OptionInt64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneInt64Arr
	}
}

func (o OptionUintArr) Filter(p UintArrPredicate) OptionUintArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUintArr
	}
}

func (o OptionUint8Arr) Filter(p Uint8ArrPredicate) OptionUint8Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint8Arr
	}
}

func (o OptionUint16Arr) Filter(p Uint16ArrPredicate) OptionUint16Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint16Arr
	}
}

func (o OptionUint32Arr) Filter(p Uint32ArrPredicate) OptionUint32Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint32Arr
	}
}

func (o OptionUint64Arr) Filter(p Uint64ArrPredicate) OptionUint64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUint64Arr
	}
}

func (o OptionUintptrArr) Filter(p UintptrArrPredicate) OptionUintptrArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneUintptrArr
	}
}

func (o OptionFloat32Arr) Filter(p Float32ArrPredicate) OptionFloat32Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat32Arr
	}
}

func (o OptionFloat64Arr) Filter(p Float64ArrPredicate) OptionFloat64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneFloat64Arr
	}
}

func (o OptionComplex64Arr) Filter(p Complex64ArrPredicate) OptionComplex64Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex64Arr
	}
}

func (o OptionComplex128Arr) Filter(p Complex128ArrPredicate) OptionComplex128Arr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneComplex128Arr
	}
}

func (o OptionStringArr) Filter(p StringArrPredicate) OptionStringArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneStringArr
	}
}

func (o OptionAnyArr) Filter(p AnyArrPredicate) OptionAnyArr {
	if o.IsDefined() && p(*o.value) {
		return o
	} else {
		return NoneAnyArr
	}
}
