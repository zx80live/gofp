// foptional_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (o OptionBool) MapBool(f BoolBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionBool) MapRune(f BoolRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionBool) MapByte(f BoolByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionBool) MapInt(f BoolIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionBool) MapInt8(f BoolInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionBool) MapInt16(f BoolInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionBool) MapInt32(f BoolInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionBool) MapInt64(f BoolInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionBool) MapUint(f BoolUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionBool) MapUint8(f BoolUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionBool) MapUint16(f BoolUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionBool) MapUint32(f BoolUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionBool) MapUint64(f BoolUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionBool) MapUintptr(f BoolUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionBool) MapFloat32(f BoolFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionBool) MapFloat64(f BoolFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionBool) MapComplex64(f BoolComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionBool) MapComplex128(f BoolComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionBool) MapString(f BoolStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionBool) MapAny(f BoolAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionBool) MapBoolArr(f BoolBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionBool) MapRuneArr(f BoolRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionBool) MapByteArr(f BoolByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionBool) MapIntArr(f BoolIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionBool) MapInt8Arr(f BoolInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionBool) MapInt16Arr(f BoolInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionBool) MapInt32Arr(f BoolInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionBool) MapInt64Arr(f BoolInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionBool) MapUintArr(f BoolUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionBool) MapUint8Arr(f BoolUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionBool) MapUint16Arr(f BoolUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionBool) MapUint32Arr(f BoolUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionBool) MapUint64Arr(f BoolUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionBool) MapUintptrArr(f BoolUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionBool) MapFloat32Arr(f BoolFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionBool) MapFloat64Arr(f BoolFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionBool) MapComplex64Arr(f BoolComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionBool) MapComplex128Arr(f BoolComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionBool) MapStringArr(f BoolStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionBool) MapAnyArr(f BoolAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionRune) MapBool(f RuneBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionRune) MapRune(f RuneRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionRune) MapByte(f RuneByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionRune) MapInt(f RuneIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionRune) MapInt8(f RuneInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionRune) MapInt16(f RuneInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionRune) MapInt32(f RuneInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionRune) MapInt64(f RuneInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionRune) MapUint(f RuneUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionRune) MapUint8(f RuneUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionRune) MapUint16(f RuneUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionRune) MapUint32(f RuneUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionRune) MapUint64(f RuneUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionRune) MapUintptr(f RuneUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionRune) MapFloat32(f RuneFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionRune) MapFloat64(f RuneFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionRune) MapComplex64(f RuneComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionRune) MapComplex128(f RuneComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionRune) MapString(f RuneStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionRune) MapAny(f RuneAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionRune) MapBoolArr(f RuneBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionRune) MapRuneArr(f RuneRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionRune) MapByteArr(f RuneByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionRune) MapIntArr(f RuneIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionRune) MapInt8Arr(f RuneInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionRune) MapInt16Arr(f RuneInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionRune) MapInt32Arr(f RuneInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionRune) MapInt64Arr(f RuneInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionRune) MapUintArr(f RuneUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionRune) MapUint8Arr(f RuneUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionRune) MapUint16Arr(f RuneUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionRune) MapUint32Arr(f RuneUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionRune) MapUint64Arr(f RuneUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionRune) MapUintptrArr(f RuneUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionRune) MapFloat32Arr(f RuneFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionRune) MapFloat64Arr(f RuneFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionRune) MapComplex64Arr(f RuneComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionRune) MapComplex128Arr(f RuneComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionRune) MapStringArr(f RuneStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionRune) MapAnyArr(f RuneAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionByte) MapBool(f ByteBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionByte) MapRune(f ByteRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionByte) MapByte(f ByteByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionByte) MapInt(f ByteIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionByte) MapInt8(f ByteInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionByte) MapInt16(f ByteInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionByte) MapInt32(f ByteInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionByte) MapInt64(f ByteInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionByte) MapUint(f ByteUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionByte) MapUint8(f ByteUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionByte) MapUint16(f ByteUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionByte) MapUint32(f ByteUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionByte) MapUint64(f ByteUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionByte) MapUintptr(f ByteUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionByte) MapFloat32(f ByteFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionByte) MapFloat64(f ByteFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionByte) MapComplex64(f ByteComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionByte) MapComplex128(f ByteComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionByte) MapString(f ByteStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionByte) MapAny(f ByteAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionByte) MapBoolArr(f ByteBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionByte) MapRuneArr(f ByteRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionByte) MapByteArr(f ByteByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionByte) MapIntArr(f ByteIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionByte) MapInt8Arr(f ByteInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionByte) MapInt16Arr(f ByteInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionByte) MapInt32Arr(f ByteInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionByte) MapInt64Arr(f ByteInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionByte) MapUintArr(f ByteUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionByte) MapUint8Arr(f ByteUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionByte) MapUint16Arr(f ByteUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionByte) MapUint32Arr(f ByteUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionByte) MapUint64Arr(f ByteUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionByte) MapUintptrArr(f ByteUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionByte) MapFloat32Arr(f ByteFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionByte) MapFloat64Arr(f ByteFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionByte) MapComplex64Arr(f ByteComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionByte) MapComplex128Arr(f ByteComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionByte) MapStringArr(f ByteStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionByte) MapAnyArr(f ByteAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt) MapBool(f IntBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt) MapRune(f IntRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt) MapByte(f IntByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt) MapInt(f IntIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt) MapInt8(f IntInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt) MapInt16(f IntInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt) MapInt32(f IntInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt) MapInt64(f IntInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt) MapUint(f IntUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt) MapUint8(f IntUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt) MapUint16(f IntUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt) MapUint32(f IntUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt) MapUint64(f IntUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt) MapUintptr(f IntUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt) MapFloat32(f IntFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt) MapFloat64(f IntFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt) MapComplex64(f IntComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt) MapComplex128(f IntComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt) MapString(f IntStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt) MapAny(f IntAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt) MapBoolArr(f IntBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt) MapRuneArr(f IntRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt) MapByteArr(f IntByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt) MapIntArr(f IntIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt) MapInt8Arr(f IntInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt) MapInt16Arr(f IntInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt) MapInt32Arr(f IntInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt) MapInt64Arr(f IntInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt) MapUintArr(f IntUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt) MapUint8Arr(f IntUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt) MapUint16Arr(f IntUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt) MapUint32Arr(f IntUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt) MapUint64Arr(f IntUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt) MapUintptrArr(f IntUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt) MapFloat32Arr(f IntFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt) MapFloat64Arr(f IntFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt) MapComplex64Arr(f IntComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt) MapComplex128Arr(f IntComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt) MapStringArr(f IntStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt) MapAnyArr(f IntAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt8) MapBool(f Int8BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt8) MapRune(f Int8RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt8) MapByte(f Int8ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt8) MapInt(f Int8IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt8) MapInt8(f Int8Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt8) MapInt16(f Int8Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt8) MapInt32(f Int8Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt8) MapInt64(f Int8Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt8) MapUint(f Int8UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt8) MapUint8(f Int8Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt8) MapUint16(f Int8Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt8) MapUint32(f Int8Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt8) MapUint64(f Int8Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt8) MapUintptr(f Int8UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt8) MapFloat32(f Int8Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt8) MapFloat64(f Int8Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt8) MapComplex64(f Int8Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt8) MapComplex128(f Int8Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt8) MapString(f Int8StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt8) MapAny(f Int8AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt8) MapBoolArr(f Int8BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt8) MapRuneArr(f Int8RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt8) MapByteArr(f Int8ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt8) MapIntArr(f Int8IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt8) MapInt8Arr(f Int8Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt8) MapInt16Arr(f Int8Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt8) MapInt32Arr(f Int8Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt8) MapInt64Arr(f Int8Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt8) MapUintArr(f Int8UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt8) MapUint8Arr(f Int8Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt8) MapUint16Arr(f Int8Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt8) MapUint32Arr(f Int8Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt8) MapUint64Arr(f Int8Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt8) MapUintptrArr(f Int8UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt8) MapFloat32Arr(f Int8Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt8) MapFloat64Arr(f Int8Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt8) MapComplex64Arr(f Int8Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt8) MapComplex128Arr(f Int8Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt8) MapStringArr(f Int8StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt8) MapAnyArr(f Int8AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt16) MapBool(f Int16BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt16) MapRune(f Int16RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt16) MapByte(f Int16ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt16) MapInt(f Int16IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt16) MapInt8(f Int16Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt16) MapInt16(f Int16Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt16) MapInt32(f Int16Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt16) MapInt64(f Int16Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt16) MapUint(f Int16UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt16) MapUint8(f Int16Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt16) MapUint16(f Int16Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt16) MapUint32(f Int16Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt16) MapUint64(f Int16Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt16) MapUintptr(f Int16UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt16) MapFloat32(f Int16Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt16) MapFloat64(f Int16Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt16) MapComplex64(f Int16Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt16) MapComplex128(f Int16Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt16) MapString(f Int16StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt16) MapAny(f Int16AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt16) MapBoolArr(f Int16BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt16) MapRuneArr(f Int16RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt16) MapByteArr(f Int16ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt16) MapIntArr(f Int16IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt16) MapInt8Arr(f Int16Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt16) MapInt16Arr(f Int16Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt16) MapInt32Arr(f Int16Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt16) MapInt64Arr(f Int16Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt16) MapUintArr(f Int16UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt16) MapUint8Arr(f Int16Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt16) MapUint16Arr(f Int16Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt16) MapUint32Arr(f Int16Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt16) MapUint64Arr(f Int16Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt16) MapUintptrArr(f Int16UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt16) MapFloat32Arr(f Int16Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt16) MapFloat64Arr(f Int16Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt16) MapComplex64Arr(f Int16Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt16) MapComplex128Arr(f Int16Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt16) MapStringArr(f Int16StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt16) MapAnyArr(f Int16AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt32) MapBool(f Int32BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt32) MapRune(f Int32RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt32) MapByte(f Int32ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt32) MapInt(f Int32IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt32) MapInt8(f Int32Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt32) MapInt16(f Int32Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt32) MapInt32(f Int32Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt32) MapInt64(f Int32Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt32) MapUint(f Int32UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt32) MapUint8(f Int32Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt32) MapUint16(f Int32Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt32) MapUint32(f Int32Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt32) MapUint64(f Int32Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt32) MapUintptr(f Int32UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt32) MapFloat32(f Int32Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt32) MapFloat64(f Int32Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt32) MapComplex64(f Int32Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt32) MapComplex128(f Int32Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt32) MapString(f Int32StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt32) MapAny(f Int32AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt32) MapBoolArr(f Int32BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt32) MapRuneArr(f Int32RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt32) MapByteArr(f Int32ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt32) MapIntArr(f Int32IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt32) MapInt8Arr(f Int32Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt32) MapInt16Arr(f Int32Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt32) MapInt32Arr(f Int32Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt32) MapInt64Arr(f Int32Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt32) MapUintArr(f Int32UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt32) MapUint8Arr(f Int32Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt32) MapUint16Arr(f Int32Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt32) MapUint32Arr(f Int32Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt32) MapUint64Arr(f Int32Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt32) MapUintptrArr(f Int32UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt32) MapFloat32Arr(f Int32Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt32) MapFloat64Arr(f Int32Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt32) MapComplex64Arr(f Int32Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt32) MapComplex128Arr(f Int32Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt32) MapStringArr(f Int32StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt32) MapAnyArr(f Int32AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt64) MapBool(f Int64BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt64) MapRune(f Int64RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt64) MapByte(f Int64ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt64) MapInt(f Int64IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt64) MapInt8(f Int64Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt64) MapInt16(f Int64Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt64) MapInt32(f Int64Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt64) MapInt64(f Int64Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt64) MapUint(f Int64UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt64) MapUint8(f Int64Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt64) MapUint16(f Int64Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt64) MapUint32(f Int64Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt64) MapUint64(f Int64Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt64) MapUintptr(f Int64UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt64) MapFloat32(f Int64Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt64) MapFloat64(f Int64Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt64) MapComplex64(f Int64Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt64) MapComplex128(f Int64Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt64) MapString(f Int64StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt64) MapAny(f Int64AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt64) MapBoolArr(f Int64BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt64) MapRuneArr(f Int64RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt64) MapByteArr(f Int64ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt64) MapIntArr(f Int64IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt64) MapInt8Arr(f Int64Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt64) MapInt16Arr(f Int64Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt64) MapInt32Arr(f Int64Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt64) MapInt64Arr(f Int64Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt64) MapUintArr(f Int64UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt64) MapUint8Arr(f Int64Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt64) MapUint16Arr(f Int64Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt64) MapUint32Arr(f Int64Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt64) MapUint64Arr(f Int64Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt64) MapUintptrArr(f Int64UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt64) MapFloat32Arr(f Int64Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt64) MapFloat64Arr(f Int64Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt64) MapComplex64Arr(f Int64Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt64) MapComplex128Arr(f Int64Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt64) MapStringArr(f Int64StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt64) MapAnyArr(f Int64AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint) MapBool(f UintBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint) MapRune(f UintRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint) MapByte(f UintByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint) MapInt(f UintIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint) MapInt8(f UintInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint) MapInt16(f UintInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint) MapInt32(f UintInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint) MapInt64(f UintInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint) MapUint(f UintUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint) MapUint8(f UintUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint) MapUint16(f UintUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint) MapUint32(f UintUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint) MapUint64(f UintUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint) MapUintptr(f UintUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint) MapFloat32(f UintFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint) MapFloat64(f UintFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint) MapComplex64(f UintComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint) MapComplex128(f UintComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint) MapString(f UintStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint) MapAny(f UintAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint) MapBoolArr(f UintBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint) MapRuneArr(f UintRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint) MapByteArr(f UintByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint) MapIntArr(f UintIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint) MapInt8Arr(f UintInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint) MapInt16Arr(f UintInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint) MapInt32Arr(f UintInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint) MapInt64Arr(f UintInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint) MapUintArr(f UintUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint) MapUint8Arr(f UintUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint) MapUint16Arr(f UintUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint) MapUint32Arr(f UintUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint) MapUint64Arr(f UintUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint) MapUintptrArr(f UintUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint) MapFloat32Arr(f UintFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint) MapFloat64Arr(f UintFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint) MapComplex64Arr(f UintComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint) MapComplex128Arr(f UintComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint) MapStringArr(f UintStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint) MapAnyArr(f UintAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint8) MapBool(f Uint8BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint8) MapRune(f Uint8RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint8) MapByte(f Uint8ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint8) MapInt(f Uint8IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint8) MapInt8(f Uint8Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint8) MapInt16(f Uint8Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint8) MapInt32(f Uint8Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint8) MapInt64(f Uint8Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint8) MapUint(f Uint8UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint8) MapUint8(f Uint8Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint8) MapUint16(f Uint8Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint8) MapUint32(f Uint8Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint8) MapUint64(f Uint8Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint8) MapUintptr(f Uint8UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint8) MapFloat32(f Uint8Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint8) MapFloat64(f Uint8Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint8) MapComplex64(f Uint8Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint8) MapComplex128(f Uint8Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint8) MapString(f Uint8StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint8) MapAny(f Uint8AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint8) MapBoolArr(f Uint8BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint8) MapRuneArr(f Uint8RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint8) MapByteArr(f Uint8ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint8) MapIntArr(f Uint8IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint8) MapInt8Arr(f Uint8Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint8) MapInt16Arr(f Uint8Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint8) MapInt32Arr(f Uint8Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint8) MapInt64Arr(f Uint8Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint8) MapUintArr(f Uint8UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint8) MapUint8Arr(f Uint8Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint8) MapUint16Arr(f Uint8Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint8) MapUint32Arr(f Uint8Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint8) MapUint64Arr(f Uint8Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint8) MapUintptrArr(f Uint8UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint8) MapFloat32Arr(f Uint8Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint8) MapFloat64Arr(f Uint8Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint8) MapComplex64Arr(f Uint8Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint8) MapComplex128Arr(f Uint8Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint8) MapStringArr(f Uint8StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint8) MapAnyArr(f Uint8AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint16) MapBool(f Uint16BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint16) MapRune(f Uint16RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint16) MapByte(f Uint16ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint16) MapInt(f Uint16IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint16) MapInt8(f Uint16Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint16) MapInt16(f Uint16Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint16) MapInt32(f Uint16Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint16) MapInt64(f Uint16Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint16) MapUint(f Uint16UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint16) MapUint8(f Uint16Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint16) MapUint16(f Uint16Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint16) MapUint32(f Uint16Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint16) MapUint64(f Uint16Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint16) MapUintptr(f Uint16UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint16) MapFloat32(f Uint16Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint16) MapFloat64(f Uint16Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint16) MapComplex64(f Uint16Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint16) MapComplex128(f Uint16Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint16) MapString(f Uint16StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint16) MapAny(f Uint16AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint16) MapBoolArr(f Uint16BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint16) MapRuneArr(f Uint16RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint16) MapByteArr(f Uint16ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint16) MapIntArr(f Uint16IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint16) MapInt8Arr(f Uint16Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint16) MapInt16Arr(f Uint16Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint16) MapInt32Arr(f Uint16Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint16) MapInt64Arr(f Uint16Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint16) MapUintArr(f Uint16UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint16) MapUint8Arr(f Uint16Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint16) MapUint16Arr(f Uint16Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint16) MapUint32Arr(f Uint16Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint16) MapUint64Arr(f Uint16Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint16) MapUintptrArr(f Uint16UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint16) MapFloat32Arr(f Uint16Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint16) MapFloat64Arr(f Uint16Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint16) MapComplex64Arr(f Uint16Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint16) MapComplex128Arr(f Uint16Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint16) MapStringArr(f Uint16StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint16) MapAnyArr(f Uint16AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint32) MapBool(f Uint32BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint32) MapRune(f Uint32RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint32) MapByte(f Uint32ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint32) MapInt(f Uint32IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint32) MapInt8(f Uint32Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint32) MapInt16(f Uint32Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint32) MapInt32(f Uint32Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint32) MapInt64(f Uint32Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint32) MapUint(f Uint32UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint32) MapUint8(f Uint32Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint32) MapUint16(f Uint32Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint32) MapUint32(f Uint32Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint32) MapUint64(f Uint32Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint32) MapUintptr(f Uint32UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint32) MapFloat32(f Uint32Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint32) MapFloat64(f Uint32Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint32) MapComplex64(f Uint32Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint32) MapComplex128(f Uint32Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint32) MapString(f Uint32StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint32) MapAny(f Uint32AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint32) MapBoolArr(f Uint32BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint32) MapRuneArr(f Uint32RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint32) MapByteArr(f Uint32ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint32) MapIntArr(f Uint32IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint32) MapInt8Arr(f Uint32Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint32) MapInt16Arr(f Uint32Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint32) MapInt32Arr(f Uint32Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint32) MapInt64Arr(f Uint32Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint32) MapUintArr(f Uint32UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint32) MapUint8Arr(f Uint32Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint32) MapUint16Arr(f Uint32Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint32) MapUint32Arr(f Uint32Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint32) MapUint64Arr(f Uint32Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint32) MapUintptrArr(f Uint32UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint32) MapFloat32Arr(f Uint32Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint32) MapFloat64Arr(f Uint32Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint32) MapComplex64Arr(f Uint32Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint32) MapComplex128Arr(f Uint32Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint32) MapStringArr(f Uint32StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint32) MapAnyArr(f Uint32AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint64) MapBool(f Uint64BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint64) MapRune(f Uint64RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint64) MapByte(f Uint64ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint64) MapInt(f Uint64IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint64) MapInt8(f Uint64Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint64) MapInt16(f Uint64Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint64) MapInt32(f Uint64Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint64) MapInt64(f Uint64Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint64) MapUint(f Uint64UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint64) MapUint8(f Uint64Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint64) MapUint16(f Uint64Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint64) MapUint32(f Uint64Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint64) MapUint64(f Uint64Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint64) MapUintptr(f Uint64UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint64) MapFloat32(f Uint64Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint64) MapFloat64(f Uint64Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint64) MapComplex64(f Uint64Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint64) MapComplex128(f Uint64Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint64) MapString(f Uint64StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint64) MapAny(f Uint64AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint64) MapBoolArr(f Uint64BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint64) MapRuneArr(f Uint64RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint64) MapByteArr(f Uint64ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint64) MapIntArr(f Uint64IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint64) MapInt8Arr(f Uint64Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint64) MapInt16Arr(f Uint64Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint64) MapInt32Arr(f Uint64Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint64) MapInt64Arr(f Uint64Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint64) MapUintArr(f Uint64UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint64) MapUint8Arr(f Uint64Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint64) MapUint16Arr(f Uint64Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint64) MapUint32Arr(f Uint64Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint64) MapUint64Arr(f Uint64Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint64) MapUintptrArr(f Uint64UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint64) MapFloat32Arr(f Uint64Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint64) MapFloat64Arr(f Uint64Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint64) MapComplex64Arr(f Uint64Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint64) MapComplex128Arr(f Uint64Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint64) MapStringArr(f Uint64StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint64) MapAnyArr(f Uint64AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUintptr) MapBool(f UintptrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUintptr) MapRune(f UintptrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUintptr) MapByte(f UintptrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUintptr) MapInt(f UintptrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUintptr) MapInt8(f UintptrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUintptr) MapInt16(f UintptrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUintptr) MapInt32(f UintptrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUintptr) MapInt64(f UintptrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUintptr) MapUint(f UintptrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUintptr) MapUint8(f UintptrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUintptr) MapUint16(f UintptrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUintptr) MapUint32(f UintptrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUintptr) MapUint64(f UintptrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUintptr) MapUintptr(f UintptrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUintptr) MapFloat32(f UintptrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUintptr) MapFloat64(f UintptrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUintptr) MapComplex64(f UintptrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUintptr) MapComplex128(f UintptrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUintptr) MapString(f UintptrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUintptr) MapAny(f UintptrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUintptr) MapBoolArr(f UintptrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUintptr) MapRuneArr(f UintptrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUintptr) MapByteArr(f UintptrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUintptr) MapIntArr(f UintptrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUintptr) MapInt8Arr(f UintptrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUintptr) MapInt16Arr(f UintptrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUintptr) MapInt32Arr(f UintptrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUintptr) MapInt64Arr(f UintptrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUintptr) MapUintArr(f UintptrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUintptr) MapUint8Arr(f UintptrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUintptr) MapUint16Arr(f UintptrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUintptr) MapUint32Arr(f UintptrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUintptr) MapUint64Arr(f UintptrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUintptr) MapUintptrArr(f UintptrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUintptr) MapFloat32Arr(f UintptrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUintptr) MapFloat64Arr(f UintptrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUintptr) MapComplex64Arr(f UintptrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUintptr) MapComplex128Arr(f UintptrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUintptr) MapStringArr(f UintptrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUintptr) MapAnyArr(f UintptrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat32) MapBool(f Float32BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat32) MapRune(f Float32RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat32) MapByte(f Float32ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat32) MapInt(f Float32IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat32) MapInt8(f Float32Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat32) MapInt16(f Float32Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat32) MapInt32(f Float32Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat32) MapInt64(f Float32Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat32) MapUint(f Float32UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat32) MapUint8(f Float32Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat32) MapUint16(f Float32Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat32) MapUint32(f Float32Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat32) MapUint64(f Float32Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat32) MapUintptr(f Float32UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat32) MapFloat32(f Float32Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat32) MapFloat64(f Float32Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat32) MapComplex64(f Float32Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat32) MapComplex128(f Float32Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat32) MapString(f Float32StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat32) MapAny(f Float32AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat32) MapBoolArr(f Float32BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat32) MapRuneArr(f Float32RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat32) MapByteArr(f Float32ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat32) MapIntArr(f Float32IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat32) MapInt8Arr(f Float32Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat32) MapInt16Arr(f Float32Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat32) MapInt32Arr(f Float32Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat32) MapInt64Arr(f Float32Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat32) MapUintArr(f Float32UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat32) MapUint8Arr(f Float32Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat32) MapUint16Arr(f Float32Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat32) MapUint32Arr(f Float32Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat32) MapUint64Arr(f Float32Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat32) MapUintptrArr(f Float32UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat32) MapFloat32Arr(f Float32Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat32) MapFloat64Arr(f Float32Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat32) MapComplex64Arr(f Float32Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat32) MapComplex128Arr(f Float32Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat32) MapStringArr(f Float32StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat32) MapAnyArr(f Float32AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat64) MapBool(f Float64BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat64) MapRune(f Float64RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat64) MapByte(f Float64ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat64) MapInt(f Float64IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat64) MapInt8(f Float64Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat64) MapInt16(f Float64Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat64) MapInt32(f Float64Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat64) MapInt64(f Float64Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat64) MapUint(f Float64UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat64) MapUint8(f Float64Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat64) MapUint16(f Float64Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat64) MapUint32(f Float64Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat64) MapUint64(f Float64Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat64) MapUintptr(f Float64UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat64) MapFloat32(f Float64Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat64) MapFloat64(f Float64Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat64) MapComplex64(f Float64Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat64) MapComplex128(f Float64Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat64) MapString(f Float64StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat64) MapAny(f Float64AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat64) MapBoolArr(f Float64BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat64) MapRuneArr(f Float64RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat64) MapByteArr(f Float64ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat64) MapIntArr(f Float64IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat64) MapInt8Arr(f Float64Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat64) MapInt16Arr(f Float64Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat64) MapInt32Arr(f Float64Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat64) MapInt64Arr(f Float64Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat64) MapUintArr(f Float64UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat64) MapUint8Arr(f Float64Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat64) MapUint16Arr(f Float64Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat64) MapUint32Arr(f Float64Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat64) MapUint64Arr(f Float64Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat64) MapUintptrArr(f Float64UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat64) MapFloat32Arr(f Float64Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat64) MapFloat64Arr(f Float64Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat64) MapComplex64Arr(f Float64Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat64) MapComplex128Arr(f Float64Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat64) MapStringArr(f Float64StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat64) MapAnyArr(f Float64AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex64) MapBool(f Complex64BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex64) MapRune(f Complex64RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex64) MapByte(f Complex64ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex64) MapInt(f Complex64IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex64) MapInt8(f Complex64Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex64) MapInt16(f Complex64Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex64) MapInt32(f Complex64Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex64) MapInt64(f Complex64Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex64) MapUint(f Complex64UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex64) MapUint8(f Complex64Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex64) MapUint16(f Complex64Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex64) MapUint32(f Complex64Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex64) MapUint64(f Complex64Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex64) MapUintptr(f Complex64UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex64) MapFloat32(f Complex64Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex64) MapFloat64(f Complex64Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex64) MapComplex64(f Complex64Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex64) MapComplex128(f Complex64Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex64) MapString(f Complex64StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex64) MapAny(f Complex64AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex64) MapBoolArr(f Complex64BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex64) MapRuneArr(f Complex64RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex64) MapByteArr(f Complex64ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex64) MapIntArr(f Complex64IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex64) MapInt8Arr(f Complex64Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex64) MapInt16Arr(f Complex64Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex64) MapInt32Arr(f Complex64Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex64) MapInt64Arr(f Complex64Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex64) MapUintArr(f Complex64UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex64) MapUint8Arr(f Complex64Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex64) MapUint16Arr(f Complex64Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex64) MapUint32Arr(f Complex64Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex64) MapUint64Arr(f Complex64Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex64) MapUintptrArr(f Complex64UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex64) MapFloat32Arr(f Complex64Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex64) MapFloat64Arr(f Complex64Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex64) MapComplex64Arr(f Complex64Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex64) MapComplex128Arr(f Complex64Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex64) MapStringArr(f Complex64StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex64) MapAnyArr(f Complex64AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex128) MapBool(f Complex128BoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex128) MapRune(f Complex128RuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex128) MapByte(f Complex128ByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex128) MapInt(f Complex128IntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex128) MapInt8(f Complex128Int8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex128) MapInt16(f Complex128Int16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex128) MapInt32(f Complex128Int32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex128) MapInt64(f Complex128Int64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex128) MapUint(f Complex128UintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex128) MapUint8(f Complex128Uint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex128) MapUint16(f Complex128Uint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex128) MapUint32(f Complex128Uint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex128) MapUint64(f Complex128Uint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex128) MapUintptr(f Complex128UintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex128) MapFloat32(f Complex128Float32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex128) MapFloat64(f Complex128Float64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex128) MapComplex64(f Complex128Complex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex128) MapComplex128(f Complex128Complex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex128) MapString(f Complex128StringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex128) MapAny(f Complex128AnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex128) MapBoolArr(f Complex128BoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex128) MapRuneArr(f Complex128RuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex128) MapByteArr(f Complex128ByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex128) MapIntArr(f Complex128IntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex128) MapInt8Arr(f Complex128Int8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex128) MapInt16Arr(f Complex128Int16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex128) MapInt32Arr(f Complex128Int32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex128) MapInt64Arr(f Complex128Int64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex128) MapUintArr(f Complex128UintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex128) MapUint8Arr(f Complex128Uint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex128) MapUint16Arr(f Complex128Uint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex128) MapUint32Arr(f Complex128Uint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex128) MapUint64Arr(f Complex128Uint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex128) MapUintptrArr(f Complex128UintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex128) MapFloat32Arr(f Complex128Float32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex128) MapFloat64Arr(f Complex128Float64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex128) MapComplex64Arr(f Complex128Complex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex128) MapComplex128Arr(f Complex128Complex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex128) MapStringArr(f Complex128StringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex128) MapAnyArr(f Complex128AnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionString) MapBool(f StringBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionString) MapRune(f StringRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionString) MapByte(f StringByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionString) MapInt(f StringIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionString) MapInt8(f StringInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionString) MapInt16(f StringInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionString) MapInt32(f StringInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionString) MapInt64(f StringInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionString) MapUint(f StringUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionString) MapUint8(f StringUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionString) MapUint16(f StringUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionString) MapUint32(f StringUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionString) MapUint64(f StringUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionString) MapUintptr(f StringUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionString) MapFloat32(f StringFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionString) MapFloat64(f StringFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionString) MapComplex64(f StringComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionString) MapComplex128(f StringComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionString) MapString(f StringStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionString) MapAny(f StringAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionString) MapBoolArr(f StringBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionString) MapRuneArr(f StringRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionString) MapByteArr(f StringByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionString) MapIntArr(f StringIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionString) MapInt8Arr(f StringInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionString) MapInt16Arr(f StringInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionString) MapInt32Arr(f StringInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionString) MapInt64Arr(f StringInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionString) MapUintArr(f StringUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionString) MapUint8Arr(f StringUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionString) MapUint16Arr(f StringUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionString) MapUint32Arr(f StringUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionString) MapUint64Arr(f StringUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionString) MapUintptrArr(f StringUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionString) MapFloat32Arr(f StringFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionString) MapFloat64Arr(f StringFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionString) MapComplex64Arr(f StringComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionString) MapComplex128Arr(f StringComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionString) MapStringArr(f StringStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionString) MapAnyArr(f StringAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionAny) MapBool(f AnyBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionAny) MapRune(f AnyRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionAny) MapByte(f AnyByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionAny) MapInt(f AnyIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionAny) MapInt8(f AnyInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionAny) MapInt16(f AnyInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionAny) MapInt32(f AnyInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionAny) MapInt64(f AnyInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionAny) MapUint(f AnyUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionAny) MapUint8(f AnyUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionAny) MapUint16(f AnyUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionAny) MapUint32(f AnyUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionAny) MapUint64(f AnyUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionAny) MapUintptr(f AnyUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionAny) MapFloat32(f AnyFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionAny) MapFloat64(f AnyFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionAny) MapComplex64(f AnyComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionAny) MapComplex128(f AnyComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionAny) MapString(f AnyStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionAny) MapAny(f AnyAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionAny) MapBoolArr(f AnyBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionAny) MapRuneArr(f AnyRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionAny) MapByteArr(f AnyByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionAny) MapIntArr(f AnyIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionAny) MapInt8Arr(f AnyInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionAny) MapInt16Arr(f AnyInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionAny) MapInt32Arr(f AnyInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionAny) MapInt64Arr(f AnyInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionAny) MapUintArr(f AnyUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionAny) MapUint8Arr(f AnyUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionAny) MapUint16Arr(f AnyUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionAny) MapUint32Arr(f AnyUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionAny) MapUint64Arr(f AnyUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionAny) MapUintptrArr(f AnyUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionAny) MapFloat32Arr(f AnyFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionAny) MapFloat64Arr(f AnyFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionAny) MapComplex64Arr(f AnyComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionAny) MapComplex128Arr(f AnyComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionAny) MapStringArr(f AnyStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionAny) MapAnyArr(f AnyAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionBoolArr) MapBool(f BoolArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionBoolArr) MapRune(f BoolArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionBoolArr) MapByte(f BoolArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionBoolArr) MapInt(f BoolArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionBoolArr) MapInt8(f BoolArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionBoolArr) MapInt16(f BoolArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionBoolArr) MapInt32(f BoolArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionBoolArr) MapInt64(f BoolArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionBoolArr) MapUint(f BoolArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionBoolArr) MapUint8(f BoolArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionBoolArr) MapUint16(f BoolArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionBoolArr) MapUint32(f BoolArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionBoolArr) MapUint64(f BoolArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionBoolArr) MapUintptr(f BoolArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionBoolArr) MapFloat32(f BoolArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionBoolArr) MapFloat64(f BoolArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionBoolArr) MapComplex64(f BoolArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionBoolArr) MapComplex128(f BoolArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionBoolArr) MapString(f BoolArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionBoolArr) MapAny(f BoolArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionBoolArr) MapBoolArr(f BoolArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionBoolArr) MapRuneArr(f BoolArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionBoolArr) MapByteArr(f BoolArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionBoolArr) MapIntArr(f BoolArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionBoolArr) MapInt8Arr(f BoolArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionBoolArr) MapInt16Arr(f BoolArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionBoolArr) MapInt32Arr(f BoolArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionBoolArr) MapInt64Arr(f BoolArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionBoolArr) MapUintArr(f BoolArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionBoolArr) MapUint8Arr(f BoolArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionBoolArr) MapUint16Arr(f BoolArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionBoolArr) MapUint32Arr(f BoolArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionBoolArr) MapUint64Arr(f BoolArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionBoolArr) MapUintptrArr(f BoolArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionBoolArr) MapFloat32Arr(f BoolArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionBoolArr) MapFloat64Arr(f BoolArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionBoolArr) MapComplex64Arr(f BoolArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionBoolArr) MapComplex128Arr(f BoolArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionBoolArr) MapStringArr(f BoolArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionBoolArr) MapAnyArr(f BoolArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionRuneArr) MapBool(f RuneArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionRuneArr) MapRune(f RuneArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionRuneArr) MapByte(f RuneArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionRuneArr) MapInt(f RuneArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionRuneArr) MapInt8(f RuneArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionRuneArr) MapInt16(f RuneArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionRuneArr) MapInt32(f RuneArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionRuneArr) MapInt64(f RuneArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionRuneArr) MapUint(f RuneArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionRuneArr) MapUint8(f RuneArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionRuneArr) MapUint16(f RuneArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionRuneArr) MapUint32(f RuneArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionRuneArr) MapUint64(f RuneArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionRuneArr) MapUintptr(f RuneArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionRuneArr) MapFloat32(f RuneArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionRuneArr) MapFloat64(f RuneArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionRuneArr) MapComplex64(f RuneArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionRuneArr) MapComplex128(f RuneArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionRuneArr) MapString(f RuneArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionRuneArr) MapAny(f RuneArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionRuneArr) MapBoolArr(f RuneArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionRuneArr) MapRuneArr(f RuneArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionRuneArr) MapByteArr(f RuneArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionRuneArr) MapIntArr(f RuneArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionRuneArr) MapInt8Arr(f RuneArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionRuneArr) MapInt16Arr(f RuneArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionRuneArr) MapInt32Arr(f RuneArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionRuneArr) MapInt64Arr(f RuneArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionRuneArr) MapUintArr(f RuneArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionRuneArr) MapUint8Arr(f RuneArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionRuneArr) MapUint16Arr(f RuneArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionRuneArr) MapUint32Arr(f RuneArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionRuneArr) MapUint64Arr(f RuneArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionRuneArr) MapUintptrArr(f RuneArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionRuneArr) MapFloat32Arr(f RuneArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionRuneArr) MapFloat64Arr(f RuneArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionRuneArr) MapComplex64Arr(f RuneArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionRuneArr) MapComplex128Arr(f RuneArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionRuneArr) MapStringArr(f RuneArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionRuneArr) MapAnyArr(f RuneArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionByteArr) MapBool(f ByteArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionByteArr) MapRune(f ByteArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionByteArr) MapByte(f ByteArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionByteArr) MapInt(f ByteArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionByteArr) MapInt8(f ByteArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionByteArr) MapInt16(f ByteArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionByteArr) MapInt32(f ByteArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionByteArr) MapInt64(f ByteArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionByteArr) MapUint(f ByteArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionByteArr) MapUint8(f ByteArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionByteArr) MapUint16(f ByteArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionByteArr) MapUint32(f ByteArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionByteArr) MapUint64(f ByteArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionByteArr) MapUintptr(f ByteArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionByteArr) MapFloat32(f ByteArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionByteArr) MapFloat64(f ByteArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionByteArr) MapComplex64(f ByteArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionByteArr) MapComplex128(f ByteArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionByteArr) MapString(f ByteArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionByteArr) MapAny(f ByteArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionByteArr) MapBoolArr(f ByteArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionByteArr) MapRuneArr(f ByteArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionByteArr) MapByteArr(f ByteArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionByteArr) MapIntArr(f ByteArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionByteArr) MapInt8Arr(f ByteArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionByteArr) MapInt16Arr(f ByteArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionByteArr) MapInt32Arr(f ByteArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionByteArr) MapInt64Arr(f ByteArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionByteArr) MapUintArr(f ByteArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionByteArr) MapUint8Arr(f ByteArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionByteArr) MapUint16Arr(f ByteArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionByteArr) MapUint32Arr(f ByteArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionByteArr) MapUint64Arr(f ByteArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionByteArr) MapUintptrArr(f ByteArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionByteArr) MapFloat32Arr(f ByteArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionByteArr) MapFloat64Arr(f ByteArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionByteArr) MapComplex64Arr(f ByteArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionByteArr) MapComplex128Arr(f ByteArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionByteArr) MapStringArr(f ByteArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionByteArr) MapAnyArr(f ByteArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionIntArr) MapBool(f IntArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionIntArr) MapRune(f IntArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionIntArr) MapByte(f IntArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionIntArr) MapInt(f IntArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionIntArr) MapInt8(f IntArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionIntArr) MapInt16(f IntArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionIntArr) MapInt32(f IntArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionIntArr) MapInt64(f IntArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionIntArr) MapUint(f IntArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionIntArr) MapUint8(f IntArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionIntArr) MapUint16(f IntArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionIntArr) MapUint32(f IntArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionIntArr) MapUint64(f IntArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionIntArr) MapUintptr(f IntArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionIntArr) MapFloat32(f IntArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionIntArr) MapFloat64(f IntArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionIntArr) MapComplex64(f IntArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionIntArr) MapComplex128(f IntArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionIntArr) MapString(f IntArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionIntArr) MapAny(f IntArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionIntArr) MapBoolArr(f IntArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionIntArr) MapRuneArr(f IntArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionIntArr) MapByteArr(f IntArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionIntArr) MapIntArr(f IntArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionIntArr) MapInt8Arr(f IntArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionIntArr) MapInt16Arr(f IntArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionIntArr) MapInt32Arr(f IntArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionIntArr) MapInt64Arr(f IntArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionIntArr) MapUintArr(f IntArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionIntArr) MapUint8Arr(f IntArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionIntArr) MapUint16Arr(f IntArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionIntArr) MapUint32Arr(f IntArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionIntArr) MapUint64Arr(f IntArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionIntArr) MapUintptrArr(f IntArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionIntArr) MapFloat32Arr(f IntArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionIntArr) MapFloat64Arr(f IntArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionIntArr) MapComplex64Arr(f IntArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionIntArr) MapComplex128Arr(f IntArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionIntArr) MapStringArr(f IntArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionIntArr) MapAnyArr(f IntArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt8Arr) MapBool(f Int8ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt8Arr) MapRune(f Int8ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt8Arr) MapByte(f Int8ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt8Arr) MapInt(f Int8ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt8Arr) MapInt8(f Int8ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt8Arr) MapInt16(f Int8ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt8Arr) MapInt32(f Int8ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt8Arr) MapInt64(f Int8ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt8Arr) MapUint(f Int8ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt8Arr) MapUint8(f Int8ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt8Arr) MapUint16(f Int8ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt8Arr) MapUint32(f Int8ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt8Arr) MapUint64(f Int8ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt8Arr) MapUintptr(f Int8ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt8Arr) MapFloat32(f Int8ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt8Arr) MapFloat64(f Int8ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt8Arr) MapComplex64(f Int8ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt8Arr) MapComplex128(f Int8ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt8Arr) MapString(f Int8ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt8Arr) MapAny(f Int8ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt8Arr) MapBoolArr(f Int8ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt8Arr) MapRuneArr(f Int8ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt8Arr) MapByteArr(f Int8ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt8Arr) MapIntArr(f Int8ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt8Arr) MapInt8Arr(f Int8ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt8Arr) MapInt16Arr(f Int8ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt8Arr) MapInt32Arr(f Int8ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt8Arr) MapInt64Arr(f Int8ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt8Arr) MapUintArr(f Int8ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt8Arr) MapUint8Arr(f Int8ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt8Arr) MapUint16Arr(f Int8ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt8Arr) MapUint32Arr(f Int8ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt8Arr) MapUint64Arr(f Int8ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt8Arr) MapUintptrArr(f Int8ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt8Arr) MapFloat32Arr(f Int8ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt8Arr) MapFloat64Arr(f Int8ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt8Arr) MapComplex64Arr(f Int8ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt8Arr) MapComplex128Arr(f Int8ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt8Arr) MapStringArr(f Int8ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt8Arr) MapAnyArr(f Int8ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt16Arr) MapBool(f Int16ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt16Arr) MapRune(f Int16ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt16Arr) MapByte(f Int16ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt16Arr) MapInt(f Int16ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt16Arr) MapInt8(f Int16ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt16Arr) MapInt16(f Int16ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt16Arr) MapInt32(f Int16ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt16Arr) MapInt64(f Int16ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt16Arr) MapUint(f Int16ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt16Arr) MapUint8(f Int16ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt16Arr) MapUint16(f Int16ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt16Arr) MapUint32(f Int16ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt16Arr) MapUint64(f Int16ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt16Arr) MapUintptr(f Int16ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt16Arr) MapFloat32(f Int16ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt16Arr) MapFloat64(f Int16ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt16Arr) MapComplex64(f Int16ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt16Arr) MapComplex128(f Int16ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt16Arr) MapString(f Int16ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt16Arr) MapAny(f Int16ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt16Arr) MapBoolArr(f Int16ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt16Arr) MapRuneArr(f Int16ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt16Arr) MapByteArr(f Int16ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt16Arr) MapIntArr(f Int16ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt16Arr) MapInt8Arr(f Int16ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt16Arr) MapInt16Arr(f Int16ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt16Arr) MapInt32Arr(f Int16ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt16Arr) MapInt64Arr(f Int16ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt16Arr) MapUintArr(f Int16ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt16Arr) MapUint8Arr(f Int16ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt16Arr) MapUint16Arr(f Int16ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt16Arr) MapUint32Arr(f Int16ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt16Arr) MapUint64Arr(f Int16ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt16Arr) MapUintptrArr(f Int16ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt16Arr) MapFloat32Arr(f Int16ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt16Arr) MapFloat64Arr(f Int16ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt16Arr) MapComplex64Arr(f Int16ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt16Arr) MapComplex128Arr(f Int16ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt16Arr) MapStringArr(f Int16ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt16Arr) MapAnyArr(f Int16ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt32Arr) MapBool(f Int32ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt32Arr) MapRune(f Int32ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt32Arr) MapByte(f Int32ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt32Arr) MapInt(f Int32ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt32Arr) MapInt8(f Int32ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt32Arr) MapInt16(f Int32ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt32Arr) MapInt32(f Int32ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt32Arr) MapInt64(f Int32ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt32Arr) MapUint(f Int32ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt32Arr) MapUint8(f Int32ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt32Arr) MapUint16(f Int32ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt32Arr) MapUint32(f Int32ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt32Arr) MapUint64(f Int32ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt32Arr) MapUintptr(f Int32ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt32Arr) MapFloat32(f Int32ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt32Arr) MapFloat64(f Int32ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt32Arr) MapComplex64(f Int32ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt32Arr) MapComplex128(f Int32ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt32Arr) MapString(f Int32ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt32Arr) MapAny(f Int32ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt32Arr) MapBoolArr(f Int32ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt32Arr) MapRuneArr(f Int32ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt32Arr) MapByteArr(f Int32ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt32Arr) MapIntArr(f Int32ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt32Arr) MapInt8Arr(f Int32ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt32Arr) MapInt16Arr(f Int32ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt32Arr) MapInt32Arr(f Int32ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt32Arr) MapInt64Arr(f Int32ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt32Arr) MapUintArr(f Int32ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt32Arr) MapUint8Arr(f Int32ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt32Arr) MapUint16Arr(f Int32ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt32Arr) MapUint32Arr(f Int32ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt32Arr) MapUint64Arr(f Int32ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt32Arr) MapUintptrArr(f Int32ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt32Arr) MapFloat32Arr(f Int32ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt32Arr) MapFloat64Arr(f Int32ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt32Arr) MapComplex64Arr(f Int32ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt32Arr) MapComplex128Arr(f Int32ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt32Arr) MapStringArr(f Int32ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt32Arr) MapAnyArr(f Int32ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt64Arr) MapBool(f Int64ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt64Arr) MapRune(f Int64ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt64Arr) MapByte(f Int64ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt64Arr) MapInt(f Int64ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt64Arr) MapInt8(f Int64ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt64Arr) MapInt16(f Int64ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt64Arr) MapInt32(f Int64ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt64Arr) MapInt64(f Int64ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt64Arr) MapUint(f Int64ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt64Arr) MapUint8(f Int64ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt64Arr) MapUint16(f Int64ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt64Arr) MapUint32(f Int64ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt64Arr) MapUint64(f Int64ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt64Arr) MapUintptr(f Int64ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt64Arr) MapFloat32(f Int64ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt64Arr) MapFloat64(f Int64ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt64Arr) MapComplex64(f Int64ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt64Arr) MapComplex128(f Int64ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt64Arr) MapString(f Int64ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt64Arr) MapAny(f Int64ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt64Arr) MapBoolArr(f Int64ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt64Arr) MapRuneArr(f Int64ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt64Arr) MapByteArr(f Int64ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt64Arr) MapIntArr(f Int64ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt64Arr) MapInt8Arr(f Int64ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt64Arr) MapInt16Arr(f Int64ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt64Arr) MapInt32Arr(f Int64ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt64Arr) MapInt64Arr(f Int64ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt64Arr) MapUintArr(f Int64ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt64Arr) MapUint8Arr(f Int64ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt64Arr) MapUint16Arr(f Int64ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt64Arr) MapUint32Arr(f Int64ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt64Arr) MapUint64Arr(f Int64ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt64Arr) MapUintptrArr(f Int64ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt64Arr) MapFloat32Arr(f Int64ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt64Arr) MapFloat64Arr(f Int64ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt64Arr) MapComplex64Arr(f Int64ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt64Arr) MapComplex128Arr(f Int64ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt64Arr) MapStringArr(f Int64ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt64Arr) MapAnyArr(f Int64ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUintArr) MapBool(f UintArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUintArr) MapRune(f UintArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUintArr) MapByte(f UintArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUintArr) MapInt(f UintArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUintArr) MapInt8(f UintArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUintArr) MapInt16(f UintArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUintArr) MapInt32(f UintArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUintArr) MapInt64(f UintArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUintArr) MapUint(f UintArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUintArr) MapUint8(f UintArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUintArr) MapUint16(f UintArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUintArr) MapUint32(f UintArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUintArr) MapUint64(f UintArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUintArr) MapUintptr(f UintArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUintArr) MapFloat32(f UintArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUintArr) MapFloat64(f UintArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUintArr) MapComplex64(f UintArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUintArr) MapComplex128(f UintArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUintArr) MapString(f UintArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUintArr) MapAny(f UintArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUintArr) MapBoolArr(f UintArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUintArr) MapRuneArr(f UintArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUintArr) MapByteArr(f UintArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUintArr) MapIntArr(f UintArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUintArr) MapInt8Arr(f UintArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUintArr) MapInt16Arr(f UintArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUintArr) MapInt32Arr(f UintArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUintArr) MapInt64Arr(f UintArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUintArr) MapUintArr(f UintArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUintArr) MapUint8Arr(f UintArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUintArr) MapUint16Arr(f UintArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUintArr) MapUint32Arr(f UintArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUintArr) MapUint64Arr(f UintArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUintArr) MapUintptrArr(f UintArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUintArr) MapFloat32Arr(f UintArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUintArr) MapFloat64Arr(f UintArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUintArr) MapComplex64Arr(f UintArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUintArr) MapComplex128Arr(f UintArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUintArr) MapStringArr(f UintArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUintArr) MapAnyArr(f UintArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint8Arr) MapBool(f Uint8ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint8Arr) MapRune(f Uint8ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint8Arr) MapByte(f Uint8ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint8Arr) MapInt(f Uint8ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint8Arr) MapInt8(f Uint8ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint8Arr) MapInt16(f Uint8ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint8Arr) MapInt32(f Uint8ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint8Arr) MapInt64(f Uint8ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint8Arr) MapUint(f Uint8ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint8Arr) MapUint8(f Uint8ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint8Arr) MapUint16(f Uint8ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint8Arr) MapUint32(f Uint8ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint8Arr) MapUint64(f Uint8ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint8Arr) MapUintptr(f Uint8ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint8Arr) MapFloat32(f Uint8ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint8Arr) MapFloat64(f Uint8ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint8Arr) MapComplex64(f Uint8ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint8Arr) MapComplex128(f Uint8ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint8Arr) MapString(f Uint8ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint8Arr) MapAny(f Uint8ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint8Arr) MapBoolArr(f Uint8ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint8Arr) MapRuneArr(f Uint8ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint8Arr) MapByteArr(f Uint8ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint8Arr) MapIntArr(f Uint8ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint8Arr) MapInt8Arr(f Uint8ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint8Arr) MapInt16Arr(f Uint8ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint8Arr) MapInt32Arr(f Uint8ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint8Arr) MapInt64Arr(f Uint8ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint8Arr) MapUintArr(f Uint8ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint8Arr) MapUint8Arr(f Uint8ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint8Arr) MapUint16Arr(f Uint8ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint8Arr) MapUint32Arr(f Uint8ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint8Arr) MapUint64Arr(f Uint8ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint8Arr) MapUintptrArr(f Uint8ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint8Arr) MapFloat32Arr(f Uint8ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint8Arr) MapFloat64Arr(f Uint8ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint8Arr) MapComplex64Arr(f Uint8ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint8Arr) MapComplex128Arr(f Uint8ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint8Arr) MapStringArr(f Uint8ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint8Arr) MapAnyArr(f Uint8ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint16Arr) MapBool(f Uint16ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint16Arr) MapRune(f Uint16ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint16Arr) MapByte(f Uint16ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint16Arr) MapInt(f Uint16ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint16Arr) MapInt8(f Uint16ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint16Arr) MapInt16(f Uint16ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint16Arr) MapInt32(f Uint16ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint16Arr) MapInt64(f Uint16ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint16Arr) MapUint(f Uint16ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint16Arr) MapUint8(f Uint16ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint16Arr) MapUint16(f Uint16ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint16Arr) MapUint32(f Uint16ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint16Arr) MapUint64(f Uint16ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint16Arr) MapUintptr(f Uint16ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint16Arr) MapFloat32(f Uint16ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint16Arr) MapFloat64(f Uint16ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint16Arr) MapComplex64(f Uint16ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint16Arr) MapComplex128(f Uint16ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint16Arr) MapString(f Uint16ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint16Arr) MapAny(f Uint16ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint16Arr) MapBoolArr(f Uint16ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint16Arr) MapRuneArr(f Uint16ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint16Arr) MapByteArr(f Uint16ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint16Arr) MapIntArr(f Uint16ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint16Arr) MapInt8Arr(f Uint16ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint16Arr) MapInt16Arr(f Uint16ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint16Arr) MapInt32Arr(f Uint16ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint16Arr) MapInt64Arr(f Uint16ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint16Arr) MapUintArr(f Uint16ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint16Arr) MapUint8Arr(f Uint16ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint16Arr) MapUint16Arr(f Uint16ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint16Arr) MapUint32Arr(f Uint16ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint16Arr) MapUint64Arr(f Uint16ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint16Arr) MapUintptrArr(f Uint16ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint16Arr) MapFloat32Arr(f Uint16ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint16Arr) MapFloat64Arr(f Uint16ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint16Arr) MapComplex64Arr(f Uint16ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint16Arr) MapComplex128Arr(f Uint16ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint16Arr) MapStringArr(f Uint16ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint16Arr) MapAnyArr(f Uint16ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint32Arr) MapBool(f Uint32ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint32Arr) MapRune(f Uint32ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint32Arr) MapByte(f Uint32ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint32Arr) MapInt(f Uint32ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint32Arr) MapInt8(f Uint32ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint32Arr) MapInt16(f Uint32ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint32Arr) MapInt32(f Uint32ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint32Arr) MapInt64(f Uint32ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint32Arr) MapUint(f Uint32ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint32Arr) MapUint8(f Uint32ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint32Arr) MapUint16(f Uint32ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint32Arr) MapUint32(f Uint32ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint32Arr) MapUint64(f Uint32ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint32Arr) MapUintptr(f Uint32ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint32Arr) MapFloat32(f Uint32ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint32Arr) MapFloat64(f Uint32ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint32Arr) MapComplex64(f Uint32ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint32Arr) MapComplex128(f Uint32ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint32Arr) MapString(f Uint32ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint32Arr) MapAny(f Uint32ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint32Arr) MapBoolArr(f Uint32ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint32Arr) MapRuneArr(f Uint32ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint32Arr) MapByteArr(f Uint32ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint32Arr) MapIntArr(f Uint32ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint32Arr) MapInt8Arr(f Uint32ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint32Arr) MapInt16Arr(f Uint32ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint32Arr) MapInt32Arr(f Uint32ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint32Arr) MapInt64Arr(f Uint32ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint32Arr) MapUintArr(f Uint32ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint32Arr) MapUint8Arr(f Uint32ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint32Arr) MapUint16Arr(f Uint32ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint32Arr) MapUint32Arr(f Uint32ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint32Arr) MapUint64Arr(f Uint32ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint32Arr) MapUintptrArr(f Uint32ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint32Arr) MapFloat32Arr(f Uint32ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint32Arr) MapFloat64Arr(f Uint32ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint32Arr) MapComplex64Arr(f Uint32ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint32Arr) MapComplex128Arr(f Uint32ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint32Arr) MapStringArr(f Uint32ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint32Arr) MapAnyArr(f Uint32ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint64Arr) MapBool(f Uint64ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint64Arr) MapRune(f Uint64ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint64Arr) MapByte(f Uint64ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint64Arr) MapInt(f Uint64ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint64Arr) MapInt8(f Uint64ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint64Arr) MapInt16(f Uint64ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint64Arr) MapInt32(f Uint64ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint64Arr) MapInt64(f Uint64ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint64Arr) MapUint(f Uint64ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint64Arr) MapUint8(f Uint64ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint64Arr) MapUint16(f Uint64ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint64Arr) MapUint32(f Uint64ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint64Arr) MapUint64(f Uint64ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint64Arr) MapUintptr(f Uint64ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint64Arr) MapFloat32(f Uint64ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint64Arr) MapFloat64(f Uint64ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint64Arr) MapComplex64(f Uint64ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint64Arr) MapComplex128(f Uint64ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint64Arr) MapString(f Uint64ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint64Arr) MapAny(f Uint64ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint64Arr) MapBoolArr(f Uint64ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint64Arr) MapRuneArr(f Uint64ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint64Arr) MapByteArr(f Uint64ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint64Arr) MapIntArr(f Uint64ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint64Arr) MapInt8Arr(f Uint64ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint64Arr) MapInt16Arr(f Uint64ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint64Arr) MapInt32Arr(f Uint64ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint64Arr) MapInt64Arr(f Uint64ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint64Arr) MapUintArr(f Uint64ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint64Arr) MapUint8Arr(f Uint64ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint64Arr) MapUint16Arr(f Uint64ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint64Arr) MapUint32Arr(f Uint64ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint64Arr) MapUint64Arr(f Uint64ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint64Arr) MapUintptrArr(f Uint64ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint64Arr) MapFloat32Arr(f Uint64ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint64Arr) MapFloat64Arr(f Uint64ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint64Arr) MapComplex64Arr(f Uint64ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint64Arr) MapComplex128Arr(f Uint64ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint64Arr) MapStringArr(f Uint64ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint64Arr) MapAnyArr(f Uint64ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUintptrArr) MapBool(f UintptrArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUintptrArr) MapRune(f UintptrArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUintptrArr) MapByte(f UintptrArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUintptrArr) MapInt(f UintptrArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUintptrArr) MapInt8(f UintptrArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUintptrArr) MapInt16(f UintptrArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUintptrArr) MapInt32(f UintptrArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUintptrArr) MapInt64(f UintptrArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUintptrArr) MapUint(f UintptrArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUintptrArr) MapUint8(f UintptrArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUintptrArr) MapUint16(f UintptrArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUintptrArr) MapUint32(f UintptrArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUintptrArr) MapUint64(f UintptrArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUintptrArr) MapUintptr(f UintptrArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUintptrArr) MapFloat32(f UintptrArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUintptrArr) MapFloat64(f UintptrArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUintptrArr) MapComplex64(f UintptrArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUintptrArr) MapComplex128(f UintptrArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUintptrArr) MapString(f UintptrArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUintptrArr) MapAny(f UintptrArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUintptrArr) MapBoolArr(f UintptrArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUintptrArr) MapRuneArr(f UintptrArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUintptrArr) MapByteArr(f UintptrArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUintptrArr) MapIntArr(f UintptrArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUintptrArr) MapInt8Arr(f UintptrArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUintptrArr) MapInt16Arr(f UintptrArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUintptrArr) MapInt32Arr(f UintptrArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUintptrArr) MapInt64Arr(f UintptrArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUintptrArr) MapUintArr(f UintptrArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUintptrArr) MapUint8Arr(f UintptrArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUintptrArr) MapUint16Arr(f UintptrArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUintptrArr) MapUint32Arr(f UintptrArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUintptrArr) MapUint64Arr(f UintptrArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUintptrArr) MapUintptrArr(f UintptrArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUintptrArr) MapFloat32Arr(f UintptrArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUintptrArr) MapFloat64Arr(f UintptrArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUintptrArr) MapComplex64Arr(f UintptrArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUintptrArr) MapComplex128Arr(f UintptrArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUintptrArr) MapStringArr(f UintptrArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUintptrArr) MapAnyArr(f UintptrArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat32Arr) MapBool(f Float32ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat32Arr) MapRune(f Float32ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat32Arr) MapByte(f Float32ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat32Arr) MapInt(f Float32ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat32Arr) MapInt8(f Float32ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat32Arr) MapInt16(f Float32ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat32Arr) MapInt32(f Float32ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat32Arr) MapInt64(f Float32ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat32Arr) MapUint(f Float32ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat32Arr) MapUint8(f Float32ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat32Arr) MapUint16(f Float32ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat32Arr) MapUint32(f Float32ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat32Arr) MapUint64(f Float32ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat32Arr) MapUintptr(f Float32ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat32Arr) MapFloat32(f Float32ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat32Arr) MapFloat64(f Float32ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat32Arr) MapComplex64(f Float32ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat32Arr) MapComplex128(f Float32ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat32Arr) MapString(f Float32ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat32Arr) MapAny(f Float32ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat32Arr) MapBoolArr(f Float32ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat32Arr) MapRuneArr(f Float32ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat32Arr) MapByteArr(f Float32ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat32Arr) MapIntArr(f Float32ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat32Arr) MapInt8Arr(f Float32ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat32Arr) MapInt16Arr(f Float32ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat32Arr) MapInt32Arr(f Float32ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat32Arr) MapInt64Arr(f Float32ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat32Arr) MapUintArr(f Float32ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat32Arr) MapUint8Arr(f Float32ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat32Arr) MapUint16Arr(f Float32ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat32Arr) MapUint32Arr(f Float32ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat32Arr) MapUint64Arr(f Float32ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat32Arr) MapUintptrArr(f Float32ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat32Arr) MapFloat32Arr(f Float32ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat32Arr) MapFloat64Arr(f Float32ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat32Arr) MapComplex64Arr(f Float32ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat32Arr) MapComplex128Arr(f Float32ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat32Arr) MapStringArr(f Float32ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat32Arr) MapAnyArr(f Float32ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat64Arr) MapBool(f Float64ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat64Arr) MapRune(f Float64ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat64Arr) MapByte(f Float64ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat64Arr) MapInt(f Float64ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat64Arr) MapInt8(f Float64ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat64Arr) MapInt16(f Float64ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat64Arr) MapInt32(f Float64ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat64Arr) MapInt64(f Float64ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat64Arr) MapUint(f Float64ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat64Arr) MapUint8(f Float64ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat64Arr) MapUint16(f Float64ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat64Arr) MapUint32(f Float64ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat64Arr) MapUint64(f Float64ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat64Arr) MapUintptr(f Float64ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat64Arr) MapFloat32(f Float64ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat64Arr) MapFloat64(f Float64ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat64Arr) MapComplex64(f Float64ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat64Arr) MapComplex128(f Float64ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat64Arr) MapString(f Float64ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat64Arr) MapAny(f Float64ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat64Arr) MapBoolArr(f Float64ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat64Arr) MapRuneArr(f Float64ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat64Arr) MapByteArr(f Float64ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat64Arr) MapIntArr(f Float64ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat64Arr) MapInt8Arr(f Float64ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat64Arr) MapInt16Arr(f Float64ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat64Arr) MapInt32Arr(f Float64ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat64Arr) MapInt64Arr(f Float64ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat64Arr) MapUintArr(f Float64ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat64Arr) MapUint8Arr(f Float64ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat64Arr) MapUint16Arr(f Float64ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat64Arr) MapUint32Arr(f Float64ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat64Arr) MapUint64Arr(f Float64ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat64Arr) MapUintptrArr(f Float64ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat64Arr) MapFloat32Arr(f Float64ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat64Arr) MapFloat64Arr(f Float64ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat64Arr) MapComplex64Arr(f Float64ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat64Arr) MapComplex128Arr(f Float64ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat64Arr) MapStringArr(f Float64ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat64Arr) MapAnyArr(f Float64ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex64Arr) MapBool(f Complex64ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex64Arr) MapRune(f Complex64ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex64Arr) MapByte(f Complex64ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex64Arr) MapInt(f Complex64ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex64Arr) MapInt8(f Complex64ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex64Arr) MapInt16(f Complex64ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex64Arr) MapInt32(f Complex64ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex64Arr) MapInt64(f Complex64ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex64Arr) MapUint(f Complex64ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex64Arr) MapUint8(f Complex64ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex64Arr) MapUint16(f Complex64ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex64Arr) MapUint32(f Complex64ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex64Arr) MapUint64(f Complex64ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex64Arr) MapUintptr(f Complex64ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex64Arr) MapFloat32(f Complex64ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex64Arr) MapFloat64(f Complex64ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex64Arr) MapComplex64(f Complex64ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex64Arr) MapComplex128(f Complex64ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex64Arr) MapString(f Complex64ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex64Arr) MapAny(f Complex64ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex64Arr) MapBoolArr(f Complex64ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex64Arr) MapRuneArr(f Complex64ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex64Arr) MapByteArr(f Complex64ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex64Arr) MapIntArr(f Complex64ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex64Arr) MapInt8Arr(f Complex64ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex64Arr) MapInt16Arr(f Complex64ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex64Arr) MapInt32Arr(f Complex64ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex64Arr) MapInt64Arr(f Complex64ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex64Arr) MapUintArr(f Complex64ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex64Arr) MapUint8Arr(f Complex64ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex64Arr) MapUint16Arr(f Complex64ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex64Arr) MapUint32Arr(f Complex64ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex64Arr) MapUint64Arr(f Complex64ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex64Arr) MapUintptrArr(f Complex64ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex64Arr) MapFloat32Arr(f Complex64ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex64Arr) MapFloat64Arr(f Complex64ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex64Arr) MapComplex64Arr(f Complex64ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex64Arr) MapComplex128Arr(f Complex64ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex64Arr) MapStringArr(f Complex64ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex64Arr) MapAnyArr(f Complex64ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex128Arr) MapBool(f Complex128ArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex128Arr) MapRune(f Complex128ArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex128Arr) MapByte(f Complex128ArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex128Arr) MapInt(f Complex128ArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex128Arr) MapInt8(f Complex128ArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex128Arr) MapInt16(f Complex128ArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex128Arr) MapInt32(f Complex128ArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex128Arr) MapInt64(f Complex128ArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex128Arr) MapUint(f Complex128ArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex128Arr) MapUint8(f Complex128ArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex128Arr) MapUint16(f Complex128ArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex128Arr) MapUint32(f Complex128ArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex128Arr) MapUint64(f Complex128ArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex128Arr) MapUintptr(f Complex128ArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex128Arr) MapFloat32(f Complex128ArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex128Arr) MapFloat64(f Complex128ArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex128Arr) MapComplex64(f Complex128ArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex128Arr) MapComplex128(f Complex128ArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex128Arr) MapString(f Complex128ArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex128Arr) MapAny(f Complex128ArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex128Arr) MapBoolArr(f Complex128ArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex128Arr) MapRuneArr(f Complex128ArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex128Arr) MapByteArr(f Complex128ArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex128Arr) MapIntArr(f Complex128ArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex128Arr) MapInt8Arr(f Complex128ArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex128Arr) MapInt16Arr(f Complex128ArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex128Arr) MapInt32Arr(f Complex128ArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex128Arr) MapInt64Arr(f Complex128ArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex128Arr) MapUintArr(f Complex128ArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex128Arr) MapUint8Arr(f Complex128ArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex128Arr) MapUint16Arr(f Complex128ArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex128Arr) MapUint32Arr(f Complex128ArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex128Arr) MapUint64Arr(f Complex128ArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex128Arr) MapUintptrArr(f Complex128ArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex128Arr) MapFloat32Arr(f Complex128ArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex128Arr) MapFloat64Arr(f Complex128ArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex128Arr) MapComplex64Arr(f Complex128ArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex128Arr) MapComplex128Arr(f Complex128ArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex128Arr) MapStringArr(f Complex128ArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex128Arr) MapAnyArr(f Complex128ArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionStringArr) MapBool(f StringArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionStringArr) MapRune(f StringArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionStringArr) MapByte(f StringArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionStringArr) MapInt(f StringArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionStringArr) MapInt8(f StringArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionStringArr) MapInt16(f StringArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionStringArr) MapInt32(f StringArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionStringArr) MapInt64(f StringArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionStringArr) MapUint(f StringArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionStringArr) MapUint8(f StringArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionStringArr) MapUint16(f StringArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionStringArr) MapUint32(f StringArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionStringArr) MapUint64(f StringArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionStringArr) MapUintptr(f StringArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionStringArr) MapFloat32(f StringArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionStringArr) MapFloat64(f StringArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionStringArr) MapComplex64(f StringArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionStringArr) MapComplex128(f StringArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionStringArr) MapString(f StringArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionStringArr) MapAny(f StringArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionStringArr) MapBoolArr(f StringArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionStringArr) MapRuneArr(f StringArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionStringArr) MapByteArr(f StringArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionStringArr) MapIntArr(f StringArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionStringArr) MapInt8Arr(f StringArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionStringArr) MapInt16Arr(f StringArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionStringArr) MapInt32Arr(f StringArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionStringArr) MapInt64Arr(f StringArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionStringArr) MapUintArr(f StringArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionStringArr) MapUint8Arr(f StringArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionStringArr) MapUint16Arr(f StringArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionStringArr) MapUint32Arr(f StringArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionStringArr) MapUint64Arr(f StringArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionStringArr) MapUintptrArr(f StringArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionStringArr) MapFloat32Arr(f StringArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionStringArr) MapFloat64Arr(f StringArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionStringArr) MapComplex64Arr(f StringArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionStringArr) MapComplex128Arr(f StringArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionStringArr) MapStringArr(f StringArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionStringArr) MapAnyArr(f StringArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionAnyArr) MapBool(f AnyArrBoolTransformer) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionAnyArr) MapRune(f AnyArrRuneTransformer) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionAnyArr) MapByte(f AnyArrByteTransformer) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionAnyArr) MapInt(f AnyArrIntTransformer) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionAnyArr) MapInt8(f AnyArrInt8Transformer) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionAnyArr) MapInt16(f AnyArrInt16Transformer) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionAnyArr) MapInt32(f AnyArrInt32Transformer) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionAnyArr) MapInt64(f AnyArrInt64Transformer) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionAnyArr) MapUint(f AnyArrUintTransformer) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionAnyArr) MapUint8(f AnyArrUint8Transformer) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionAnyArr) MapUint16(f AnyArrUint16Transformer) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionAnyArr) MapUint32(f AnyArrUint32Transformer) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionAnyArr) MapUint64(f AnyArrUint64Transformer) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionAnyArr) MapUintptr(f AnyArrUintptrTransformer) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionAnyArr) MapFloat32(f AnyArrFloat32Transformer) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionAnyArr) MapFloat64(f AnyArrFloat64Transformer) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionAnyArr) MapComplex64(f AnyArrComplex64Transformer) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionAnyArr) MapComplex128(f AnyArrComplex128Transformer) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionAnyArr) MapString(f AnyArrStringTransformer) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionAnyArr) MapAny(f AnyArrAnyTransformer) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionAnyArr) MapBoolArr(f AnyArrBoolArrTransformer) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionAnyArr) MapRuneArr(f AnyArrRuneArrTransformer) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionAnyArr) MapByteArr(f AnyArrByteArrTransformer) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionAnyArr) MapIntArr(f AnyArrIntArrTransformer) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionAnyArr) MapInt8Arr(f AnyArrInt8ArrTransformer) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionAnyArr) MapInt16Arr(f AnyArrInt16ArrTransformer) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionAnyArr) MapInt32Arr(f AnyArrInt32ArrTransformer) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionAnyArr) MapInt64Arr(f AnyArrInt64ArrTransformer) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionAnyArr) MapUintArr(f AnyArrUintArrTransformer) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionAnyArr) MapUint8Arr(f AnyArrUint8ArrTransformer) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionAnyArr) MapUint16Arr(f AnyArrUint16ArrTransformer) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionAnyArr) MapUint32Arr(f AnyArrUint32ArrTransformer) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionAnyArr) MapUint64Arr(f AnyArrUint64ArrTransformer) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionAnyArr) MapUintptrArr(f AnyArrUintptrArrTransformer) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionAnyArr) MapFloat32Arr(f AnyArrFloat32ArrTransformer) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionAnyArr) MapFloat64Arr(f AnyArrFloat64ArrTransformer) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionAnyArr) MapComplex64Arr(f AnyArrComplex64ArrTransformer) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionAnyArr) MapComplex128Arr(f AnyArrComplex128ArrTransformer) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionAnyArr) MapStringArr(f AnyArrStringArrTransformer) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionAnyArr) MapAnyArr(f AnyArrAnyArrTransformer) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
