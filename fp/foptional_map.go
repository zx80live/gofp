// foptional_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (o OptionBool) MapBool(f FunctorBoolBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionBool) MapRune(f FunctorBoolRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionBool) MapByte(f FunctorBoolByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionBool) MapInt(f FunctorBoolInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionBool) MapInt8(f FunctorBoolInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionBool) MapInt16(f FunctorBoolInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionBool) MapInt32(f FunctorBoolInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionBool) MapInt64(f FunctorBoolInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionBool) MapUint(f FunctorBoolUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionBool) MapUint8(f FunctorBoolUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionBool) MapUint16(f FunctorBoolUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionBool) MapUint32(f FunctorBoolUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionBool) MapUint64(f FunctorBoolUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionBool) MapUintptr(f FunctorBoolUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionBool) MapFloat32(f FunctorBoolFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionBool) MapFloat64(f FunctorBoolFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionBool) MapComplex64(f FunctorBoolComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionBool) MapComplex128(f FunctorBoolComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionBool) MapString(f FunctorBoolString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionBool) MapAny(f FunctorBoolAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionBool) MapBoolArr(f FunctorBoolBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionBool) MapRuneArr(f FunctorBoolRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionBool) MapByteArr(f FunctorBoolByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionBool) MapIntArr(f FunctorBoolIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionBool) MapInt8Arr(f FunctorBoolInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionBool) MapInt16Arr(f FunctorBoolInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionBool) MapInt32Arr(f FunctorBoolInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionBool) MapInt64Arr(f FunctorBoolInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionBool) MapUintArr(f FunctorBoolUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionBool) MapUint8Arr(f FunctorBoolUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionBool) MapUint16Arr(f FunctorBoolUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionBool) MapUint32Arr(f FunctorBoolUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionBool) MapUint64Arr(f FunctorBoolUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionBool) MapUintptrArr(f FunctorBoolUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionBool) MapFloat32Arr(f FunctorBoolFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionBool) MapFloat64Arr(f FunctorBoolFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionBool) MapComplex64Arr(f FunctorBoolComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionBool) MapComplex128Arr(f FunctorBoolComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionBool) MapStringArr(f FunctorBoolStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionBool) MapAnyArr(f FunctorBoolAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionRune) MapBool(f FunctorRuneBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionRune) MapRune(f FunctorRuneRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionRune) MapByte(f FunctorRuneByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionRune) MapInt(f FunctorRuneInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionRune) MapInt8(f FunctorRuneInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionRune) MapInt16(f FunctorRuneInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionRune) MapInt32(f FunctorRuneInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionRune) MapInt64(f FunctorRuneInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionRune) MapUint(f FunctorRuneUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionRune) MapUint8(f FunctorRuneUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionRune) MapUint16(f FunctorRuneUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionRune) MapUint32(f FunctorRuneUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionRune) MapUint64(f FunctorRuneUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionRune) MapUintptr(f FunctorRuneUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionRune) MapFloat32(f FunctorRuneFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionRune) MapFloat64(f FunctorRuneFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionRune) MapComplex64(f FunctorRuneComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionRune) MapComplex128(f FunctorRuneComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionRune) MapString(f FunctorRuneString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionRune) MapAny(f FunctorRuneAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionRune) MapBoolArr(f FunctorRuneBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionRune) MapRuneArr(f FunctorRuneRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionRune) MapByteArr(f FunctorRuneByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionRune) MapIntArr(f FunctorRuneIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionRune) MapInt8Arr(f FunctorRuneInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionRune) MapInt16Arr(f FunctorRuneInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionRune) MapInt32Arr(f FunctorRuneInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionRune) MapInt64Arr(f FunctorRuneInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionRune) MapUintArr(f FunctorRuneUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionRune) MapUint8Arr(f FunctorRuneUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionRune) MapUint16Arr(f FunctorRuneUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionRune) MapUint32Arr(f FunctorRuneUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionRune) MapUint64Arr(f FunctorRuneUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionRune) MapUintptrArr(f FunctorRuneUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionRune) MapFloat32Arr(f FunctorRuneFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionRune) MapFloat64Arr(f FunctorRuneFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionRune) MapComplex64Arr(f FunctorRuneComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionRune) MapComplex128Arr(f FunctorRuneComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionRune) MapStringArr(f FunctorRuneStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionRune) MapAnyArr(f FunctorRuneAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionByte) MapBool(f FunctorByteBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionByte) MapRune(f FunctorByteRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionByte) MapByte(f FunctorByteByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionByte) MapInt(f FunctorByteInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionByte) MapInt8(f FunctorByteInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionByte) MapInt16(f FunctorByteInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionByte) MapInt32(f FunctorByteInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionByte) MapInt64(f FunctorByteInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionByte) MapUint(f FunctorByteUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionByte) MapUint8(f FunctorByteUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionByte) MapUint16(f FunctorByteUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionByte) MapUint32(f FunctorByteUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionByte) MapUint64(f FunctorByteUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionByte) MapUintptr(f FunctorByteUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionByte) MapFloat32(f FunctorByteFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionByte) MapFloat64(f FunctorByteFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionByte) MapComplex64(f FunctorByteComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionByte) MapComplex128(f FunctorByteComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionByte) MapString(f FunctorByteString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionByte) MapAny(f FunctorByteAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionByte) MapBoolArr(f FunctorByteBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionByte) MapRuneArr(f FunctorByteRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionByte) MapByteArr(f FunctorByteByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionByte) MapIntArr(f FunctorByteIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionByte) MapInt8Arr(f FunctorByteInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionByte) MapInt16Arr(f FunctorByteInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionByte) MapInt32Arr(f FunctorByteInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionByte) MapInt64Arr(f FunctorByteInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionByte) MapUintArr(f FunctorByteUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionByte) MapUint8Arr(f FunctorByteUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionByte) MapUint16Arr(f FunctorByteUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionByte) MapUint32Arr(f FunctorByteUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionByte) MapUint64Arr(f FunctorByteUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionByte) MapUintptrArr(f FunctorByteUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionByte) MapFloat32Arr(f FunctorByteFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionByte) MapFloat64Arr(f FunctorByteFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionByte) MapComplex64Arr(f FunctorByteComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionByte) MapComplex128Arr(f FunctorByteComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionByte) MapStringArr(f FunctorByteStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionByte) MapAnyArr(f FunctorByteAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt) MapBool(f FunctorIntBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt) MapRune(f FunctorIntRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt) MapByte(f FunctorIntByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt) MapInt(f FunctorIntInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt) MapInt8(f FunctorIntInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt) MapInt16(f FunctorIntInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt) MapInt32(f FunctorIntInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt) MapInt64(f FunctorIntInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt) MapUint(f FunctorIntUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt) MapUint8(f FunctorIntUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt) MapUint16(f FunctorIntUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt) MapUint32(f FunctorIntUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt) MapUint64(f FunctorIntUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt) MapUintptr(f FunctorIntUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt) MapFloat32(f FunctorIntFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt) MapFloat64(f FunctorIntFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt) MapComplex64(f FunctorIntComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt) MapComplex128(f FunctorIntComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt) MapString(f FunctorIntString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt) MapAny(f FunctorIntAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt) MapBoolArr(f FunctorIntBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt) MapRuneArr(f FunctorIntRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt) MapByteArr(f FunctorIntByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt) MapIntArr(f FunctorIntIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt) MapInt8Arr(f FunctorIntInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt) MapInt16Arr(f FunctorIntInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt) MapInt32Arr(f FunctorIntInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt) MapInt64Arr(f FunctorIntInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt) MapUintArr(f FunctorIntUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt) MapUint8Arr(f FunctorIntUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt) MapUint16Arr(f FunctorIntUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt) MapUint32Arr(f FunctorIntUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt) MapUint64Arr(f FunctorIntUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt) MapUintptrArr(f FunctorIntUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt) MapFloat32Arr(f FunctorIntFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt) MapFloat64Arr(f FunctorIntFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt) MapComplex64Arr(f FunctorIntComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt) MapComplex128Arr(f FunctorIntComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt) MapStringArr(f FunctorIntStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt) MapAnyArr(f FunctorIntAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt8) MapBool(f FunctorInt8Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt8) MapRune(f FunctorInt8Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt8) MapByte(f FunctorInt8Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt8) MapInt(f FunctorInt8Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt8) MapInt8(f FunctorInt8Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt8) MapInt16(f FunctorInt8Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt8) MapInt32(f FunctorInt8Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt8) MapInt64(f FunctorInt8Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt8) MapUint(f FunctorInt8Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt8) MapUint8(f FunctorInt8Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt8) MapUint16(f FunctorInt8Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt8) MapUint32(f FunctorInt8Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt8) MapUint64(f FunctorInt8Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt8) MapUintptr(f FunctorInt8Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt8) MapFloat32(f FunctorInt8Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt8) MapFloat64(f FunctorInt8Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt8) MapComplex64(f FunctorInt8Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt8) MapComplex128(f FunctorInt8Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt8) MapString(f FunctorInt8String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt8) MapAny(f FunctorInt8Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt8) MapBoolArr(f FunctorInt8BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt8) MapRuneArr(f FunctorInt8RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt8) MapByteArr(f FunctorInt8ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt8) MapIntArr(f FunctorInt8IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt8) MapInt8Arr(f FunctorInt8Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt8) MapInt16Arr(f FunctorInt8Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt8) MapInt32Arr(f FunctorInt8Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt8) MapInt64Arr(f FunctorInt8Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt8) MapUintArr(f FunctorInt8UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt8) MapUint8Arr(f FunctorInt8Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt8) MapUint16Arr(f FunctorInt8Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt8) MapUint32Arr(f FunctorInt8Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt8) MapUint64Arr(f FunctorInt8Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt8) MapUintptrArr(f FunctorInt8UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt8) MapFloat32Arr(f FunctorInt8Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt8) MapFloat64Arr(f FunctorInt8Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt8) MapComplex64Arr(f FunctorInt8Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt8) MapComplex128Arr(f FunctorInt8Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt8) MapStringArr(f FunctorInt8StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt8) MapAnyArr(f FunctorInt8AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt16) MapBool(f FunctorInt16Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt16) MapRune(f FunctorInt16Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt16) MapByte(f FunctorInt16Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt16) MapInt(f FunctorInt16Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt16) MapInt8(f FunctorInt16Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt16) MapInt16(f FunctorInt16Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt16) MapInt32(f FunctorInt16Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt16) MapInt64(f FunctorInt16Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt16) MapUint(f FunctorInt16Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt16) MapUint8(f FunctorInt16Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt16) MapUint16(f FunctorInt16Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt16) MapUint32(f FunctorInt16Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt16) MapUint64(f FunctorInt16Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt16) MapUintptr(f FunctorInt16Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt16) MapFloat32(f FunctorInt16Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt16) MapFloat64(f FunctorInt16Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt16) MapComplex64(f FunctorInt16Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt16) MapComplex128(f FunctorInt16Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt16) MapString(f FunctorInt16String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt16) MapAny(f FunctorInt16Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt16) MapBoolArr(f FunctorInt16BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt16) MapRuneArr(f FunctorInt16RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt16) MapByteArr(f FunctorInt16ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt16) MapIntArr(f FunctorInt16IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt16) MapInt8Arr(f FunctorInt16Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt16) MapInt16Arr(f FunctorInt16Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt16) MapInt32Arr(f FunctorInt16Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt16) MapInt64Arr(f FunctorInt16Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt16) MapUintArr(f FunctorInt16UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt16) MapUint8Arr(f FunctorInt16Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt16) MapUint16Arr(f FunctorInt16Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt16) MapUint32Arr(f FunctorInt16Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt16) MapUint64Arr(f FunctorInt16Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt16) MapUintptrArr(f FunctorInt16UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt16) MapFloat32Arr(f FunctorInt16Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt16) MapFloat64Arr(f FunctorInt16Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt16) MapComplex64Arr(f FunctorInt16Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt16) MapComplex128Arr(f FunctorInt16Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt16) MapStringArr(f FunctorInt16StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt16) MapAnyArr(f FunctorInt16AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt32) MapBool(f FunctorInt32Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt32) MapRune(f FunctorInt32Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt32) MapByte(f FunctorInt32Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt32) MapInt(f FunctorInt32Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt32) MapInt8(f FunctorInt32Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt32) MapInt16(f FunctorInt32Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt32) MapInt32(f FunctorInt32Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt32) MapInt64(f FunctorInt32Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt32) MapUint(f FunctorInt32Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt32) MapUint8(f FunctorInt32Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt32) MapUint16(f FunctorInt32Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt32) MapUint32(f FunctorInt32Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt32) MapUint64(f FunctorInt32Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt32) MapUintptr(f FunctorInt32Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt32) MapFloat32(f FunctorInt32Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt32) MapFloat64(f FunctorInt32Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt32) MapComplex64(f FunctorInt32Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt32) MapComplex128(f FunctorInt32Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt32) MapString(f FunctorInt32String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt32) MapAny(f FunctorInt32Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt32) MapBoolArr(f FunctorInt32BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt32) MapRuneArr(f FunctorInt32RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt32) MapByteArr(f FunctorInt32ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt32) MapIntArr(f FunctorInt32IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt32) MapInt8Arr(f FunctorInt32Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt32) MapInt16Arr(f FunctorInt32Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt32) MapInt32Arr(f FunctorInt32Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt32) MapInt64Arr(f FunctorInt32Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt32) MapUintArr(f FunctorInt32UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt32) MapUint8Arr(f FunctorInt32Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt32) MapUint16Arr(f FunctorInt32Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt32) MapUint32Arr(f FunctorInt32Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt32) MapUint64Arr(f FunctorInt32Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt32) MapUintptrArr(f FunctorInt32UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt32) MapFloat32Arr(f FunctorInt32Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt32) MapFloat64Arr(f FunctorInt32Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt32) MapComplex64Arr(f FunctorInt32Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt32) MapComplex128Arr(f FunctorInt32Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt32) MapStringArr(f FunctorInt32StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt32) MapAnyArr(f FunctorInt32AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt64) MapBool(f FunctorInt64Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt64) MapRune(f FunctorInt64Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt64) MapByte(f FunctorInt64Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt64) MapInt(f FunctorInt64Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt64) MapInt8(f FunctorInt64Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt64) MapInt16(f FunctorInt64Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt64) MapInt32(f FunctorInt64Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt64) MapInt64(f FunctorInt64Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt64) MapUint(f FunctorInt64Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt64) MapUint8(f FunctorInt64Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt64) MapUint16(f FunctorInt64Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt64) MapUint32(f FunctorInt64Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt64) MapUint64(f FunctorInt64Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt64) MapUintptr(f FunctorInt64Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt64) MapFloat32(f FunctorInt64Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt64) MapFloat64(f FunctorInt64Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt64) MapComplex64(f FunctorInt64Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt64) MapComplex128(f FunctorInt64Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt64) MapString(f FunctorInt64String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt64) MapAny(f FunctorInt64Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt64) MapBoolArr(f FunctorInt64BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt64) MapRuneArr(f FunctorInt64RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt64) MapByteArr(f FunctorInt64ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt64) MapIntArr(f FunctorInt64IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt64) MapInt8Arr(f FunctorInt64Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt64) MapInt16Arr(f FunctorInt64Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt64) MapInt32Arr(f FunctorInt64Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt64) MapInt64Arr(f FunctorInt64Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt64) MapUintArr(f FunctorInt64UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt64) MapUint8Arr(f FunctorInt64Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt64) MapUint16Arr(f FunctorInt64Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt64) MapUint32Arr(f FunctorInt64Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt64) MapUint64Arr(f FunctorInt64Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt64) MapUintptrArr(f FunctorInt64UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt64) MapFloat32Arr(f FunctorInt64Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt64) MapFloat64Arr(f FunctorInt64Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt64) MapComplex64Arr(f FunctorInt64Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt64) MapComplex128Arr(f FunctorInt64Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt64) MapStringArr(f FunctorInt64StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt64) MapAnyArr(f FunctorInt64AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint) MapBool(f FunctorUintBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint) MapRune(f FunctorUintRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint) MapByte(f FunctorUintByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint) MapInt(f FunctorUintInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint) MapInt8(f FunctorUintInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint) MapInt16(f FunctorUintInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint) MapInt32(f FunctorUintInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint) MapInt64(f FunctorUintInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint) MapUint(f FunctorUintUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint) MapUint8(f FunctorUintUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint) MapUint16(f FunctorUintUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint) MapUint32(f FunctorUintUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint) MapUint64(f FunctorUintUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint) MapUintptr(f FunctorUintUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint) MapFloat32(f FunctorUintFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint) MapFloat64(f FunctorUintFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint) MapComplex64(f FunctorUintComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint) MapComplex128(f FunctorUintComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint) MapString(f FunctorUintString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint) MapAny(f FunctorUintAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint) MapBoolArr(f FunctorUintBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint) MapRuneArr(f FunctorUintRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint) MapByteArr(f FunctorUintByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint) MapIntArr(f FunctorUintIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint) MapInt8Arr(f FunctorUintInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint) MapInt16Arr(f FunctorUintInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint) MapInt32Arr(f FunctorUintInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint) MapInt64Arr(f FunctorUintInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint) MapUintArr(f FunctorUintUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint) MapUint8Arr(f FunctorUintUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint) MapUint16Arr(f FunctorUintUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint) MapUint32Arr(f FunctorUintUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint) MapUint64Arr(f FunctorUintUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint) MapUintptrArr(f FunctorUintUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint) MapFloat32Arr(f FunctorUintFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint) MapFloat64Arr(f FunctorUintFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint) MapComplex64Arr(f FunctorUintComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint) MapComplex128Arr(f FunctorUintComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint) MapStringArr(f FunctorUintStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint) MapAnyArr(f FunctorUintAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint8) MapBool(f FunctorUint8Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint8) MapRune(f FunctorUint8Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint8) MapByte(f FunctorUint8Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint8) MapInt(f FunctorUint8Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint8) MapInt8(f FunctorUint8Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint8) MapInt16(f FunctorUint8Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint8) MapInt32(f FunctorUint8Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint8) MapInt64(f FunctorUint8Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint8) MapUint(f FunctorUint8Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint8) MapUint8(f FunctorUint8Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint8) MapUint16(f FunctorUint8Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint8) MapUint32(f FunctorUint8Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint8) MapUint64(f FunctorUint8Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint8) MapUintptr(f FunctorUint8Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint8) MapFloat32(f FunctorUint8Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint8) MapFloat64(f FunctorUint8Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint8) MapComplex64(f FunctorUint8Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint8) MapComplex128(f FunctorUint8Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint8) MapString(f FunctorUint8String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint8) MapAny(f FunctorUint8Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint8) MapBoolArr(f FunctorUint8BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint8) MapRuneArr(f FunctorUint8RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint8) MapByteArr(f FunctorUint8ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint8) MapIntArr(f FunctorUint8IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint8) MapInt8Arr(f FunctorUint8Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint8) MapInt16Arr(f FunctorUint8Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint8) MapInt32Arr(f FunctorUint8Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint8) MapInt64Arr(f FunctorUint8Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint8) MapUintArr(f FunctorUint8UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint8) MapUint8Arr(f FunctorUint8Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint8) MapUint16Arr(f FunctorUint8Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint8) MapUint32Arr(f FunctorUint8Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint8) MapUint64Arr(f FunctorUint8Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint8) MapUintptrArr(f FunctorUint8UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint8) MapFloat32Arr(f FunctorUint8Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint8) MapFloat64Arr(f FunctorUint8Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint8) MapComplex64Arr(f FunctorUint8Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint8) MapComplex128Arr(f FunctorUint8Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint8) MapStringArr(f FunctorUint8StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint8) MapAnyArr(f FunctorUint8AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint16) MapBool(f FunctorUint16Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint16) MapRune(f FunctorUint16Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint16) MapByte(f FunctorUint16Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint16) MapInt(f FunctorUint16Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint16) MapInt8(f FunctorUint16Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint16) MapInt16(f FunctorUint16Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint16) MapInt32(f FunctorUint16Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint16) MapInt64(f FunctorUint16Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint16) MapUint(f FunctorUint16Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint16) MapUint8(f FunctorUint16Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint16) MapUint16(f FunctorUint16Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint16) MapUint32(f FunctorUint16Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint16) MapUint64(f FunctorUint16Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint16) MapUintptr(f FunctorUint16Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint16) MapFloat32(f FunctorUint16Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint16) MapFloat64(f FunctorUint16Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint16) MapComplex64(f FunctorUint16Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint16) MapComplex128(f FunctorUint16Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint16) MapString(f FunctorUint16String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint16) MapAny(f FunctorUint16Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint16) MapBoolArr(f FunctorUint16BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint16) MapRuneArr(f FunctorUint16RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint16) MapByteArr(f FunctorUint16ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint16) MapIntArr(f FunctorUint16IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint16) MapInt8Arr(f FunctorUint16Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint16) MapInt16Arr(f FunctorUint16Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint16) MapInt32Arr(f FunctorUint16Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint16) MapInt64Arr(f FunctorUint16Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint16) MapUintArr(f FunctorUint16UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint16) MapUint8Arr(f FunctorUint16Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint16) MapUint16Arr(f FunctorUint16Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint16) MapUint32Arr(f FunctorUint16Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint16) MapUint64Arr(f FunctorUint16Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint16) MapUintptrArr(f FunctorUint16UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint16) MapFloat32Arr(f FunctorUint16Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint16) MapFloat64Arr(f FunctorUint16Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint16) MapComplex64Arr(f FunctorUint16Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint16) MapComplex128Arr(f FunctorUint16Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint16) MapStringArr(f FunctorUint16StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint16) MapAnyArr(f FunctorUint16AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint32) MapBool(f FunctorUint32Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint32) MapRune(f FunctorUint32Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint32) MapByte(f FunctorUint32Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint32) MapInt(f FunctorUint32Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint32) MapInt8(f FunctorUint32Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint32) MapInt16(f FunctorUint32Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint32) MapInt32(f FunctorUint32Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint32) MapInt64(f FunctorUint32Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint32) MapUint(f FunctorUint32Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint32) MapUint8(f FunctorUint32Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint32) MapUint16(f FunctorUint32Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint32) MapUint32(f FunctorUint32Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint32) MapUint64(f FunctorUint32Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint32) MapUintptr(f FunctorUint32Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint32) MapFloat32(f FunctorUint32Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint32) MapFloat64(f FunctorUint32Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint32) MapComplex64(f FunctorUint32Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint32) MapComplex128(f FunctorUint32Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint32) MapString(f FunctorUint32String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint32) MapAny(f FunctorUint32Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint32) MapBoolArr(f FunctorUint32BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint32) MapRuneArr(f FunctorUint32RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint32) MapByteArr(f FunctorUint32ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint32) MapIntArr(f FunctorUint32IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint32) MapInt8Arr(f FunctorUint32Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint32) MapInt16Arr(f FunctorUint32Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint32) MapInt32Arr(f FunctorUint32Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint32) MapInt64Arr(f FunctorUint32Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint32) MapUintArr(f FunctorUint32UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint32) MapUint8Arr(f FunctorUint32Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint32) MapUint16Arr(f FunctorUint32Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint32) MapUint32Arr(f FunctorUint32Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint32) MapUint64Arr(f FunctorUint32Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint32) MapUintptrArr(f FunctorUint32UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint32) MapFloat32Arr(f FunctorUint32Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint32) MapFloat64Arr(f FunctorUint32Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint32) MapComplex64Arr(f FunctorUint32Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint32) MapComplex128Arr(f FunctorUint32Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint32) MapStringArr(f FunctorUint32StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint32) MapAnyArr(f FunctorUint32AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint64) MapBool(f FunctorUint64Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint64) MapRune(f FunctorUint64Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint64) MapByte(f FunctorUint64Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint64) MapInt(f FunctorUint64Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint64) MapInt8(f FunctorUint64Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint64) MapInt16(f FunctorUint64Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint64) MapInt32(f FunctorUint64Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint64) MapInt64(f FunctorUint64Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint64) MapUint(f FunctorUint64Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint64) MapUint8(f FunctorUint64Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint64) MapUint16(f FunctorUint64Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint64) MapUint32(f FunctorUint64Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint64) MapUint64(f FunctorUint64Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint64) MapUintptr(f FunctorUint64Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint64) MapFloat32(f FunctorUint64Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint64) MapFloat64(f FunctorUint64Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint64) MapComplex64(f FunctorUint64Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint64) MapComplex128(f FunctorUint64Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint64) MapString(f FunctorUint64String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint64) MapAny(f FunctorUint64Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint64) MapBoolArr(f FunctorUint64BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint64) MapRuneArr(f FunctorUint64RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint64) MapByteArr(f FunctorUint64ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint64) MapIntArr(f FunctorUint64IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint64) MapInt8Arr(f FunctorUint64Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint64) MapInt16Arr(f FunctorUint64Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint64) MapInt32Arr(f FunctorUint64Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint64) MapInt64Arr(f FunctorUint64Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint64) MapUintArr(f FunctorUint64UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint64) MapUint8Arr(f FunctorUint64Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint64) MapUint16Arr(f FunctorUint64Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint64) MapUint32Arr(f FunctorUint64Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint64) MapUint64Arr(f FunctorUint64Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint64) MapUintptrArr(f FunctorUint64UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint64) MapFloat32Arr(f FunctorUint64Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint64) MapFloat64Arr(f FunctorUint64Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint64) MapComplex64Arr(f FunctorUint64Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint64) MapComplex128Arr(f FunctorUint64Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint64) MapStringArr(f FunctorUint64StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint64) MapAnyArr(f FunctorUint64AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUintptr) MapBool(f FunctorUintptrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUintptr) MapRune(f FunctorUintptrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUintptr) MapByte(f FunctorUintptrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUintptr) MapInt(f FunctorUintptrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUintptr) MapInt8(f FunctorUintptrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUintptr) MapInt16(f FunctorUintptrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUintptr) MapInt32(f FunctorUintptrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUintptr) MapInt64(f FunctorUintptrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUintptr) MapUint(f FunctorUintptrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUintptr) MapUint8(f FunctorUintptrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUintptr) MapUint16(f FunctorUintptrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUintptr) MapUint32(f FunctorUintptrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUintptr) MapUint64(f FunctorUintptrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUintptr) MapUintptr(f FunctorUintptrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUintptr) MapFloat32(f FunctorUintptrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUintptr) MapFloat64(f FunctorUintptrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUintptr) MapComplex64(f FunctorUintptrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUintptr) MapComplex128(f FunctorUintptrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUintptr) MapString(f FunctorUintptrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUintptr) MapAny(f FunctorUintptrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUintptr) MapBoolArr(f FunctorUintptrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUintptr) MapRuneArr(f FunctorUintptrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUintptr) MapByteArr(f FunctorUintptrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUintptr) MapIntArr(f FunctorUintptrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUintptr) MapInt8Arr(f FunctorUintptrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUintptr) MapInt16Arr(f FunctorUintptrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUintptr) MapInt32Arr(f FunctorUintptrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUintptr) MapInt64Arr(f FunctorUintptrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUintptr) MapUintArr(f FunctorUintptrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUintptr) MapUint8Arr(f FunctorUintptrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUintptr) MapUint16Arr(f FunctorUintptrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUintptr) MapUint32Arr(f FunctorUintptrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUintptr) MapUint64Arr(f FunctorUintptrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUintptr) MapUintptrArr(f FunctorUintptrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUintptr) MapFloat32Arr(f FunctorUintptrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUintptr) MapFloat64Arr(f FunctorUintptrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUintptr) MapComplex64Arr(f FunctorUintptrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUintptr) MapComplex128Arr(f FunctorUintptrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUintptr) MapStringArr(f FunctorUintptrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUintptr) MapAnyArr(f FunctorUintptrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat32) MapBool(f FunctorFloat32Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat32) MapRune(f FunctorFloat32Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat32) MapByte(f FunctorFloat32Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat32) MapInt(f FunctorFloat32Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat32) MapInt8(f FunctorFloat32Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat32) MapInt16(f FunctorFloat32Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat32) MapInt32(f FunctorFloat32Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat32) MapInt64(f FunctorFloat32Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat32) MapUint(f FunctorFloat32Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat32) MapUint8(f FunctorFloat32Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat32) MapUint16(f FunctorFloat32Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat32) MapUint32(f FunctorFloat32Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat32) MapUint64(f FunctorFloat32Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat32) MapUintptr(f FunctorFloat32Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat32) MapFloat32(f FunctorFloat32Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat32) MapFloat64(f FunctorFloat32Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat32) MapComplex64(f FunctorFloat32Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat32) MapComplex128(f FunctorFloat32Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat32) MapString(f FunctorFloat32String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat32) MapAny(f FunctorFloat32Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat32) MapBoolArr(f FunctorFloat32BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat32) MapRuneArr(f FunctorFloat32RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat32) MapByteArr(f FunctorFloat32ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat32) MapIntArr(f FunctorFloat32IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat32) MapInt8Arr(f FunctorFloat32Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat32) MapInt16Arr(f FunctorFloat32Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat32) MapInt32Arr(f FunctorFloat32Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat32) MapInt64Arr(f FunctorFloat32Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat32) MapUintArr(f FunctorFloat32UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat32) MapUint8Arr(f FunctorFloat32Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat32) MapUint16Arr(f FunctorFloat32Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat32) MapUint32Arr(f FunctorFloat32Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat32) MapUint64Arr(f FunctorFloat32Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat32) MapUintptrArr(f FunctorFloat32UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat32) MapFloat32Arr(f FunctorFloat32Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat32) MapFloat64Arr(f FunctorFloat32Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat32) MapComplex64Arr(f FunctorFloat32Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat32) MapComplex128Arr(f FunctorFloat32Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat32) MapStringArr(f FunctorFloat32StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat32) MapAnyArr(f FunctorFloat32AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat64) MapBool(f FunctorFloat64Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat64) MapRune(f FunctorFloat64Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat64) MapByte(f FunctorFloat64Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat64) MapInt(f FunctorFloat64Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat64) MapInt8(f FunctorFloat64Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat64) MapInt16(f FunctorFloat64Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat64) MapInt32(f FunctorFloat64Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat64) MapInt64(f FunctorFloat64Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat64) MapUint(f FunctorFloat64Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat64) MapUint8(f FunctorFloat64Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat64) MapUint16(f FunctorFloat64Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat64) MapUint32(f FunctorFloat64Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat64) MapUint64(f FunctorFloat64Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat64) MapUintptr(f FunctorFloat64Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat64) MapFloat32(f FunctorFloat64Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat64) MapFloat64(f FunctorFloat64Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat64) MapComplex64(f FunctorFloat64Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat64) MapComplex128(f FunctorFloat64Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat64) MapString(f FunctorFloat64String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat64) MapAny(f FunctorFloat64Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat64) MapBoolArr(f FunctorFloat64BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat64) MapRuneArr(f FunctorFloat64RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat64) MapByteArr(f FunctorFloat64ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat64) MapIntArr(f FunctorFloat64IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat64) MapInt8Arr(f FunctorFloat64Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat64) MapInt16Arr(f FunctorFloat64Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat64) MapInt32Arr(f FunctorFloat64Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat64) MapInt64Arr(f FunctorFloat64Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat64) MapUintArr(f FunctorFloat64UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat64) MapUint8Arr(f FunctorFloat64Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat64) MapUint16Arr(f FunctorFloat64Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat64) MapUint32Arr(f FunctorFloat64Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat64) MapUint64Arr(f FunctorFloat64Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat64) MapUintptrArr(f FunctorFloat64UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat64) MapFloat32Arr(f FunctorFloat64Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat64) MapFloat64Arr(f FunctorFloat64Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat64) MapComplex64Arr(f FunctorFloat64Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat64) MapComplex128Arr(f FunctorFloat64Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat64) MapStringArr(f FunctorFloat64StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat64) MapAnyArr(f FunctorFloat64AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex64) MapBool(f FunctorComplex64Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex64) MapRune(f FunctorComplex64Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex64) MapByte(f FunctorComplex64Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex64) MapInt(f FunctorComplex64Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex64) MapInt8(f FunctorComplex64Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex64) MapInt16(f FunctorComplex64Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex64) MapInt32(f FunctorComplex64Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex64) MapInt64(f FunctorComplex64Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex64) MapUint(f FunctorComplex64Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex64) MapUint8(f FunctorComplex64Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex64) MapUint16(f FunctorComplex64Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex64) MapUint32(f FunctorComplex64Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex64) MapUint64(f FunctorComplex64Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex64) MapUintptr(f FunctorComplex64Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex64) MapFloat32(f FunctorComplex64Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex64) MapFloat64(f FunctorComplex64Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex64) MapComplex64(f FunctorComplex64Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex64) MapComplex128(f FunctorComplex64Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex64) MapString(f FunctorComplex64String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex64) MapAny(f FunctorComplex64Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex64) MapBoolArr(f FunctorComplex64BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex64) MapRuneArr(f FunctorComplex64RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex64) MapByteArr(f FunctorComplex64ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex64) MapIntArr(f FunctorComplex64IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex64) MapInt8Arr(f FunctorComplex64Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex64) MapInt16Arr(f FunctorComplex64Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex64) MapInt32Arr(f FunctorComplex64Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex64) MapInt64Arr(f FunctorComplex64Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex64) MapUintArr(f FunctorComplex64UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex64) MapUint8Arr(f FunctorComplex64Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex64) MapUint16Arr(f FunctorComplex64Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex64) MapUint32Arr(f FunctorComplex64Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex64) MapUint64Arr(f FunctorComplex64Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex64) MapUintptrArr(f FunctorComplex64UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex64) MapFloat32Arr(f FunctorComplex64Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex64) MapFloat64Arr(f FunctorComplex64Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex64) MapComplex64Arr(f FunctorComplex64Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex64) MapComplex128Arr(f FunctorComplex64Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex64) MapStringArr(f FunctorComplex64StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex64) MapAnyArr(f FunctorComplex64AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex128) MapBool(f FunctorComplex128Bool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex128) MapRune(f FunctorComplex128Rune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex128) MapByte(f FunctorComplex128Byte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex128) MapInt(f FunctorComplex128Int) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex128) MapInt8(f FunctorComplex128Int8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex128) MapInt16(f FunctorComplex128Int16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex128) MapInt32(f FunctorComplex128Int32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex128) MapInt64(f FunctorComplex128Int64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex128) MapUint(f FunctorComplex128Uint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex128) MapUint8(f FunctorComplex128Uint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex128) MapUint16(f FunctorComplex128Uint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex128) MapUint32(f FunctorComplex128Uint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex128) MapUint64(f FunctorComplex128Uint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex128) MapUintptr(f FunctorComplex128Uintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex128) MapFloat32(f FunctorComplex128Float32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex128) MapFloat64(f FunctorComplex128Float64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex128) MapComplex64(f FunctorComplex128Complex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex128) MapComplex128(f FunctorComplex128Complex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex128) MapString(f FunctorComplex128String) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex128) MapAny(f FunctorComplex128Any) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex128) MapBoolArr(f FunctorComplex128BoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex128) MapRuneArr(f FunctorComplex128RuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex128) MapByteArr(f FunctorComplex128ByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex128) MapIntArr(f FunctorComplex128IntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex128) MapInt8Arr(f FunctorComplex128Int8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex128) MapInt16Arr(f FunctorComplex128Int16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex128) MapInt32Arr(f FunctorComplex128Int32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex128) MapInt64Arr(f FunctorComplex128Int64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex128) MapUintArr(f FunctorComplex128UintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex128) MapUint8Arr(f FunctorComplex128Uint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex128) MapUint16Arr(f FunctorComplex128Uint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex128) MapUint32Arr(f FunctorComplex128Uint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex128) MapUint64Arr(f FunctorComplex128Uint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex128) MapUintptrArr(f FunctorComplex128UintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex128) MapFloat32Arr(f FunctorComplex128Float32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex128) MapFloat64Arr(f FunctorComplex128Float64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex128) MapComplex64Arr(f FunctorComplex128Complex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex128) MapComplex128Arr(f FunctorComplex128Complex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex128) MapStringArr(f FunctorComplex128StringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex128) MapAnyArr(f FunctorComplex128AnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionString) MapBool(f FunctorStringBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionString) MapRune(f FunctorStringRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionString) MapByte(f FunctorStringByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionString) MapInt(f FunctorStringInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionString) MapInt8(f FunctorStringInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionString) MapInt16(f FunctorStringInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionString) MapInt32(f FunctorStringInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionString) MapInt64(f FunctorStringInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionString) MapUint(f FunctorStringUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionString) MapUint8(f FunctorStringUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionString) MapUint16(f FunctorStringUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionString) MapUint32(f FunctorStringUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionString) MapUint64(f FunctorStringUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionString) MapUintptr(f FunctorStringUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionString) MapFloat32(f FunctorStringFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionString) MapFloat64(f FunctorStringFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionString) MapComplex64(f FunctorStringComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionString) MapComplex128(f FunctorStringComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionString) MapString(f FunctorStringString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionString) MapAny(f FunctorStringAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionString) MapBoolArr(f FunctorStringBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionString) MapRuneArr(f FunctorStringRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionString) MapByteArr(f FunctorStringByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionString) MapIntArr(f FunctorStringIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionString) MapInt8Arr(f FunctorStringInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionString) MapInt16Arr(f FunctorStringInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionString) MapInt32Arr(f FunctorStringInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionString) MapInt64Arr(f FunctorStringInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionString) MapUintArr(f FunctorStringUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionString) MapUint8Arr(f FunctorStringUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionString) MapUint16Arr(f FunctorStringUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionString) MapUint32Arr(f FunctorStringUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionString) MapUint64Arr(f FunctorStringUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionString) MapUintptrArr(f FunctorStringUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionString) MapFloat32Arr(f FunctorStringFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionString) MapFloat64Arr(f FunctorStringFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionString) MapComplex64Arr(f FunctorStringComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionString) MapComplex128Arr(f FunctorStringComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionString) MapStringArr(f FunctorStringStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionString) MapAnyArr(f FunctorStringAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionAny) MapBool(f FunctorAnyBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionAny) MapRune(f FunctorAnyRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionAny) MapByte(f FunctorAnyByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionAny) MapInt(f FunctorAnyInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionAny) MapInt8(f FunctorAnyInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionAny) MapInt16(f FunctorAnyInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionAny) MapInt32(f FunctorAnyInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionAny) MapInt64(f FunctorAnyInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionAny) MapUint(f FunctorAnyUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionAny) MapUint8(f FunctorAnyUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionAny) MapUint16(f FunctorAnyUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionAny) MapUint32(f FunctorAnyUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionAny) MapUint64(f FunctorAnyUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionAny) MapUintptr(f FunctorAnyUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionAny) MapFloat32(f FunctorAnyFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionAny) MapFloat64(f FunctorAnyFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionAny) MapComplex64(f FunctorAnyComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionAny) MapComplex128(f FunctorAnyComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionAny) MapString(f FunctorAnyString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionAny) MapAny(f FunctorAnyAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionAny) MapBoolArr(f FunctorAnyBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionAny) MapRuneArr(f FunctorAnyRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionAny) MapByteArr(f FunctorAnyByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionAny) MapIntArr(f FunctorAnyIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionAny) MapInt8Arr(f FunctorAnyInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionAny) MapInt16Arr(f FunctorAnyInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionAny) MapInt32Arr(f FunctorAnyInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionAny) MapInt64Arr(f FunctorAnyInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionAny) MapUintArr(f FunctorAnyUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionAny) MapUint8Arr(f FunctorAnyUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionAny) MapUint16Arr(f FunctorAnyUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionAny) MapUint32Arr(f FunctorAnyUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionAny) MapUint64Arr(f FunctorAnyUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionAny) MapUintptrArr(f FunctorAnyUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionAny) MapFloat32Arr(f FunctorAnyFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionAny) MapFloat64Arr(f FunctorAnyFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionAny) MapComplex64Arr(f FunctorAnyComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionAny) MapComplex128Arr(f FunctorAnyComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionAny) MapStringArr(f FunctorAnyStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionAny) MapAnyArr(f FunctorAnyAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionBoolArr) MapBool(f FunctorBoolArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionBoolArr) MapRune(f FunctorBoolArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionBoolArr) MapByte(f FunctorBoolArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionBoolArr) MapInt(f FunctorBoolArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionBoolArr) MapInt8(f FunctorBoolArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionBoolArr) MapInt16(f FunctorBoolArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionBoolArr) MapInt32(f FunctorBoolArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionBoolArr) MapInt64(f FunctorBoolArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionBoolArr) MapUint(f FunctorBoolArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionBoolArr) MapUint8(f FunctorBoolArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionBoolArr) MapUint16(f FunctorBoolArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionBoolArr) MapUint32(f FunctorBoolArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionBoolArr) MapUint64(f FunctorBoolArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionBoolArr) MapUintptr(f FunctorBoolArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionBoolArr) MapFloat32(f FunctorBoolArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionBoolArr) MapFloat64(f FunctorBoolArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionBoolArr) MapComplex64(f FunctorBoolArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionBoolArr) MapComplex128(f FunctorBoolArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionBoolArr) MapString(f FunctorBoolArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionBoolArr) MapAny(f FunctorBoolArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionBoolArr) MapBoolArr(f FunctorBoolArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionBoolArr) MapRuneArr(f FunctorBoolArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionBoolArr) MapByteArr(f FunctorBoolArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionBoolArr) MapIntArr(f FunctorBoolArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionBoolArr) MapInt8Arr(f FunctorBoolArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionBoolArr) MapInt16Arr(f FunctorBoolArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionBoolArr) MapInt32Arr(f FunctorBoolArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionBoolArr) MapInt64Arr(f FunctorBoolArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionBoolArr) MapUintArr(f FunctorBoolArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionBoolArr) MapUint8Arr(f FunctorBoolArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionBoolArr) MapUint16Arr(f FunctorBoolArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionBoolArr) MapUint32Arr(f FunctorBoolArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionBoolArr) MapUint64Arr(f FunctorBoolArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionBoolArr) MapUintptrArr(f FunctorBoolArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionBoolArr) MapFloat32Arr(f FunctorBoolArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionBoolArr) MapFloat64Arr(f FunctorBoolArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionBoolArr) MapComplex64Arr(f FunctorBoolArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionBoolArr) MapComplex128Arr(f FunctorBoolArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionBoolArr) MapStringArr(f FunctorBoolArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionBoolArr) MapAnyArr(f FunctorBoolArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionRuneArr) MapBool(f FunctorRuneArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionRuneArr) MapRune(f FunctorRuneArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionRuneArr) MapByte(f FunctorRuneArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionRuneArr) MapInt(f FunctorRuneArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionRuneArr) MapInt8(f FunctorRuneArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionRuneArr) MapInt16(f FunctorRuneArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionRuneArr) MapInt32(f FunctorRuneArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionRuneArr) MapInt64(f FunctorRuneArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionRuneArr) MapUint(f FunctorRuneArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionRuneArr) MapUint8(f FunctorRuneArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionRuneArr) MapUint16(f FunctorRuneArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionRuneArr) MapUint32(f FunctorRuneArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionRuneArr) MapUint64(f FunctorRuneArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionRuneArr) MapUintptr(f FunctorRuneArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionRuneArr) MapFloat32(f FunctorRuneArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionRuneArr) MapFloat64(f FunctorRuneArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionRuneArr) MapComplex64(f FunctorRuneArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionRuneArr) MapComplex128(f FunctorRuneArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionRuneArr) MapString(f FunctorRuneArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionRuneArr) MapAny(f FunctorRuneArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionRuneArr) MapBoolArr(f FunctorRuneArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionRuneArr) MapRuneArr(f FunctorRuneArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionRuneArr) MapByteArr(f FunctorRuneArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionRuneArr) MapIntArr(f FunctorRuneArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionRuneArr) MapInt8Arr(f FunctorRuneArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionRuneArr) MapInt16Arr(f FunctorRuneArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionRuneArr) MapInt32Arr(f FunctorRuneArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionRuneArr) MapInt64Arr(f FunctorRuneArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionRuneArr) MapUintArr(f FunctorRuneArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionRuneArr) MapUint8Arr(f FunctorRuneArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionRuneArr) MapUint16Arr(f FunctorRuneArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionRuneArr) MapUint32Arr(f FunctorRuneArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionRuneArr) MapUint64Arr(f FunctorRuneArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionRuneArr) MapUintptrArr(f FunctorRuneArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionRuneArr) MapFloat32Arr(f FunctorRuneArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionRuneArr) MapFloat64Arr(f FunctorRuneArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionRuneArr) MapComplex64Arr(f FunctorRuneArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionRuneArr) MapComplex128Arr(f FunctorRuneArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionRuneArr) MapStringArr(f FunctorRuneArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionRuneArr) MapAnyArr(f FunctorRuneArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionByteArr) MapBool(f FunctorByteArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionByteArr) MapRune(f FunctorByteArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionByteArr) MapByte(f FunctorByteArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionByteArr) MapInt(f FunctorByteArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionByteArr) MapInt8(f FunctorByteArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionByteArr) MapInt16(f FunctorByteArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionByteArr) MapInt32(f FunctorByteArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionByteArr) MapInt64(f FunctorByteArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionByteArr) MapUint(f FunctorByteArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionByteArr) MapUint8(f FunctorByteArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionByteArr) MapUint16(f FunctorByteArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionByteArr) MapUint32(f FunctorByteArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionByteArr) MapUint64(f FunctorByteArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionByteArr) MapUintptr(f FunctorByteArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionByteArr) MapFloat32(f FunctorByteArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionByteArr) MapFloat64(f FunctorByteArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionByteArr) MapComplex64(f FunctorByteArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionByteArr) MapComplex128(f FunctorByteArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionByteArr) MapString(f FunctorByteArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionByteArr) MapAny(f FunctorByteArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionByteArr) MapBoolArr(f FunctorByteArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionByteArr) MapRuneArr(f FunctorByteArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionByteArr) MapByteArr(f FunctorByteArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionByteArr) MapIntArr(f FunctorByteArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionByteArr) MapInt8Arr(f FunctorByteArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionByteArr) MapInt16Arr(f FunctorByteArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionByteArr) MapInt32Arr(f FunctorByteArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionByteArr) MapInt64Arr(f FunctorByteArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionByteArr) MapUintArr(f FunctorByteArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionByteArr) MapUint8Arr(f FunctorByteArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionByteArr) MapUint16Arr(f FunctorByteArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionByteArr) MapUint32Arr(f FunctorByteArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionByteArr) MapUint64Arr(f FunctorByteArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionByteArr) MapUintptrArr(f FunctorByteArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionByteArr) MapFloat32Arr(f FunctorByteArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionByteArr) MapFloat64Arr(f FunctorByteArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionByteArr) MapComplex64Arr(f FunctorByteArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionByteArr) MapComplex128Arr(f FunctorByteArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionByteArr) MapStringArr(f FunctorByteArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionByteArr) MapAnyArr(f FunctorByteArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionIntArr) MapBool(f FunctorIntArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionIntArr) MapRune(f FunctorIntArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionIntArr) MapByte(f FunctorIntArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionIntArr) MapInt(f FunctorIntArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionIntArr) MapInt8(f FunctorIntArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionIntArr) MapInt16(f FunctorIntArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionIntArr) MapInt32(f FunctorIntArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionIntArr) MapInt64(f FunctorIntArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionIntArr) MapUint(f FunctorIntArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionIntArr) MapUint8(f FunctorIntArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionIntArr) MapUint16(f FunctorIntArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionIntArr) MapUint32(f FunctorIntArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionIntArr) MapUint64(f FunctorIntArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionIntArr) MapUintptr(f FunctorIntArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionIntArr) MapFloat32(f FunctorIntArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionIntArr) MapFloat64(f FunctorIntArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionIntArr) MapComplex64(f FunctorIntArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionIntArr) MapComplex128(f FunctorIntArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionIntArr) MapString(f FunctorIntArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionIntArr) MapAny(f FunctorIntArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionIntArr) MapBoolArr(f FunctorIntArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionIntArr) MapRuneArr(f FunctorIntArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionIntArr) MapByteArr(f FunctorIntArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionIntArr) MapIntArr(f FunctorIntArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionIntArr) MapInt8Arr(f FunctorIntArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionIntArr) MapInt16Arr(f FunctorIntArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionIntArr) MapInt32Arr(f FunctorIntArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionIntArr) MapInt64Arr(f FunctorIntArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionIntArr) MapUintArr(f FunctorIntArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionIntArr) MapUint8Arr(f FunctorIntArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionIntArr) MapUint16Arr(f FunctorIntArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionIntArr) MapUint32Arr(f FunctorIntArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionIntArr) MapUint64Arr(f FunctorIntArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionIntArr) MapUintptrArr(f FunctorIntArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionIntArr) MapFloat32Arr(f FunctorIntArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionIntArr) MapFloat64Arr(f FunctorIntArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionIntArr) MapComplex64Arr(f FunctorIntArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionIntArr) MapComplex128Arr(f FunctorIntArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionIntArr) MapStringArr(f FunctorIntArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionIntArr) MapAnyArr(f FunctorIntArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt8Arr) MapBool(f FunctorInt8ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt8Arr) MapRune(f FunctorInt8ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt8Arr) MapByte(f FunctorInt8ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt8Arr) MapInt(f FunctorInt8ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt8Arr) MapInt8(f FunctorInt8ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt8Arr) MapInt16(f FunctorInt8ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt8Arr) MapInt32(f FunctorInt8ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt8Arr) MapInt64(f FunctorInt8ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt8Arr) MapUint(f FunctorInt8ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt8Arr) MapUint8(f FunctorInt8ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt8Arr) MapUint16(f FunctorInt8ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt8Arr) MapUint32(f FunctorInt8ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt8Arr) MapUint64(f FunctorInt8ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt8Arr) MapUintptr(f FunctorInt8ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt8Arr) MapFloat32(f FunctorInt8ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt8Arr) MapFloat64(f FunctorInt8ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt8Arr) MapComplex64(f FunctorInt8ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt8Arr) MapComplex128(f FunctorInt8ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt8Arr) MapString(f FunctorInt8ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt8Arr) MapAny(f FunctorInt8ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt8Arr) MapBoolArr(f FunctorInt8ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt8Arr) MapRuneArr(f FunctorInt8ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt8Arr) MapByteArr(f FunctorInt8ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt8Arr) MapIntArr(f FunctorInt8ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt8Arr) MapInt8Arr(f FunctorInt8ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt8Arr) MapInt16Arr(f FunctorInt8ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt8Arr) MapInt32Arr(f FunctorInt8ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt8Arr) MapInt64Arr(f FunctorInt8ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt8Arr) MapUintArr(f FunctorInt8ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt8Arr) MapUint8Arr(f FunctorInt8ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt8Arr) MapUint16Arr(f FunctorInt8ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt8Arr) MapUint32Arr(f FunctorInt8ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt8Arr) MapUint64Arr(f FunctorInt8ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt8Arr) MapUintptrArr(f FunctorInt8ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt8Arr) MapFloat32Arr(f FunctorInt8ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt8Arr) MapFloat64Arr(f FunctorInt8ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt8Arr) MapComplex64Arr(f FunctorInt8ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt8Arr) MapComplex128Arr(f FunctorInt8ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt8Arr) MapStringArr(f FunctorInt8ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt8Arr) MapAnyArr(f FunctorInt8ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt16Arr) MapBool(f FunctorInt16ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt16Arr) MapRune(f FunctorInt16ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt16Arr) MapByte(f FunctorInt16ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt16Arr) MapInt(f FunctorInt16ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt16Arr) MapInt8(f FunctorInt16ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt16Arr) MapInt16(f FunctorInt16ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt16Arr) MapInt32(f FunctorInt16ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt16Arr) MapInt64(f FunctorInt16ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt16Arr) MapUint(f FunctorInt16ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt16Arr) MapUint8(f FunctorInt16ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt16Arr) MapUint16(f FunctorInt16ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt16Arr) MapUint32(f FunctorInt16ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt16Arr) MapUint64(f FunctorInt16ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt16Arr) MapUintptr(f FunctorInt16ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt16Arr) MapFloat32(f FunctorInt16ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt16Arr) MapFloat64(f FunctorInt16ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt16Arr) MapComplex64(f FunctorInt16ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt16Arr) MapComplex128(f FunctorInt16ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt16Arr) MapString(f FunctorInt16ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt16Arr) MapAny(f FunctorInt16ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt16Arr) MapBoolArr(f FunctorInt16ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt16Arr) MapRuneArr(f FunctorInt16ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt16Arr) MapByteArr(f FunctorInt16ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt16Arr) MapIntArr(f FunctorInt16ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt16Arr) MapInt8Arr(f FunctorInt16ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt16Arr) MapInt16Arr(f FunctorInt16ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt16Arr) MapInt32Arr(f FunctorInt16ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt16Arr) MapInt64Arr(f FunctorInt16ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt16Arr) MapUintArr(f FunctorInt16ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt16Arr) MapUint8Arr(f FunctorInt16ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt16Arr) MapUint16Arr(f FunctorInt16ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt16Arr) MapUint32Arr(f FunctorInt16ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt16Arr) MapUint64Arr(f FunctorInt16ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt16Arr) MapUintptrArr(f FunctorInt16ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt16Arr) MapFloat32Arr(f FunctorInt16ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt16Arr) MapFloat64Arr(f FunctorInt16ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt16Arr) MapComplex64Arr(f FunctorInt16ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt16Arr) MapComplex128Arr(f FunctorInt16ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt16Arr) MapStringArr(f FunctorInt16ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt16Arr) MapAnyArr(f FunctorInt16ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt32Arr) MapBool(f FunctorInt32ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt32Arr) MapRune(f FunctorInt32ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt32Arr) MapByte(f FunctorInt32ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt32Arr) MapInt(f FunctorInt32ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt32Arr) MapInt8(f FunctorInt32ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt32Arr) MapInt16(f FunctorInt32ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt32Arr) MapInt32(f FunctorInt32ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt32Arr) MapInt64(f FunctorInt32ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt32Arr) MapUint(f FunctorInt32ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt32Arr) MapUint8(f FunctorInt32ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt32Arr) MapUint16(f FunctorInt32ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt32Arr) MapUint32(f FunctorInt32ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt32Arr) MapUint64(f FunctorInt32ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt32Arr) MapUintptr(f FunctorInt32ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt32Arr) MapFloat32(f FunctorInt32ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt32Arr) MapFloat64(f FunctorInt32ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt32Arr) MapComplex64(f FunctorInt32ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt32Arr) MapComplex128(f FunctorInt32ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt32Arr) MapString(f FunctorInt32ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt32Arr) MapAny(f FunctorInt32ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt32Arr) MapBoolArr(f FunctorInt32ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt32Arr) MapRuneArr(f FunctorInt32ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt32Arr) MapByteArr(f FunctorInt32ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt32Arr) MapIntArr(f FunctorInt32ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt32Arr) MapInt8Arr(f FunctorInt32ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt32Arr) MapInt16Arr(f FunctorInt32ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt32Arr) MapInt32Arr(f FunctorInt32ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt32Arr) MapInt64Arr(f FunctorInt32ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt32Arr) MapUintArr(f FunctorInt32ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt32Arr) MapUint8Arr(f FunctorInt32ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt32Arr) MapUint16Arr(f FunctorInt32ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt32Arr) MapUint32Arr(f FunctorInt32ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt32Arr) MapUint64Arr(f FunctorInt32ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt32Arr) MapUintptrArr(f FunctorInt32ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt32Arr) MapFloat32Arr(f FunctorInt32ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt32Arr) MapFloat64Arr(f FunctorInt32ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt32Arr) MapComplex64Arr(f FunctorInt32ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt32Arr) MapComplex128Arr(f FunctorInt32ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt32Arr) MapStringArr(f FunctorInt32ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt32Arr) MapAnyArr(f FunctorInt32ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionInt64Arr) MapBool(f FunctorInt64ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionInt64Arr) MapRune(f FunctorInt64ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionInt64Arr) MapByte(f FunctorInt64ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionInt64Arr) MapInt(f FunctorInt64ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionInt64Arr) MapInt8(f FunctorInt64ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionInt64Arr) MapInt16(f FunctorInt64ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionInt64Arr) MapInt32(f FunctorInt64ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionInt64Arr) MapInt64(f FunctorInt64ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionInt64Arr) MapUint(f FunctorInt64ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionInt64Arr) MapUint8(f FunctorInt64ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionInt64Arr) MapUint16(f FunctorInt64ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionInt64Arr) MapUint32(f FunctorInt64ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionInt64Arr) MapUint64(f FunctorInt64ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionInt64Arr) MapUintptr(f FunctorInt64ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionInt64Arr) MapFloat32(f FunctorInt64ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionInt64Arr) MapFloat64(f FunctorInt64ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionInt64Arr) MapComplex64(f FunctorInt64ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionInt64Arr) MapComplex128(f FunctorInt64ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionInt64Arr) MapString(f FunctorInt64ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionInt64Arr) MapAny(f FunctorInt64ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionInt64Arr) MapBoolArr(f FunctorInt64ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionInt64Arr) MapRuneArr(f FunctorInt64ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionInt64Arr) MapByteArr(f FunctorInt64ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionInt64Arr) MapIntArr(f FunctorInt64ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionInt64Arr) MapInt8Arr(f FunctorInt64ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionInt64Arr) MapInt16Arr(f FunctorInt64ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionInt64Arr) MapInt32Arr(f FunctorInt64ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionInt64Arr) MapInt64Arr(f FunctorInt64ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionInt64Arr) MapUintArr(f FunctorInt64ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionInt64Arr) MapUint8Arr(f FunctorInt64ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionInt64Arr) MapUint16Arr(f FunctorInt64ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionInt64Arr) MapUint32Arr(f FunctorInt64ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionInt64Arr) MapUint64Arr(f FunctorInt64ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionInt64Arr) MapUintptrArr(f FunctorInt64ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionInt64Arr) MapFloat32Arr(f FunctorInt64ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionInt64Arr) MapFloat64Arr(f FunctorInt64ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionInt64Arr) MapComplex64Arr(f FunctorInt64ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionInt64Arr) MapComplex128Arr(f FunctorInt64ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionInt64Arr) MapStringArr(f FunctorInt64ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionInt64Arr) MapAnyArr(f FunctorInt64ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUintArr) MapBool(f FunctorUintArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUintArr) MapRune(f FunctorUintArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUintArr) MapByte(f FunctorUintArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUintArr) MapInt(f FunctorUintArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUintArr) MapInt8(f FunctorUintArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUintArr) MapInt16(f FunctorUintArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUintArr) MapInt32(f FunctorUintArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUintArr) MapInt64(f FunctorUintArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUintArr) MapUint(f FunctorUintArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUintArr) MapUint8(f FunctorUintArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUintArr) MapUint16(f FunctorUintArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUintArr) MapUint32(f FunctorUintArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUintArr) MapUint64(f FunctorUintArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUintArr) MapUintptr(f FunctorUintArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUintArr) MapFloat32(f FunctorUintArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUintArr) MapFloat64(f FunctorUintArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUintArr) MapComplex64(f FunctorUintArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUintArr) MapComplex128(f FunctorUintArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUintArr) MapString(f FunctorUintArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUintArr) MapAny(f FunctorUintArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUintArr) MapBoolArr(f FunctorUintArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUintArr) MapRuneArr(f FunctorUintArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUintArr) MapByteArr(f FunctorUintArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUintArr) MapIntArr(f FunctorUintArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUintArr) MapInt8Arr(f FunctorUintArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUintArr) MapInt16Arr(f FunctorUintArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUintArr) MapInt32Arr(f FunctorUintArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUintArr) MapInt64Arr(f FunctorUintArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUintArr) MapUintArr(f FunctorUintArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUintArr) MapUint8Arr(f FunctorUintArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUintArr) MapUint16Arr(f FunctorUintArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUintArr) MapUint32Arr(f FunctorUintArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUintArr) MapUint64Arr(f FunctorUintArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUintArr) MapUintptrArr(f FunctorUintArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUintArr) MapFloat32Arr(f FunctorUintArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUintArr) MapFloat64Arr(f FunctorUintArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUintArr) MapComplex64Arr(f FunctorUintArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUintArr) MapComplex128Arr(f FunctorUintArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUintArr) MapStringArr(f FunctorUintArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUintArr) MapAnyArr(f FunctorUintArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint8Arr) MapBool(f FunctorUint8ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint8Arr) MapRune(f FunctorUint8ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint8Arr) MapByte(f FunctorUint8ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint8Arr) MapInt(f FunctorUint8ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint8Arr) MapInt8(f FunctorUint8ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint8Arr) MapInt16(f FunctorUint8ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint8Arr) MapInt32(f FunctorUint8ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint8Arr) MapInt64(f FunctorUint8ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint8Arr) MapUint(f FunctorUint8ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint8Arr) MapUint8(f FunctorUint8ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint8Arr) MapUint16(f FunctorUint8ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint8Arr) MapUint32(f FunctorUint8ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint8Arr) MapUint64(f FunctorUint8ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint8Arr) MapUintptr(f FunctorUint8ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint8Arr) MapFloat32(f FunctorUint8ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint8Arr) MapFloat64(f FunctorUint8ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint8Arr) MapComplex64(f FunctorUint8ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint8Arr) MapComplex128(f FunctorUint8ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint8Arr) MapString(f FunctorUint8ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint8Arr) MapAny(f FunctorUint8ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint8Arr) MapBoolArr(f FunctorUint8ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint8Arr) MapRuneArr(f FunctorUint8ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint8Arr) MapByteArr(f FunctorUint8ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint8Arr) MapIntArr(f FunctorUint8ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint8Arr) MapInt8Arr(f FunctorUint8ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint8Arr) MapInt16Arr(f FunctorUint8ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint8Arr) MapInt32Arr(f FunctorUint8ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint8Arr) MapInt64Arr(f FunctorUint8ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint8Arr) MapUintArr(f FunctorUint8ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint8Arr) MapUint8Arr(f FunctorUint8ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint8Arr) MapUint16Arr(f FunctorUint8ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint8Arr) MapUint32Arr(f FunctorUint8ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint8Arr) MapUint64Arr(f FunctorUint8ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint8Arr) MapUintptrArr(f FunctorUint8ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint8Arr) MapFloat32Arr(f FunctorUint8ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint8Arr) MapFloat64Arr(f FunctorUint8ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint8Arr) MapComplex64Arr(f FunctorUint8ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint8Arr) MapComplex128Arr(f FunctorUint8ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint8Arr) MapStringArr(f FunctorUint8ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint8Arr) MapAnyArr(f FunctorUint8ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint16Arr) MapBool(f FunctorUint16ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint16Arr) MapRune(f FunctorUint16ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint16Arr) MapByte(f FunctorUint16ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint16Arr) MapInt(f FunctorUint16ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint16Arr) MapInt8(f FunctorUint16ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint16Arr) MapInt16(f FunctorUint16ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint16Arr) MapInt32(f FunctorUint16ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint16Arr) MapInt64(f FunctorUint16ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint16Arr) MapUint(f FunctorUint16ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint16Arr) MapUint8(f FunctorUint16ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint16Arr) MapUint16(f FunctorUint16ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint16Arr) MapUint32(f FunctorUint16ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint16Arr) MapUint64(f FunctorUint16ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint16Arr) MapUintptr(f FunctorUint16ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint16Arr) MapFloat32(f FunctorUint16ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint16Arr) MapFloat64(f FunctorUint16ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint16Arr) MapComplex64(f FunctorUint16ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint16Arr) MapComplex128(f FunctorUint16ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint16Arr) MapString(f FunctorUint16ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint16Arr) MapAny(f FunctorUint16ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint16Arr) MapBoolArr(f FunctorUint16ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint16Arr) MapRuneArr(f FunctorUint16ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint16Arr) MapByteArr(f FunctorUint16ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint16Arr) MapIntArr(f FunctorUint16ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint16Arr) MapInt8Arr(f FunctorUint16ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint16Arr) MapInt16Arr(f FunctorUint16ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint16Arr) MapInt32Arr(f FunctorUint16ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint16Arr) MapInt64Arr(f FunctorUint16ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint16Arr) MapUintArr(f FunctorUint16ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint16Arr) MapUint8Arr(f FunctorUint16ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint16Arr) MapUint16Arr(f FunctorUint16ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint16Arr) MapUint32Arr(f FunctorUint16ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint16Arr) MapUint64Arr(f FunctorUint16ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint16Arr) MapUintptrArr(f FunctorUint16ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint16Arr) MapFloat32Arr(f FunctorUint16ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint16Arr) MapFloat64Arr(f FunctorUint16ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint16Arr) MapComplex64Arr(f FunctorUint16ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint16Arr) MapComplex128Arr(f FunctorUint16ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint16Arr) MapStringArr(f FunctorUint16ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint16Arr) MapAnyArr(f FunctorUint16ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint32Arr) MapBool(f FunctorUint32ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint32Arr) MapRune(f FunctorUint32ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint32Arr) MapByte(f FunctorUint32ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint32Arr) MapInt(f FunctorUint32ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint32Arr) MapInt8(f FunctorUint32ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint32Arr) MapInt16(f FunctorUint32ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint32Arr) MapInt32(f FunctorUint32ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint32Arr) MapInt64(f FunctorUint32ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint32Arr) MapUint(f FunctorUint32ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint32Arr) MapUint8(f FunctorUint32ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint32Arr) MapUint16(f FunctorUint32ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint32Arr) MapUint32(f FunctorUint32ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint32Arr) MapUint64(f FunctorUint32ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint32Arr) MapUintptr(f FunctorUint32ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint32Arr) MapFloat32(f FunctorUint32ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint32Arr) MapFloat64(f FunctorUint32ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint32Arr) MapComplex64(f FunctorUint32ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint32Arr) MapComplex128(f FunctorUint32ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint32Arr) MapString(f FunctorUint32ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint32Arr) MapAny(f FunctorUint32ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint32Arr) MapBoolArr(f FunctorUint32ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint32Arr) MapRuneArr(f FunctorUint32ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint32Arr) MapByteArr(f FunctorUint32ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint32Arr) MapIntArr(f FunctorUint32ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint32Arr) MapInt8Arr(f FunctorUint32ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint32Arr) MapInt16Arr(f FunctorUint32ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint32Arr) MapInt32Arr(f FunctorUint32ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint32Arr) MapInt64Arr(f FunctorUint32ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint32Arr) MapUintArr(f FunctorUint32ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint32Arr) MapUint8Arr(f FunctorUint32ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint32Arr) MapUint16Arr(f FunctorUint32ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint32Arr) MapUint32Arr(f FunctorUint32ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint32Arr) MapUint64Arr(f FunctorUint32ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint32Arr) MapUintptrArr(f FunctorUint32ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint32Arr) MapFloat32Arr(f FunctorUint32ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint32Arr) MapFloat64Arr(f FunctorUint32ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint32Arr) MapComplex64Arr(f FunctorUint32ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint32Arr) MapComplex128Arr(f FunctorUint32ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint32Arr) MapStringArr(f FunctorUint32ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint32Arr) MapAnyArr(f FunctorUint32ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUint64Arr) MapBool(f FunctorUint64ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUint64Arr) MapRune(f FunctorUint64ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUint64Arr) MapByte(f FunctorUint64ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUint64Arr) MapInt(f FunctorUint64ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUint64Arr) MapInt8(f FunctorUint64ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUint64Arr) MapInt16(f FunctorUint64ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUint64Arr) MapInt32(f FunctorUint64ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUint64Arr) MapInt64(f FunctorUint64ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUint64Arr) MapUint(f FunctorUint64ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUint64Arr) MapUint8(f FunctorUint64ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUint64Arr) MapUint16(f FunctorUint64ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUint64Arr) MapUint32(f FunctorUint64ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUint64Arr) MapUint64(f FunctorUint64ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUint64Arr) MapUintptr(f FunctorUint64ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUint64Arr) MapFloat32(f FunctorUint64ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUint64Arr) MapFloat64(f FunctorUint64ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUint64Arr) MapComplex64(f FunctorUint64ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUint64Arr) MapComplex128(f FunctorUint64ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUint64Arr) MapString(f FunctorUint64ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUint64Arr) MapAny(f FunctorUint64ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUint64Arr) MapBoolArr(f FunctorUint64ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUint64Arr) MapRuneArr(f FunctorUint64ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUint64Arr) MapByteArr(f FunctorUint64ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUint64Arr) MapIntArr(f FunctorUint64ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUint64Arr) MapInt8Arr(f FunctorUint64ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUint64Arr) MapInt16Arr(f FunctorUint64ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUint64Arr) MapInt32Arr(f FunctorUint64ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUint64Arr) MapInt64Arr(f FunctorUint64ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUint64Arr) MapUintArr(f FunctorUint64ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUint64Arr) MapUint8Arr(f FunctorUint64ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUint64Arr) MapUint16Arr(f FunctorUint64ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUint64Arr) MapUint32Arr(f FunctorUint64ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUint64Arr) MapUint64Arr(f FunctorUint64ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUint64Arr) MapUintptrArr(f FunctorUint64ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUint64Arr) MapFloat32Arr(f FunctorUint64ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUint64Arr) MapFloat64Arr(f FunctorUint64ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUint64Arr) MapComplex64Arr(f FunctorUint64ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUint64Arr) MapComplex128Arr(f FunctorUint64ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUint64Arr) MapStringArr(f FunctorUint64ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUint64Arr) MapAnyArr(f FunctorUint64ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionUintptrArr) MapBool(f FunctorUintptrArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionUintptrArr) MapRune(f FunctorUintptrArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionUintptrArr) MapByte(f FunctorUintptrArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionUintptrArr) MapInt(f FunctorUintptrArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionUintptrArr) MapInt8(f FunctorUintptrArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionUintptrArr) MapInt16(f FunctorUintptrArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionUintptrArr) MapInt32(f FunctorUintptrArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionUintptrArr) MapInt64(f FunctorUintptrArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionUintptrArr) MapUint(f FunctorUintptrArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionUintptrArr) MapUint8(f FunctorUintptrArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionUintptrArr) MapUint16(f FunctorUintptrArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionUintptrArr) MapUint32(f FunctorUintptrArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionUintptrArr) MapUint64(f FunctorUintptrArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionUintptrArr) MapUintptr(f FunctorUintptrArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionUintptrArr) MapFloat32(f FunctorUintptrArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionUintptrArr) MapFloat64(f FunctorUintptrArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionUintptrArr) MapComplex64(f FunctorUintptrArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionUintptrArr) MapComplex128(f FunctorUintptrArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionUintptrArr) MapString(f FunctorUintptrArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionUintptrArr) MapAny(f FunctorUintptrArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionUintptrArr) MapBoolArr(f FunctorUintptrArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionUintptrArr) MapRuneArr(f FunctorUintptrArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionUintptrArr) MapByteArr(f FunctorUintptrArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionUintptrArr) MapIntArr(f FunctorUintptrArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionUintptrArr) MapInt8Arr(f FunctorUintptrArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionUintptrArr) MapInt16Arr(f FunctorUintptrArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionUintptrArr) MapInt32Arr(f FunctorUintptrArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionUintptrArr) MapInt64Arr(f FunctorUintptrArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionUintptrArr) MapUintArr(f FunctorUintptrArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionUintptrArr) MapUint8Arr(f FunctorUintptrArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionUintptrArr) MapUint16Arr(f FunctorUintptrArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionUintptrArr) MapUint32Arr(f FunctorUintptrArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionUintptrArr) MapUint64Arr(f FunctorUintptrArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionUintptrArr) MapUintptrArr(f FunctorUintptrArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionUintptrArr) MapFloat32Arr(f FunctorUintptrArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionUintptrArr) MapFloat64Arr(f FunctorUintptrArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionUintptrArr) MapComplex64Arr(f FunctorUintptrArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionUintptrArr) MapComplex128Arr(f FunctorUintptrArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionUintptrArr) MapStringArr(f FunctorUintptrArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionUintptrArr) MapAnyArr(f FunctorUintptrArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat32Arr) MapBool(f FunctorFloat32ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat32Arr) MapRune(f FunctorFloat32ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat32Arr) MapByte(f FunctorFloat32ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat32Arr) MapInt(f FunctorFloat32ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat32Arr) MapInt8(f FunctorFloat32ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat32Arr) MapInt16(f FunctorFloat32ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat32Arr) MapInt32(f FunctorFloat32ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat32Arr) MapInt64(f FunctorFloat32ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat32Arr) MapUint(f FunctorFloat32ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat32Arr) MapUint8(f FunctorFloat32ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat32Arr) MapUint16(f FunctorFloat32ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat32Arr) MapUint32(f FunctorFloat32ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat32Arr) MapUint64(f FunctorFloat32ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat32Arr) MapUintptr(f FunctorFloat32ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat32Arr) MapFloat32(f FunctorFloat32ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat32Arr) MapFloat64(f FunctorFloat32ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat32Arr) MapComplex64(f FunctorFloat32ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat32Arr) MapComplex128(f FunctorFloat32ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat32Arr) MapString(f FunctorFloat32ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat32Arr) MapAny(f FunctorFloat32ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat32Arr) MapBoolArr(f FunctorFloat32ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat32Arr) MapRuneArr(f FunctorFloat32ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat32Arr) MapByteArr(f FunctorFloat32ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat32Arr) MapIntArr(f FunctorFloat32ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat32Arr) MapInt8Arr(f FunctorFloat32ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat32Arr) MapInt16Arr(f FunctorFloat32ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat32Arr) MapInt32Arr(f FunctorFloat32ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat32Arr) MapInt64Arr(f FunctorFloat32ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat32Arr) MapUintArr(f FunctorFloat32ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat32Arr) MapUint8Arr(f FunctorFloat32ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat32Arr) MapUint16Arr(f FunctorFloat32ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat32Arr) MapUint32Arr(f FunctorFloat32ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat32Arr) MapUint64Arr(f FunctorFloat32ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat32Arr) MapUintptrArr(f FunctorFloat32ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat32Arr) MapFloat32Arr(f FunctorFloat32ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat32Arr) MapFloat64Arr(f FunctorFloat32ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat32Arr) MapComplex64Arr(f FunctorFloat32ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat32Arr) MapComplex128Arr(f FunctorFloat32ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat32Arr) MapStringArr(f FunctorFloat32ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat32Arr) MapAnyArr(f FunctorFloat32ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionFloat64Arr) MapBool(f FunctorFloat64ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionFloat64Arr) MapRune(f FunctorFloat64ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionFloat64Arr) MapByte(f FunctorFloat64ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionFloat64Arr) MapInt(f FunctorFloat64ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionFloat64Arr) MapInt8(f FunctorFloat64ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionFloat64Arr) MapInt16(f FunctorFloat64ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionFloat64Arr) MapInt32(f FunctorFloat64ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionFloat64Arr) MapInt64(f FunctorFloat64ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionFloat64Arr) MapUint(f FunctorFloat64ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionFloat64Arr) MapUint8(f FunctorFloat64ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionFloat64Arr) MapUint16(f FunctorFloat64ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionFloat64Arr) MapUint32(f FunctorFloat64ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionFloat64Arr) MapUint64(f FunctorFloat64ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionFloat64Arr) MapUintptr(f FunctorFloat64ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionFloat64Arr) MapFloat32(f FunctorFloat64ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionFloat64Arr) MapFloat64(f FunctorFloat64ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionFloat64Arr) MapComplex64(f FunctorFloat64ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionFloat64Arr) MapComplex128(f FunctorFloat64ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionFloat64Arr) MapString(f FunctorFloat64ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionFloat64Arr) MapAny(f FunctorFloat64ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionFloat64Arr) MapBoolArr(f FunctorFloat64ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionFloat64Arr) MapRuneArr(f FunctorFloat64ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionFloat64Arr) MapByteArr(f FunctorFloat64ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionFloat64Arr) MapIntArr(f FunctorFloat64ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionFloat64Arr) MapInt8Arr(f FunctorFloat64ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionFloat64Arr) MapInt16Arr(f FunctorFloat64ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionFloat64Arr) MapInt32Arr(f FunctorFloat64ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionFloat64Arr) MapInt64Arr(f FunctorFloat64ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionFloat64Arr) MapUintArr(f FunctorFloat64ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionFloat64Arr) MapUint8Arr(f FunctorFloat64ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionFloat64Arr) MapUint16Arr(f FunctorFloat64ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionFloat64Arr) MapUint32Arr(f FunctorFloat64ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionFloat64Arr) MapUint64Arr(f FunctorFloat64ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionFloat64Arr) MapUintptrArr(f FunctorFloat64ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionFloat64Arr) MapFloat32Arr(f FunctorFloat64ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionFloat64Arr) MapFloat64Arr(f FunctorFloat64ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionFloat64Arr) MapComplex64Arr(f FunctorFloat64ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionFloat64Arr) MapComplex128Arr(f FunctorFloat64ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionFloat64Arr) MapStringArr(f FunctorFloat64ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionFloat64Arr) MapAnyArr(f FunctorFloat64ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex64Arr) MapBool(f FunctorComplex64ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex64Arr) MapRune(f FunctorComplex64ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex64Arr) MapByte(f FunctorComplex64ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex64Arr) MapInt(f FunctorComplex64ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex64Arr) MapInt8(f FunctorComplex64ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex64Arr) MapInt16(f FunctorComplex64ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex64Arr) MapInt32(f FunctorComplex64ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex64Arr) MapInt64(f FunctorComplex64ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex64Arr) MapUint(f FunctorComplex64ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex64Arr) MapUint8(f FunctorComplex64ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex64Arr) MapUint16(f FunctorComplex64ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex64Arr) MapUint32(f FunctorComplex64ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex64Arr) MapUint64(f FunctorComplex64ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex64Arr) MapUintptr(f FunctorComplex64ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex64Arr) MapFloat32(f FunctorComplex64ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex64Arr) MapFloat64(f FunctorComplex64ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex64Arr) MapComplex64(f FunctorComplex64ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex64Arr) MapComplex128(f FunctorComplex64ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex64Arr) MapString(f FunctorComplex64ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex64Arr) MapAny(f FunctorComplex64ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex64Arr) MapBoolArr(f FunctorComplex64ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex64Arr) MapRuneArr(f FunctorComplex64ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex64Arr) MapByteArr(f FunctorComplex64ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex64Arr) MapIntArr(f FunctorComplex64ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex64Arr) MapInt8Arr(f FunctorComplex64ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex64Arr) MapInt16Arr(f FunctorComplex64ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex64Arr) MapInt32Arr(f FunctorComplex64ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex64Arr) MapInt64Arr(f FunctorComplex64ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex64Arr) MapUintArr(f FunctorComplex64ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex64Arr) MapUint8Arr(f FunctorComplex64ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex64Arr) MapUint16Arr(f FunctorComplex64ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex64Arr) MapUint32Arr(f FunctorComplex64ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex64Arr) MapUint64Arr(f FunctorComplex64ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex64Arr) MapUintptrArr(f FunctorComplex64ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex64Arr) MapFloat32Arr(f FunctorComplex64ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex64Arr) MapFloat64Arr(f FunctorComplex64ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex64Arr) MapComplex64Arr(f FunctorComplex64ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex64Arr) MapComplex128Arr(f FunctorComplex64ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex64Arr) MapStringArr(f FunctorComplex64ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex64Arr) MapAnyArr(f FunctorComplex64ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionComplex128Arr) MapBool(f FunctorComplex128ArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionComplex128Arr) MapRune(f FunctorComplex128ArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionComplex128Arr) MapByte(f FunctorComplex128ArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionComplex128Arr) MapInt(f FunctorComplex128ArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionComplex128Arr) MapInt8(f FunctorComplex128ArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionComplex128Arr) MapInt16(f FunctorComplex128ArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionComplex128Arr) MapInt32(f FunctorComplex128ArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionComplex128Arr) MapInt64(f FunctorComplex128ArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionComplex128Arr) MapUint(f FunctorComplex128ArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionComplex128Arr) MapUint8(f FunctorComplex128ArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionComplex128Arr) MapUint16(f FunctorComplex128ArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionComplex128Arr) MapUint32(f FunctorComplex128ArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionComplex128Arr) MapUint64(f FunctorComplex128ArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionComplex128Arr) MapUintptr(f FunctorComplex128ArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionComplex128Arr) MapFloat32(f FunctorComplex128ArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionComplex128Arr) MapFloat64(f FunctorComplex128ArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionComplex128Arr) MapComplex64(f FunctorComplex128ArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionComplex128Arr) MapComplex128(f FunctorComplex128ArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionComplex128Arr) MapString(f FunctorComplex128ArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionComplex128Arr) MapAny(f FunctorComplex128ArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionComplex128Arr) MapBoolArr(f FunctorComplex128ArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionComplex128Arr) MapRuneArr(f FunctorComplex128ArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionComplex128Arr) MapByteArr(f FunctorComplex128ArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionComplex128Arr) MapIntArr(f FunctorComplex128ArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionComplex128Arr) MapInt8Arr(f FunctorComplex128ArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionComplex128Arr) MapInt16Arr(f FunctorComplex128ArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionComplex128Arr) MapInt32Arr(f FunctorComplex128ArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionComplex128Arr) MapInt64Arr(f FunctorComplex128ArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionComplex128Arr) MapUintArr(f FunctorComplex128ArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionComplex128Arr) MapUint8Arr(f FunctorComplex128ArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionComplex128Arr) MapUint16Arr(f FunctorComplex128ArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionComplex128Arr) MapUint32Arr(f FunctorComplex128ArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionComplex128Arr) MapUint64Arr(f FunctorComplex128ArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionComplex128Arr) MapUintptrArr(f FunctorComplex128ArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionComplex128Arr) MapFloat32Arr(f FunctorComplex128ArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionComplex128Arr) MapFloat64Arr(f FunctorComplex128ArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionComplex128Arr) MapComplex64Arr(f FunctorComplex128ArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionComplex128Arr) MapComplex128Arr(f FunctorComplex128ArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionComplex128Arr) MapStringArr(f FunctorComplex128ArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionComplex128Arr) MapAnyArr(f FunctorComplex128ArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionStringArr) MapBool(f FunctorStringArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionStringArr) MapRune(f FunctorStringArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionStringArr) MapByte(f FunctorStringArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionStringArr) MapInt(f FunctorStringArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionStringArr) MapInt8(f FunctorStringArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionStringArr) MapInt16(f FunctorStringArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionStringArr) MapInt32(f FunctorStringArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionStringArr) MapInt64(f FunctorStringArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionStringArr) MapUint(f FunctorStringArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionStringArr) MapUint8(f FunctorStringArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionStringArr) MapUint16(f FunctorStringArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionStringArr) MapUint32(f FunctorStringArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionStringArr) MapUint64(f FunctorStringArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionStringArr) MapUintptr(f FunctorStringArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionStringArr) MapFloat32(f FunctorStringArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionStringArr) MapFloat64(f FunctorStringArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionStringArr) MapComplex64(f FunctorStringArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionStringArr) MapComplex128(f FunctorStringArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionStringArr) MapString(f FunctorStringArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionStringArr) MapAny(f FunctorStringArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionStringArr) MapBoolArr(f FunctorStringArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionStringArr) MapRuneArr(f FunctorStringArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionStringArr) MapByteArr(f FunctorStringArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionStringArr) MapIntArr(f FunctorStringArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionStringArr) MapInt8Arr(f FunctorStringArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionStringArr) MapInt16Arr(f FunctorStringArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionStringArr) MapInt32Arr(f FunctorStringArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionStringArr) MapInt64Arr(f FunctorStringArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionStringArr) MapUintArr(f FunctorStringArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionStringArr) MapUint8Arr(f FunctorStringArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionStringArr) MapUint16Arr(f FunctorStringArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionStringArr) MapUint32Arr(f FunctorStringArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionStringArr) MapUint64Arr(f FunctorStringArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionStringArr) MapUintptrArr(f FunctorStringArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionStringArr) MapFloat32Arr(f FunctorStringArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionStringArr) MapFloat64Arr(f FunctorStringArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionStringArr) MapComplex64Arr(f FunctorStringArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionStringArr) MapComplex128Arr(f FunctorStringArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionStringArr) MapStringArr(f FunctorStringArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionStringArr) MapAnyArr(f FunctorStringArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
func (o OptionAnyArr) MapBool(f FunctorAnyArrBool) OptionBool {
	if o.IsDefined() {
		return Bool(f(*o.value))
	} else {
		return NoneBool
	}
}
func (o OptionAnyArr) MapRune(f FunctorAnyArrRune) OptionRune {
	if o.IsDefined() {
		return Rune(f(*o.value))
	} else {
		return NoneRune
	}
}
func (o OptionAnyArr) MapByte(f FunctorAnyArrByte) OptionByte {
	if o.IsDefined() {
		return Byte(f(*o.value))
	} else {
		return NoneByte
	}
}
func (o OptionAnyArr) MapInt(f FunctorAnyArrInt) OptionInt {
	if o.IsDefined() {
		return Int(f(*o.value))
	} else {
		return NoneInt
	}
}
func (o OptionAnyArr) MapInt8(f FunctorAnyArrInt8) OptionInt8 {
	if o.IsDefined() {
		return Int8(f(*o.value))
	} else {
		return NoneInt8
	}
}
func (o OptionAnyArr) MapInt16(f FunctorAnyArrInt16) OptionInt16 {
	if o.IsDefined() {
		return Int16(f(*o.value))
	} else {
		return NoneInt16
	}
}
func (o OptionAnyArr) MapInt32(f FunctorAnyArrInt32) OptionInt32 {
	if o.IsDefined() {
		return Int32(f(*o.value))
	} else {
		return NoneInt32
	}
}
func (o OptionAnyArr) MapInt64(f FunctorAnyArrInt64) OptionInt64 {
	if o.IsDefined() {
		return Int64(f(*o.value))
	} else {
		return NoneInt64
	}
}
func (o OptionAnyArr) MapUint(f FunctorAnyArrUint) OptionUint {
	if o.IsDefined() {
		return Uint(f(*o.value))
	} else {
		return NoneUint
	}
}
func (o OptionAnyArr) MapUint8(f FunctorAnyArrUint8) OptionUint8 {
	if o.IsDefined() {
		return Uint8(f(*o.value))
	} else {
		return NoneUint8
	}
}
func (o OptionAnyArr) MapUint16(f FunctorAnyArrUint16) OptionUint16 {
	if o.IsDefined() {
		return Uint16(f(*o.value))
	} else {
		return NoneUint16
	}
}
func (o OptionAnyArr) MapUint32(f FunctorAnyArrUint32) OptionUint32 {
	if o.IsDefined() {
		return Uint32(f(*o.value))
	} else {
		return NoneUint32
	}
}
func (o OptionAnyArr) MapUint64(f FunctorAnyArrUint64) OptionUint64 {
	if o.IsDefined() {
		return Uint64(f(*o.value))
	} else {
		return NoneUint64
	}
}
func (o OptionAnyArr) MapUintptr(f FunctorAnyArrUintptr) OptionUintptr {
	if o.IsDefined() {
		return Uintptr(f(*o.value))
	} else {
		return NoneUintptr
	}
}
func (o OptionAnyArr) MapFloat32(f FunctorAnyArrFloat32) OptionFloat32 {
	if o.IsDefined() {
		return Float32(f(*o.value))
	} else {
		return NoneFloat32
	}
}
func (o OptionAnyArr) MapFloat64(f FunctorAnyArrFloat64) OptionFloat64 {
	if o.IsDefined() {
		return Float64(f(*o.value))
	} else {
		return NoneFloat64
	}
}
func (o OptionAnyArr) MapComplex64(f FunctorAnyArrComplex64) OptionComplex64 {
	if o.IsDefined() {
		return Complex64(f(*o.value))
	} else {
		return NoneComplex64
	}
}
func (o OptionAnyArr) MapComplex128(f FunctorAnyArrComplex128) OptionComplex128 {
	if o.IsDefined() {
		return Complex128(f(*o.value))
	} else {
		return NoneComplex128
	}
}
func (o OptionAnyArr) MapString(f FunctorAnyArrString) OptionString {
	if o.IsDefined() {
		return String(f(*o.value))
	} else {
		return NoneString
	}
}
func (o OptionAnyArr) MapAny(f FunctorAnyArrAny) OptionAny {
	if o.IsDefined() {
		return AnyOpt(f(*o.value))
	} else {
		return NoneAny
	}
}
func (o OptionAnyArr) MapBoolArr(f FunctorAnyArrBoolArr) OptionBoolArr {
	if o.IsDefined() {
		return BoolArr(f(*o.value))
	} else {
		return NoneBoolArr
	}
}
func (o OptionAnyArr) MapRuneArr(f FunctorAnyArrRuneArr) OptionRuneArr {
	if o.IsDefined() {
		return RuneArr(f(*o.value))
	} else {
		return NoneRuneArr
	}
}
func (o OptionAnyArr) MapByteArr(f FunctorAnyArrByteArr) OptionByteArr {
	if o.IsDefined() {
		return ByteArr(f(*o.value))
	} else {
		return NoneByteArr
	}
}
func (o OptionAnyArr) MapIntArr(f FunctorAnyArrIntArr) OptionIntArr {
	if o.IsDefined() {
		return IntArr(f(*o.value))
	} else {
		return NoneIntArr
	}
}
func (o OptionAnyArr) MapInt8Arr(f FunctorAnyArrInt8Arr) OptionInt8Arr {
	if o.IsDefined() {
		return Int8Arr(f(*o.value))
	} else {
		return NoneInt8Arr
	}
}
func (o OptionAnyArr) MapInt16Arr(f FunctorAnyArrInt16Arr) OptionInt16Arr {
	if o.IsDefined() {
		return Int16Arr(f(*o.value))
	} else {
		return NoneInt16Arr
	}
}
func (o OptionAnyArr) MapInt32Arr(f FunctorAnyArrInt32Arr) OptionInt32Arr {
	if o.IsDefined() {
		return Int32Arr(f(*o.value))
	} else {
		return NoneInt32Arr
	}
}
func (o OptionAnyArr) MapInt64Arr(f FunctorAnyArrInt64Arr) OptionInt64Arr {
	if o.IsDefined() {
		return Int64Arr(f(*o.value))
	} else {
		return NoneInt64Arr
	}
}
func (o OptionAnyArr) MapUintArr(f FunctorAnyArrUintArr) OptionUintArr {
	if o.IsDefined() {
		return UintArr(f(*o.value))
	} else {
		return NoneUintArr
	}
}
func (o OptionAnyArr) MapUint8Arr(f FunctorAnyArrUint8Arr) OptionUint8Arr {
	if o.IsDefined() {
		return Uint8Arr(f(*o.value))
	} else {
		return NoneUint8Arr
	}
}
func (o OptionAnyArr) MapUint16Arr(f FunctorAnyArrUint16Arr) OptionUint16Arr {
	if o.IsDefined() {
		return Uint16Arr(f(*o.value))
	} else {
		return NoneUint16Arr
	}
}
func (o OptionAnyArr) MapUint32Arr(f FunctorAnyArrUint32Arr) OptionUint32Arr {
	if o.IsDefined() {
		return Uint32Arr(f(*o.value))
	} else {
		return NoneUint32Arr
	}
}
func (o OptionAnyArr) MapUint64Arr(f FunctorAnyArrUint64Arr) OptionUint64Arr {
	if o.IsDefined() {
		return Uint64Arr(f(*o.value))
	} else {
		return NoneUint64Arr
	}
}
func (o OptionAnyArr) MapUintptrArr(f FunctorAnyArrUintptrArr) OptionUintptrArr {
	if o.IsDefined() {
		return UintptrArr(f(*o.value))
	} else {
		return NoneUintptrArr
	}
}
func (o OptionAnyArr) MapFloat32Arr(f FunctorAnyArrFloat32Arr) OptionFloat32Arr {
	if o.IsDefined() {
		return Float32Arr(f(*o.value))
	} else {
		return NoneFloat32Arr
	}
}
func (o OptionAnyArr) MapFloat64Arr(f FunctorAnyArrFloat64Arr) OptionFloat64Arr {
	if o.IsDefined() {
		return Float64Arr(f(*o.value))
	} else {
		return NoneFloat64Arr
	}
}
func (o OptionAnyArr) MapComplex64Arr(f FunctorAnyArrComplex64Arr) OptionComplex64Arr {
	if o.IsDefined() {
		return Complex64Arr(f(*o.value))
	} else {
		return NoneComplex64Arr
	}
}
func (o OptionAnyArr) MapComplex128Arr(f FunctorAnyArrComplex128Arr) OptionComplex128Arr {
	if o.IsDefined() {
		return Complex128Arr(f(*o.value))
	} else {
		return NoneComplex128Arr
	}
}
func (o OptionAnyArr) MapStringArr(f FunctorAnyArrStringArr) OptionStringArr {
	if o.IsDefined() {
		return StringArr(f(*o.value))
	} else {
		return NoneStringArr
	}
}
func (o OptionAnyArr) MapAnyArr(f FunctorAnyArrAnyArr) OptionAnyArr {
	if o.IsDefined() {
		return AnyArr(f(*o.value))
	} else {
		return NoneAnyArr
	}
}
