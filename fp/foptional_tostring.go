// foptional_tostring.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

import "fmt"

func (o OptionBool) ToString() string {
	if o == NoneBool {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringBool(*o.value))
	}
}

func (o OptionRune) ToString() string {
	if o == NoneRune {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringRune(*o.value))
	}
}

func (o OptionByte) ToString() string {
	if o == NoneByte {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringByte(*o.value))
	}
}

func (o OptionInt) ToString() string {
	if o == NoneInt {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt(*o.value))
	}
}

func (o OptionInt8) ToString() string {
	if o == NoneInt8 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt8(*o.value))
	}
}

func (o OptionInt16) ToString() string {
	if o == NoneInt16 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt16(*o.value))
	}
}

func (o OptionInt32) ToString() string {
	if o == NoneInt32 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt32(*o.value))
	}
}

func (o OptionInt64) ToString() string {
	if o == NoneInt64 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt64(*o.value))
	}
}

func (o OptionUint) ToString() string {
	if o == NoneUint {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint(*o.value))
	}
}

func (o OptionUint8) ToString() string {
	if o == NoneUint8 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint8(*o.value))
	}
}

func (o OptionUint16) ToString() string {
	if o == NoneUint16 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint16(*o.value))
	}
}

func (o OptionUint32) ToString() string {
	if o == NoneUint32 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint32(*o.value))
	}
}

func (o OptionUint64) ToString() string {
	if o == NoneUint64 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint64(*o.value))
	}
}

func (o OptionUintptr) ToString() string {
	if o == NoneUintptr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUintptr(*o.value))
	}
}

func (o OptionFloat32) ToString() string {
	if o == NoneFloat32 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringFloat32(*o.value))
	}
}

func (o OptionFloat64) ToString() string {
	if o == NoneFloat64 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringFloat64(*o.value))
	}
}

func (o OptionComplex64) ToString() string {
	if o == NoneComplex64 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringComplex64(*o.value))
	}
}

func (o OptionComplex128) ToString() string {
	if o == NoneComplex128 {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringComplex128(*o.value))
	}
}

func (o OptionString) ToString() string {
	if o == NoneString {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringString(*o.value))
	}
}

func (o OptionAny) ToString() string {
	if o == NoneAny {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringAny(*o.value))
	}
}

func (o OptionBoolArr) ToString() string {
	if o == NoneBoolArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringBoolArr(*o.value))
	}
}

func (o OptionRuneArr) ToString() string {
	if o == NoneRuneArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringRuneArr(*o.value))
	}
}

func (o OptionByteArr) ToString() string {
	if o == NoneByteArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringByteArr(*o.value))
	}
}

func (o OptionIntArr) ToString() string {
	if o == NoneIntArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringIntArr(*o.value))
	}
}

func (o OptionInt8Arr) ToString() string {
	if o == NoneInt8Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt8Arr(*o.value))
	}
}

func (o OptionInt16Arr) ToString() string {
	if o == NoneInt16Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt16Arr(*o.value))
	}
}

func (o OptionInt32Arr) ToString() string {
	if o == NoneInt32Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt32Arr(*o.value))
	}
}

func (o OptionInt64Arr) ToString() string {
	if o == NoneInt64Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringInt64Arr(*o.value))
	}
}

func (o OptionUintArr) ToString() string {
	if o == NoneUintArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUintArr(*o.value))
	}
}

func (o OptionUint8Arr) ToString() string {
	if o == NoneUint8Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint8Arr(*o.value))
	}
}

func (o OptionUint16Arr) ToString() string {
	if o == NoneUint16Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint16Arr(*o.value))
	}
}

func (o OptionUint32Arr) ToString() string {
	if o == NoneUint32Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint32Arr(*o.value))
	}
}

func (o OptionUint64Arr) ToString() string {
	if o == NoneUint64Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUint64Arr(*o.value))
	}
}

func (o OptionUintptrArr) ToString() string {
	if o == NoneUintptrArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringUintptrArr(*o.value))
	}
}

func (o OptionFloat32Arr) ToString() string {
	if o == NoneFloat32Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringFloat32Arr(*o.value))
	}
}

func (o OptionFloat64Arr) ToString() string {
	if o == NoneFloat64Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringFloat64Arr(*o.value))
	}
}

func (o OptionComplex64Arr) ToString() string {
	if o == NoneComplex64Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringComplex64Arr(*o.value))
	}
}

func (o OptionComplex128Arr) ToString() string {
	if o == NoneComplex128Arr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringComplex128Arr(*o.value))
	}
}

func (o OptionStringArr) ToString() string {
	if o == NoneStringArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringStringArr(*o.value))
	}
}

func (o OptionAnyArr) ToString() string {
	if o == NoneAnyArr {
		return "None"
	} else {
		return fmt.Sprintf("Some(%v)", ToStringAnyArr(*o.value))
	}
}
