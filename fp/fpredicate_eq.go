// fpredicate_eq.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func EqBoolPredicate(e bool) BoolPredicate {
	return func(o bool) bool { return EqualBool(e, o) }
}
func EqRunePredicate(e rune) RunePredicate {
	return func(o rune) bool { return EqualRune(e, o) }
}
func EqBytePredicate(e byte) BytePredicate {
	return func(o byte) bool { return EqualByte(e, o) }
}
func EqIntPredicate(e int) IntPredicate {
	return func(o int) bool { return EqualInt(e, o) }
}
func EqInt8Predicate(e int8) Int8Predicate {
	return func(o int8) bool { return EqualInt8(e, o) }
}
func EqInt16Predicate(e int16) Int16Predicate {
	return func(o int16) bool { return EqualInt16(e, o) }
}
func EqInt32Predicate(e int32) Int32Predicate {
	return func(o int32) bool { return EqualInt32(e, o) }
}
func EqInt64Predicate(e int64) Int64Predicate {
	return func(o int64) bool { return EqualInt64(e, o) }
}
func EqUintPredicate(e uint) UintPredicate {
	return func(o uint) bool { return EqualUint(e, o) }
}
func EqUint8Predicate(e uint8) Uint8Predicate {
	return func(o uint8) bool { return EqualUint8(e, o) }
}
func EqUint16Predicate(e uint16) Uint16Predicate {
	return func(o uint16) bool { return EqualUint16(e, o) }
}
func EqUint32Predicate(e uint32) Uint32Predicate {
	return func(o uint32) bool { return EqualUint32(e, o) }
}
func EqUint64Predicate(e uint64) Uint64Predicate {
	return func(o uint64) bool { return EqualUint64(e, o) }
}
func EqUintptrPredicate(e uintptr) UintptrPredicate {
	return func(o uintptr) bool { return EqualUintptr(e, o) }
}
func EqFloat32Predicate(e float32) Float32Predicate {
	return func(o float32) bool { return EqualFloat32(e, o) }
}
func EqFloat64Predicate(e float64) Float64Predicate {
	return func(o float64) bool { return EqualFloat64(e, o) }
}
func EqComplex64Predicate(e complex64) Complex64Predicate {
	return func(o complex64) bool { return EqualComplex64(e, o) }
}
func EqComplex128Predicate(e complex128) Complex128Predicate {
	return func(o complex128) bool { return EqualComplex128(e, o) }
}
func EqStringPredicate(e string) StringPredicate {
	return func(o string) bool { return EqualString(e, o) }
}
func EqAnyPredicate(e Any) AnyPredicate {
	return func(o Any) bool { return EqualAny(e, o) }
}
func EqBoolArrPredicate(e []bool) BoolArrPredicate {
	return func(o []bool) bool { return EqualBoolArr(e, o) }
}
func EqRuneArrPredicate(e []rune) RuneArrPredicate {
	return func(o []rune) bool { return EqualRuneArr(e, o) }
}
func EqByteArrPredicate(e []byte) ByteArrPredicate {
	return func(o []byte) bool { return EqualByteArr(e, o) }
}
func EqIntArrPredicate(e []int) IntArrPredicate {
	return func(o []int) bool { return EqualIntArr(e, o) }
}
func EqInt8ArrPredicate(e []int8) Int8ArrPredicate {
	return func(o []int8) bool { return EqualInt8Arr(e, o) }
}
func EqInt16ArrPredicate(e []int16) Int16ArrPredicate {
	return func(o []int16) bool { return EqualInt16Arr(e, o) }
}
func EqInt32ArrPredicate(e []int32) Int32ArrPredicate {
	return func(o []int32) bool { return EqualInt32Arr(e, o) }
}
func EqInt64ArrPredicate(e []int64) Int64ArrPredicate {
	return func(o []int64) bool { return EqualInt64Arr(e, o) }
}
func EqUintArrPredicate(e []uint) UintArrPredicate {
	return func(o []uint) bool { return EqualUintArr(e, o) }
}
func EqUint8ArrPredicate(e []uint8) Uint8ArrPredicate {
	return func(o []uint8) bool { return EqualUint8Arr(e, o) }
}
func EqUint16ArrPredicate(e []uint16) Uint16ArrPredicate {
	return func(o []uint16) bool { return EqualUint16Arr(e, o) }
}
func EqUint32ArrPredicate(e []uint32) Uint32ArrPredicate {
	return func(o []uint32) bool { return EqualUint32Arr(e, o) }
}
func EqUint64ArrPredicate(e []uint64) Uint64ArrPredicate {
	return func(o []uint64) bool { return EqualUint64Arr(e, o) }
}
func EqUintptrArrPredicate(e []uintptr) UintptrArrPredicate {
	return func(o []uintptr) bool { return EqualUintptrArr(e, o) }
}
func EqFloat32ArrPredicate(e []float32) Float32ArrPredicate {
	return func(o []float32) bool { return EqualFloat32Arr(e, o) }
}
func EqFloat64ArrPredicate(e []float64) Float64ArrPredicate {
	return func(o []float64) bool { return EqualFloat64Arr(e, o) }
}
func EqComplex64ArrPredicate(e []complex64) Complex64ArrPredicate {
	return func(o []complex64) bool { return EqualComplex64Arr(e, o) }
}
func EqComplex128ArrPredicate(e []complex128) Complex128ArrPredicate {
	return func(o []complex128) bool { return EqualComplex128Arr(e, o) }
}
func EqStringArrPredicate(e []string) StringArrPredicate {
	return func(o []string) bool { return EqualStringArr(e, o) }
}
func EqAnyArrPredicate(e []Any) AnyArrPredicate {
	return func(o []Any) bool { return EqualAnyArr(e, o) }
}
