// fpredicate_logic.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY gofp-bootstrap

package fp

func (p1 PredicateBool) And(p2 PredicateBool) PredicateBool {
	return func(e bool) bool { return p1(e) && p2(e) }
}

func (p1 PredicateRune) And(p2 PredicateRune) PredicateRune {
	return func(e rune) bool { return p1(e) && p2(e) }
}

func (p1 PredicateByte) And(p2 PredicateByte) PredicateByte {
	return func(e byte) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt) And(p2 PredicateInt) PredicateInt {
	return func(e int) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt8) And(p2 PredicateInt8) PredicateInt8 {
	return func(e int8) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt16) And(p2 PredicateInt16) PredicateInt16 {
	return func(e int16) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt32) And(p2 PredicateInt32) PredicateInt32 {
	return func(e int32) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt64) And(p2 PredicateInt64) PredicateInt64 {
	return func(e int64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint) And(p2 PredicateUint) PredicateUint {
	return func(e uint) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint8) And(p2 PredicateUint8) PredicateUint8 {
	return func(e uint8) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint16) And(p2 PredicateUint16) PredicateUint16 {
	return func(e uint16) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint32) And(p2 PredicateUint32) PredicateUint32 {
	return func(e uint32) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint64) And(p2 PredicateUint64) PredicateUint64 {
	return func(e uint64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUintptr) And(p2 PredicateUintptr) PredicateUintptr {
	return func(e uintptr) bool { return p1(e) && p2(e) }
}

func (p1 PredicateFloat32) And(p2 PredicateFloat32) PredicateFloat32 {
	return func(e float32) bool { return p1(e) && p2(e) }
}

func (p1 PredicateFloat64) And(p2 PredicateFloat64) PredicateFloat64 {
	return func(e float64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateComplex64) And(p2 PredicateComplex64) PredicateComplex64 {
	return func(e complex64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateComplex128) And(p2 PredicateComplex128) PredicateComplex128 {
	return func(e complex128) bool { return p1(e) && p2(e) }
}

func (p1 PredicateString) And(p2 PredicateString) PredicateString {
	return func(e string) bool { return p1(e) && p2(e) }
}

func (p1 PredicateAny) And(p2 PredicateAny) PredicateAny {
	return func(e Any) bool { return p1(e) && p2(e) }
}

func (p1 PredicateBoolArr) And(p2 PredicateBoolArr) PredicateBoolArr {
	return func(e []bool) bool { return p1(e) && p2(e) }
}

func (p1 PredicateRuneArr) And(p2 PredicateRuneArr) PredicateRuneArr {
	return func(e []rune) bool { return p1(e) && p2(e) }
}

func (p1 PredicateByteArr) And(p2 PredicateByteArr) PredicateByteArr {
	return func(e []byte) bool { return p1(e) && p2(e) }
}

func (p1 PredicateIntArr) And(p2 PredicateIntArr) PredicateIntArr {
	return func(e []int) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt8Arr) And(p2 PredicateInt8Arr) PredicateInt8Arr {
	return func(e []int8) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt16Arr) And(p2 PredicateInt16Arr) PredicateInt16Arr {
	return func(e []int16) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt32Arr) And(p2 PredicateInt32Arr) PredicateInt32Arr {
	return func(e []int32) bool { return p1(e) && p2(e) }
}

func (p1 PredicateInt64Arr) And(p2 PredicateInt64Arr) PredicateInt64Arr {
	return func(e []int64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUintArr) And(p2 PredicateUintArr) PredicateUintArr {
	return func(e []uint) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint8Arr) And(p2 PredicateUint8Arr) PredicateUint8Arr {
	return func(e []uint8) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint16Arr) And(p2 PredicateUint16Arr) PredicateUint16Arr {
	return func(e []uint16) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint32Arr) And(p2 PredicateUint32Arr) PredicateUint32Arr {
	return func(e []uint32) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUint64Arr) And(p2 PredicateUint64Arr) PredicateUint64Arr {
	return func(e []uint64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateUintptrArr) And(p2 PredicateUintptrArr) PredicateUintptrArr {
	return func(e []uintptr) bool { return p1(e) && p2(e) }
}

func (p1 PredicateFloat32Arr) And(p2 PredicateFloat32Arr) PredicateFloat32Arr {
	return func(e []float32) bool { return p1(e) && p2(e) }
}

func (p1 PredicateFloat64Arr) And(p2 PredicateFloat64Arr) PredicateFloat64Arr {
	return func(e []float64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateComplex64Arr) And(p2 PredicateComplex64Arr) PredicateComplex64Arr {
	return func(e []complex64) bool { return p1(e) && p2(e) }
}

func (p1 PredicateComplex128Arr) And(p2 PredicateComplex128Arr) PredicateComplex128Arr {
	return func(e []complex128) bool { return p1(e) && p2(e) }
}

func (p1 PredicateStringArr) And(p2 PredicateStringArr) PredicateStringArr {
	return func(e []string) bool { return p1(e) && p2(e) }
}

func (p1 PredicateAnyArr) And(p2 PredicateAnyArr) PredicateAnyArr {
	return func(e []Any) bool { return p1(e) && p2(e) }
}

func (p1 PredicateBool) Or(p2 PredicateBool) PredicateBool {
	return func(e bool) bool { return p1(e) || p2(e) }
}

func (p1 PredicateRune) Or(p2 PredicateRune) PredicateRune {
	return func(e rune) bool { return p1(e) || p2(e) }
}

func (p1 PredicateByte) Or(p2 PredicateByte) PredicateByte {
	return func(e byte) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt) Or(p2 PredicateInt) PredicateInt {
	return func(e int) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt8) Or(p2 PredicateInt8) PredicateInt8 {
	return func(e int8) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt16) Or(p2 PredicateInt16) PredicateInt16 {
	return func(e int16) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt32) Or(p2 PredicateInt32) PredicateInt32 {
	return func(e int32) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt64) Or(p2 PredicateInt64) PredicateInt64 {
	return func(e int64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint) Or(p2 PredicateUint) PredicateUint {
	return func(e uint) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint8) Or(p2 PredicateUint8) PredicateUint8 {
	return func(e uint8) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint16) Or(p2 PredicateUint16) PredicateUint16 {
	return func(e uint16) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint32) Or(p2 PredicateUint32) PredicateUint32 {
	return func(e uint32) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint64) Or(p2 PredicateUint64) PredicateUint64 {
	return func(e uint64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUintptr) Or(p2 PredicateUintptr) PredicateUintptr {
	return func(e uintptr) bool { return p1(e) || p2(e) }
}

func (p1 PredicateFloat32) Or(p2 PredicateFloat32) PredicateFloat32 {
	return func(e float32) bool { return p1(e) || p2(e) }
}

func (p1 PredicateFloat64) Or(p2 PredicateFloat64) PredicateFloat64 {
	return func(e float64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateComplex64) Or(p2 PredicateComplex64) PredicateComplex64 {
	return func(e complex64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateComplex128) Or(p2 PredicateComplex128) PredicateComplex128 {
	return func(e complex128) bool { return p1(e) || p2(e) }
}

func (p1 PredicateString) Or(p2 PredicateString) PredicateString {
	return func(e string) bool { return p1(e) || p2(e) }
}

func (p1 PredicateAny) Or(p2 PredicateAny) PredicateAny {
	return func(e Any) bool { return p1(e) || p2(e) }
}

func (p1 PredicateBoolArr) Or(p2 PredicateBoolArr) PredicateBoolArr {
	return func(e []bool) bool { return p1(e) || p2(e) }
}

func (p1 PredicateRuneArr) Or(p2 PredicateRuneArr) PredicateRuneArr {
	return func(e []rune) bool { return p1(e) || p2(e) }
}

func (p1 PredicateByteArr) Or(p2 PredicateByteArr) PredicateByteArr {
	return func(e []byte) bool { return p1(e) || p2(e) }
}

func (p1 PredicateIntArr) Or(p2 PredicateIntArr) PredicateIntArr {
	return func(e []int) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt8Arr) Or(p2 PredicateInt8Arr) PredicateInt8Arr {
	return func(e []int8) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt16Arr) Or(p2 PredicateInt16Arr) PredicateInt16Arr {
	return func(e []int16) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt32Arr) Or(p2 PredicateInt32Arr) PredicateInt32Arr {
	return func(e []int32) bool { return p1(e) || p2(e) }
}

func (p1 PredicateInt64Arr) Or(p2 PredicateInt64Arr) PredicateInt64Arr {
	return func(e []int64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUintArr) Or(p2 PredicateUintArr) PredicateUintArr {
	return func(e []uint) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint8Arr) Or(p2 PredicateUint8Arr) PredicateUint8Arr {
	return func(e []uint8) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint16Arr) Or(p2 PredicateUint16Arr) PredicateUint16Arr {
	return func(e []uint16) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint32Arr) Or(p2 PredicateUint32Arr) PredicateUint32Arr {
	return func(e []uint32) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUint64Arr) Or(p2 PredicateUint64Arr) PredicateUint64Arr {
	return func(e []uint64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateUintptrArr) Or(p2 PredicateUintptrArr) PredicateUintptrArr {
	return func(e []uintptr) bool { return p1(e) || p2(e) }
}

func (p1 PredicateFloat32Arr) Or(p2 PredicateFloat32Arr) PredicateFloat32Arr {
	return func(e []float32) bool { return p1(e) || p2(e) }
}

func (p1 PredicateFloat64Arr) Or(p2 PredicateFloat64Arr) PredicateFloat64Arr {
	return func(e []float64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateComplex64Arr) Or(p2 PredicateComplex64Arr) PredicateComplex64Arr {
	return func(e []complex64) bool { return p1(e) || p2(e) }
}

func (p1 PredicateComplex128Arr) Or(p2 PredicateComplex128Arr) PredicateComplex128Arr {
	return func(e []complex128) bool { return p1(e) || p2(e) }
}

func (p1 PredicateStringArr) Or(p2 PredicateStringArr) PredicateStringArr {
	return func(e []string) bool { return p1(e) || p2(e) }
}

func (p1 PredicateAnyArr) Or(p2 PredicateAnyArr) PredicateAnyArr {
	return func(e []Any) bool { return p1(e) || p2(e) }
}

func (p1 PredicateBool) Xor(p2 PredicateBool) PredicateBool {
	return func(e bool) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateRune) Xor(p2 PredicateRune) PredicateRune {
	return func(e rune) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateByte) Xor(p2 PredicateByte) PredicateByte {
	return func(e byte) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt) Xor(p2 PredicateInt) PredicateInt {
	return func(e int) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt8) Xor(p2 PredicateInt8) PredicateInt8 {
	return func(e int8) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt16) Xor(p2 PredicateInt16) PredicateInt16 {
	return func(e int16) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt32) Xor(p2 PredicateInt32) PredicateInt32 {
	return func(e int32) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt64) Xor(p2 PredicateInt64) PredicateInt64 {
	return func(e int64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint) Xor(p2 PredicateUint) PredicateUint {
	return func(e uint) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint8) Xor(p2 PredicateUint8) PredicateUint8 {
	return func(e uint8) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint16) Xor(p2 PredicateUint16) PredicateUint16 {
	return func(e uint16) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint32) Xor(p2 PredicateUint32) PredicateUint32 {
	return func(e uint32) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint64) Xor(p2 PredicateUint64) PredicateUint64 {
	return func(e uint64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUintptr) Xor(p2 PredicateUintptr) PredicateUintptr {
	return func(e uintptr) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateFloat32) Xor(p2 PredicateFloat32) PredicateFloat32 {
	return func(e float32) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateFloat64) Xor(p2 PredicateFloat64) PredicateFloat64 {
	return func(e float64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateComplex64) Xor(p2 PredicateComplex64) PredicateComplex64 {
	return func(e complex64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateComplex128) Xor(p2 PredicateComplex128) PredicateComplex128 {
	return func(e complex128) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateString) Xor(p2 PredicateString) PredicateString {
	return func(e string) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateAny) Xor(p2 PredicateAny) PredicateAny {
	return func(e Any) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateBoolArr) Xor(p2 PredicateBoolArr) PredicateBoolArr {
	return func(e []bool) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateRuneArr) Xor(p2 PredicateRuneArr) PredicateRuneArr {
	return func(e []rune) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateByteArr) Xor(p2 PredicateByteArr) PredicateByteArr {
	return func(e []byte) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateIntArr) Xor(p2 PredicateIntArr) PredicateIntArr {
	return func(e []int) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt8Arr) Xor(p2 PredicateInt8Arr) PredicateInt8Arr {
	return func(e []int8) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt16Arr) Xor(p2 PredicateInt16Arr) PredicateInt16Arr {
	return func(e []int16) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt32Arr) Xor(p2 PredicateInt32Arr) PredicateInt32Arr {
	return func(e []int32) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateInt64Arr) Xor(p2 PredicateInt64Arr) PredicateInt64Arr {
	return func(e []int64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUintArr) Xor(p2 PredicateUintArr) PredicateUintArr {
	return func(e []uint) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint8Arr) Xor(p2 PredicateUint8Arr) PredicateUint8Arr {
	return func(e []uint8) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint16Arr) Xor(p2 PredicateUint16Arr) PredicateUint16Arr {
	return func(e []uint16) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint32Arr) Xor(p2 PredicateUint32Arr) PredicateUint32Arr {
	return func(e []uint32) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUint64Arr) Xor(p2 PredicateUint64Arr) PredicateUint64Arr {
	return func(e []uint64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateUintptrArr) Xor(p2 PredicateUintptrArr) PredicateUintptrArr {
	return func(e []uintptr) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateFloat32Arr) Xor(p2 PredicateFloat32Arr) PredicateFloat32Arr {
	return func(e []float32) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateFloat64Arr) Xor(p2 PredicateFloat64Arr) PredicateFloat64Arr {
	return func(e []float64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateComplex64Arr) Xor(p2 PredicateComplex64Arr) PredicateComplex64Arr {
	return func(e []complex64) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateComplex128Arr) Xor(p2 PredicateComplex128Arr) PredicateComplex128Arr {
	return func(e []complex128) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateStringArr) Xor(p2 PredicateStringArr) PredicateStringArr {
	return func(e []string) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p1 PredicateAnyArr) Xor(p2 PredicateAnyArr) PredicateAnyArr {
	return func(e []Any) bool { x := p1(e); y := p2(e); return (x || y) && !(x && y) }
}

func (p PredicateBool) Neg() PredicateBool { return func(e bool) bool { return !p(e) } }

func (p PredicateRune) Neg() PredicateRune { return func(e rune) bool { return !p(e) } }

func (p PredicateByte) Neg() PredicateByte { return func(e byte) bool { return !p(e) } }

func (p PredicateInt) Neg() PredicateInt { return func(e int) bool { return !p(e) } }

func (p PredicateInt8) Neg() PredicateInt8 { return func(e int8) bool { return !p(e) } }

func (p PredicateInt16) Neg() PredicateInt16 { return func(e int16) bool { return !p(e) } }

func (p PredicateInt32) Neg() PredicateInt32 { return func(e int32) bool { return !p(e) } }

func (p PredicateInt64) Neg() PredicateInt64 { return func(e int64) bool { return !p(e) } }

func (p PredicateUint) Neg() PredicateUint { return func(e uint) bool { return !p(e) } }

func (p PredicateUint8) Neg() PredicateUint8 { return func(e uint8) bool { return !p(e) } }

func (p PredicateUint16) Neg() PredicateUint16 { return func(e uint16) bool { return !p(e) } }

func (p PredicateUint32) Neg() PredicateUint32 { return func(e uint32) bool { return !p(e) } }

func (p PredicateUint64) Neg() PredicateUint64 { return func(e uint64) bool { return !p(e) } }

func (p PredicateUintptr) Neg() PredicateUintptr { return func(e uintptr) bool { return !p(e) } }

func (p PredicateFloat32) Neg() PredicateFloat32 { return func(e float32) bool { return !p(e) } }

func (p PredicateFloat64) Neg() PredicateFloat64 { return func(e float64) bool { return !p(e) } }

func (p PredicateComplex64) Neg() PredicateComplex64 { return func(e complex64) bool { return !p(e) } }

func (p PredicateComplex128) Neg() PredicateComplex128 {
	return func(e complex128) bool { return !p(e) }
}

func (p PredicateString) Neg() PredicateString { return func(e string) bool { return !p(e) } }

func (p PredicateAny) Neg() PredicateAny { return func(e Any) bool { return !p(e) } }

func (p PredicateBoolArr) Neg() PredicateBoolArr { return func(e []bool) bool { return !p(e) } }

func (p PredicateRuneArr) Neg() PredicateRuneArr { return func(e []rune) bool { return !p(e) } }

func (p PredicateByteArr) Neg() PredicateByteArr { return func(e []byte) bool { return !p(e) } }

func (p PredicateIntArr) Neg() PredicateIntArr { return func(e []int) bool { return !p(e) } }

func (p PredicateInt8Arr) Neg() PredicateInt8Arr { return func(e []int8) bool { return !p(e) } }

func (p PredicateInt16Arr) Neg() PredicateInt16Arr { return func(e []int16) bool { return !p(e) } }

func (p PredicateInt32Arr) Neg() PredicateInt32Arr { return func(e []int32) bool { return !p(e) } }

func (p PredicateInt64Arr) Neg() PredicateInt64Arr { return func(e []int64) bool { return !p(e) } }

func (p PredicateUintArr) Neg() PredicateUintArr { return func(e []uint) bool { return !p(e) } }

func (p PredicateUint8Arr) Neg() PredicateUint8Arr { return func(e []uint8) bool { return !p(e) } }

func (p PredicateUint16Arr) Neg() PredicateUint16Arr { return func(e []uint16) bool { return !p(e) } }

func (p PredicateUint32Arr) Neg() PredicateUint32Arr { return func(e []uint32) bool { return !p(e) } }

func (p PredicateUint64Arr) Neg() PredicateUint64Arr { return func(e []uint64) bool { return !p(e) } }

func (p PredicateUintptrArr) Neg() PredicateUintptrArr {
	return func(e []uintptr) bool { return !p(e) }
}

func (p PredicateFloat32Arr) Neg() PredicateFloat32Arr {
	return func(e []float32) bool { return !p(e) }
}

func (p PredicateFloat64Arr) Neg() PredicateFloat64Arr {
	return func(e []float64) bool { return !p(e) }
}

func (p PredicateComplex64Arr) Neg() PredicateComplex64Arr {
	return func(e []complex64) bool { return !p(e) }
}

func (p PredicateComplex128Arr) Neg() PredicateComplex128Arr {
	return func(e []complex128) bool { return !p(e) }
}

func (p PredicateStringArr) Neg() PredicateStringArr { return func(e []string) bool { return !p(e) } }

func (p PredicateAnyArr) Neg() PredicateAnyArr { return func(e []Any) bool { return !p(e) } }
