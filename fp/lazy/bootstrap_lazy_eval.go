// bootstrap_lazy_eval.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

func (n LazyBool) Eval() LazyBool {
	if n.cached != nil {
		//fmt.Println(" Bool.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Bool.eval", cached)
		return LazyBool{n.eval, &cached}
	}
}
func (n LazyString) Eval() LazyString {
	if n.cached != nil {
		//fmt.Println(" String.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*String.eval", cached)
		return LazyString{n.eval, &cached}
	}
}
func (n LazyInt) Eval() LazyInt {
	if n.cached != nil {
		//fmt.Println(" Int.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Int.eval", cached)
		return LazyInt{n.eval, &cached}
	}
}
func (n LazyInt64) Eval() LazyInt64 {
	if n.cached != nil {
		//fmt.Println(" Int64.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Int64.eval", cached)
		return LazyInt64{n.eval, &cached}
	}
}
func (n LazyByte) Eval() LazyByte {
	if n.cached != nil {
		//fmt.Println(" Byte.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Byte.eval", cached)
		return LazyByte{n.eval, &cached}
	}
}
func (n LazyRune) Eval() LazyRune {
	if n.cached != nil {
		//fmt.Println(" Rune.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Rune.eval", cached)
		return LazyRune{n.eval, &cached}
	}
}
func (n LazyFloat32) Eval() LazyFloat32 {
	if n.cached != nil {
		//fmt.Println(" Float32.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Float32.eval", cached)
		return LazyFloat32{n.eval, &cached}
	}
}
func (n LazyFloat64) Eval() LazyFloat64 {
	if n.cached != nil {
		//fmt.Println(" Float64.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Float64.eval", cached)
		return LazyFloat64{n.eval, &cached}
	}
}
func (n LazyAny) Eval() LazyAny {
	if n.cached != nil {
		//fmt.Println(" Any.cached", *n.cached)
		return n
	} else {
		cached := n.eval()
		//fmt.Println("*Any.eval", cached)
		return LazyAny{n.eval, &cached}
	}
}
