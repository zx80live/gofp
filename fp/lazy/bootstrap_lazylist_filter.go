// bootstrap_lazylist_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

import . "github.com/zx80live/gofp/fp"

func (l BoolLazyList) Filter(p func(e bool) bool) BoolLazyList {
	newState := func() BoolState {
		var xs = l
		var h LazyBool
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return BoolState{&h, &t}
		} else {
			return EmptyBoolState
		}
	}

	return BoolLazyList{&newState}
}
func (l StringLazyList) Filter(p func(e string) bool) StringLazyList {
	newState := func() StringState {
		var xs = l
		var h LazyString
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return StringState{&h, &t}
		} else {
			return EmptyStringState
		}
	}

	return StringLazyList{&newState}
}
func (l IntLazyList) Filter(p func(e int) bool) IntLazyList {
	newState := func() IntState {
		var xs = l
		var h LazyInt
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return IntState{&h, &t}
		} else {
			return EmptyIntState
		}
	}

	return IntLazyList{&newState}
}
func (l Int64LazyList) Filter(p func(e int64) bool) Int64LazyList {
	newState := func() Int64State {
		var xs = l
		var h LazyInt64
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Int64State{&h, &t}
		} else {
			return EmptyInt64State
		}
	}

	return Int64LazyList{&newState}
}
func (l ByteLazyList) Filter(p func(e byte) bool) ByteLazyList {
	newState := func() ByteState {
		var xs = l
		var h LazyByte
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return ByteState{&h, &t}
		} else {
			return EmptyByteState
		}
	}

	return ByteLazyList{&newState}
}
func (l RuneLazyList) Filter(p func(e rune) bool) RuneLazyList {
	newState := func() RuneState {
		var xs = l
		var h LazyRune
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return RuneState{&h, &t}
		} else {
			return EmptyRuneState
		}
	}

	return RuneLazyList{&newState}
}
func (l Float32LazyList) Filter(p func(e float32) bool) Float32LazyList {
	newState := func() Float32State {
		var xs = l
		var h LazyFloat32
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float32State{&h, &t}
		} else {
			return EmptyFloat32State
		}
	}

	return Float32LazyList{&newState}
}
func (l Float64LazyList) Filter(p func(e float64) bool) Float64LazyList {
	newState := func() Float64State {
		var xs = l
		var h LazyFloat64
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float64State{&h, &t}
		} else {
			return EmptyFloat64State
		}
	}

	return Float64LazyList{&newState}
}
func (l AnyLazyList) Filter(p func(e Any) bool) AnyLazyList {
	newState := func() AnyState {
		var xs = l
		var h LazyAny
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return AnyState{&h, &t}
		} else {
			return EmptyAnyState
		}
	}

	return AnyLazyList{&newState}
}
func (l Tuple2LazyList) Filter(p func(e Tuple2) bool) Tuple2LazyList {
	newState := func() Tuple2State {
		var xs = l
		var h LazyTuple2
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Tuple2State{&h, &t}
		} else {
			return EmptyTuple2State
		}
	}

	return Tuple2LazyList{&newState}
}
func (l BoolArrayLazyList) Filter(p func(e []bool) bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		var xs = l
		var h LazyBoolArray
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return BoolArrayState{&h, &t}
		} else {
			return EmptyBoolArrayState
		}
	}

	return BoolArrayLazyList{&newState}
}
func (l StringArrayLazyList) Filter(p func(e []string) bool) StringArrayLazyList {
	newState := func() StringArrayState {
		var xs = l
		var h LazyStringArray
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return StringArrayState{&h, &t}
		} else {
			return EmptyStringArrayState
		}
	}

	return StringArrayLazyList{&newState}
}
func (l IntArrayLazyList) Filter(p func(e []int) bool) IntArrayLazyList {
	newState := func() IntArrayState {
		var xs = l
		var h LazyIntArray
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return IntArrayState{&h, &t}
		} else {
			return EmptyIntArrayState
		}
	}

	return IntArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) Filter(p func(e []int64) bool) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		var xs = l
		var h LazyInt64Array
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Int64ArrayState{&h, &t}
		} else {
			return EmptyInt64ArrayState
		}
	}

	return Int64ArrayLazyList{&newState}
}
func (l ByteArrayLazyList) Filter(p func(e []byte) bool) ByteArrayLazyList {
	newState := func() ByteArrayState {
		var xs = l
		var h LazyByteArray
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return ByteArrayState{&h, &t}
		} else {
			return EmptyByteArrayState
		}
	}

	return ByteArrayLazyList{&newState}
}
func (l RuneArrayLazyList) Filter(p func(e []rune) bool) RuneArrayLazyList {
	newState := func() RuneArrayState {
		var xs = l
		var h LazyRuneArray
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return RuneArrayState{&h, &t}
		} else {
			return EmptyRuneArrayState
		}
	}

	return RuneArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) Filter(p func(e []float32) bool) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		var xs = l
		var h LazyFloat32Array
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float32ArrayState{&h, &t}
		} else {
			return EmptyFloat32ArrayState
		}
	}

	return Float32ArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) Filter(p func(e []float64) bool) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		var xs = l
		var h LazyFloat64Array
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float64ArrayState{&h, &t}
		} else {
			return EmptyFloat64ArrayState
		}
	}

	return Float64ArrayLazyList{&newState}
}
func (l AnyArrayLazyList) Filter(p func(e []Any) bool) AnyArrayLazyList {
	newState := func() AnyArrayState {
		var xs = l
		var h LazyAnyArray
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return AnyArrayState{&h, &t}
		} else {
			return EmptyAnyArrayState
		}
	}

	return AnyArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) Filter(p func(e []Tuple2) bool) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		var xs = l
		var h LazyTuple2Array
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Tuple2ArrayState{&h, &t}
		} else {
			return EmptyTuple2ArrayState
		}
	}

	return Tuple2ArrayLazyList{&newState}
}
func (l BoolOptionLazyList) Filter(p func(e BoolOption) bool) BoolOptionLazyList {
	newState := func() BoolOptionState {
		var xs = l
		var h LazyBoolOption
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return BoolOptionState{&h, &t}
		} else {
			return EmptyBoolOptionState
		}
	}

	return BoolOptionLazyList{&newState}
}
func (l StringOptionLazyList) Filter(p func(e StringOption) bool) StringOptionLazyList {
	newState := func() StringOptionState {
		var xs = l
		var h LazyStringOption
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return StringOptionState{&h, &t}
		} else {
			return EmptyStringOptionState
		}
	}

	return StringOptionLazyList{&newState}
}
func (l IntOptionLazyList) Filter(p func(e IntOption) bool) IntOptionLazyList {
	newState := func() IntOptionState {
		var xs = l
		var h LazyIntOption
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return IntOptionState{&h, &t}
		} else {
			return EmptyIntOptionState
		}
	}

	return IntOptionLazyList{&newState}
}
func (l Int64OptionLazyList) Filter(p func(e Int64Option) bool) Int64OptionLazyList {
	newState := func() Int64OptionState {
		var xs = l
		var h LazyInt64Option
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Int64OptionState{&h, &t}
		} else {
			return EmptyInt64OptionState
		}
	}

	return Int64OptionLazyList{&newState}
}
func (l ByteOptionLazyList) Filter(p func(e ByteOption) bool) ByteOptionLazyList {
	newState := func() ByteOptionState {
		var xs = l
		var h LazyByteOption
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return ByteOptionState{&h, &t}
		} else {
			return EmptyByteOptionState
		}
	}

	return ByteOptionLazyList{&newState}
}
func (l RuneOptionLazyList) Filter(p func(e RuneOption) bool) RuneOptionLazyList {
	newState := func() RuneOptionState {
		var xs = l
		var h LazyRuneOption
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return RuneOptionState{&h, &t}
		} else {
			return EmptyRuneOptionState
		}
	}

	return RuneOptionLazyList{&newState}
}
func (l Float32OptionLazyList) Filter(p func(e Float32Option) bool) Float32OptionLazyList {
	newState := func() Float32OptionState {
		var xs = l
		var h LazyFloat32Option
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float32OptionState{&h, &t}
		} else {
			return EmptyFloat32OptionState
		}
	}

	return Float32OptionLazyList{&newState}
}
func (l Float64OptionLazyList) Filter(p func(e Float64Option) bool) Float64OptionLazyList {
	newState := func() Float64OptionState {
		var xs = l
		var h LazyFloat64Option
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float64OptionState{&h, &t}
		} else {
			return EmptyFloat64OptionState
		}
	}

	return Float64OptionLazyList{&newState}
}
func (l AnyOptionLazyList) Filter(p func(e AnyOption) bool) AnyOptionLazyList {
	newState := func() AnyOptionState {
		var xs = l
		var h LazyAnyOption
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return AnyOptionState{&h, &t}
		} else {
			return EmptyAnyOptionState
		}
	}

	return AnyOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) Filter(p func(e Tuple2Option) bool) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		var xs = l
		var h LazyTuple2Option
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Tuple2OptionState{&h, &t}
		} else {
			return EmptyTuple2OptionState
		}
	}

	return Tuple2OptionLazyList{&newState}
}
func (l BoolListLazyList) Filter(p func(e BoolList) bool) BoolListLazyList {
	newState := func() BoolListState {
		var xs = l
		var h LazyBoolList
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return BoolListState{&h, &t}
		} else {
			return EmptyBoolListState
		}
	}

	return BoolListLazyList{&newState}
}
func (l StringListLazyList) Filter(p func(e StringList) bool) StringListLazyList {
	newState := func() StringListState {
		var xs = l
		var h LazyStringList
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return StringListState{&h, &t}
		} else {
			return EmptyStringListState
		}
	}

	return StringListLazyList{&newState}
}
func (l IntListLazyList) Filter(p func(e IntList) bool) IntListLazyList {
	newState := func() IntListState {
		var xs = l
		var h LazyIntList
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return IntListState{&h, &t}
		} else {
			return EmptyIntListState
		}
	}

	return IntListLazyList{&newState}
}
func (l Int64ListLazyList) Filter(p func(e Int64List) bool) Int64ListLazyList {
	newState := func() Int64ListState {
		var xs = l
		var h LazyInt64List
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Int64ListState{&h, &t}
		} else {
			return EmptyInt64ListState
		}
	}

	return Int64ListLazyList{&newState}
}
func (l ByteListLazyList) Filter(p func(e ByteList) bool) ByteListLazyList {
	newState := func() ByteListState {
		var xs = l
		var h LazyByteList
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return ByteListState{&h, &t}
		} else {
			return EmptyByteListState
		}
	}

	return ByteListLazyList{&newState}
}
func (l RuneListLazyList) Filter(p func(e RuneList) bool) RuneListLazyList {
	newState := func() RuneListState {
		var xs = l
		var h LazyRuneList
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return RuneListState{&h, &t}
		} else {
			return EmptyRuneListState
		}
	}

	return RuneListLazyList{&newState}
}
func (l Float32ListLazyList) Filter(p func(e Float32List) bool) Float32ListLazyList {
	newState := func() Float32ListState {
		var xs = l
		var h LazyFloat32List
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float32ListState{&h, &t}
		} else {
			return EmptyFloat32ListState
		}
	}

	return Float32ListLazyList{&newState}
}
func (l Float64ListLazyList) Filter(p func(e Float64List) bool) Float64ListLazyList {
	newState := func() Float64ListState {
		var xs = l
		var h LazyFloat64List
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Float64ListState{&h, &t}
		} else {
			return EmptyFloat64ListState
		}
	}

	return Float64ListLazyList{&newState}
}
func (l AnyListLazyList) Filter(p func(e AnyList) bool) AnyListLazyList {
	newState := func() AnyListState {
		var xs = l
		var h LazyAnyList
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return AnyListState{&h, &t}
		} else {
			return EmptyAnyListState
		}
	}

	return AnyListLazyList{&newState}
}
func (l Tuple2ListLazyList) Filter(p func(e Tuple2List) bool) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		var xs = l
		var h LazyTuple2List
		var found = false

		for !found && xs.NonEmpty() {
			s := (*xs.state)()
			h = (*s.head).Eval()
			found = p(h.Value())
			xs = *s.tail
		}

		if found {
			t := xs.Filter(p)
			return Tuple2ListState{&h, &t}
		} else {
			return EmptyTuple2ListState
		}
	}

	return Tuple2ListLazyList{&newState}
}
