// bootstrap_lazylist_head.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

import . "github.com/zx80live/gofp/fp"

func (l BoolLazyList) Head() (bool, BoolLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l StringLazyList) Head() (string, StringLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l IntLazyList) Head() (int, IntLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Int64LazyList) Head() (int64, Int64LazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l ByteLazyList) Head() (byte, ByteLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l RuneLazyList) Head() (rune, RuneLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float32LazyList) Head() (float32, Float32LazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float64LazyList) Head() (float64, Float64LazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l AnyLazyList) Head() (Any, AnyLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Tuple2LazyList) Head() (Tuple2, Tuple2LazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l BoolArrayLazyList) Head() ([]bool, BoolArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l StringArrayLazyList) Head() ([]string, StringArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l IntArrayLazyList) Head() ([]int, IntArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Int64ArrayLazyList) Head() ([]int64, Int64ArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l ByteArrayLazyList) Head() ([]byte, ByteArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l RuneArrayLazyList) Head() ([]rune, RuneArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float32ArrayLazyList) Head() ([]float32, Float32ArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float64ArrayLazyList) Head() ([]float64, Float64ArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l AnyArrayLazyList) Head() ([]Any, AnyArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Tuple2ArrayLazyList) Head() ([]Tuple2, Tuple2ArrayLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l BoolOptionLazyList) Head() (BoolOption, BoolOptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l StringOptionLazyList) Head() (StringOption, StringOptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l IntOptionLazyList) Head() (IntOption, IntOptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Int64OptionLazyList) Head() (Int64Option, Int64OptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l ByteOptionLazyList) Head() (ByteOption, ByteOptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l RuneOptionLazyList) Head() (RuneOption, RuneOptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float32OptionLazyList) Head() (Float32Option, Float32OptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float64OptionLazyList) Head() (Float64Option, Float64OptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l AnyOptionLazyList) Head() (AnyOption, AnyOptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Tuple2OptionLazyList) Head() (Tuple2Option, Tuple2OptionLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l BoolListLazyList) Head() (BoolList, BoolListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l StringListLazyList) Head() (StringList, StringListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l IntListLazyList) Head() (IntList, IntListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Int64ListLazyList) Head() (Int64List, Int64ListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l ByteListLazyList) Head() (ByteList, ByteListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l RuneListLazyList) Head() (RuneList, RuneListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float32ListLazyList) Head() (Float32List, Float32ListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Float64ListLazyList) Head() (Float64List, Float64ListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l AnyListLazyList) Head() (AnyList, AnyListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
func (l Tuple2ListLazyList) Head() (Tuple2List, Tuple2ListLazyList) {
	if l.IsEmpty() {
		panic("can't get head from empty list")
	} else {
		s := (*l.state)()
		return s.head.Eval().Cached(), *s.tail
	}
}
