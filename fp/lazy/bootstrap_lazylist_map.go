// bootstrap_lazylist_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

import . "github.com/zx80live/gofp/fp"

func (l BoolLazyList) MapBool(f func(e bool) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l BoolLazyList) MapString(f func(e bool) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l BoolLazyList) MapInt(f func(e bool) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l BoolLazyList) MapInt64(f func(e bool) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l BoolLazyList) MapByte(f func(e bool) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l BoolLazyList) MapRune(f func(e bool) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l BoolLazyList) MapFloat32(f func(e bool) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l BoolLazyList) MapFloat64(f func(e bool) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l BoolLazyList) MapAny(f func(e bool) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l BoolLazyList) MapTuple2(f func(e bool) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l BoolLazyList) MapBoolArray(f func(e bool) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l BoolLazyList) MapStringArray(f func(e bool) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l BoolLazyList) MapIntArray(f func(e bool) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l BoolLazyList) MapInt64Array(f func(e bool) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l BoolLazyList) MapByteArray(f func(e bool) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l BoolLazyList) MapRuneArray(f func(e bool) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l BoolLazyList) MapFloat32Array(f func(e bool) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l BoolLazyList) MapFloat64Array(f func(e bool) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l BoolLazyList) MapAnyArray(f func(e bool) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l BoolLazyList) MapTuple2Array(f func(e bool) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l BoolLazyList) MapBoolOption(f func(e bool) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l BoolLazyList) MapStringOption(f func(e bool) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l BoolLazyList) MapIntOption(f func(e bool) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l BoolLazyList) MapInt64Option(f func(e bool) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l BoolLazyList) MapByteOption(f func(e bool) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l BoolLazyList) MapRuneOption(f func(e bool) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l BoolLazyList) MapFloat32Option(f func(e bool) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l BoolLazyList) MapFloat64Option(f func(e bool) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l BoolLazyList) MapAnyOption(f func(e bool) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l BoolLazyList) MapTuple2Option(f func(e bool) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l BoolLazyList) MapBoolList(f func(e bool) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l BoolLazyList) MapStringList(f func(e bool) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l BoolLazyList) MapIntList(f func(e bool) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l BoolLazyList) MapInt64List(f func(e bool) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l BoolLazyList) MapByteList(f func(e bool) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l BoolLazyList) MapRuneList(f func(e bool) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l BoolLazyList) MapFloat32List(f func(e bool) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l BoolLazyList) MapFloat64List(f func(e bool) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l BoolLazyList) MapAnyList(f func(e bool) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l BoolLazyList) MapTuple2List(f func(e bool) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l StringLazyList) MapBool(f func(e string) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l StringLazyList) MapString(f func(e string) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l StringLazyList) MapInt(f func(e string) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l StringLazyList) MapInt64(f func(e string) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l StringLazyList) MapByte(f func(e string) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l StringLazyList) MapRune(f func(e string) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l StringLazyList) MapFloat32(f func(e string) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l StringLazyList) MapFloat64(f func(e string) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l StringLazyList) MapAny(f func(e string) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l StringLazyList) MapTuple2(f func(e string) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l StringLazyList) MapBoolArray(f func(e string) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l StringLazyList) MapStringArray(f func(e string) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l StringLazyList) MapIntArray(f func(e string) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l StringLazyList) MapInt64Array(f func(e string) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l StringLazyList) MapByteArray(f func(e string) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l StringLazyList) MapRuneArray(f func(e string) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l StringLazyList) MapFloat32Array(f func(e string) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l StringLazyList) MapFloat64Array(f func(e string) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l StringLazyList) MapAnyArray(f func(e string) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l StringLazyList) MapTuple2Array(f func(e string) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l StringLazyList) MapBoolOption(f func(e string) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l StringLazyList) MapStringOption(f func(e string) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l StringLazyList) MapIntOption(f func(e string) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l StringLazyList) MapInt64Option(f func(e string) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l StringLazyList) MapByteOption(f func(e string) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l StringLazyList) MapRuneOption(f func(e string) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l StringLazyList) MapFloat32Option(f func(e string) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l StringLazyList) MapFloat64Option(f func(e string) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l StringLazyList) MapAnyOption(f func(e string) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l StringLazyList) MapTuple2Option(f func(e string) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l StringLazyList) MapBoolList(f func(e string) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l StringLazyList) MapStringList(f func(e string) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l StringLazyList) MapIntList(f func(e string) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l StringLazyList) MapInt64List(f func(e string) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l StringLazyList) MapByteList(f func(e string) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l StringLazyList) MapRuneList(f func(e string) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l StringLazyList) MapFloat32List(f func(e string) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l StringLazyList) MapFloat64List(f func(e string) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l StringLazyList) MapAnyList(f func(e string) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l StringLazyList) MapTuple2List(f func(e string) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l IntLazyList) MapBool(f func(e int) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l IntLazyList) MapString(f func(e int) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l IntLazyList) MapInt(f func(e int) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l IntLazyList) MapInt64(f func(e int) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l IntLazyList) MapByte(f func(e int) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l IntLazyList) MapRune(f func(e int) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l IntLazyList) MapFloat32(f func(e int) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l IntLazyList) MapFloat64(f func(e int) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l IntLazyList) MapAny(f func(e int) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l IntLazyList) MapTuple2(f func(e int) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l IntLazyList) MapBoolArray(f func(e int) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l IntLazyList) MapStringArray(f func(e int) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l IntLazyList) MapIntArray(f func(e int) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l IntLazyList) MapInt64Array(f func(e int) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l IntLazyList) MapByteArray(f func(e int) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l IntLazyList) MapRuneArray(f func(e int) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l IntLazyList) MapFloat32Array(f func(e int) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l IntLazyList) MapFloat64Array(f func(e int) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l IntLazyList) MapAnyArray(f func(e int) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l IntLazyList) MapTuple2Array(f func(e int) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l IntLazyList) MapBoolOption(f func(e int) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l IntLazyList) MapStringOption(f func(e int) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l IntLazyList) MapIntOption(f func(e int) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l IntLazyList) MapInt64Option(f func(e int) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l IntLazyList) MapByteOption(f func(e int) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l IntLazyList) MapRuneOption(f func(e int) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l IntLazyList) MapFloat32Option(f func(e int) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l IntLazyList) MapFloat64Option(f func(e int) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l IntLazyList) MapAnyOption(f func(e int) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l IntLazyList) MapTuple2Option(f func(e int) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l IntLazyList) MapBoolList(f func(e int) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l IntLazyList) MapStringList(f func(e int) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l IntLazyList) MapIntList(f func(e int) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l IntLazyList) MapInt64List(f func(e int) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l IntLazyList) MapByteList(f func(e int) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l IntLazyList) MapRuneList(f func(e int) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l IntLazyList) MapFloat32List(f func(e int) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l IntLazyList) MapFloat64List(f func(e int) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l IntLazyList) MapAnyList(f func(e int) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l IntLazyList) MapTuple2List(f func(e int) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Int64LazyList) MapBool(f func(e int64) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Int64LazyList) MapString(f func(e int64) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Int64LazyList) MapInt(f func(e int64) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Int64LazyList) MapInt64(f func(e int64) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Int64LazyList) MapByte(f func(e int64) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Int64LazyList) MapRune(f func(e int64) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Int64LazyList) MapFloat32(f func(e int64) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Int64LazyList) MapFloat64(f func(e int64) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Int64LazyList) MapAny(f func(e int64) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Int64LazyList) MapTuple2(f func(e int64) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Int64LazyList) MapBoolArray(f func(e int64) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Int64LazyList) MapStringArray(f func(e int64) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Int64LazyList) MapIntArray(f func(e int64) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Int64LazyList) MapInt64Array(f func(e int64) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Int64LazyList) MapByteArray(f func(e int64) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Int64LazyList) MapRuneArray(f func(e int64) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Int64LazyList) MapFloat32Array(f func(e int64) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Int64LazyList) MapFloat64Array(f func(e int64) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Int64LazyList) MapAnyArray(f func(e int64) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Int64LazyList) MapTuple2Array(f func(e int64) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Int64LazyList) MapBoolOption(f func(e int64) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Int64LazyList) MapStringOption(f func(e int64) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Int64LazyList) MapIntOption(f func(e int64) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Int64LazyList) MapInt64Option(f func(e int64) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Int64LazyList) MapByteOption(f func(e int64) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Int64LazyList) MapRuneOption(f func(e int64) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Int64LazyList) MapFloat32Option(f func(e int64) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Int64LazyList) MapFloat64Option(f func(e int64) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Int64LazyList) MapAnyOption(f func(e int64) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Int64LazyList) MapTuple2Option(f func(e int64) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Int64LazyList) MapBoolList(f func(e int64) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Int64LazyList) MapStringList(f func(e int64) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Int64LazyList) MapIntList(f func(e int64) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Int64LazyList) MapInt64List(f func(e int64) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Int64LazyList) MapByteList(f func(e int64) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Int64LazyList) MapRuneList(f func(e int64) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Int64LazyList) MapFloat32List(f func(e int64) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Int64LazyList) MapFloat64List(f func(e int64) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Int64LazyList) MapAnyList(f func(e int64) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Int64LazyList) MapTuple2List(f func(e int64) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l ByteLazyList) MapBool(f func(e byte) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l ByteLazyList) MapString(f func(e byte) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l ByteLazyList) MapInt(f func(e byte) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l ByteLazyList) MapInt64(f func(e byte) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l ByteLazyList) MapByte(f func(e byte) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l ByteLazyList) MapRune(f func(e byte) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l ByteLazyList) MapFloat32(f func(e byte) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l ByteLazyList) MapFloat64(f func(e byte) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l ByteLazyList) MapAny(f func(e byte) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l ByteLazyList) MapTuple2(f func(e byte) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l ByteLazyList) MapBoolArray(f func(e byte) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l ByteLazyList) MapStringArray(f func(e byte) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l ByteLazyList) MapIntArray(f func(e byte) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l ByteLazyList) MapInt64Array(f func(e byte) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l ByteLazyList) MapByteArray(f func(e byte) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l ByteLazyList) MapRuneArray(f func(e byte) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l ByteLazyList) MapFloat32Array(f func(e byte) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l ByteLazyList) MapFloat64Array(f func(e byte) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l ByteLazyList) MapAnyArray(f func(e byte) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l ByteLazyList) MapTuple2Array(f func(e byte) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l ByteLazyList) MapBoolOption(f func(e byte) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l ByteLazyList) MapStringOption(f func(e byte) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l ByteLazyList) MapIntOption(f func(e byte) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l ByteLazyList) MapInt64Option(f func(e byte) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l ByteLazyList) MapByteOption(f func(e byte) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l ByteLazyList) MapRuneOption(f func(e byte) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l ByteLazyList) MapFloat32Option(f func(e byte) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l ByteLazyList) MapFloat64Option(f func(e byte) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l ByteLazyList) MapAnyOption(f func(e byte) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l ByteLazyList) MapTuple2Option(f func(e byte) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l ByteLazyList) MapBoolList(f func(e byte) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l ByteLazyList) MapStringList(f func(e byte) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l ByteLazyList) MapIntList(f func(e byte) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l ByteLazyList) MapInt64List(f func(e byte) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l ByteLazyList) MapByteList(f func(e byte) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l ByteLazyList) MapRuneList(f func(e byte) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l ByteLazyList) MapFloat32List(f func(e byte) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l ByteLazyList) MapFloat64List(f func(e byte) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l ByteLazyList) MapAnyList(f func(e byte) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l ByteLazyList) MapTuple2List(f func(e byte) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l RuneLazyList) MapBool(f func(e rune) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l RuneLazyList) MapString(f func(e rune) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l RuneLazyList) MapInt(f func(e rune) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l RuneLazyList) MapInt64(f func(e rune) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l RuneLazyList) MapByte(f func(e rune) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l RuneLazyList) MapRune(f func(e rune) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l RuneLazyList) MapFloat32(f func(e rune) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l RuneLazyList) MapFloat64(f func(e rune) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l RuneLazyList) MapAny(f func(e rune) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l RuneLazyList) MapTuple2(f func(e rune) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l RuneLazyList) MapBoolArray(f func(e rune) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l RuneLazyList) MapStringArray(f func(e rune) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l RuneLazyList) MapIntArray(f func(e rune) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l RuneLazyList) MapInt64Array(f func(e rune) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l RuneLazyList) MapByteArray(f func(e rune) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l RuneLazyList) MapRuneArray(f func(e rune) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l RuneLazyList) MapFloat32Array(f func(e rune) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l RuneLazyList) MapFloat64Array(f func(e rune) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l RuneLazyList) MapAnyArray(f func(e rune) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l RuneLazyList) MapTuple2Array(f func(e rune) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l RuneLazyList) MapBoolOption(f func(e rune) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l RuneLazyList) MapStringOption(f func(e rune) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l RuneLazyList) MapIntOption(f func(e rune) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l RuneLazyList) MapInt64Option(f func(e rune) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l RuneLazyList) MapByteOption(f func(e rune) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l RuneLazyList) MapRuneOption(f func(e rune) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l RuneLazyList) MapFloat32Option(f func(e rune) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l RuneLazyList) MapFloat64Option(f func(e rune) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l RuneLazyList) MapAnyOption(f func(e rune) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l RuneLazyList) MapTuple2Option(f func(e rune) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l RuneLazyList) MapBoolList(f func(e rune) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l RuneLazyList) MapStringList(f func(e rune) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l RuneLazyList) MapIntList(f func(e rune) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l RuneLazyList) MapInt64List(f func(e rune) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l RuneLazyList) MapByteList(f func(e rune) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l RuneLazyList) MapRuneList(f func(e rune) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l RuneLazyList) MapFloat32List(f func(e rune) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l RuneLazyList) MapFloat64List(f func(e rune) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l RuneLazyList) MapAnyList(f func(e rune) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l RuneLazyList) MapTuple2List(f func(e rune) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float32LazyList) MapBool(f func(e float32) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float32LazyList) MapString(f func(e float32) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float32LazyList) MapInt(f func(e float32) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float32LazyList) MapInt64(f func(e float32) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float32LazyList) MapByte(f func(e float32) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float32LazyList) MapRune(f func(e float32) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float32LazyList) MapFloat32(f func(e float32) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float32LazyList) MapFloat64(f func(e float32) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float32LazyList) MapAny(f func(e float32) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float32LazyList) MapTuple2(f func(e float32) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float32LazyList) MapBoolArray(f func(e float32) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float32LazyList) MapStringArray(f func(e float32) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float32LazyList) MapIntArray(f func(e float32) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float32LazyList) MapInt64Array(f func(e float32) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float32LazyList) MapByteArray(f func(e float32) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float32LazyList) MapRuneArray(f func(e float32) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float32LazyList) MapFloat32Array(f func(e float32) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float32LazyList) MapFloat64Array(f func(e float32) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float32LazyList) MapAnyArray(f func(e float32) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float32LazyList) MapTuple2Array(f func(e float32) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float32LazyList) MapBoolOption(f func(e float32) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float32LazyList) MapStringOption(f func(e float32) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float32LazyList) MapIntOption(f func(e float32) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float32LazyList) MapInt64Option(f func(e float32) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float32LazyList) MapByteOption(f func(e float32) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float32LazyList) MapRuneOption(f func(e float32) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float32LazyList) MapFloat32Option(f func(e float32) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float32LazyList) MapFloat64Option(f func(e float32) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float32LazyList) MapAnyOption(f func(e float32) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float32LazyList) MapTuple2Option(f func(e float32) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float32LazyList) MapBoolList(f func(e float32) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float32LazyList) MapStringList(f func(e float32) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float32LazyList) MapIntList(f func(e float32) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float32LazyList) MapInt64List(f func(e float32) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float32LazyList) MapByteList(f func(e float32) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float32LazyList) MapRuneList(f func(e float32) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float32LazyList) MapFloat32List(f func(e float32) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float32LazyList) MapFloat64List(f func(e float32) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float32LazyList) MapAnyList(f func(e float32) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float32LazyList) MapTuple2List(f func(e float32) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float64LazyList) MapBool(f func(e float64) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float64LazyList) MapString(f func(e float64) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float64LazyList) MapInt(f func(e float64) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float64LazyList) MapInt64(f func(e float64) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float64LazyList) MapByte(f func(e float64) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float64LazyList) MapRune(f func(e float64) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float64LazyList) MapFloat32(f func(e float64) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float64LazyList) MapFloat64(f func(e float64) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float64LazyList) MapAny(f func(e float64) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float64LazyList) MapTuple2(f func(e float64) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float64LazyList) MapBoolArray(f func(e float64) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float64LazyList) MapStringArray(f func(e float64) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float64LazyList) MapIntArray(f func(e float64) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float64LazyList) MapInt64Array(f func(e float64) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float64LazyList) MapByteArray(f func(e float64) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float64LazyList) MapRuneArray(f func(e float64) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float64LazyList) MapFloat32Array(f func(e float64) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float64LazyList) MapFloat64Array(f func(e float64) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float64LazyList) MapAnyArray(f func(e float64) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float64LazyList) MapTuple2Array(f func(e float64) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float64LazyList) MapBoolOption(f func(e float64) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float64LazyList) MapStringOption(f func(e float64) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float64LazyList) MapIntOption(f func(e float64) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float64LazyList) MapInt64Option(f func(e float64) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float64LazyList) MapByteOption(f func(e float64) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float64LazyList) MapRuneOption(f func(e float64) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float64LazyList) MapFloat32Option(f func(e float64) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float64LazyList) MapFloat64Option(f func(e float64) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float64LazyList) MapAnyOption(f func(e float64) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float64LazyList) MapTuple2Option(f func(e float64) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float64LazyList) MapBoolList(f func(e float64) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float64LazyList) MapStringList(f func(e float64) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float64LazyList) MapIntList(f func(e float64) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float64LazyList) MapInt64List(f func(e float64) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float64LazyList) MapByteList(f func(e float64) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float64LazyList) MapRuneList(f func(e float64) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float64LazyList) MapFloat32List(f func(e float64) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float64LazyList) MapFloat64List(f func(e float64) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float64LazyList) MapAnyList(f func(e float64) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float64LazyList) MapTuple2List(f func(e float64) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l AnyLazyList) MapBool(f func(e Any) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l AnyLazyList) MapString(f func(e Any) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l AnyLazyList) MapInt(f func(e Any) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l AnyLazyList) MapInt64(f func(e Any) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l AnyLazyList) MapByte(f func(e Any) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l AnyLazyList) MapRune(f func(e Any) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l AnyLazyList) MapFloat32(f func(e Any) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l AnyLazyList) MapFloat64(f func(e Any) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l AnyLazyList) MapAny(f func(e Any) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l AnyLazyList) MapTuple2(f func(e Any) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l AnyLazyList) MapBoolArray(f func(e Any) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l AnyLazyList) MapStringArray(f func(e Any) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l AnyLazyList) MapIntArray(f func(e Any) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l AnyLazyList) MapInt64Array(f func(e Any) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l AnyLazyList) MapByteArray(f func(e Any) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l AnyLazyList) MapRuneArray(f func(e Any) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l AnyLazyList) MapFloat32Array(f func(e Any) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l AnyLazyList) MapFloat64Array(f func(e Any) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l AnyLazyList) MapAnyArray(f func(e Any) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l AnyLazyList) MapTuple2Array(f func(e Any) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l AnyLazyList) MapBoolOption(f func(e Any) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l AnyLazyList) MapStringOption(f func(e Any) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l AnyLazyList) MapIntOption(f func(e Any) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l AnyLazyList) MapInt64Option(f func(e Any) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l AnyLazyList) MapByteOption(f func(e Any) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l AnyLazyList) MapRuneOption(f func(e Any) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l AnyLazyList) MapFloat32Option(f func(e Any) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l AnyLazyList) MapFloat64Option(f func(e Any) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l AnyLazyList) MapAnyOption(f func(e Any) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l AnyLazyList) MapTuple2Option(f func(e Any) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l AnyLazyList) MapBoolList(f func(e Any) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l AnyLazyList) MapStringList(f func(e Any) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l AnyLazyList) MapIntList(f func(e Any) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l AnyLazyList) MapInt64List(f func(e Any) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l AnyLazyList) MapByteList(f func(e Any) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l AnyLazyList) MapRuneList(f func(e Any) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l AnyLazyList) MapFloat32List(f func(e Any) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l AnyLazyList) MapFloat64List(f func(e Any) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l AnyLazyList) MapAnyList(f func(e Any) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l AnyLazyList) MapTuple2List(f func(e Any) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Tuple2LazyList) MapBool(f func(e Tuple2) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Tuple2LazyList) MapString(f func(e Tuple2) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Tuple2LazyList) MapInt(f func(e Tuple2) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Tuple2LazyList) MapInt64(f func(e Tuple2) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Tuple2LazyList) MapByte(f func(e Tuple2) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Tuple2LazyList) MapRune(f func(e Tuple2) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat32(f func(e Tuple2) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Tuple2LazyList) MapFloat64(f func(e Tuple2) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Tuple2LazyList) MapAny(f func(e Tuple2) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Tuple2LazyList) MapTuple2(f func(e Tuple2) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Tuple2LazyList) MapBoolArray(f func(e Tuple2) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapStringArray(f func(e Tuple2) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapIntArray(f func(e Tuple2) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapInt64Array(f func(e Tuple2) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapByteArray(f func(e Tuple2) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapRuneArray(f func(e Tuple2) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat32Array(f func(e Tuple2) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat64Array(f func(e Tuple2) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapAnyArray(f func(e Tuple2) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapTuple2Array(f func(e Tuple2) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Tuple2LazyList) MapBoolOption(f func(e Tuple2) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Tuple2LazyList) MapStringOption(f func(e Tuple2) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Tuple2LazyList) MapIntOption(f func(e Tuple2) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Tuple2LazyList) MapInt64Option(f func(e Tuple2) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Tuple2LazyList) MapByteOption(f func(e Tuple2) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Tuple2LazyList) MapRuneOption(f func(e Tuple2) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat32Option(f func(e Tuple2) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat64Option(f func(e Tuple2) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Tuple2LazyList) MapAnyOption(f func(e Tuple2) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Tuple2LazyList) MapTuple2Option(f func(e Tuple2) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Tuple2LazyList) MapBoolList(f func(e Tuple2) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Tuple2LazyList) MapStringList(f func(e Tuple2) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Tuple2LazyList) MapIntList(f func(e Tuple2) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Tuple2LazyList) MapInt64List(f func(e Tuple2) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Tuple2LazyList) MapByteList(f func(e Tuple2) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Tuple2LazyList) MapRuneList(f func(e Tuple2) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat32List(f func(e Tuple2) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Tuple2LazyList) MapFloat64List(f func(e Tuple2) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Tuple2LazyList) MapAnyList(f func(e Tuple2) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Tuple2LazyList) MapTuple2List(f func(e Tuple2) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l BoolArrayLazyList) MapBool(f func(e []bool) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l BoolArrayLazyList) MapString(f func(e []bool) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l BoolArrayLazyList) MapInt(f func(e []bool) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l BoolArrayLazyList) MapInt64(f func(e []bool) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l BoolArrayLazyList) MapByte(f func(e []bool) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l BoolArrayLazyList) MapRune(f func(e []bool) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat32(f func(e []bool) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat64(f func(e []bool) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l BoolArrayLazyList) MapAny(f func(e []bool) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l BoolArrayLazyList) MapTuple2(f func(e []bool) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l BoolArrayLazyList) MapBoolArray(f func(e []bool) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapStringArray(f func(e []bool) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapIntArray(f func(e []bool) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapInt64Array(f func(e []bool) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapByteArray(f func(e []bool) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapRuneArray(f func(e []bool) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat32Array(f func(e []bool) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat64Array(f func(e []bool) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapAnyArray(f func(e []bool) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapTuple2Array(f func(e []bool) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l BoolArrayLazyList) MapBoolOption(f func(e []bool) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapStringOption(f func(e []bool) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapIntOption(f func(e []bool) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapInt64Option(f func(e []bool) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapByteOption(f func(e []bool) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapRuneOption(f func(e []bool) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat32Option(f func(e []bool) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat64Option(f func(e []bool) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapAnyOption(f func(e []bool) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapTuple2Option(f func(e []bool) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l BoolArrayLazyList) MapBoolList(f func(e []bool) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l BoolArrayLazyList) MapStringList(f func(e []bool) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l BoolArrayLazyList) MapIntList(f func(e []bool) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l BoolArrayLazyList) MapInt64List(f func(e []bool) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l BoolArrayLazyList) MapByteList(f func(e []bool) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l BoolArrayLazyList) MapRuneList(f func(e []bool) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat32List(f func(e []bool) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l BoolArrayLazyList) MapFloat64List(f func(e []bool) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l BoolArrayLazyList) MapAnyList(f func(e []bool) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l BoolArrayLazyList) MapTuple2List(f func(e []bool) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l StringArrayLazyList) MapBool(f func(e []string) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l StringArrayLazyList) MapString(f func(e []string) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l StringArrayLazyList) MapInt(f func(e []string) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l StringArrayLazyList) MapInt64(f func(e []string) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l StringArrayLazyList) MapByte(f func(e []string) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l StringArrayLazyList) MapRune(f func(e []string) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat32(f func(e []string) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l StringArrayLazyList) MapFloat64(f func(e []string) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l StringArrayLazyList) MapAny(f func(e []string) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l StringArrayLazyList) MapTuple2(f func(e []string) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l StringArrayLazyList) MapBoolArray(f func(e []string) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapStringArray(f func(e []string) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapIntArray(f func(e []string) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapInt64Array(f func(e []string) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapByteArray(f func(e []string) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapRuneArray(f func(e []string) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat32Array(f func(e []string) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat64Array(f func(e []string) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapAnyArray(f func(e []string) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapTuple2Array(f func(e []string) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l StringArrayLazyList) MapBoolOption(f func(e []string) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l StringArrayLazyList) MapStringOption(f func(e []string) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l StringArrayLazyList) MapIntOption(f func(e []string) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l StringArrayLazyList) MapInt64Option(f func(e []string) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l StringArrayLazyList) MapByteOption(f func(e []string) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l StringArrayLazyList) MapRuneOption(f func(e []string) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat32Option(f func(e []string) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat64Option(f func(e []string) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l StringArrayLazyList) MapAnyOption(f func(e []string) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l StringArrayLazyList) MapTuple2Option(f func(e []string) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l StringArrayLazyList) MapBoolList(f func(e []string) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l StringArrayLazyList) MapStringList(f func(e []string) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l StringArrayLazyList) MapIntList(f func(e []string) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l StringArrayLazyList) MapInt64List(f func(e []string) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l StringArrayLazyList) MapByteList(f func(e []string) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l StringArrayLazyList) MapRuneList(f func(e []string) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat32List(f func(e []string) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l StringArrayLazyList) MapFloat64List(f func(e []string) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l StringArrayLazyList) MapAnyList(f func(e []string) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l StringArrayLazyList) MapTuple2List(f func(e []string) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l IntArrayLazyList) MapBool(f func(e []int) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l IntArrayLazyList) MapString(f func(e []int) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l IntArrayLazyList) MapInt(f func(e []int) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l IntArrayLazyList) MapInt64(f func(e []int) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l IntArrayLazyList) MapByte(f func(e []int) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l IntArrayLazyList) MapRune(f func(e []int) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat32(f func(e []int) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l IntArrayLazyList) MapFloat64(f func(e []int) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l IntArrayLazyList) MapAny(f func(e []int) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l IntArrayLazyList) MapTuple2(f func(e []int) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l IntArrayLazyList) MapBoolArray(f func(e []int) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapStringArray(f func(e []int) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapIntArray(f func(e []int) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapInt64Array(f func(e []int) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapByteArray(f func(e []int) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapRuneArray(f func(e []int) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat32Array(f func(e []int) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat64Array(f func(e []int) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapAnyArray(f func(e []int) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapTuple2Array(f func(e []int) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l IntArrayLazyList) MapBoolOption(f func(e []int) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l IntArrayLazyList) MapStringOption(f func(e []int) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l IntArrayLazyList) MapIntOption(f func(e []int) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l IntArrayLazyList) MapInt64Option(f func(e []int) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l IntArrayLazyList) MapByteOption(f func(e []int) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l IntArrayLazyList) MapRuneOption(f func(e []int) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat32Option(f func(e []int) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat64Option(f func(e []int) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l IntArrayLazyList) MapAnyOption(f func(e []int) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l IntArrayLazyList) MapTuple2Option(f func(e []int) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l IntArrayLazyList) MapBoolList(f func(e []int) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l IntArrayLazyList) MapStringList(f func(e []int) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l IntArrayLazyList) MapIntList(f func(e []int) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l IntArrayLazyList) MapInt64List(f func(e []int) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l IntArrayLazyList) MapByteList(f func(e []int) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l IntArrayLazyList) MapRuneList(f func(e []int) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat32List(f func(e []int) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l IntArrayLazyList) MapFloat64List(f func(e []int) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l IntArrayLazyList) MapAnyList(f func(e []int) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l IntArrayLazyList) MapTuple2List(f func(e []int) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapBool(f func(e []int64) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Int64ArrayLazyList) MapString(f func(e []int64) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Int64ArrayLazyList) MapInt(f func(e []int64) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Int64ArrayLazyList) MapInt64(f func(e []int64) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Int64ArrayLazyList) MapByte(f func(e []int64) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Int64ArrayLazyList) MapRune(f func(e []int64) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat32(f func(e []int64) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat64(f func(e []int64) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Int64ArrayLazyList) MapAny(f func(e []int64) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Int64ArrayLazyList) MapTuple2(f func(e []int64) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Int64ArrayLazyList) MapBoolArray(f func(e []int64) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapStringArray(f func(e []int64) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapIntArray(f func(e []int64) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapInt64Array(f func(e []int64) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapByteArray(f func(e []int64) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapRuneArray(f func(e []int64) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat32Array(f func(e []int64) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat64Array(f func(e []int64) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapAnyArray(f func(e []int64) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapTuple2Array(f func(e []int64) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) MapBoolOption(f func(e []int64) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapStringOption(f func(e []int64) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapIntOption(f func(e []int64) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapInt64Option(f func(e []int64) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapByteOption(f func(e []int64) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapRuneOption(f func(e []int64) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat32Option(f func(e []int64) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat64Option(f func(e []int64) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapAnyOption(f func(e []int64) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapTuple2Option(f func(e []int64) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Int64ArrayLazyList) MapBoolList(f func(e []int64) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapStringList(f func(e []int64) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapIntList(f func(e []int64) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapInt64List(f func(e []int64) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapByteList(f func(e []int64) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapRuneList(f func(e []int64) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat32List(f func(e []int64) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapFloat64List(f func(e []int64) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapAnyList(f func(e []int64) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Int64ArrayLazyList) MapTuple2List(f func(e []int64) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l ByteArrayLazyList) MapBool(f func(e []byte) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l ByteArrayLazyList) MapString(f func(e []byte) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l ByteArrayLazyList) MapInt(f func(e []byte) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l ByteArrayLazyList) MapInt64(f func(e []byte) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l ByteArrayLazyList) MapByte(f func(e []byte) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l ByteArrayLazyList) MapRune(f func(e []byte) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat32(f func(e []byte) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat64(f func(e []byte) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l ByteArrayLazyList) MapAny(f func(e []byte) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l ByteArrayLazyList) MapTuple2(f func(e []byte) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l ByteArrayLazyList) MapBoolArray(f func(e []byte) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapStringArray(f func(e []byte) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapIntArray(f func(e []byte) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapInt64Array(f func(e []byte) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapByteArray(f func(e []byte) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapRuneArray(f func(e []byte) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat32Array(f func(e []byte) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat64Array(f func(e []byte) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapAnyArray(f func(e []byte) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapTuple2Array(f func(e []byte) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l ByteArrayLazyList) MapBoolOption(f func(e []byte) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapStringOption(f func(e []byte) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapIntOption(f func(e []byte) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapInt64Option(f func(e []byte) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapByteOption(f func(e []byte) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapRuneOption(f func(e []byte) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat32Option(f func(e []byte) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat64Option(f func(e []byte) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapAnyOption(f func(e []byte) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapTuple2Option(f func(e []byte) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l ByteArrayLazyList) MapBoolList(f func(e []byte) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l ByteArrayLazyList) MapStringList(f func(e []byte) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l ByteArrayLazyList) MapIntList(f func(e []byte) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l ByteArrayLazyList) MapInt64List(f func(e []byte) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l ByteArrayLazyList) MapByteList(f func(e []byte) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l ByteArrayLazyList) MapRuneList(f func(e []byte) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat32List(f func(e []byte) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l ByteArrayLazyList) MapFloat64List(f func(e []byte) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l ByteArrayLazyList) MapAnyList(f func(e []byte) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l ByteArrayLazyList) MapTuple2List(f func(e []byte) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l RuneArrayLazyList) MapBool(f func(e []rune) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l RuneArrayLazyList) MapString(f func(e []rune) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l RuneArrayLazyList) MapInt(f func(e []rune) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l RuneArrayLazyList) MapInt64(f func(e []rune) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l RuneArrayLazyList) MapByte(f func(e []rune) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l RuneArrayLazyList) MapRune(f func(e []rune) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat32(f func(e []rune) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat64(f func(e []rune) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l RuneArrayLazyList) MapAny(f func(e []rune) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l RuneArrayLazyList) MapTuple2(f func(e []rune) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l RuneArrayLazyList) MapBoolArray(f func(e []rune) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapStringArray(f func(e []rune) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapIntArray(f func(e []rune) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapInt64Array(f func(e []rune) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapByteArray(f func(e []rune) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapRuneArray(f func(e []rune) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat32Array(f func(e []rune) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat64Array(f func(e []rune) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapAnyArray(f func(e []rune) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapTuple2Array(f func(e []rune) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l RuneArrayLazyList) MapBoolOption(f func(e []rune) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapStringOption(f func(e []rune) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapIntOption(f func(e []rune) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapInt64Option(f func(e []rune) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapByteOption(f func(e []rune) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapRuneOption(f func(e []rune) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat32Option(f func(e []rune) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat64Option(f func(e []rune) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapAnyOption(f func(e []rune) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapTuple2Option(f func(e []rune) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l RuneArrayLazyList) MapBoolList(f func(e []rune) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l RuneArrayLazyList) MapStringList(f func(e []rune) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l RuneArrayLazyList) MapIntList(f func(e []rune) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l RuneArrayLazyList) MapInt64List(f func(e []rune) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l RuneArrayLazyList) MapByteList(f func(e []rune) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l RuneArrayLazyList) MapRuneList(f func(e []rune) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat32List(f func(e []rune) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l RuneArrayLazyList) MapFloat64List(f func(e []rune) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l RuneArrayLazyList) MapAnyList(f func(e []rune) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l RuneArrayLazyList) MapTuple2List(f func(e []rune) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapBool(f func(e []float32) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float32ArrayLazyList) MapString(f func(e []float32) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float32ArrayLazyList) MapInt(f func(e []float32) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float32ArrayLazyList) MapInt64(f func(e []float32) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float32ArrayLazyList) MapByte(f func(e []float32) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float32ArrayLazyList) MapRune(f func(e []float32) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat32(f func(e []float32) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat64(f func(e []float32) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float32ArrayLazyList) MapAny(f func(e []float32) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float32ArrayLazyList) MapTuple2(f func(e []float32) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float32ArrayLazyList) MapBoolArray(f func(e []float32) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapStringArray(f func(e []float32) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapIntArray(f func(e []float32) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapInt64Array(f func(e []float32) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapByteArray(f func(e []float32) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapRuneArray(f func(e []float32) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat32Array(f func(e []float32) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat64Array(f func(e []float32) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapAnyArray(f func(e []float32) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapTuple2Array(f func(e []float32) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) MapBoolOption(f func(e []float32) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapStringOption(f func(e []float32) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapIntOption(f func(e []float32) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapInt64Option(f func(e []float32) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapByteOption(f func(e []float32) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapRuneOption(f func(e []float32) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat32Option(f func(e []float32) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat64Option(f func(e []float32) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapAnyOption(f func(e []float32) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapTuple2Option(f func(e []float32) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float32ArrayLazyList) MapBoolList(f func(e []float32) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapStringList(f func(e []float32) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapIntList(f func(e []float32) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapInt64List(f func(e []float32) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapByteList(f func(e []float32) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapRuneList(f func(e []float32) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat32List(f func(e []float32) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapFloat64List(f func(e []float32) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapAnyList(f func(e []float32) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float32ArrayLazyList) MapTuple2List(f func(e []float32) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapBool(f func(e []float64) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float64ArrayLazyList) MapString(f func(e []float64) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float64ArrayLazyList) MapInt(f func(e []float64) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float64ArrayLazyList) MapInt64(f func(e []float64) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float64ArrayLazyList) MapByte(f func(e []float64) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float64ArrayLazyList) MapRune(f func(e []float64) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat32(f func(e []float64) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat64(f func(e []float64) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float64ArrayLazyList) MapAny(f func(e []float64) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float64ArrayLazyList) MapTuple2(f func(e []float64) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float64ArrayLazyList) MapBoolArray(f func(e []float64) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapStringArray(f func(e []float64) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapIntArray(f func(e []float64) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapInt64Array(f func(e []float64) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapByteArray(f func(e []float64) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapRuneArray(f func(e []float64) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat32Array(f func(e []float64) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat64Array(f func(e []float64) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapAnyArray(f func(e []float64) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapTuple2Array(f func(e []float64) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) MapBoolOption(f func(e []float64) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapStringOption(f func(e []float64) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapIntOption(f func(e []float64) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapInt64Option(f func(e []float64) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapByteOption(f func(e []float64) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapRuneOption(f func(e []float64) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat32Option(f func(e []float64) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat64Option(f func(e []float64) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapAnyOption(f func(e []float64) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapTuple2Option(f func(e []float64) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float64ArrayLazyList) MapBoolList(f func(e []float64) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapStringList(f func(e []float64) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapIntList(f func(e []float64) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapInt64List(f func(e []float64) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapByteList(f func(e []float64) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapRuneList(f func(e []float64) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat32List(f func(e []float64) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapFloat64List(f func(e []float64) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapAnyList(f func(e []float64) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float64ArrayLazyList) MapTuple2List(f func(e []float64) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l AnyArrayLazyList) MapBool(f func(e []Any) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l AnyArrayLazyList) MapString(f func(e []Any) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l AnyArrayLazyList) MapInt(f func(e []Any) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l AnyArrayLazyList) MapInt64(f func(e []Any) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l AnyArrayLazyList) MapByte(f func(e []Any) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l AnyArrayLazyList) MapRune(f func(e []Any) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat32(f func(e []Any) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat64(f func(e []Any) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l AnyArrayLazyList) MapAny(f func(e []Any) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l AnyArrayLazyList) MapTuple2(f func(e []Any) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l AnyArrayLazyList) MapBoolArray(f func(e []Any) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapStringArray(f func(e []Any) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapIntArray(f func(e []Any) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapInt64Array(f func(e []Any) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapByteArray(f func(e []Any) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapRuneArray(f func(e []Any) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat32Array(f func(e []Any) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat64Array(f func(e []Any) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapAnyArray(f func(e []Any) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapTuple2Array(f func(e []Any) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l AnyArrayLazyList) MapBoolOption(f func(e []Any) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapStringOption(f func(e []Any) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapIntOption(f func(e []Any) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapInt64Option(f func(e []Any) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapByteOption(f func(e []Any) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapRuneOption(f func(e []Any) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat32Option(f func(e []Any) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat64Option(f func(e []Any) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapAnyOption(f func(e []Any) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapTuple2Option(f func(e []Any) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l AnyArrayLazyList) MapBoolList(f func(e []Any) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l AnyArrayLazyList) MapStringList(f func(e []Any) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l AnyArrayLazyList) MapIntList(f func(e []Any) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l AnyArrayLazyList) MapInt64List(f func(e []Any) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l AnyArrayLazyList) MapByteList(f func(e []Any) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l AnyArrayLazyList) MapRuneList(f func(e []Any) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat32List(f func(e []Any) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l AnyArrayLazyList) MapFloat64List(f func(e []Any) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l AnyArrayLazyList) MapAnyList(f func(e []Any) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l AnyArrayLazyList) MapTuple2List(f func(e []Any) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapBool(f func(e []Tuple2) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapString(f func(e []Tuple2) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapInt(f func(e []Tuple2) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapInt64(f func(e []Tuple2) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapByte(f func(e []Tuple2) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapRune(f func(e []Tuple2) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat32(f func(e []Tuple2) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat64(f func(e []Tuple2) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapAny(f func(e []Tuple2) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapTuple2(f func(e []Tuple2) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapBoolArray(f func(e []Tuple2) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapStringArray(f func(e []Tuple2) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapIntArray(f func(e []Tuple2) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapInt64Array(f func(e []Tuple2) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapByteArray(f func(e []Tuple2) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapRuneArray(f func(e []Tuple2) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat32Array(f func(e []Tuple2) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat64Array(f func(e []Tuple2) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapAnyArray(f func(e []Tuple2) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapTuple2Array(f func(e []Tuple2) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapBoolOption(f func(e []Tuple2) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapStringOption(f func(e []Tuple2) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapIntOption(f func(e []Tuple2) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapInt64Option(f func(e []Tuple2) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapByteOption(f func(e []Tuple2) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapRuneOption(f func(e []Tuple2) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat32Option(f func(e []Tuple2) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat64Option(f func(e []Tuple2) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapAnyOption(f func(e []Tuple2) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapTuple2Option(f func(e []Tuple2) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapBoolList(f func(e []Tuple2) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapStringList(f func(e []Tuple2) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapIntList(f func(e []Tuple2) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapInt64List(f func(e []Tuple2) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapByteList(f func(e []Tuple2) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapRuneList(f func(e []Tuple2) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat32List(f func(e []Tuple2) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapFloat64List(f func(e []Tuple2) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapAnyList(f func(e []Tuple2) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Tuple2ArrayLazyList) MapTuple2List(f func(e []Tuple2) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l BoolOptionLazyList) MapBool(f func(e BoolOption) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l BoolOptionLazyList) MapString(f func(e BoolOption) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l BoolOptionLazyList) MapInt(f func(e BoolOption) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l BoolOptionLazyList) MapInt64(f func(e BoolOption) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l BoolOptionLazyList) MapByte(f func(e BoolOption) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l BoolOptionLazyList) MapRune(f func(e BoolOption) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat32(f func(e BoolOption) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat64(f func(e BoolOption) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l BoolOptionLazyList) MapAny(f func(e BoolOption) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l BoolOptionLazyList) MapTuple2(f func(e BoolOption) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l BoolOptionLazyList) MapBoolArray(f func(e BoolOption) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapStringArray(f func(e BoolOption) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapIntArray(f func(e BoolOption) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapInt64Array(f func(e BoolOption) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapByteArray(f func(e BoolOption) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapRuneArray(f func(e BoolOption) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat32Array(f func(e BoolOption) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat64Array(f func(e BoolOption) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapAnyArray(f func(e BoolOption) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapTuple2Array(f func(e BoolOption) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l BoolOptionLazyList) MapBoolOption(f func(e BoolOption) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapStringOption(f func(e BoolOption) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapIntOption(f func(e BoolOption) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapInt64Option(f func(e BoolOption) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapByteOption(f func(e BoolOption) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapRuneOption(f func(e BoolOption) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat32Option(f func(e BoolOption) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat64Option(f func(e BoolOption) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapAnyOption(f func(e BoolOption) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapTuple2Option(f func(e BoolOption) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l BoolOptionLazyList) MapBoolList(f func(e BoolOption) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l BoolOptionLazyList) MapStringList(f func(e BoolOption) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l BoolOptionLazyList) MapIntList(f func(e BoolOption) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l BoolOptionLazyList) MapInt64List(f func(e BoolOption) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l BoolOptionLazyList) MapByteList(f func(e BoolOption) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l BoolOptionLazyList) MapRuneList(f func(e BoolOption) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat32List(f func(e BoolOption) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l BoolOptionLazyList) MapFloat64List(f func(e BoolOption) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l BoolOptionLazyList) MapAnyList(f func(e BoolOption) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l BoolOptionLazyList) MapTuple2List(f func(e BoolOption) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l StringOptionLazyList) MapBool(f func(e StringOption) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l StringOptionLazyList) MapString(f func(e StringOption) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l StringOptionLazyList) MapInt(f func(e StringOption) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l StringOptionLazyList) MapInt64(f func(e StringOption) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l StringOptionLazyList) MapByte(f func(e StringOption) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l StringOptionLazyList) MapRune(f func(e StringOption) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat32(f func(e StringOption) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l StringOptionLazyList) MapFloat64(f func(e StringOption) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l StringOptionLazyList) MapAny(f func(e StringOption) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l StringOptionLazyList) MapTuple2(f func(e StringOption) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l StringOptionLazyList) MapBoolArray(f func(e StringOption) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapStringArray(f func(e StringOption) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapIntArray(f func(e StringOption) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapInt64Array(f func(e StringOption) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapByteArray(f func(e StringOption) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapRuneArray(f func(e StringOption) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat32Array(f func(e StringOption) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat64Array(f func(e StringOption) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapAnyArray(f func(e StringOption) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapTuple2Array(f func(e StringOption) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l StringOptionLazyList) MapBoolOption(f func(e StringOption) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l StringOptionLazyList) MapStringOption(f func(e StringOption) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l StringOptionLazyList) MapIntOption(f func(e StringOption) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l StringOptionLazyList) MapInt64Option(f func(e StringOption) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l StringOptionLazyList) MapByteOption(f func(e StringOption) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l StringOptionLazyList) MapRuneOption(f func(e StringOption) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat32Option(f func(e StringOption) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat64Option(f func(e StringOption) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l StringOptionLazyList) MapAnyOption(f func(e StringOption) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l StringOptionLazyList) MapTuple2Option(f func(e StringOption) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l StringOptionLazyList) MapBoolList(f func(e StringOption) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l StringOptionLazyList) MapStringList(f func(e StringOption) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l StringOptionLazyList) MapIntList(f func(e StringOption) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l StringOptionLazyList) MapInt64List(f func(e StringOption) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l StringOptionLazyList) MapByteList(f func(e StringOption) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l StringOptionLazyList) MapRuneList(f func(e StringOption) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat32List(f func(e StringOption) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l StringOptionLazyList) MapFloat64List(f func(e StringOption) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l StringOptionLazyList) MapAnyList(f func(e StringOption) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l StringOptionLazyList) MapTuple2List(f func(e StringOption) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l IntOptionLazyList) MapBool(f func(e IntOption) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l IntOptionLazyList) MapString(f func(e IntOption) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l IntOptionLazyList) MapInt(f func(e IntOption) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l IntOptionLazyList) MapInt64(f func(e IntOption) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l IntOptionLazyList) MapByte(f func(e IntOption) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l IntOptionLazyList) MapRune(f func(e IntOption) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat32(f func(e IntOption) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l IntOptionLazyList) MapFloat64(f func(e IntOption) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l IntOptionLazyList) MapAny(f func(e IntOption) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l IntOptionLazyList) MapTuple2(f func(e IntOption) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l IntOptionLazyList) MapBoolArray(f func(e IntOption) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapStringArray(f func(e IntOption) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapIntArray(f func(e IntOption) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapInt64Array(f func(e IntOption) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapByteArray(f func(e IntOption) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapRuneArray(f func(e IntOption) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat32Array(f func(e IntOption) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat64Array(f func(e IntOption) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapAnyArray(f func(e IntOption) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapTuple2Array(f func(e IntOption) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l IntOptionLazyList) MapBoolOption(f func(e IntOption) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l IntOptionLazyList) MapStringOption(f func(e IntOption) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l IntOptionLazyList) MapIntOption(f func(e IntOption) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l IntOptionLazyList) MapInt64Option(f func(e IntOption) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l IntOptionLazyList) MapByteOption(f func(e IntOption) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l IntOptionLazyList) MapRuneOption(f func(e IntOption) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat32Option(f func(e IntOption) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat64Option(f func(e IntOption) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l IntOptionLazyList) MapAnyOption(f func(e IntOption) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l IntOptionLazyList) MapTuple2Option(f func(e IntOption) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l IntOptionLazyList) MapBoolList(f func(e IntOption) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l IntOptionLazyList) MapStringList(f func(e IntOption) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l IntOptionLazyList) MapIntList(f func(e IntOption) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l IntOptionLazyList) MapInt64List(f func(e IntOption) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l IntOptionLazyList) MapByteList(f func(e IntOption) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l IntOptionLazyList) MapRuneList(f func(e IntOption) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat32List(f func(e IntOption) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l IntOptionLazyList) MapFloat64List(f func(e IntOption) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l IntOptionLazyList) MapAnyList(f func(e IntOption) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l IntOptionLazyList) MapTuple2List(f func(e IntOption) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Int64OptionLazyList) MapBool(f func(e Int64Option) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Int64OptionLazyList) MapString(f func(e Int64Option) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Int64OptionLazyList) MapInt(f func(e Int64Option) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Int64OptionLazyList) MapInt64(f func(e Int64Option) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Int64OptionLazyList) MapByte(f func(e Int64Option) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Int64OptionLazyList) MapRune(f func(e Int64Option) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat32(f func(e Int64Option) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat64(f func(e Int64Option) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Int64OptionLazyList) MapAny(f func(e Int64Option) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Int64OptionLazyList) MapTuple2(f func(e Int64Option) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Int64OptionLazyList) MapBoolArray(f func(e Int64Option) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapStringArray(f func(e Int64Option) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapIntArray(f func(e Int64Option) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapInt64Array(f func(e Int64Option) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapByteArray(f func(e Int64Option) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapRuneArray(f func(e Int64Option) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat32Array(f func(e Int64Option) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat64Array(f func(e Int64Option) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapAnyArray(f func(e Int64Option) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapTuple2Array(f func(e Int64Option) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Int64OptionLazyList) MapBoolOption(f func(e Int64Option) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapStringOption(f func(e Int64Option) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapIntOption(f func(e Int64Option) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapInt64Option(f func(e Int64Option) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapByteOption(f func(e Int64Option) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapRuneOption(f func(e Int64Option) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat32Option(f func(e Int64Option) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat64Option(f func(e Int64Option) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapAnyOption(f func(e Int64Option) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapTuple2Option(f func(e Int64Option) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Int64OptionLazyList) MapBoolList(f func(e Int64Option) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Int64OptionLazyList) MapStringList(f func(e Int64Option) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Int64OptionLazyList) MapIntList(f func(e Int64Option) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Int64OptionLazyList) MapInt64List(f func(e Int64Option) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Int64OptionLazyList) MapByteList(f func(e Int64Option) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Int64OptionLazyList) MapRuneList(f func(e Int64Option) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat32List(f func(e Int64Option) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Int64OptionLazyList) MapFloat64List(f func(e Int64Option) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Int64OptionLazyList) MapAnyList(f func(e Int64Option) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Int64OptionLazyList) MapTuple2List(f func(e Int64Option) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l ByteOptionLazyList) MapBool(f func(e ByteOption) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l ByteOptionLazyList) MapString(f func(e ByteOption) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l ByteOptionLazyList) MapInt(f func(e ByteOption) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l ByteOptionLazyList) MapInt64(f func(e ByteOption) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l ByteOptionLazyList) MapByte(f func(e ByteOption) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l ByteOptionLazyList) MapRune(f func(e ByteOption) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat32(f func(e ByteOption) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat64(f func(e ByteOption) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l ByteOptionLazyList) MapAny(f func(e ByteOption) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l ByteOptionLazyList) MapTuple2(f func(e ByteOption) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l ByteOptionLazyList) MapBoolArray(f func(e ByteOption) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapStringArray(f func(e ByteOption) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapIntArray(f func(e ByteOption) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapInt64Array(f func(e ByteOption) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapByteArray(f func(e ByteOption) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapRuneArray(f func(e ByteOption) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat32Array(f func(e ByteOption) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat64Array(f func(e ByteOption) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapAnyArray(f func(e ByteOption) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapTuple2Array(f func(e ByteOption) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l ByteOptionLazyList) MapBoolOption(f func(e ByteOption) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapStringOption(f func(e ByteOption) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapIntOption(f func(e ByteOption) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapInt64Option(f func(e ByteOption) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapByteOption(f func(e ByteOption) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapRuneOption(f func(e ByteOption) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat32Option(f func(e ByteOption) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat64Option(f func(e ByteOption) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapAnyOption(f func(e ByteOption) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapTuple2Option(f func(e ByteOption) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l ByteOptionLazyList) MapBoolList(f func(e ByteOption) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l ByteOptionLazyList) MapStringList(f func(e ByteOption) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l ByteOptionLazyList) MapIntList(f func(e ByteOption) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l ByteOptionLazyList) MapInt64List(f func(e ByteOption) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l ByteOptionLazyList) MapByteList(f func(e ByteOption) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l ByteOptionLazyList) MapRuneList(f func(e ByteOption) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat32List(f func(e ByteOption) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l ByteOptionLazyList) MapFloat64List(f func(e ByteOption) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l ByteOptionLazyList) MapAnyList(f func(e ByteOption) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l ByteOptionLazyList) MapTuple2List(f func(e ByteOption) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l RuneOptionLazyList) MapBool(f func(e RuneOption) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l RuneOptionLazyList) MapString(f func(e RuneOption) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l RuneOptionLazyList) MapInt(f func(e RuneOption) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l RuneOptionLazyList) MapInt64(f func(e RuneOption) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l RuneOptionLazyList) MapByte(f func(e RuneOption) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l RuneOptionLazyList) MapRune(f func(e RuneOption) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat32(f func(e RuneOption) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat64(f func(e RuneOption) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l RuneOptionLazyList) MapAny(f func(e RuneOption) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l RuneOptionLazyList) MapTuple2(f func(e RuneOption) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l RuneOptionLazyList) MapBoolArray(f func(e RuneOption) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapStringArray(f func(e RuneOption) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapIntArray(f func(e RuneOption) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapInt64Array(f func(e RuneOption) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapByteArray(f func(e RuneOption) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapRuneArray(f func(e RuneOption) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat32Array(f func(e RuneOption) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat64Array(f func(e RuneOption) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapAnyArray(f func(e RuneOption) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapTuple2Array(f func(e RuneOption) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l RuneOptionLazyList) MapBoolOption(f func(e RuneOption) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapStringOption(f func(e RuneOption) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapIntOption(f func(e RuneOption) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapInt64Option(f func(e RuneOption) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapByteOption(f func(e RuneOption) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapRuneOption(f func(e RuneOption) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat32Option(f func(e RuneOption) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat64Option(f func(e RuneOption) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapAnyOption(f func(e RuneOption) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapTuple2Option(f func(e RuneOption) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l RuneOptionLazyList) MapBoolList(f func(e RuneOption) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l RuneOptionLazyList) MapStringList(f func(e RuneOption) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l RuneOptionLazyList) MapIntList(f func(e RuneOption) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l RuneOptionLazyList) MapInt64List(f func(e RuneOption) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l RuneOptionLazyList) MapByteList(f func(e RuneOption) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l RuneOptionLazyList) MapRuneList(f func(e RuneOption) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat32List(f func(e RuneOption) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l RuneOptionLazyList) MapFloat64List(f func(e RuneOption) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l RuneOptionLazyList) MapAnyList(f func(e RuneOption) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l RuneOptionLazyList) MapTuple2List(f func(e RuneOption) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float32OptionLazyList) MapBool(f func(e Float32Option) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float32OptionLazyList) MapString(f func(e Float32Option) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float32OptionLazyList) MapInt(f func(e Float32Option) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float32OptionLazyList) MapInt64(f func(e Float32Option) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float32OptionLazyList) MapByte(f func(e Float32Option) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float32OptionLazyList) MapRune(f func(e Float32Option) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat32(f func(e Float32Option) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat64(f func(e Float32Option) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float32OptionLazyList) MapAny(f func(e Float32Option) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float32OptionLazyList) MapTuple2(f func(e Float32Option) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float32OptionLazyList) MapBoolArray(f func(e Float32Option) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapStringArray(f func(e Float32Option) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapIntArray(f func(e Float32Option) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapInt64Array(f func(e Float32Option) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapByteArray(f func(e Float32Option) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapRuneArray(f func(e Float32Option) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat32Array(f func(e Float32Option) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat64Array(f func(e Float32Option) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapAnyArray(f func(e Float32Option) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapTuple2Array(f func(e Float32Option) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float32OptionLazyList) MapBoolOption(f func(e Float32Option) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapStringOption(f func(e Float32Option) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapIntOption(f func(e Float32Option) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapInt64Option(f func(e Float32Option) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapByteOption(f func(e Float32Option) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapRuneOption(f func(e Float32Option) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat32Option(f func(e Float32Option) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat64Option(f func(e Float32Option) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapAnyOption(f func(e Float32Option) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapTuple2Option(f func(e Float32Option) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float32OptionLazyList) MapBoolList(f func(e Float32Option) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float32OptionLazyList) MapStringList(f func(e Float32Option) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float32OptionLazyList) MapIntList(f func(e Float32Option) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float32OptionLazyList) MapInt64List(f func(e Float32Option) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float32OptionLazyList) MapByteList(f func(e Float32Option) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float32OptionLazyList) MapRuneList(f func(e Float32Option) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat32List(f func(e Float32Option) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float32OptionLazyList) MapFloat64List(f func(e Float32Option) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float32OptionLazyList) MapAnyList(f func(e Float32Option) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float32OptionLazyList) MapTuple2List(f func(e Float32Option) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float64OptionLazyList) MapBool(f func(e Float64Option) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float64OptionLazyList) MapString(f func(e Float64Option) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float64OptionLazyList) MapInt(f func(e Float64Option) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float64OptionLazyList) MapInt64(f func(e Float64Option) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float64OptionLazyList) MapByte(f func(e Float64Option) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float64OptionLazyList) MapRune(f func(e Float64Option) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat32(f func(e Float64Option) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat64(f func(e Float64Option) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float64OptionLazyList) MapAny(f func(e Float64Option) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float64OptionLazyList) MapTuple2(f func(e Float64Option) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float64OptionLazyList) MapBoolArray(f func(e Float64Option) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapStringArray(f func(e Float64Option) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapIntArray(f func(e Float64Option) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapInt64Array(f func(e Float64Option) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapByteArray(f func(e Float64Option) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapRuneArray(f func(e Float64Option) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat32Array(f func(e Float64Option) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat64Array(f func(e Float64Option) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapAnyArray(f func(e Float64Option) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapTuple2Array(f func(e Float64Option) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float64OptionLazyList) MapBoolOption(f func(e Float64Option) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapStringOption(f func(e Float64Option) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapIntOption(f func(e Float64Option) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapInt64Option(f func(e Float64Option) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapByteOption(f func(e Float64Option) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapRuneOption(f func(e Float64Option) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat32Option(f func(e Float64Option) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat64Option(f func(e Float64Option) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapAnyOption(f func(e Float64Option) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapTuple2Option(f func(e Float64Option) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float64OptionLazyList) MapBoolList(f func(e Float64Option) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float64OptionLazyList) MapStringList(f func(e Float64Option) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float64OptionLazyList) MapIntList(f func(e Float64Option) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float64OptionLazyList) MapInt64List(f func(e Float64Option) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float64OptionLazyList) MapByteList(f func(e Float64Option) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float64OptionLazyList) MapRuneList(f func(e Float64Option) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat32List(f func(e Float64Option) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float64OptionLazyList) MapFloat64List(f func(e Float64Option) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float64OptionLazyList) MapAnyList(f func(e Float64Option) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float64OptionLazyList) MapTuple2List(f func(e Float64Option) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l AnyOptionLazyList) MapBool(f func(e AnyOption) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l AnyOptionLazyList) MapString(f func(e AnyOption) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l AnyOptionLazyList) MapInt(f func(e AnyOption) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l AnyOptionLazyList) MapInt64(f func(e AnyOption) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l AnyOptionLazyList) MapByte(f func(e AnyOption) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l AnyOptionLazyList) MapRune(f func(e AnyOption) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat32(f func(e AnyOption) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat64(f func(e AnyOption) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l AnyOptionLazyList) MapAny(f func(e AnyOption) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l AnyOptionLazyList) MapTuple2(f func(e AnyOption) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l AnyOptionLazyList) MapBoolArray(f func(e AnyOption) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapStringArray(f func(e AnyOption) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapIntArray(f func(e AnyOption) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapInt64Array(f func(e AnyOption) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapByteArray(f func(e AnyOption) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapRuneArray(f func(e AnyOption) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat32Array(f func(e AnyOption) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat64Array(f func(e AnyOption) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapAnyArray(f func(e AnyOption) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapTuple2Array(f func(e AnyOption) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l AnyOptionLazyList) MapBoolOption(f func(e AnyOption) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapStringOption(f func(e AnyOption) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapIntOption(f func(e AnyOption) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapInt64Option(f func(e AnyOption) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapByteOption(f func(e AnyOption) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapRuneOption(f func(e AnyOption) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat32Option(f func(e AnyOption) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat64Option(f func(e AnyOption) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapAnyOption(f func(e AnyOption) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapTuple2Option(f func(e AnyOption) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l AnyOptionLazyList) MapBoolList(f func(e AnyOption) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l AnyOptionLazyList) MapStringList(f func(e AnyOption) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l AnyOptionLazyList) MapIntList(f func(e AnyOption) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l AnyOptionLazyList) MapInt64List(f func(e AnyOption) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l AnyOptionLazyList) MapByteList(f func(e AnyOption) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l AnyOptionLazyList) MapRuneList(f func(e AnyOption) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat32List(f func(e AnyOption) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l AnyOptionLazyList) MapFloat64List(f func(e AnyOption) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l AnyOptionLazyList) MapAnyList(f func(e AnyOption) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l AnyOptionLazyList) MapTuple2List(f func(e AnyOption) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapBool(f func(e Tuple2Option) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapString(f func(e Tuple2Option) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapInt(f func(e Tuple2Option) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapInt64(f func(e Tuple2Option) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Tuple2OptionLazyList) MapByte(f func(e Tuple2Option) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapRune(f func(e Tuple2Option) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat32(f func(e Tuple2Option) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat64(f func(e Tuple2Option) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Tuple2OptionLazyList) MapAny(f func(e Tuple2Option) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapTuple2(f func(e Tuple2Option) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Tuple2OptionLazyList) MapBoolArray(f func(e Tuple2Option) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapStringArray(f func(e Tuple2Option) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapIntArray(f func(e Tuple2Option) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapInt64Array(f func(e Tuple2Option) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapByteArray(f func(e Tuple2Option) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapRuneArray(f func(e Tuple2Option) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat32Array(f func(e Tuple2Option) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat64Array(f func(e Tuple2Option) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapAnyArray(f func(e Tuple2Option) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapTuple2Array(f func(e Tuple2Option) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapBoolOption(f func(e Tuple2Option) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapStringOption(f func(e Tuple2Option) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapIntOption(f func(e Tuple2Option) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapInt64Option(f func(e Tuple2Option) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapByteOption(f func(e Tuple2Option) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapRuneOption(f func(e Tuple2Option) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat32Option(f func(e Tuple2Option) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat64Option(f func(e Tuple2Option) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapAnyOption(f func(e Tuple2Option) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapTuple2Option(f func(e Tuple2Option) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapBoolList(f func(e Tuple2Option) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapStringList(f func(e Tuple2Option) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapIntList(f func(e Tuple2Option) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapInt64List(f func(e Tuple2Option) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapByteList(f func(e Tuple2Option) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapRuneList(f func(e Tuple2Option) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat32List(f func(e Tuple2Option) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapFloat64List(f func(e Tuple2Option) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapAnyList(f func(e Tuple2Option) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Tuple2OptionLazyList) MapTuple2List(f func(e Tuple2Option) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l BoolListLazyList) MapBool(f func(e BoolList) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l BoolListLazyList) MapString(f func(e BoolList) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l BoolListLazyList) MapInt(f func(e BoolList) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l BoolListLazyList) MapInt64(f func(e BoolList) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l BoolListLazyList) MapByte(f func(e BoolList) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l BoolListLazyList) MapRune(f func(e BoolList) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l BoolListLazyList) MapFloat32(f func(e BoolList) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l BoolListLazyList) MapFloat64(f func(e BoolList) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l BoolListLazyList) MapAny(f func(e BoolList) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l BoolListLazyList) MapTuple2(f func(e BoolList) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l BoolListLazyList) MapBoolArray(f func(e BoolList) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l BoolListLazyList) MapStringArray(f func(e BoolList) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l BoolListLazyList) MapIntArray(f func(e BoolList) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l BoolListLazyList) MapInt64Array(f func(e BoolList) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l BoolListLazyList) MapByteArray(f func(e BoolList) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l BoolListLazyList) MapRuneArray(f func(e BoolList) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l BoolListLazyList) MapFloat32Array(f func(e BoolList) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l BoolListLazyList) MapFloat64Array(f func(e BoolList) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l BoolListLazyList) MapAnyArray(f func(e BoolList) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l BoolListLazyList) MapTuple2Array(f func(e BoolList) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l BoolListLazyList) MapBoolOption(f func(e BoolList) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l BoolListLazyList) MapStringOption(f func(e BoolList) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l BoolListLazyList) MapIntOption(f func(e BoolList) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l BoolListLazyList) MapInt64Option(f func(e BoolList) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l BoolListLazyList) MapByteOption(f func(e BoolList) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l BoolListLazyList) MapRuneOption(f func(e BoolList) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l BoolListLazyList) MapFloat32Option(f func(e BoolList) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l BoolListLazyList) MapFloat64Option(f func(e BoolList) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l BoolListLazyList) MapAnyOption(f func(e BoolList) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l BoolListLazyList) MapTuple2Option(f func(e BoolList) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l BoolListLazyList) MapBoolList(f func(e BoolList) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l BoolListLazyList) MapStringList(f func(e BoolList) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l BoolListLazyList) MapIntList(f func(e BoolList) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l BoolListLazyList) MapInt64List(f func(e BoolList) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l BoolListLazyList) MapByteList(f func(e BoolList) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l BoolListLazyList) MapRuneList(f func(e BoolList) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l BoolListLazyList) MapFloat32List(f func(e BoolList) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l BoolListLazyList) MapFloat64List(f func(e BoolList) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l BoolListLazyList) MapAnyList(f func(e BoolList) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l BoolListLazyList) MapTuple2List(f func(e BoolList) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l StringListLazyList) MapBool(f func(e StringList) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l StringListLazyList) MapString(f func(e StringList) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l StringListLazyList) MapInt(f func(e StringList) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l StringListLazyList) MapInt64(f func(e StringList) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l StringListLazyList) MapByte(f func(e StringList) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l StringListLazyList) MapRune(f func(e StringList) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l StringListLazyList) MapFloat32(f func(e StringList) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l StringListLazyList) MapFloat64(f func(e StringList) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l StringListLazyList) MapAny(f func(e StringList) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l StringListLazyList) MapTuple2(f func(e StringList) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l StringListLazyList) MapBoolArray(f func(e StringList) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l StringListLazyList) MapStringArray(f func(e StringList) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l StringListLazyList) MapIntArray(f func(e StringList) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l StringListLazyList) MapInt64Array(f func(e StringList) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l StringListLazyList) MapByteArray(f func(e StringList) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l StringListLazyList) MapRuneArray(f func(e StringList) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l StringListLazyList) MapFloat32Array(f func(e StringList) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l StringListLazyList) MapFloat64Array(f func(e StringList) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l StringListLazyList) MapAnyArray(f func(e StringList) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l StringListLazyList) MapTuple2Array(f func(e StringList) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l StringListLazyList) MapBoolOption(f func(e StringList) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l StringListLazyList) MapStringOption(f func(e StringList) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l StringListLazyList) MapIntOption(f func(e StringList) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l StringListLazyList) MapInt64Option(f func(e StringList) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l StringListLazyList) MapByteOption(f func(e StringList) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l StringListLazyList) MapRuneOption(f func(e StringList) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l StringListLazyList) MapFloat32Option(f func(e StringList) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l StringListLazyList) MapFloat64Option(f func(e StringList) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l StringListLazyList) MapAnyOption(f func(e StringList) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l StringListLazyList) MapTuple2Option(f func(e StringList) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l StringListLazyList) MapBoolList(f func(e StringList) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l StringListLazyList) MapStringList(f func(e StringList) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l StringListLazyList) MapIntList(f func(e StringList) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l StringListLazyList) MapInt64List(f func(e StringList) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l StringListLazyList) MapByteList(f func(e StringList) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l StringListLazyList) MapRuneList(f func(e StringList) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l StringListLazyList) MapFloat32List(f func(e StringList) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l StringListLazyList) MapFloat64List(f func(e StringList) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l StringListLazyList) MapAnyList(f func(e StringList) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l StringListLazyList) MapTuple2List(f func(e StringList) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l IntListLazyList) MapBool(f func(e IntList) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l IntListLazyList) MapString(f func(e IntList) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l IntListLazyList) MapInt(f func(e IntList) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l IntListLazyList) MapInt64(f func(e IntList) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l IntListLazyList) MapByte(f func(e IntList) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l IntListLazyList) MapRune(f func(e IntList) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l IntListLazyList) MapFloat32(f func(e IntList) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l IntListLazyList) MapFloat64(f func(e IntList) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l IntListLazyList) MapAny(f func(e IntList) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l IntListLazyList) MapTuple2(f func(e IntList) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l IntListLazyList) MapBoolArray(f func(e IntList) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l IntListLazyList) MapStringArray(f func(e IntList) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l IntListLazyList) MapIntArray(f func(e IntList) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l IntListLazyList) MapInt64Array(f func(e IntList) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l IntListLazyList) MapByteArray(f func(e IntList) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l IntListLazyList) MapRuneArray(f func(e IntList) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l IntListLazyList) MapFloat32Array(f func(e IntList) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l IntListLazyList) MapFloat64Array(f func(e IntList) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l IntListLazyList) MapAnyArray(f func(e IntList) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l IntListLazyList) MapTuple2Array(f func(e IntList) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l IntListLazyList) MapBoolOption(f func(e IntList) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l IntListLazyList) MapStringOption(f func(e IntList) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l IntListLazyList) MapIntOption(f func(e IntList) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l IntListLazyList) MapInt64Option(f func(e IntList) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l IntListLazyList) MapByteOption(f func(e IntList) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l IntListLazyList) MapRuneOption(f func(e IntList) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l IntListLazyList) MapFloat32Option(f func(e IntList) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l IntListLazyList) MapFloat64Option(f func(e IntList) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l IntListLazyList) MapAnyOption(f func(e IntList) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l IntListLazyList) MapTuple2Option(f func(e IntList) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l IntListLazyList) MapBoolList(f func(e IntList) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l IntListLazyList) MapStringList(f func(e IntList) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l IntListLazyList) MapIntList(f func(e IntList) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l IntListLazyList) MapInt64List(f func(e IntList) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l IntListLazyList) MapByteList(f func(e IntList) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l IntListLazyList) MapRuneList(f func(e IntList) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l IntListLazyList) MapFloat32List(f func(e IntList) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l IntListLazyList) MapFloat64List(f func(e IntList) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l IntListLazyList) MapAnyList(f func(e IntList) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l IntListLazyList) MapTuple2List(f func(e IntList) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Int64ListLazyList) MapBool(f func(e Int64List) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Int64ListLazyList) MapString(f func(e Int64List) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Int64ListLazyList) MapInt(f func(e Int64List) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Int64ListLazyList) MapInt64(f func(e Int64List) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Int64ListLazyList) MapByte(f func(e Int64List) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Int64ListLazyList) MapRune(f func(e Int64List) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat32(f func(e Int64List) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Int64ListLazyList) MapFloat64(f func(e Int64List) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Int64ListLazyList) MapAny(f func(e Int64List) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Int64ListLazyList) MapTuple2(f func(e Int64List) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Int64ListLazyList) MapBoolArray(f func(e Int64List) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapStringArray(f func(e Int64List) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapIntArray(f func(e Int64List) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapInt64Array(f func(e Int64List) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapByteArray(f func(e Int64List) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapRuneArray(f func(e Int64List) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat32Array(f func(e Int64List) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat64Array(f func(e Int64List) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapAnyArray(f func(e Int64List) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapTuple2Array(f func(e Int64List) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Int64ListLazyList) MapBoolOption(f func(e Int64List) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Int64ListLazyList) MapStringOption(f func(e Int64List) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Int64ListLazyList) MapIntOption(f func(e Int64List) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Int64ListLazyList) MapInt64Option(f func(e Int64List) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Int64ListLazyList) MapByteOption(f func(e Int64List) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Int64ListLazyList) MapRuneOption(f func(e Int64List) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat32Option(f func(e Int64List) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat64Option(f func(e Int64List) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Int64ListLazyList) MapAnyOption(f func(e Int64List) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Int64ListLazyList) MapTuple2Option(f func(e Int64List) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Int64ListLazyList) MapBoolList(f func(e Int64List) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Int64ListLazyList) MapStringList(f func(e Int64List) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Int64ListLazyList) MapIntList(f func(e Int64List) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Int64ListLazyList) MapInt64List(f func(e Int64List) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Int64ListLazyList) MapByteList(f func(e Int64List) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Int64ListLazyList) MapRuneList(f func(e Int64List) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat32List(f func(e Int64List) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Int64ListLazyList) MapFloat64List(f func(e Int64List) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Int64ListLazyList) MapAnyList(f func(e Int64List) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Int64ListLazyList) MapTuple2List(f func(e Int64List) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l ByteListLazyList) MapBool(f func(e ByteList) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l ByteListLazyList) MapString(f func(e ByteList) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l ByteListLazyList) MapInt(f func(e ByteList) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l ByteListLazyList) MapInt64(f func(e ByteList) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l ByteListLazyList) MapByte(f func(e ByteList) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l ByteListLazyList) MapRune(f func(e ByteList) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l ByteListLazyList) MapFloat32(f func(e ByteList) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l ByteListLazyList) MapFloat64(f func(e ByteList) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l ByteListLazyList) MapAny(f func(e ByteList) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l ByteListLazyList) MapTuple2(f func(e ByteList) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l ByteListLazyList) MapBoolArray(f func(e ByteList) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l ByteListLazyList) MapStringArray(f func(e ByteList) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l ByteListLazyList) MapIntArray(f func(e ByteList) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l ByteListLazyList) MapInt64Array(f func(e ByteList) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l ByteListLazyList) MapByteArray(f func(e ByteList) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l ByteListLazyList) MapRuneArray(f func(e ByteList) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l ByteListLazyList) MapFloat32Array(f func(e ByteList) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l ByteListLazyList) MapFloat64Array(f func(e ByteList) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l ByteListLazyList) MapAnyArray(f func(e ByteList) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l ByteListLazyList) MapTuple2Array(f func(e ByteList) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l ByteListLazyList) MapBoolOption(f func(e ByteList) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l ByteListLazyList) MapStringOption(f func(e ByteList) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l ByteListLazyList) MapIntOption(f func(e ByteList) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l ByteListLazyList) MapInt64Option(f func(e ByteList) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l ByteListLazyList) MapByteOption(f func(e ByteList) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l ByteListLazyList) MapRuneOption(f func(e ByteList) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l ByteListLazyList) MapFloat32Option(f func(e ByteList) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l ByteListLazyList) MapFloat64Option(f func(e ByteList) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l ByteListLazyList) MapAnyOption(f func(e ByteList) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l ByteListLazyList) MapTuple2Option(f func(e ByteList) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l ByteListLazyList) MapBoolList(f func(e ByteList) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l ByteListLazyList) MapStringList(f func(e ByteList) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l ByteListLazyList) MapIntList(f func(e ByteList) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l ByteListLazyList) MapInt64List(f func(e ByteList) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l ByteListLazyList) MapByteList(f func(e ByteList) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l ByteListLazyList) MapRuneList(f func(e ByteList) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l ByteListLazyList) MapFloat32List(f func(e ByteList) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l ByteListLazyList) MapFloat64List(f func(e ByteList) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l ByteListLazyList) MapAnyList(f func(e ByteList) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l ByteListLazyList) MapTuple2List(f func(e ByteList) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l RuneListLazyList) MapBool(f func(e RuneList) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l RuneListLazyList) MapString(f func(e RuneList) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l RuneListLazyList) MapInt(f func(e RuneList) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l RuneListLazyList) MapInt64(f func(e RuneList) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l RuneListLazyList) MapByte(f func(e RuneList) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l RuneListLazyList) MapRune(f func(e RuneList) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l RuneListLazyList) MapFloat32(f func(e RuneList) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l RuneListLazyList) MapFloat64(f func(e RuneList) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l RuneListLazyList) MapAny(f func(e RuneList) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l RuneListLazyList) MapTuple2(f func(e RuneList) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l RuneListLazyList) MapBoolArray(f func(e RuneList) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l RuneListLazyList) MapStringArray(f func(e RuneList) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l RuneListLazyList) MapIntArray(f func(e RuneList) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l RuneListLazyList) MapInt64Array(f func(e RuneList) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l RuneListLazyList) MapByteArray(f func(e RuneList) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l RuneListLazyList) MapRuneArray(f func(e RuneList) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l RuneListLazyList) MapFloat32Array(f func(e RuneList) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l RuneListLazyList) MapFloat64Array(f func(e RuneList) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l RuneListLazyList) MapAnyArray(f func(e RuneList) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l RuneListLazyList) MapTuple2Array(f func(e RuneList) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l RuneListLazyList) MapBoolOption(f func(e RuneList) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l RuneListLazyList) MapStringOption(f func(e RuneList) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l RuneListLazyList) MapIntOption(f func(e RuneList) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l RuneListLazyList) MapInt64Option(f func(e RuneList) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l RuneListLazyList) MapByteOption(f func(e RuneList) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l RuneListLazyList) MapRuneOption(f func(e RuneList) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l RuneListLazyList) MapFloat32Option(f func(e RuneList) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l RuneListLazyList) MapFloat64Option(f func(e RuneList) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l RuneListLazyList) MapAnyOption(f func(e RuneList) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l RuneListLazyList) MapTuple2Option(f func(e RuneList) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l RuneListLazyList) MapBoolList(f func(e RuneList) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l RuneListLazyList) MapStringList(f func(e RuneList) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l RuneListLazyList) MapIntList(f func(e RuneList) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l RuneListLazyList) MapInt64List(f func(e RuneList) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l RuneListLazyList) MapByteList(f func(e RuneList) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l RuneListLazyList) MapRuneList(f func(e RuneList) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l RuneListLazyList) MapFloat32List(f func(e RuneList) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l RuneListLazyList) MapFloat64List(f func(e RuneList) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l RuneListLazyList) MapAnyList(f func(e RuneList) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l RuneListLazyList) MapTuple2List(f func(e RuneList) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float32ListLazyList) MapBool(f func(e Float32List) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float32ListLazyList) MapString(f func(e Float32List) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float32ListLazyList) MapInt(f func(e Float32List) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float32ListLazyList) MapInt64(f func(e Float32List) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float32ListLazyList) MapByte(f func(e Float32List) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float32ListLazyList) MapRune(f func(e Float32List) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat32(f func(e Float32List) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float32ListLazyList) MapFloat64(f func(e Float32List) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float32ListLazyList) MapAny(f func(e Float32List) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float32ListLazyList) MapTuple2(f func(e Float32List) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float32ListLazyList) MapBoolArray(f func(e Float32List) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapStringArray(f func(e Float32List) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapIntArray(f func(e Float32List) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapInt64Array(f func(e Float32List) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapByteArray(f func(e Float32List) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapRuneArray(f func(e Float32List) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat32Array(f func(e Float32List) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat64Array(f func(e Float32List) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapAnyArray(f func(e Float32List) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapTuple2Array(f func(e Float32List) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float32ListLazyList) MapBoolOption(f func(e Float32List) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float32ListLazyList) MapStringOption(f func(e Float32List) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float32ListLazyList) MapIntOption(f func(e Float32List) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float32ListLazyList) MapInt64Option(f func(e Float32List) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float32ListLazyList) MapByteOption(f func(e Float32List) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float32ListLazyList) MapRuneOption(f func(e Float32List) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat32Option(f func(e Float32List) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat64Option(f func(e Float32List) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float32ListLazyList) MapAnyOption(f func(e Float32List) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float32ListLazyList) MapTuple2Option(f func(e Float32List) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float32ListLazyList) MapBoolList(f func(e Float32List) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float32ListLazyList) MapStringList(f func(e Float32List) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float32ListLazyList) MapIntList(f func(e Float32List) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float32ListLazyList) MapInt64List(f func(e Float32List) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float32ListLazyList) MapByteList(f func(e Float32List) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float32ListLazyList) MapRuneList(f func(e Float32List) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat32List(f func(e Float32List) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float32ListLazyList) MapFloat64List(f func(e Float32List) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float32ListLazyList) MapAnyList(f func(e Float32List) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float32ListLazyList) MapTuple2List(f func(e Float32List) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Float64ListLazyList) MapBool(f func(e Float64List) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Float64ListLazyList) MapString(f func(e Float64List) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Float64ListLazyList) MapInt(f func(e Float64List) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Float64ListLazyList) MapInt64(f func(e Float64List) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Float64ListLazyList) MapByte(f func(e Float64List) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Float64ListLazyList) MapRune(f func(e Float64List) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat32(f func(e Float64List) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float64ListLazyList) MapFloat64(f func(e Float64List) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Float64ListLazyList) MapAny(f func(e Float64List) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Float64ListLazyList) MapTuple2(f func(e Float64List) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Float64ListLazyList) MapBoolArray(f func(e Float64List) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapStringArray(f func(e Float64List) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapIntArray(f func(e Float64List) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapInt64Array(f func(e Float64List) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapByteArray(f func(e Float64List) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapRuneArray(f func(e Float64List) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat32Array(f func(e Float64List) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat64Array(f func(e Float64List) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapAnyArray(f func(e Float64List) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapTuple2Array(f func(e Float64List) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Float64ListLazyList) MapBoolOption(f func(e Float64List) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Float64ListLazyList) MapStringOption(f func(e Float64List) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Float64ListLazyList) MapIntOption(f func(e Float64List) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Float64ListLazyList) MapInt64Option(f func(e Float64List) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Float64ListLazyList) MapByteOption(f func(e Float64List) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Float64ListLazyList) MapRuneOption(f func(e Float64List) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat32Option(f func(e Float64List) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat64Option(f func(e Float64List) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Float64ListLazyList) MapAnyOption(f func(e Float64List) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Float64ListLazyList) MapTuple2Option(f func(e Float64List) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Float64ListLazyList) MapBoolList(f func(e Float64List) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Float64ListLazyList) MapStringList(f func(e Float64List) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Float64ListLazyList) MapIntList(f func(e Float64List) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Float64ListLazyList) MapInt64List(f func(e Float64List) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Float64ListLazyList) MapByteList(f func(e Float64List) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Float64ListLazyList) MapRuneList(f func(e Float64List) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat32List(f func(e Float64List) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float64ListLazyList) MapFloat64List(f func(e Float64List) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Float64ListLazyList) MapAnyList(f func(e Float64List) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Float64ListLazyList) MapTuple2List(f func(e Float64List) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l AnyListLazyList) MapBool(f func(e AnyList) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l AnyListLazyList) MapString(f func(e AnyList) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l AnyListLazyList) MapInt(f func(e AnyList) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l AnyListLazyList) MapInt64(f func(e AnyList) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l AnyListLazyList) MapByte(f func(e AnyList) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l AnyListLazyList) MapRune(f func(e AnyList) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l AnyListLazyList) MapFloat32(f func(e AnyList) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l AnyListLazyList) MapFloat64(f func(e AnyList) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l AnyListLazyList) MapAny(f func(e AnyList) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l AnyListLazyList) MapTuple2(f func(e AnyList) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l AnyListLazyList) MapBoolArray(f func(e AnyList) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l AnyListLazyList) MapStringArray(f func(e AnyList) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l AnyListLazyList) MapIntArray(f func(e AnyList) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l AnyListLazyList) MapInt64Array(f func(e AnyList) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l AnyListLazyList) MapByteArray(f func(e AnyList) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l AnyListLazyList) MapRuneArray(f func(e AnyList) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l AnyListLazyList) MapFloat32Array(f func(e AnyList) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l AnyListLazyList) MapFloat64Array(f func(e AnyList) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l AnyListLazyList) MapAnyArray(f func(e AnyList) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l AnyListLazyList) MapTuple2Array(f func(e AnyList) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l AnyListLazyList) MapBoolOption(f func(e AnyList) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l AnyListLazyList) MapStringOption(f func(e AnyList) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l AnyListLazyList) MapIntOption(f func(e AnyList) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l AnyListLazyList) MapInt64Option(f func(e AnyList) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l AnyListLazyList) MapByteOption(f func(e AnyList) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l AnyListLazyList) MapRuneOption(f func(e AnyList) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l AnyListLazyList) MapFloat32Option(f func(e AnyList) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l AnyListLazyList) MapFloat64Option(f func(e AnyList) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l AnyListLazyList) MapAnyOption(f func(e AnyList) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l AnyListLazyList) MapTuple2Option(f func(e AnyList) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l AnyListLazyList) MapBoolList(f func(e AnyList) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l AnyListLazyList) MapStringList(f func(e AnyList) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l AnyListLazyList) MapIntList(f func(e AnyList) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l AnyListLazyList) MapInt64List(f func(e AnyList) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l AnyListLazyList) MapByteList(f func(e AnyList) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l AnyListLazyList) MapRuneList(f func(e AnyList) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l AnyListLazyList) MapFloat32List(f func(e AnyList) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l AnyListLazyList) MapFloat64List(f func(e AnyList) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l AnyListLazyList) MapAnyList(f func(e AnyList) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l AnyListLazyList) MapTuple2List(f func(e AnyList) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapBool(f func(e Tuple2List) bool) BoolLazyList {
	newState := func() BoolState {
		state := (*l.state)()
		mappedValue := func() bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBool{mappedValue, nil}
		t := state.tail.MapBool(f)

		return BoolState{&mappedH, &t}
	}
	return BoolLazyList{&newState}
}
func (l Tuple2ListLazyList) MapString(f func(e Tuple2List) string) StringLazyList {
	newState := func() StringState {
		state := (*l.state)()
		mappedValue := func() string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyString{mappedValue, nil}
		t := state.tail.MapString(f)

		return StringState{&mappedH, &t}
	}
	return StringLazyList{&newState}
}
func (l Tuple2ListLazyList) MapInt(f func(e Tuple2List) int) IntLazyList {
	newState := func() IntState {
		state := (*l.state)()
		mappedValue := func() int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt{mappedValue, nil}
		t := state.tail.MapInt(f)

		return IntState{&mappedH, &t}
	}
	return IntLazyList{&newState}
}
func (l Tuple2ListLazyList) MapInt64(f func(e Tuple2List) int64) Int64LazyList {
	newState := func() Int64State {
		state := (*l.state)()
		mappedValue := func() int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64{mappedValue, nil}
		t := state.tail.MapInt64(f)

		return Int64State{&mappedH, &t}
	}
	return Int64LazyList{&newState}
}
func (l Tuple2ListLazyList) MapByte(f func(e Tuple2List) byte) ByteLazyList {
	newState := func() ByteState {
		state := (*l.state)()
		mappedValue := func() byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByte{mappedValue, nil}
		t := state.tail.MapByte(f)

		return ByteState{&mappedH, &t}
	}
	return ByteLazyList{&newState}
}
func (l Tuple2ListLazyList) MapRune(f func(e Tuple2List) rune) RuneLazyList {
	newState := func() RuneState {
		state := (*l.state)()
		mappedValue := func() rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRune{mappedValue, nil}
		t := state.tail.MapRune(f)

		return RuneState{&mappedH, &t}
	}
	return RuneLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat32(f func(e Tuple2List) float32) Float32LazyList {
	newState := func() Float32State {
		state := (*l.state)()
		mappedValue := func() float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32{mappedValue, nil}
		t := state.tail.MapFloat32(f)

		return Float32State{&mappedH, &t}
	}
	return Float32LazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat64(f func(e Tuple2List) float64) Float64LazyList {
	newState := func() Float64State {
		state := (*l.state)()
		mappedValue := func() float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64{mappedValue, nil}
		t := state.tail.MapFloat64(f)

		return Float64State{&mappedH, &t}
	}
	return Float64LazyList{&newState}
}
func (l Tuple2ListLazyList) MapAny(f func(e Tuple2List) Any) AnyLazyList {
	newState := func() AnyState {
		state := (*l.state)()
		mappedValue := func() Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAny{mappedValue, nil}
		t := state.tail.MapAny(f)

		return AnyState{&mappedH, &t}
	}
	return AnyLazyList{&newState}
}
func (l Tuple2ListLazyList) MapTuple2(f func(e Tuple2List) Tuple2) Tuple2LazyList {
	newState := func() Tuple2State {
		state := (*l.state)()
		mappedValue := func() Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2{mappedValue, nil}
		t := state.tail.MapTuple2(f)

		return Tuple2State{&mappedH, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l Tuple2ListLazyList) MapBoolArray(f func(e Tuple2List) []bool) BoolArrayLazyList {
	newState := func() BoolArrayState {
		state := (*l.state)()
		mappedValue := func() []bool {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolArray{mappedValue, nil}
		t := state.tail.MapBoolArray(f)

		return BoolArrayState{&mappedH, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapStringArray(f func(e Tuple2List) []string) StringArrayLazyList {
	newState := func() StringArrayState {
		state := (*l.state)()
		mappedValue := func() []string {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringArray{mappedValue, nil}
		t := state.tail.MapStringArray(f)

		return StringArrayState{&mappedH, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapIntArray(f func(e Tuple2List) []int) IntArrayLazyList {
	newState := func() IntArrayState {
		state := (*l.state)()
		mappedValue := func() []int {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntArray{mappedValue, nil}
		t := state.tail.MapIntArray(f)

		return IntArrayState{&mappedH, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapInt64Array(f func(e Tuple2List) []int64) Int64ArrayLazyList {
	newState := func() Int64ArrayState {
		state := (*l.state)()
		mappedValue := func() []int64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Array{mappedValue, nil}
		t := state.tail.MapInt64Array(f)

		return Int64ArrayState{&mappedH, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapByteArray(f func(e Tuple2List) []byte) ByteArrayLazyList {
	newState := func() ByteArrayState {
		state := (*l.state)()
		mappedValue := func() []byte {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteArray{mappedValue, nil}
		t := state.tail.MapByteArray(f)

		return ByteArrayState{&mappedH, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapRuneArray(f func(e Tuple2List) []rune) RuneArrayLazyList {
	newState := func() RuneArrayState {
		state := (*l.state)()
		mappedValue := func() []rune {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneArray{mappedValue, nil}
		t := state.tail.MapRuneArray(f)

		return RuneArrayState{&mappedH, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat32Array(f func(e Tuple2List) []float32) Float32ArrayLazyList {
	newState := func() Float32ArrayState {
		state := (*l.state)()
		mappedValue := func() []float32 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Array{mappedValue, nil}
		t := state.tail.MapFloat32Array(f)

		return Float32ArrayState{&mappedH, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat64Array(f func(e Tuple2List) []float64) Float64ArrayLazyList {
	newState := func() Float64ArrayState {
		state := (*l.state)()
		mappedValue := func() []float64 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Array{mappedValue, nil}
		t := state.tail.MapFloat64Array(f)

		return Float64ArrayState{&mappedH, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapAnyArray(f func(e Tuple2List) []Any) AnyArrayLazyList {
	newState := func() AnyArrayState {
		state := (*l.state)()
		mappedValue := func() []Any {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyArray{mappedValue, nil}
		t := state.tail.MapAnyArray(f)

		return AnyArrayState{&mappedH, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapTuple2Array(f func(e Tuple2List) []Tuple2) Tuple2ArrayLazyList {
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		mappedValue := func() []Tuple2 {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Array{mappedValue, nil}
		t := state.tail.MapTuple2Array(f)

		return Tuple2ArrayState{&mappedH, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l Tuple2ListLazyList) MapBoolOption(f func(e Tuple2List) BoolOption) BoolOptionLazyList {
	newState := func() BoolOptionState {
		state := (*l.state)()
		mappedValue := func() BoolOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolOption{mappedValue, nil}
		t := state.tail.MapBoolOption(f)

		return BoolOptionState{&mappedH, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapStringOption(f func(e Tuple2List) StringOption) StringOptionLazyList {
	newState := func() StringOptionState {
		state := (*l.state)()
		mappedValue := func() StringOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringOption{mappedValue, nil}
		t := state.tail.MapStringOption(f)

		return StringOptionState{&mappedH, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapIntOption(f func(e Tuple2List) IntOption) IntOptionLazyList {
	newState := func() IntOptionState {
		state := (*l.state)()
		mappedValue := func() IntOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntOption{mappedValue, nil}
		t := state.tail.MapIntOption(f)

		return IntOptionState{&mappedH, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapInt64Option(f func(e Tuple2List) Int64Option) Int64OptionLazyList {
	newState := func() Int64OptionState {
		state := (*l.state)()
		mappedValue := func() Int64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64Option{mappedValue, nil}
		t := state.tail.MapInt64Option(f)

		return Int64OptionState{&mappedH, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapByteOption(f func(e Tuple2List) ByteOption) ByteOptionLazyList {
	newState := func() ByteOptionState {
		state := (*l.state)()
		mappedValue := func() ByteOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteOption{mappedValue, nil}
		t := state.tail.MapByteOption(f)

		return ByteOptionState{&mappedH, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapRuneOption(f func(e Tuple2List) RuneOption) RuneOptionLazyList {
	newState := func() RuneOptionState {
		state := (*l.state)()
		mappedValue := func() RuneOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneOption{mappedValue, nil}
		t := state.tail.MapRuneOption(f)

		return RuneOptionState{&mappedH, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat32Option(f func(e Tuple2List) Float32Option) Float32OptionLazyList {
	newState := func() Float32OptionState {
		state := (*l.state)()
		mappedValue := func() Float32Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32Option{mappedValue, nil}
		t := state.tail.MapFloat32Option(f)

		return Float32OptionState{&mappedH, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat64Option(f func(e Tuple2List) Float64Option) Float64OptionLazyList {
	newState := func() Float64OptionState {
		state := (*l.state)()
		mappedValue := func() Float64Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64Option{mappedValue, nil}
		t := state.tail.MapFloat64Option(f)

		return Float64OptionState{&mappedH, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapAnyOption(f func(e Tuple2List) AnyOption) AnyOptionLazyList {
	newState := func() AnyOptionState {
		state := (*l.state)()
		mappedValue := func() AnyOption {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyOption{mappedValue, nil}
		t := state.tail.MapAnyOption(f)

		return AnyOptionState{&mappedH, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapTuple2Option(f func(e Tuple2List) Tuple2Option) Tuple2OptionLazyList {
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		mappedValue := func() Tuple2Option {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2Option{mappedValue, nil}
		t := state.tail.MapTuple2Option(f)

		return Tuple2OptionState{&mappedH, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l Tuple2ListLazyList) MapBoolList(f func(e Tuple2List) BoolList) BoolListLazyList {
	newState := func() BoolListState {
		state := (*l.state)()
		mappedValue := func() BoolList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyBoolList{mappedValue, nil}
		t := state.tail.MapBoolList(f)

		return BoolListState{&mappedH, &t}
	}
	return BoolListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapStringList(f func(e Tuple2List) StringList) StringListLazyList {
	newState := func() StringListState {
		state := (*l.state)()
		mappedValue := func() StringList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyStringList{mappedValue, nil}
		t := state.tail.MapStringList(f)

		return StringListState{&mappedH, &t}
	}
	return StringListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapIntList(f func(e Tuple2List) IntList) IntListLazyList {
	newState := func() IntListState {
		state := (*l.state)()
		mappedValue := func() IntList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyIntList{mappedValue, nil}
		t := state.tail.MapIntList(f)

		return IntListState{&mappedH, &t}
	}
	return IntListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapInt64List(f func(e Tuple2List) Int64List) Int64ListLazyList {
	newState := func() Int64ListState {
		state := (*l.state)()
		mappedValue := func() Int64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyInt64List{mappedValue, nil}
		t := state.tail.MapInt64List(f)

		return Int64ListState{&mappedH, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapByteList(f func(e Tuple2List) ByteList) ByteListLazyList {
	newState := func() ByteListState {
		state := (*l.state)()
		mappedValue := func() ByteList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyByteList{mappedValue, nil}
		t := state.tail.MapByteList(f)

		return ByteListState{&mappedH, &t}
	}
	return ByteListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapRuneList(f func(e Tuple2List) RuneList) RuneListLazyList {
	newState := func() RuneListState {
		state := (*l.state)()
		mappedValue := func() RuneList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyRuneList{mappedValue, nil}
		t := state.tail.MapRuneList(f)

		return RuneListState{&mappedH, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat32List(f func(e Tuple2List) Float32List) Float32ListLazyList {
	newState := func() Float32ListState {
		state := (*l.state)()
		mappedValue := func() Float32List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat32List{mappedValue, nil}
		t := state.tail.MapFloat32List(f)

		return Float32ListState{&mappedH, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapFloat64List(f func(e Tuple2List) Float64List) Float64ListLazyList {
	newState := func() Float64ListState {
		state := (*l.state)()
		mappedValue := func() Float64List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyFloat64List{mappedValue, nil}
		t := state.tail.MapFloat64List(f)

		return Float64ListState{&mappedH, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapAnyList(f func(e Tuple2List) AnyList) AnyListLazyList {
	newState := func() AnyListState {
		state := (*l.state)()
		mappedValue := func() AnyList {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyAnyList{mappedValue, nil}
		t := state.tail.MapAnyList(f)

		return AnyListState{&mappedH, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Tuple2ListLazyList) MapTuple2List(f func(e Tuple2List) Tuple2List) Tuple2ListLazyList {
	newState := func() Tuple2ListState {
		state := (*l.state)()
		mappedValue := func() Tuple2List {
			h := *state.head
			return f(h.Eval().Cached())
		}
		mappedH := LazyTuple2List{mappedValue, nil}
		t := state.tail.MapTuple2List(f)

		return Tuple2ListState{&mappedH, &t}
	}
	return Tuple2ListLazyList{&newState}
}
