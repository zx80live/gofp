// bootstrap_lazylist_prepend.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

func (l BoolLazyList) Cons(i LazyBool) BoolLazyList {
	xs := BoolLazyList{l.state}
	state := func() BoolState { return BoolState{&i, &xs} }

	return BoolLazyList{&state}
}
func (l StringLazyList) Cons(i LazyString) StringLazyList {
	xs := StringLazyList{l.state}
	state := func() StringState { return StringState{&i, &xs} }

	return StringLazyList{&state}
}
func (l IntLazyList) Cons(i LazyInt) IntLazyList {
	xs := IntLazyList{l.state}
	state := func() IntState { return IntState{&i, &xs} }

	return IntLazyList{&state}
}
func (l Int64LazyList) Cons(i LazyInt64) Int64LazyList {
	xs := Int64LazyList{l.state}
	state := func() Int64State { return Int64State{&i, &xs} }

	return Int64LazyList{&state}
}
func (l ByteLazyList) Cons(i LazyByte) ByteLazyList {
	xs := ByteLazyList{l.state}
	state := func() ByteState { return ByteState{&i, &xs} }

	return ByteLazyList{&state}
}
func (l RuneLazyList) Cons(i LazyRune) RuneLazyList {
	xs := RuneLazyList{l.state}
	state := func() RuneState { return RuneState{&i, &xs} }

	return RuneLazyList{&state}
}
func (l Float32LazyList) Cons(i LazyFloat32) Float32LazyList {
	xs := Float32LazyList{l.state}
	state := func() Float32State { return Float32State{&i, &xs} }

	return Float32LazyList{&state}
}
func (l Float64LazyList) Cons(i LazyFloat64) Float64LazyList {
	xs := Float64LazyList{l.state}
	state := func() Float64State { return Float64State{&i, &xs} }

	return Float64LazyList{&state}
}
func (l AnyLazyList) Cons(i LazyAny) AnyLazyList {
	xs := AnyLazyList{l.state}
	state := func() AnyState { return AnyState{&i, &xs} }

	return AnyLazyList{&state}
}
func (l Tuple2LazyList) Cons(i LazyTuple2) Tuple2LazyList {
	xs := Tuple2LazyList{l.state}
	state := func() Tuple2State { return Tuple2State{&i, &xs} }

	return Tuple2LazyList{&state}
}
func (l BoolArrayLazyList) Cons(i LazyBoolArray) BoolArrayLazyList {
	xs := BoolArrayLazyList{l.state}
	state := func() BoolArrayState { return BoolArrayState{&i, &xs} }

	return BoolArrayLazyList{&state}
}
func (l StringArrayLazyList) Cons(i LazyStringArray) StringArrayLazyList {
	xs := StringArrayLazyList{l.state}
	state := func() StringArrayState { return StringArrayState{&i, &xs} }

	return StringArrayLazyList{&state}
}
func (l IntArrayLazyList) Cons(i LazyIntArray) IntArrayLazyList {
	xs := IntArrayLazyList{l.state}
	state := func() IntArrayState { return IntArrayState{&i, &xs} }

	return IntArrayLazyList{&state}
}
func (l Int64ArrayLazyList) Cons(i LazyInt64Array) Int64ArrayLazyList {
	xs := Int64ArrayLazyList{l.state}
	state := func() Int64ArrayState { return Int64ArrayState{&i, &xs} }

	return Int64ArrayLazyList{&state}
}
func (l ByteArrayLazyList) Cons(i LazyByteArray) ByteArrayLazyList {
	xs := ByteArrayLazyList{l.state}
	state := func() ByteArrayState { return ByteArrayState{&i, &xs} }

	return ByteArrayLazyList{&state}
}
func (l RuneArrayLazyList) Cons(i LazyRuneArray) RuneArrayLazyList {
	xs := RuneArrayLazyList{l.state}
	state := func() RuneArrayState { return RuneArrayState{&i, &xs} }

	return RuneArrayLazyList{&state}
}
func (l Float32ArrayLazyList) Cons(i LazyFloat32Array) Float32ArrayLazyList {
	xs := Float32ArrayLazyList{l.state}
	state := func() Float32ArrayState { return Float32ArrayState{&i, &xs} }

	return Float32ArrayLazyList{&state}
}
func (l Float64ArrayLazyList) Cons(i LazyFloat64Array) Float64ArrayLazyList {
	xs := Float64ArrayLazyList{l.state}
	state := func() Float64ArrayState { return Float64ArrayState{&i, &xs} }

	return Float64ArrayLazyList{&state}
}
func (l AnyArrayLazyList) Cons(i LazyAnyArray) AnyArrayLazyList {
	xs := AnyArrayLazyList{l.state}
	state := func() AnyArrayState { return AnyArrayState{&i, &xs} }

	return AnyArrayLazyList{&state}
}
func (l Tuple2ArrayLazyList) Cons(i LazyTuple2Array) Tuple2ArrayLazyList {
	xs := Tuple2ArrayLazyList{l.state}
	state := func() Tuple2ArrayState { return Tuple2ArrayState{&i, &xs} }

	return Tuple2ArrayLazyList{&state}
}
func (l BoolOptionLazyList) Cons(i LazyBoolOption) BoolOptionLazyList {
	xs := BoolOptionLazyList{l.state}
	state := func() BoolOptionState { return BoolOptionState{&i, &xs} }

	return BoolOptionLazyList{&state}
}
func (l StringOptionLazyList) Cons(i LazyStringOption) StringOptionLazyList {
	xs := StringOptionLazyList{l.state}
	state := func() StringOptionState { return StringOptionState{&i, &xs} }

	return StringOptionLazyList{&state}
}
func (l IntOptionLazyList) Cons(i LazyIntOption) IntOptionLazyList {
	xs := IntOptionLazyList{l.state}
	state := func() IntOptionState { return IntOptionState{&i, &xs} }

	return IntOptionLazyList{&state}
}
func (l Int64OptionLazyList) Cons(i LazyInt64Option) Int64OptionLazyList {
	xs := Int64OptionLazyList{l.state}
	state := func() Int64OptionState { return Int64OptionState{&i, &xs} }

	return Int64OptionLazyList{&state}
}
func (l ByteOptionLazyList) Cons(i LazyByteOption) ByteOptionLazyList {
	xs := ByteOptionLazyList{l.state}
	state := func() ByteOptionState { return ByteOptionState{&i, &xs} }

	return ByteOptionLazyList{&state}
}
func (l RuneOptionLazyList) Cons(i LazyRuneOption) RuneOptionLazyList {
	xs := RuneOptionLazyList{l.state}
	state := func() RuneOptionState { return RuneOptionState{&i, &xs} }

	return RuneOptionLazyList{&state}
}
func (l Float32OptionLazyList) Cons(i LazyFloat32Option) Float32OptionLazyList {
	xs := Float32OptionLazyList{l.state}
	state := func() Float32OptionState { return Float32OptionState{&i, &xs} }

	return Float32OptionLazyList{&state}
}
func (l Float64OptionLazyList) Cons(i LazyFloat64Option) Float64OptionLazyList {
	xs := Float64OptionLazyList{l.state}
	state := func() Float64OptionState { return Float64OptionState{&i, &xs} }

	return Float64OptionLazyList{&state}
}
func (l AnyOptionLazyList) Cons(i LazyAnyOption) AnyOptionLazyList {
	xs := AnyOptionLazyList{l.state}
	state := func() AnyOptionState { return AnyOptionState{&i, &xs} }

	return AnyOptionLazyList{&state}
}
func (l Tuple2OptionLazyList) Cons(i LazyTuple2Option) Tuple2OptionLazyList {
	xs := Tuple2OptionLazyList{l.state}
	state := func() Tuple2OptionState { return Tuple2OptionState{&i, &xs} }

	return Tuple2OptionLazyList{&state}
}
func (l BoolListLazyList) Cons(i LazyBoolList) BoolListLazyList {
	xs := BoolListLazyList{l.state}
	state := func() BoolListState { return BoolListState{&i, &xs} }

	return BoolListLazyList{&state}
}
func (l StringListLazyList) Cons(i LazyStringList) StringListLazyList {
	xs := StringListLazyList{l.state}
	state := func() StringListState { return StringListState{&i, &xs} }

	return StringListLazyList{&state}
}
func (l IntListLazyList) Cons(i LazyIntList) IntListLazyList {
	xs := IntListLazyList{l.state}
	state := func() IntListState { return IntListState{&i, &xs} }

	return IntListLazyList{&state}
}
func (l Int64ListLazyList) Cons(i LazyInt64List) Int64ListLazyList {
	xs := Int64ListLazyList{l.state}
	state := func() Int64ListState { return Int64ListState{&i, &xs} }

	return Int64ListLazyList{&state}
}
func (l ByteListLazyList) Cons(i LazyByteList) ByteListLazyList {
	xs := ByteListLazyList{l.state}
	state := func() ByteListState { return ByteListState{&i, &xs} }

	return ByteListLazyList{&state}
}
func (l RuneListLazyList) Cons(i LazyRuneList) RuneListLazyList {
	xs := RuneListLazyList{l.state}
	state := func() RuneListState { return RuneListState{&i, &xs} }

	return RuneListLazyList{&state}
}
func (l Float32ListLazyList) Cons(i LazyFloat32List) Float32ListLazyList {
	xs := Float32ListLazyList{l.state}
	state := func() Float32ListState { return Float32ListState{&i, &xs} }

	return Float32ListLazyList{&state}
}
func (l Float64ListLazyList) Cons(i LazyFloat64List) Float64ListLazyList {
	xs := Float64ListLazyList{l.state}
	state := func() Float64ListState { return Float64ListState{&i, &xs} }

	return Float64ListLazyList{&state}
}
func (l AnyListLazyList) Cons(i LazyAnyList) AnyListLazyList {
	xs := AnyListLazyList{l.state}
	state := func() AnyListState { return AnyListState{&i, &xs} }

	return AnyListLazyList{&state}
}
func (l Tuple2ListLazyList) Cons(i LazyTuple2List) Tuple2ListLazyList {
	xs := Tuple2ListLazyList{l.state}
	state := func() Tuple2ListState { return Tuple2ListState{&i, &xs} }

	return Tuple2ListLazyList{&state}
}
