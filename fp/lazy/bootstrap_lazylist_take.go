// bootstrap_lazylist_take.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

func (l BoolLazyList) Take(n int) BoolLazyList {
	if n <= 0 {
		return NilBoolLazyList
	}
	newState := func() BoolState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return BoolState{state.head, &t}
	}
	return BoolLazyList{&newState}
}
func (l StringLazyList) Take(n int) StringLazyList {
	if n <= 0 {
		return NilStringLazyList
	}
	newState := func() StringState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return StringState{state.head, &t}
	}
	return StringLazyList{&newState}
}
func (l IntLazyList) Take(n int) IntLazyList {
	if n <= 0 {
		return NilIntLazyList
	}
	newState := func() IntState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return IntState{state.head, &t}
	}
	return IntLazyList{&newState}
}
func (l Int64LazyList) Take(n int) Int64LazyList {
	if n <= 0 {
		return NilInt64LazyList
	}
	newState := func() Int64State {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Int64State{state.head, &t}
	}
	return Int64LazyList{&newState}
}
func (l ByteLazyList) Take(n int) ByteLazyList {
	if n <= 0 {
		return NilByteLazyList
	}
	newState := func() ByteState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return ByteState{state.head, &t}
	}
	return ByteLazyList{&newState}
}
func (l RuneLazyList) Take(n int) RuneLazyList {
	if n <= 0 {
		return NilRuneLazyList
	}
	newState := func() RuneState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return RuneState{state.head, &t}
	}
	return RuneLazyList{&newState}
}
func (l Float32LazyList) Take(n int) Float32LazyList {
	if n <= 0 {
		return NilFloat32LazyList
	}
	newState := func() Float32State {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float32State{state.head, &t}
	}
	return Float32LazyList{&newState}
}
func (l Float64LazyList) Take(n int) Float64LazyList {
	if n <= 0 {
		return NilFloat64LazyList
	}
	newState := func() Float64State {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float64State{state.head, &t}
	}
	return Float64LazyList{&newState}
}
func (l AnyLazyList) Take(n int) AnyLazyList {
	if n <= 0 {
		return NilAnyLazyList
	}
	newState := func() AnyState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return AnyState{state.head, &t}
	}
	return AnyLazyList{&newState}
}
func (l Tuple2LazyList) Take(n int) Tuple2LazyList {
	if n <= 0 {
		return NilTuple2LazyList
	}
	newState := func() Tuple2State {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Tuple2State{state.head, &t}
	}
	return Tuple2LazyList{&newState}
}
func (l BoolArrayLazyList) Take(n int) BoolArrayLazyList {
	if n <= 0 {
		return NilBoolArrayLazyList
	}
	newState := func() BoolArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return BoolArrayState{state.head, &t}
	}
	return BoolArrayLazyList{&newState}
}
func (l StringArrayLazyList) Take(n int) StringArrayLazyList {
	if n <= 0 {
		return NilStringArrayLazyList
	}
	newState := func() StringArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return StringArrayState{state.head, &t}
	}
	return StringArrayLazyList{&newState}
}
func (l IntArrayLazyList) Take(n int) IntArrayLazyList {
	if n <= 0 {
		return NilIntArrayLazyList
	}
	newState := func() IntArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return IntArrayState{state.head, &t}
	}
	return IntArrayLazyList{&newState}
}
func (l Int64ArrayLazyList) Take(n int) Int64ArrayLazyList {
	if n <= 0 {
		return NilInt64ArrayLazyList
	}
	newState := func() Int64ArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Int64ArrayState{state.head, &t}
	}
	return Int64ArrayLazyList{&newState}
}
func (l ByteArrayLazyList) Take(n int) ByteArrayLazyList {
	if n <= 0 {
		return NilByteArrayLazyList
	}
	newState := func() ByteArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return ByteArrayState{state.head, &t}
	}
	return ByteArrayLazyList{&newState}
}
func (l RuneArrayLazyList) Take(n int) RuneArrayLazyList {
	if n <= 0 {
		return NilRuneArrayLazyList
	}
	newState := func() RuneArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return RuneArrayState{state.head, &t}
	}
	return RuneArrayLazyList{&newState}
}
func (l Float32ArrayLazyList) Take(n int) Float32ArrayLazyList {
	if n <= 0 {
		return NilFloat32ArrayLazyList
	}
	newState := func() Float32ArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float32ArrayState{state.head, &t}
	}
	return Float32ArrayLazyList{&newState}
}
func (l Float64ArrayLazyList) Take(n int) Float64ArrayLazyList {
	if n <= 0 {
		return NilFloat64ArrayLazyList
	}
	newState := func() Float64ArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float64ArrayState{state.head, &t}
	}
	return Float64ArrayLazyList{&newState}
}
func (l AnyArrayLazyList) Take(n int) AnyArrayLazyList {
	if n <= 0 {
		return NilAnyArrayLazyList
	}
	newState := func() AnyArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return AnyArrayState{state.head, &t}
	}
	return AnyArrayLazyList{&newState}
}
func (l Tuple2ArrayLazyList) Take(n int) Tuple2ArrayLazyList {
	if n <= 0 {
		return NilTuple2ArrayLazyList
	}
	newState := func() Tuple2ArrayState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Tuple2ArrayState{state.head, &t}
	}
	return Tuple2ArrayLazyList{&newState}
}
func (l BoolOptionLazyList) Take(n int) BoolOptionLazyList {
	if n <= 0 {
		return NilBoolOptionLazyList
	}
	newState := func() BoolOptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return BoolOptionState{state.head, &t}
	}
	return BoolOptionLazyList{&newState}
}
func (l StringOptionLazyList) Take(n int) StringOptionLazyList {
	if n <= 0 {
		return NilStringOptionLazyList
	}
	newState := func() StringOptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return StringOptionState{state.head, &t}
	}
	return StringOptionLazyList{&newState}
}
func (l IntOptionLazyList) Take(n int) IntOptionLazyList {
	if n <= 0 {
		return NilIntOptionLazyList
	}
	newState := func() IntOptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return IntOptionState{state.head, &t}
	}
	return IntOptionLazyList{&newState}
}
func (l Int64OptionLazyList) Take(n int) Int64OptionLazyList {
	if n <= 0 {
		return NilInt64OptionLazyList
	}
	newState := func() Int64OptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Int64OptionState{state.head, &t}
	}
	return Int64OptionLazyList{&newState}
}
func (l ByteOptionLazyList) Take(n int) ByteOptionLazyList {
	if n <= 0 {
		return NilByteOptionLazyList
	}
	newState := func() ByteOptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return ByteOptionState{state.head, &t}
	}
	return ByteOptionLazyList{&newState}
}
func (l RuneOptionLazyList) Take(n int) RuneOptionLazyList {
	if n <= 0 {
		return NilRuneOptionLazyList
	}
	newState := func() RuneOptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return RuneOptionState{state.head, &t}
	}
	return RuneOptionLazyList{&newState}
}
func (l Float32OptionLazyList) Take(n int) Float32OptionLazyList {
	if n <= 0 {
		return NilFloat32OptionLazyList
	}
	newState := func() Float32OptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float32OptionState{state.head, &t}
	}
	return Float32OptionLazyList{&newState}
}
func (l Float64OptionLazyList) Take(n int) Float64OptionLazyList {
	if n <= 0 {
		return NilFloat64OptionLazyList
	}
	newState := func() Float64OptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float64OptionState{state.head, &t}
	}
	return Float64OptionLazyList{&newState}
}
func (l AnyOptionLazyList) Take(n int) AnyOptionLazyList {
	if n <= 0 {
		return NilAnyOptionLazyList
	}
	newState := func() AnyOptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return AnyOptionState{state.head, &t}
	}
	return AnyOptionLazyList{&newState}
}
func (l Tuple2OptionLazyList) Take(n int) Tuple2OptionLazyList {
	if n <= 0 {
		return NilTuple2OptionLazyList
	}
	newState := func() Tuple2OptionState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Tuple2OptionState{state.head, &t}
	}
	return Tuple2OptionLazyList{&newState}
}
func (l BoolListLazyList) Take(n int) BoolListLazyList {
	if n <= 0 {
		return NilBoolListLazyList
	}
	newState := func() BoolListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return BoolListState{state.head, &t}
	}
	return BoolListLazyList{&newState}
}
func (l StringListLazyList) Take(n int) StringListLazyList {
	if n <= 0 {
		return NilStringListLazyList
	}
	newState := func() StringListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return StringListState{state.head, &t}
	}
	return StringListLazyList{&newState}
}
func (l IntListLazyList) Take(n int) IntListLazyList {
	if n <= 0 {
		return NilIntListLazyList
	}
	newState := func() IntListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return IntListState{state.head, &t}
	}
	return IntListLazyList{&newState}
}
func (l Int64ListLazyList) Take(n int) Int64ListLazyList {
	if n <= 0 {
		return NilInt64ListLazyList
	}
	newState := func() Int64ListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Int64ListState{state.head, &t}
	}
	return Int64ListLazyList{&newState}
}
func (l ByteListLazyList) Take(n int) ByteListLazyList {
	if n <= 0 {
		return NilByteListLazyList
	}
	newState := func() ByteListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return ByteListState{state.head, &t}
	}
	return ByteListLazyList{&newState}
}
func (l RuneListLazyList) Take(n int) RuneListLazyList {
	if n <= 0 {
		return NilRuneListLazyList
	}
	newState := func() RuneListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return RuneListState{state.head, &t}
	}
	return RuneListLazyList{&newState}
}
func (l Float32ListLazyList) Take(n int) Float32ListLazyList {
	if n <= 0 {
		return NilFloat32ListLazyList
	}
	newState := func() Float32ListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float32ListState{state.head, &t}
	}
	return Float32ListLazyList{&newState}
}
func (l Float64ListLazyList) Take(n int) Float64ListLazyList {
	if n <= 0 {
		return NilFloat64ListLazyList
	}
	newState := func() Float64ListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Float64ListState{state.head, &t}
	}
	return Float64ListLazyList{&newState}
}
func (l AnyListLazyList) Take(n int) AnyListLazyList {
	if n <= 0 {
		return NilAnyListLazyList
	}
	newState := func() AnyListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return AnyListState{state.head, &t}
	}
	return AnyListLazyList{&newState}
}
func (l Tuple2ListLazyList) Take(n int) Tuple2ListLazyList {
	if n <= 0 {
		return NilTuple2ListLazyList
	}
	newState := func() Tuple2ListState {
		state := (*l.state)()
		t := state.tail.Take(n - 1)
		return Tuple2ListState{state.head, &t}
	}
	return Tuple2ListLazyList{&newState}
}
