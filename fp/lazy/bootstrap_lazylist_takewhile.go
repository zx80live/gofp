// bootstrap_lazylist_takewhile.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package lazy

import . "github.com/zx80live/gofp/fp"

func (l BoolLazyList) TakeWhile(p func(bool) bool) BoolLazyList {
	s := func() BoolState {
		if l.state == nil {
			return EmptyBoolState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyBoolState
		}

		t := st.tail.TakeWhile(p)
		return BoolState{&h, &t}
	}
	return BoolLazyList{&s}
}
func (l StringLazyList) TakeWhile(p func(string) bool) StringLazyList {
	s := func() StringState {
		if l.state == nil {
			return EmptyStringState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyStringState
		}

		t := st.tail.TakeWhile(p)
		return StringState{&h, &t}
	}
	return StringLazyList{&s}
}
func (l IntLazyList) TakeWhile(p func(int) bool) IntLazyList {
	s := func() IntState {
		if l.state == nil {
			return EmptyIntState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyIntState
		}

		t := st.tail.TakeWhile(p)
		return IntState{&h, &t}
	}
	return IntLazyList{&s}
}
func (l Int64LazyList) TakeWhile(p func(int64) bool) Int64LazyList {
	s := func() Int64State {
		if l.state == nil {
			return EmptyInt64State
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyInt64State
		}

		t := st.tail.TakeWhile(p)
		return Int64State{&h, &t}
	}
	return Int64LazyList{&s}
}
func (l ByteLazyList) TakeWhile(p func(byte) bool) ByteLazyList {
	s := func() ByteState {
		if l.state == nil {
			return EmptyByteState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyByteState
		}

		t := st.tail.TakeWhile(p)
		return ByteState{&h, &t}
	}
	return ByteLazyList{&s}
}
func (l RuneLazyList) TakeWhile(p func(rune) bool) RuneLazyList {
	s := func() RuneState {
		if l.state == nil {
			return EmptyRuneState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyRuneState
		}

		t := st.tail.TakeWhile(p)
		return RuneState{&h, &t}
	}
	return RuneLazyList{&s}
}
func (l Float32LazyList) TakeWhile(p func(float32) bool) Float32LazyList {
	s := func() Float32State {
		if l.state == nil {
			return EmptyFloat32State
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat32State
		}

		t := st.tail.TakeWhile(p)
		return Float32State{&h, &t}
	}
	return Float32LazyList{&s}
}
func (l Float64LazyList) TakeWhile(p func(float64) bool) Float64LazyList {
	s := func() Float64State {
		if l.state == nil {
			return EmptyFloat64State
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat64State
		}

		t := st.tail.TakeWhile(p)
		return Float64State{&h, &t}
	}
	return Float64LazyList{&s}
}
func (l AnyLazyList) TakeWhile(p func(Any) bool) AnyLazyList {
	s := func() AnyState {
		if l.state == nil {
			return EmptyAnyState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyAnyState
		}

		t := st.tail.TakeWhile(p)
		return AnyState{&h, &t}
	}
	return AnyLazyList{&s}
}
func (l Tuple2LazyList) TakeWhile(p func(Tuple2) bool) Tuple2LazyList {
	s := func() Tuple2State {
		if l.state == nil {
			return EmptyTuple2State
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyTuple2State
		}

		t := st.tail.TakeWhile(p)
		return Tuple2State{&h, &t}
	}
	return Tuple2LazyList{&s}
}
func (l BoolArrayLazyList) TakeWhile(p func([]bool) bool) BoolArrayLazyList {
	s := func() BoolArrayState {
		if l.state == nil {
			return EmptyBoolArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyBoolArrayState
		}

		t := st.tail.TakeWhile(p)
		return BoolArrayState{&h, &t}
	}
	return BoolArrayLazyList{&s}
}
func (l StringArrayLazyList) TakeWhile(p func([]string) bool) StringArrayLazyList {
	s := func() StringArrayState {
		if l.state == nil {
			return EmptyStringArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyStringArrayState
		}

		t := st.tail.TakeWhile(p)
		return StringArrayState{&h, &t}
	}
	return StringArrayLazyList{&s}
}
func (l IntArrayLazyList) TakeWhile(p func([]int) bool) IntArrayLazyList {
	s := func() IntArrayState {
		if l.state == nil {
			return EmptyIntArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyIntArrayState
		}

		t := st.tail.TakeWhile(p)
		return IntArrayState{&h, &t}
	}
	return IntArrayLazyList{&s}
}
func (l Int64ArrayLazyList) TakeWhile(p func([]int64) bool) Int64ArrayLazyList {
	s := func() Int64ArrayState {
		if l.state == nil {
			return EmptyInt64ArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyInt64ArrayState
		}

		t := st.tail.TakeWhile(p)
		return Int64ArrayState{&h, &t}
	}
	return Int64ArrayLazyList{&s}
}
func (l ByteArrayLazyList) TakeWhile(p func([]byte) bool) ByteArrayLazyList {
	s := func() ByteArrayState {
		if l.state == nil {
			return EmptyByteArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyByteArrayState
		}

		t := st.tail.TakeWhile(p)
		return ByteArrayState{&h, &t}
	}
	return ByteArrayLazyList{&s}
}
func (l RuneArrayLazyList) TakeWhile(p func([]rune) bool) RuneArrayLazyList {
	s := func() RuneArrayState {
		if l.state == nil {
			return EmptyRuneArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyRuneArrayState
		}

		t := st.tail.TakeWhile(p)
		return RuneArrayState{&h, &t}
	}
	return RuneArrayLazyList{&s}
}
func (l Float32ArrayLazyList) TakeWhile(p func([]float32) bool) Float32ArrayLazyList {
	s := func() Float32ArrayState {
		if l.state == nil {
			return EmptyFloat32ArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat32ArrayState
		}

		t := st.tail.TakeWhile(p)
		return Float32ArrayState{&h, &t}
	}
	return Float32ArrayLazyList{&s}
}
func (l Float64ArrayLazyList) TakeWhile(p func([]float64) bool) Float64ArrayLazyList {
	s := func() Float64ArrayState {
		if l.state == nil {
			return EmptyFloat64ArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat64ArrayState
		}

		t := st.tail.TakeWhile(p)
		return Float64ArrayState{&h, &t}
	}
	return Float64ArrayLazyList{&s}
}
func (l AnyArrayLazyList) TakeWhile(p func([]Any) bool) AnyArrayLazyList {
	s := func() AnyArrayState {
		if l.state == nil {
			return EmptyAnyArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyAnyArrayState
		}

		t := st.tail.TakeWhile(p)
		return AnyArrayState{&h, &t}
	}
	return AnyArrayLazyList{&s}
}
func (l Tuple2ArrayLazyList) TakeWhile(p func([]Tuple2) bool) Tuple2ArrayLazyList {
	s := func() Tuple2ArrayState {
		if l.state == nil {
			return EmptyTuple2ArrayState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyTuple2ArrayState
		}

		t := st.tail.TakeWhile(p)
		return Tuple2ArrayState{&h, &t}
	}
	return Tuple2ArrayLazyList{&s}
}
func (l BoolOptionLazyList) TakeWhile(p func(BoolOption) bool) BoolOptionLazyList {
	s := func() BoolOptionState {
		if l.state == nil {
			return EmptyBoolOptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyBoolOptionState
		}

		t := st.tail.TakeWhile(p)
		return BoolOptionState{&h, &t}
	}
	return BoolOptionLazyList{&s}
}
func (l StringOptionLazyList) TakeWhile(p func(StringOption) bool) StringOptionLazyList {
	s := func() StringOptionState {
		if l.state == nil {
			return EmptyStringOptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyStringOptionState
		}

		t := st.tail.TakeWhile(p)
		return StringOptionState{&h, &t}
	}
	return StringOptionLazyList{&s}
}
func (l IntOptionLazyList) TakeWhile(p func(IntOption) bool) IntOptionLazyList {
	s := func() IntOptionState {
		if l.state == nil {
			return EmptyIntOptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyIntOptionState
		}

		t := st.tail.TakeWhile(p)
		return IntOptionState{&h, &t}
	}
	return IntOptionLazyList{&s}
}
func (l Int64OptionLazyList) TakeWhile(p func(Int64Option) bool) Int64OptionLazyList {
	s := func() Int64OptionState {
		if l.state == nil {
			return EmptyInt64OptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyInt64OptionState
		}

		t := st.tail.TakeWhile(p)
		return Int64OptionState{&h, &t}
	}
	return Int64OptionLazyList{&s}
}
func (l ByteOptionLazyList) TakeWhile(p func(ByteOption) bool) ByteOptionLazyList {
	s := func() ByteOptionState {
		if l.state == nil {
			return EmptyByteOptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyByteOptionState
		}

		t := st.tail.TakeWhile(p)
		return ByteOptionState{&h, &t}
	}
	return ByteOptionLazyList{&s}
}
func (l RuneOptionLazyList) TakeWhile(p func(RuneOption) bool) RuneOptionLazyList {
	s := func() RuneOptionState {
		if l.state == nil {
			return EmptyRuneOptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyRuneOptionState
		}

		t := st.tail.TakeWhile(p)
		return RuneOptionState{&h, &t}
	}
	return RuneOptionLazyList{&s}
}
func (l Float32OptionLazyList) TakeWhile(p func(Float32Option) bool) Float32OptionLazyList {
	s := func() Float32OptionState {
		if l.state == nil {
			return EmptyFloat32OptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat32OptionState
		}

		t := st.tail.TakeWhile(p)
		return Float32OptionState{&h, &t}
	}
	return Float32OptionLazyList{&s}
}
func (l Float64OptionLazyList) TakeWhile(p func(Float64Option) bool) Float64OptionLazyList {
	s := func() Float64OptionState {
		if l.state == nil {
			return EmptyFloat64OptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat64OptionState
		}

		t := st.tail.TakeWhile(p)
		return Float64OptionState{&h, &t}
	}
	return Float64OptionLazyList{&s}
}
func (l AnyOptionLazyList) TakeWhile(p func(AnyOption) bool) AnyOptionLazyList {
	s := func() AnyOptionState {
		if l.state == nil {
			return EmptyAnyOptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyAnyOptionState
		}

		t := st.tail.TakeWhile(p)
		return AnyOptionState{&h, &t}
	}
	return AnyOptionLazyList{&s}
}
func (l Tuple2OptionLazyList) TakeWhile(p func(Tuple2Option) bool) Tuple2OptionLazyList {
	s := func() Tuple2OptionState {
		if l.state == nil {
			return EmptyTuple2OptionState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyTuple2OptionState
		}

		t := st.tail.TakeWhile(p)
		return Tuple2OptionState{&h, &t}
	}
	return Tuple2OptionLazyList{&s}
}
func (l BoolListLazyList) TakeWhile(p func(BoolList) bool) BoolListLazyList {
	s := func() BoolListState {
		if l.state == nil {
			return EmptyBoolListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyBoolListState
		}

		t := st.tail.TakeWhile(p)
		return BoolListState{&h, &t}
	}
	return BoolListLazyList{&s}
}
func (l StringListLazyList) TakeWhile(p func(StringList) bool) StringListLazyList {
	s := func() StringListState {
		if l.state == nil {
			return EmptyStringListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyStringListState
		}

		t := st.tail.TakeWhile(p)
		return StringListState{&h, &t}
	}
	return StringListLazyList{&s}
}
func (l IntListLazyList) TakeWhile(p func(IntList) bool) IntListLazyList {
	s := func() IntListState {
		if l.state == nil {
			return EmptyIntListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyIntListState
		}

		t := st.tail.TakeWhile(p)
		return IntListState{&h, &t}
	}
	return IntListLazyList{&s}
}
func (l Int64ListLazyList) TakeWhile(p func(Int64List) bool) Int64ListLazyList {
	s := func() Int64ListState {
		if l.state == nil {
			return EmptyInt64ListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyInt64ListState
		}

		t := st.tail.TakeWhile(p)
		return Int64ListState{&h, &t}
	}
	return Int64ListLazyList{&s}
}
func (l ByteListLazyList) TakeWhile(p func(ByteList) bool) ByteListLazyList {
	s := func() ByteListState {
		if l.state == nil {
			return EmptyByteListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyByteListState
		}

		t := st.tail.TakeWhile(p)
		return ByteListState{&h, &t}
	}
	return ByteListLazyList{&s}
}
func (l RuneListLazyList) TakeWhile(p func(RuneList) bool) RuneListLazyList {
	s := func() RuneListState {
		if l.state == nil {
			return EmptyRuneListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyRuneListState
		}

		t := st.tail.TakeWhile(p)
		return RuneListState{&h, &t}
	}
	return RuneListLazyList{&s}
}
func (l Float32ListLazyList) TakeWhile(p func(Float32List) bool) Float32ListLazyList {
	s := func() Float32ListState {
		if l.state == nil {
			return EmptyFloat32ListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat32ListState
		}

		t := st.tail.TakeWhile(p)
		return Float32ListState{&h, &t}
	}
	return Float32ListLazyList{&s}
}
func (l Float64ListLazyList) TakeWhile(p func(Float64List) bool) Float64ListLazyList {
	s := func() Float64ListState {
		if l.state == nil {
			return EmptyFloat64ListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyFloat64ListState
		}

		t := st.tail.TakeWhile(p)
		return Float64ListState{&h, &t}
	}
	return Float64ListLazyList{&s}
}
func (l AnyListLazyList) TakeWhile(p func(AnyList) bool) AnyListLazyList {
	s := func() AnyListState {
		if l.state == nil {
			return EmptyAnyListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyAnyListState
		}

		t := st.tail.TakeWhile(p)
		return AnyListState{&h, &t}
	}
	return AnyListLazyList{&s}
}
func (l Tuple2ListLazyList) TakeWhile(p func(Tuple2List) bool) Tuple2ListLazyList {
	s := func() Tuple2ListState {
		if l.state == nil {
			return EmptyTuple2ListState
		}

		st := (*l.state)()
		h := st.head.Eval()
		if !p(*h.cached) {
			return EmptyTuple2ListState
		}

		t := st.tail.TakeWhile(p)
		return Tuple2ListState{&h, &t}
	}
	return Tuple2ListLazyList{&s}
}
