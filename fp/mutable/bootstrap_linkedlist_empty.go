// bootstrap_linkedlist_empty.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func NilLinkedBool() *BoolLinkedList {
	n := BoolLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedString() *StringLinkedList {
	n := StringLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedInt() *IntLinkedList {
	n := IntLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedInt64() *Int64LinkedList {
	n := Int64LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedByte() *ByteLinkedList {
	n := ByteLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedRune() *RuneLinkedList {
	n := RuneLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat32() *Float32LinkedList {
	n := Float32LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat64() *Float64LinkedList {
	n := Float64LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedAny() *AnyLinkedList {
	n := AnyLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedTuple2() *Tuple2LinkedList {
	n := Tuple2LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedBoolArray() *BoolArrayLinkedList {
	n := BoolArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedStringArray() *StringArrayLinkedList {
	n := StringArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedIntArray() *IntArrayLinkedList {
	n := IntArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedInt64Array() *Int64ArrayLinkedList {
	n := Int64ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedByteArray() *ByteArrayLinkedList {
	n := ByteArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedRuneArray() *RuneArrayLinkedList {
	n := RuneArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat32Array() *Float32ArrayLinkedList {
	n := Float32ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat64Array() *Float64ArrayLinkedList {
	n := Float64ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedAnyArray() *AnyArrayLinkedList {
	n := AnyArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedTuple2Array() *Tuple2ArrayLinkedList {
	n := Tuple2ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedBoolOption() *BoolOptionLinkedList {
	n := BoolOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedStringOption() *StringOptionLinkedList {
	n := StringOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedIntOption() *IntOptionLinkedList {
	n := IntOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedInt64Option() *Int64OptionLinkedList {
	n := Int64OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedByteOption() *ByteOptionLinkedList {
	n := ByteOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedRuneOption() *RuneOptionLinkedList {
	n := RuneOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat32Option() *Float32OptionLinkedList {
	n := Float32OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat64Option() *Float64OptionLinkedList {
	n := Float64OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedAnyOption() *AnyOptionLinkedList {
	n := AnyOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedTuple2Option() *Tuple2OptionLinkedList {
	n := Tuple2OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedBoolList() *BoolListLinkedList {
	n := BoolListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedStringList() *StringListLinkedList {
	n := StringListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedIntList() *IntListLinkedList {
	n := IntListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedInt64List() *Int64ListLinkedList {
	n := Int64ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedByteList() *ByteListLinkedList {
	n := ByteListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedRuneList() *RuneListLinkedList {
	n := RuneListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat32List() *Float32ListLinkedList {
	n := Float32ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedFloat64List() *Float64ListLinkedList {
	n := Float64ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedAnyList() *AnyListLinkedList {
	n := AnyListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilLinkedTuple2List() *Tuple2ListLinkedList {
	n := Tuple2ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
