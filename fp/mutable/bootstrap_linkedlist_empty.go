// bootstrap_linkedlist_empty.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func NilBoolLinkedList() *BoolLinkedList {
	n := BoolLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilStringLinkedList() *StringLinkedList {
	n := StringLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilIntLinkedList() *IntLinkedList {
	n := IntLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilInt64LinkedList() *Int64LinkedList {
	n := Int64LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilByteLinkedList() *ByteLinkedList {
	n := ByteLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilRuneLinkedList() *RuneLinkedList {
	n := RuneLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat32LinkedList() *Float32LinkedList {
	n := Float32LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat64LinkedList() *Float64LinkedList {
	n := Float64LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilAnyLinkedList() *AnyLinkedList {
	n := AnyLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilTuple2LinkedList() *Tuple2LinkedList {
	n := Tuple2LinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilBoolArrayLinkedList() *BoolArrayLinkedList {
	n := BoolArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilStringArrayLinkedList() *StringArrayLinkedList {
	n := StringArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilIntArrayLinkedList() *IntArrayLinkedList {
	n := IntArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilInt64ArrayLinkedList() *Int64ArrayLinkedList {
	n := Int64ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilByteArrayLinkedList() *ByteArrayLinkedList {
	n := ByteArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilRuneArrayLinkedList() *RuneArrayLinkedList {
	n := RuneArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat32ArrayLinkedList() *Float32ArrayLinkedList {
	n := Float32ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat64ArrayLinkedList() *Float64ArrayLinkedList {
	n := Float64ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilAnyArrayLinkedList() *AnyArrayLinkedList {
	n := AnyArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilTuple2ArrayLinkedList() *Tuple2ArrayLinkedList {
	n := Tuple2ArrayLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilBoolOptionLinkedList() *BoolOptionLinkedList {
	n := BoolOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilStringOptionLinkedList() *StringOptionLinkedList {
	n := StringOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilIntOptionLinkedList() *IntOptionLinkedList {
	n := IntOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilInt64OptionLinkedList() *Int64OptionLinkedList {
	n := Int64OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilByteOptionLinkedList() *ByteOptionLinkedList {
	n := ByteOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilRuneOptionLinkedList() *RuneOptionLinkedList {
	n := RuneOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat32OptionLinkedList() *Float32OptionLinkedList {
	n := Float32OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat64OptionLinkedList() *Float64OptionLinkedList {
	n := Float64OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilAnyOptionLinkedList() *AnyOptionLinkedList {
	n := AnyOptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilTuple2OptionLinkedList() *Tuple2OptionLinkedList {
	n := Tuple2OptionLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilBoolListLinkedList() *BoolListLinkedList {
	n := BoolListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilStringListLinkedList() *StringListLinkedList {
	n := StringListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilIntListLinkedList() *IntListLinkedList {
	n := IntListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilInt64ListLinkedList() *Int64ListLinkedList {
	n := Int64ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilByteListLinkedList() *ByteListLinkedList {
	n := ByteListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilRuneListLinkedList() *RuneListLinkedList {
	n := RuneListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat32ListLinkedList() *Float32ListLinkedList {
	n := Float32ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilFloat64ListLinkedList() *Float64ListLinkedList {
	n := Float64ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilAnyListLinkedList() *AnyListLinkedList {
	n := AnyListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
func NilTuple2ListLinkedList() *Tuple2ListLinkedList {
	n := Tuple2ListLinkedList{nil, nil, nil, nil, nil}
	n.head = &n // TODO clarify: how does gc utilize cyclic reference, if NOT then use condition in Add function instead
	n.end = &n
	return &n
}
